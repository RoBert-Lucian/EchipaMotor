
proiect-motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  080094b0  080094b0  000194b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a0c  08009a0c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009a0c  08009a0c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a0c  08009a0c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a0c  08009a0c  00019a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a10  08009a10  00019a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001dc  08009bf0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08009bf0  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001007b  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217c  00000000  00000000  0003027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00032400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  000332d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012640  00000000  00000000  000340c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fd2  00000000  00000000  00046708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d3e0  00000000  00000000  000586da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5aba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004800  00000000  00000000  000c5b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009494 	.word	0x08009494

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08009494 	.word	0x08009494

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f999 	bl	8001774 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f8e9 	bl	8001624 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f98b 	bl	8001774 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f981 	bl	8001774 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f911 	bl	80016a8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f907 	bl	80016a8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fdiv>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0245      	lsls	r5, r0, #9
 80004b2:	b5c0      	push	{r6, r7, lr}
 80004b4:	0047      	lsls	r7, r0, #1
 80004b6:	1c0c      	adds	r4, r1, #0
 80004b8:	0a6d      	lsrs	r5, r5, #9
 80004ba:	0e3f      	lsrs	r7, r7, #24
 80004bc:	0fc6      	lsrs	r6, r0, #31
 80004be:	2f00      	cmp	r7, #0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fdiv+0x1c>
 80004c2:	e070      	b.n	80005a6 <__aeabi_fdiv+0xfe>
 80004c4:	2fff      	cmp	r7, #255	; 0xff
 80004c6:	d100      	bne.n	80004ca <__aeabi_fdiv+0x22>
 80004c8:	e075      	b.n	80005b6 <__aeabi_fdiv+0x10e>
 80004ca:	00eb      	lsls	r3, r5, #3
 80004cc:	2580      	movs	r5, #128	; 0x80
 80004ce:	04ed      	lsls	r5, r5, #19
 80004d0:	431d      	orrs	r5, r3
 80004d2:	2300      	movs	r3, #0
 80004d4:	4699      	mov	r9, r3
 80004d6:	469a      	mov	sl, r3
 80004d8:	3f7f      	subs	r7, #127	; 0x7f
 80004da:	0260      	lsls	r0, r4, #9
 80004dc:	0a43      	lsrs	r3, r0, #9
 80004de:	4698      	mov	r8, r3
 80004e0:	0063      	lsls	r3, r4, #1
 80004e2:	0e1b      	lsrs	r3, r3, #24
 80004e4:	0fe4      	lsrs	r4, r4, #31
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d04e      	beq.n	8000588 <__aeabi_fdiv+0xe0>
 80004ea:	2bff      	cmp	r3, #255	; 0xff
 80004ec:	d046      	beq.n	800057c <__aeabi_fdiv+0xd4>
 80004ee:	4642      	mov	r2, r8
 80004f0:	00d0      	lsls	r0, r2, #3
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	04d2      	lsls	r2, r2, #19
 80004f6:	4302      	orrs	r2, r0
 80004f8:	4690      	mov	r8, r2
 80004fa:	2200      	movs	r2, #0
 80004fc:	3b7f      	subs	r3, #127	; 0x7f
 80004fe:	0031      	movs	r1, r6
 8000500:	1aff      	subs	r7, r7, r3
 8000502:	464b      	mov	r3, r9
 8000504:	4061      	eors	r1, r4
 8000506:	b2c9      	uxtb	r1, r1
 8000508:	4313      	orrs	r3, r2
 800050a:	2b0f      	cmp	r3, #15
 800050c:	d900      	bls.n	8000510 <__aeabi_fdiv+0x68>
 800050e:	e0b5      	b.n	800067c <__aeabi_fdiv+0x1d4>
 8000510:	486e      	ldr	r0, [pc, #440]	; (80006cc <__aeabi_fdiv+0x224>)
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	58c3      	ldr	r3, [r0, r3]
 8000516:	469f      	mov	pc, r3
 8000518:	2300      	movs	r3, #0
 800051a:	4698      	mov	r8, r3
 800051c:	0026      	movs	r6, r4
 800051e:	4645      	mov	r5, r8
 8000520:	4692      	mov	sl, r2
 8000522:	4653      	mov	r3, sl
 8000524:	2b02      	cmp	r3, #2
 8000526:	d100      	bne.n	800052a <__aeabi_fdiv+0x82>
 8000528:	e089      	b.n	800063e <__aeabi_fdiv+0x196>
 800052a:	2b03      	cmp	r3, #3
 800052c:	d100      	bne.n	8000530 <__aeabi_fdiv+0x88>
 800052e:	e09e      	b.n	800066e <__aeabi_fdiv+0x1c6>
 8000530:	2b01      	cmp	r3, #1
 8000532:	d018      	beq.n	8000566 <__aeabi_fdiv+0xbe>
 8000534:	003b      	movs	r3, r7
 8000536:	337f      	adds	r3, #127	; 0x7f
 8000538:	2b00      	cmp	r3, #0
 800053a:	dd69      	ble.n	8000610 <__aeabi_fdiv+0x168>
 800053c:	076a      	lsls	r2, r5, #29
 800053e:	d004      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000540:	220f      	movs	r2, #15
 8000542:	402a      	ands	r2, r5
 8000544:	2a04      	cmp	r2, #4
 8000546:	d000      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000548:	3504      	adds	r5, #4
 800054a:	012a      	lsls	r2, r5, #4
 800054c:	d503      	bpl.n	8000556 <__aeabi_fdiv+0xae>
 800054e:	4b60      	ldr	r3, [pc, #384]	; (80006d0 <__aeabi_fdiv+0x228>)
 8000550:	401d      	ands	r5, r3
 8000552:	003b      	movs	r3, r7
 8000554:	3380      	adds	r3, #128	; 0x80
 8000556:	2bfe      	cmp	r3, #254	; 0xfe
 8000558:	dd00      	ble.n	800055c <__aeabi_fdiv+0xb4>
 800055a:	e070      	b.n	800063e <__aeabi_fdiv+0x196>
 800055c:	01ad      	lsls	r5, r5, #6
 800055e:	0a6d      	lsrs	r5, r5, #9
 8000560:	b2d8      	uxtb	r0, r3
 8000562:	e002      	b.n	800056a <__aeabi_fdiv+0xc2>
 8000564:	000e      	movs	r6, r1
 8000566:	2000      	movs	r0, #0
 8000568:	2500      	movs	r5, #0
 800056a:	05c0      	lsls	r0, r0, #23
 800056c:	4328      	orrs	r0, r5
 800056e:	07f6      	lsls	r6, r6, #31
 8000570:	4330      	orrs	r0, r6
 8000572:	bce0      	pop	{r5, r6, r7}
 8000574:	46ba      	mov	sl, r7
 8000576:	46b1      	mov	r9, r6
 8000578:	46a8      	mov	r8, r5
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057c:	4643      	mov	r3, r8
 800057e:	2b00      	cmp	r3, #0
 8000580:	d13f      	bne.n	8000602 <__aeabi_fdiv+0x15a>
 8000582:	2202      	movs	r2, #2
 8000584:	3fff      	subs	r7, #255	; 0xff
 8000586:	e003      	b.n	8000590 <__aeabi_fdiv+0xe8>
 8000588:	4643      	mov	r3, r8
 800058a:	2b00      	cmp	r3, #0
 800058c:	d12d      	bne.n	80005ea <__aeabi_fdiv+0x142>
 800058e:	2201      	movs	r2, #1
 8000590:	0031      	movs	r1, r6
 8000592:	464b      	mov	r3, r9
 8000594:	4061      	eors	r1, r4
 8000596:	b2c9      	uxtb	r1, r1
 8000598:	4313      	orrs	r3, r2
 800059a:	2b0f      	cmp	r3, #15
 800059c:	d834      	bhi.n	8000608 <__aeabi_fdiv+0x160>
 800059e:	484d      	ldr	r0, [pc, #308]	; (80006d4 <__aeabi_fdiv+0x22c>)
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	58c3      	ldr	r3, [r0, r3]
 80005a4:	469f      	mov	pc, r3
 80005a6:	2d00      	cmp	r5, #0
 80005a8:	d113      	bne.n	80005d2 <__aeabi_fdiv+0x12a>
 80005aa:	2304      	movs	r3, #4
 80005ac:	4699      	mov	r9, r3
 80005ae:	3b03      	subs	r3, #3
 80005b0:	2700      	movs	r7, #0
 80005b2:	469a      	mov	sl, r3
 80005b4:	e791      	b.n	80004da <__aeabi_fdiv+0x32>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d105      	bne.n	80005c6 <__aeabi_fdiv+0x11e>
 80005ba:	2308      	movs	r3, #8
 80005bc:	4699      	mov	r9, r3
 80005be:	3b06      	subs	r3, #6
 80005c0:	27ff      	movs	r7, #255	; 0xff
 80005c2:	469a      	mov	sl, r3
 80005c4:	e789      	b.n	80004da <__aeabi_fdiv+0x32>
 80005c6:	230c      	movs	r3, #12
 80005c8:	4699      	mov	r9, r3
 80005ca:	3b09      	subs	r3, #9
 80005cc:	27ff      	movs	r7, #255	; 0xff
 80005ce:	469a      	mov	sl, r3
 80005d0:	e783      	b.n	80004da <__aeabi_fdiv+0x32>
 80005d2:	0028      	movs	r0, r5
 80005d4:	f002 f8aa 	bl	800272c <__clzsi2>
 80005d8:	2776      	movs	r7, #118	; 0x76
 80005da:	1f43      	subs	r3, r0, #5
 80005dc:	409d      	lsls	r5, r3
 80005de:	2300      	movs	r3, #0
 80005e0:	427f      	negs	r7, r7
 80005e2:	4699      	mov	r9, r3
 80005e4:	469a      	mov	sl, r3
 80005e6:	1a3f      	subs	r7, r7, r0
 80005e8:	e777      	b.n	80004da <__aeabi_fdiv+0x32>
 80005ea:	4640      	mov	r0, r8
 80005ec:	f002 f89e 	bl	800272c <__clzsi2>
 80005f0:	4642      	mov	r2, r8
 80005f2:	1f43      	subs	r3, r0, #5
 80005f4:	409a      	lsls	r2, r3
 80005f6:	2376      	movs	r3, #118	; 0x76
 80005f8:	425b      	negs	r3, r3
 80005fa:	4690      	mov	r8, r2
 80005fc:	1a1b      	subs	r3, r3, r0
 80005fe:	2200      	movs	r2, #0
 8000600:	e77d      	b.n	80004fe <__aeabi_fdiv+0x56>
 8000602:	23ff      	movs	r3, #255	; 0xff
 8000604:	2203      	movs	r2, #3
 8000606:	e77a      	b.n	80004fe <__aeabi_fdiv+0x56>
 8000608:	000e      	movs	r6, r1
 800060a:	20ff      	movs	r0, #255	; 0xff
 800060c:	2500      	movs	r5, #0
 800060e:	e7ac      	b.n	800056a <__aeabi_fdiv+0xc2>
 8000610:	2001      	movs	r0, #1
 8000612:	1ac0      	subs	r0, r0, r3
 8000614:	281b      	cmp	r0, #27
 8000616:	dca6      	bgt.n	8000566 <__aeabi_fdiv+0xbe>
 8000618:	379e      	adds	r7, #158	; 0x9e
 800061a:	002a      	movs	r2, r5
 800061c:	40bd      	lsls	r5, r7
 800061e:	40c2      	lsrs	r2, r0
 8000620:	1e6b      	subs	r3, r5, #1
 8000622:	419d      	sbcs	r5, r3
 8000624:	4315      	orrs	r5, r2
 8000626:	076b      	lsls	r3, r5, #29
 8000628:	d004      	beq.n	8000634 <__aeabi_fdiv+0x18c>
 800062a:	230f      	movs	r3, #15
 800062c:	402b      	ands	r3, r5
 800062e:	2b04      	cmp	r3, #4
 8000630:	d000      	beq.n	8000634 <__aeabi_fdiv+0x18c>
 8000632:	3504      	adds	r5, #4
 8000634:	016b      	lsls	r3, r5, #5
 8000636:	d544      	bpl.n	80006c2 <__aeabi_fdiv+0x21a>
 8000638:	2001      	movs	r0, #1
 800063a:	2500      	movs	r5, #0
 800063c:	e795      	b.n	800056a <__aeabi_fdiv+0xc2>
 800063e:	20ff      	movs	r0, #255	; 0xff
 8000640:	2500      	movs	r5, #0
 8000642:	e792      	b.n	800056a <__aeabi_fdiv+0xc2>
 8000644:	2580      	movs	r5, #128	; 0x80
 8000646:	2600      	movs	r6, #0
 8000648:	20ff      	movs	r0, #255	; 0xff
 800064a:	03ed      	lsls	r5, r5, #15
 800064c:	e78d      	b.n	800056a <__aeabi_fdiv+0xc2>
 800064e:	2300      	movs	r3, #0
 8000650:	4698      	mov	r8, r3
 8000652:	2080      	movs	r0, #128	; 0x80
 8000654:	03c0      	lsls	r0, r0, #15
 8000656:	4205      	tst	r5, r0
 8000658:	d009      	beq.n	800066e <__aeabi_fdiv+0x1c6>
 800065a:	4643      	mov	r3, r8
 800065c:	4203      	tst	r3, r0
 800065e:	d106      	bne.n	800066e <__aeabi_fdiv+0x1c6>
 8000660:	4645      	mov	r5, r8
 8000662:	4305      	orrs	r5, r0
 8000664:	026d      	lsls	r5, r5, #9
 8000666:	0026      	movs	r6, r4
 8000668:	20ff      	movs	r0, #255	; 0xff
 800066a:	0a6d      	lsrs	r5, r5, #9
 800066c:	e77d      	b.n	800056a <__aeabi_fdiv+0xc2>
 800066e:	2080      	movs	r0, #128	; 0x80
 8000670:	03c0      	lsls	r0, r0, #15
 8000672:	4305      	orrs	r5, r0
 8000674:	026d      	lsls	r5, r5, #9
 8000676:	20ff      	movs	r0, #255	; 0xff
 8000678:	0a6d      	lsrs	r5, r5, #9
 800067a:	e776      	b.n	800056a <__aeabi_fdiv+0xc2>
 800067c:	4642      	mov	r2, r8
 800067e:	016b      	lsls	r3, r5, #5
 8000680:	0150      	lsls	r0, r2, #5
 8000682:	4283      	cmp	r3, r0
 8000684:	d219      	bcs.n	80006ba <__aeabi_fdiv+0x212>
 8000686:	221b      	movs	r2, #27
 8000688:	2500      	movs	r5, #0
 800068a:	3f01      	subs	r7, #1
 800068c:	2601      	movs	r6, #1
 800068e:	001c      	movs	r4, r3
 8000690:	006d      	lsls	r5, r5, #1
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	2c00      	cmp	r4, #0
 8000696:	db01      	blt.n	800069c <__aeabi_fdiv+0x1f4>
 8000698:	4298      	cmp	r0, r3
 800069a:	d801      	bhi.n	80006a0 <__aeabi_fdiv+0x1f8>
 800069c:	1a1b      	subs	r3, r3, r0
 800069e:	4335      	orrs	r5, r6
 80006a0:	3a01      	subs	r2, #1
 80006a2:	2a00      	cmp	r2, #0
 80006a4:	d1f3      	bne.n	800068e <__aeabi_fdiv+0x1e6>
 80006a6:	1e5a      	subs	r2, r3, #1
 80006a8:	4193      	sbcs	r3, r2
 80006aa:	431d      	orrs	r5, r3
 80006ac:	003b      	movs	r3, r7
 80006ae:	337f      	adds	r3, #127	; 0x7f
 80006b0:	000e      	movs	r6, r1
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	dd00      	ble.n	80006b8 <__aeabi_fdiv+0x210>
 80006b6:	e741      	b.n	800053c <__aeabi_fdiv+0x94>
 80006b8:	e7aa      	b.n	8000610 <__aeabi_fdiv+0x168>
 80006ba:	221a      	movs	r2, #26
 80006bc:	2501      	movs	r5, #1
 80006be:	1a1b      	subs	r3, r3, r0
 80006c0:	e7e4      	b.n	800068c <__aeabi_fdiv+0x1e4>
 80006c2:	01ad      	lsls	r5, r5, #6
 80006c4:	2000      	movs	r0, #0
 80006c6:	0a6d      	lsrs	r5, r5, #9
 80006c8:	e74f      	b.n	800056a <__aeabi_fdiv+0xc2>
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	080094bc 	.word	0x080094bc
 80006d0:	f7ffffff 	.word	0xf7ffffff
 80006d4:	080094fc 	.word	0x080094fc

080006d8 <__aeabi_fmul>:
 80006d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006da:	464f      	mov	r7, r9
 80006dc:	4646      	mov	r6, r8
 80006de:	46d6      	mov	lr, sl
 80006e0:	0244      	lsls	r4, r0, #9
 80006e2:	0045      	lsls	r5, r0, #1
 80006e4:	b5c0      	push	{r6, r7, lr}
 80006e6:	0a64      	lsrs	r4, r4, #9
 80006e8:	1c0f      	adds	r7, r1, #0
 80006ea:	0e2d      	lsrs	r5, r5, #24
 80006ec:	0fc6      	lsrs	r6, r0, #31
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d100      	bne.n	80006f4 <__aeabi_fmul+0x1c>
 80006f2:	e08d      	b.n	8000810 <__aeabi_fmul+0x138>
 80006f4:	2dff      	cmp	r5, #255	; 0xff
 80006f6:	d100      	bne.n	80006fa <__aeabi_fmul+0x22>
 80006f8:	e092      	b.n	8000820 <__aeabi_fmul+0x148>
 80006fa:	2300      	movs	r3, #0
 80006fc:	2080      	movs	r0, #128	; 0x80
 80006fe:	4699      	mov	r9, r3
 8000700:	469a      	mov	sl, r3
 8000702:	00e4      	lsls	r4, r4, #3
 8000704:	04c0      	lsls	r0, r0, #19
 8000706:	4304      	orrs	r4, r0
 8000708:	3d7f      	subs	r5, #127	; 0x7f
 800070a:	0278      	lsls	r0, r7, #9
 800070c:	0a43      	lsrs	r3, r0, #9
 800070e:	4698      	mov	r8, r3
 8000710:	007b      	lsls	r3, r7, #1
 8000712:	0e1b      	lsrs	r3, r3, #24
 8000714:	0fff      	lsrs	r7, r7, #31
 8000716:	2b00      	cmp	r3, #0
 8000718:	d100      	bne.n	800071c <__aeabi_fmul+0x44>
 800071a:	e070      	b.n	80007fe <__aeabi_fmul+0x126>
 800071c:	2bff      	cmp	r3, #255	; 0xff
 800071e:	d100      	bne.n	8000722 <__aeabi_fmul+0x4a>
 8000720:	e086      	b.n	8000830 <__aeabi_fmul+0x158>
 8000722:	4642      	mov	r2, r8
 8000724:	00d0      	lsls	r0, r2, #3
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	3b7f      	subs	r3, #127	; 0x7f
 800072a:	18ed      	adds	r5, r5, r3
 800072c:	2300      	movs	r3, #0
 800072e:	04d2      	lsls	r2, r2, #19
 8000730:	4302      	orrs	r2, r0
 8000732:	4690      	mov	r8, r2
 8000734:	469c      	mov	ip, r3
 8000736:	0031      	movs	r1, r6
 8000738:	464b      	mov	r3, r9
 800073a:	4079      	eors	r1, r7
 800073c:	1c68      	adds	r0, r5, #1
 800073e:	2b0f      	cmp	r3, #15
 8000740:	d81c      	bhi.n	800077c <__aeabi_fmul+0xa4>
 8000742:	4a76      	ldr	r2, [pc, #472]	; (800091c <__aeabi_fmul+0x244>)
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	58d3      	ldr	r3, [r2, r3]
 8000748:	469f      	mov	pc, r3
 800074a:	0039      	movs	r1, r7
 800074c:	4644      	mov	r4, r8
 800074e:	46e2      	mov	sl, ip
 8000750:	4653      	mov	r3, sl
 8000752:	2b02      	cmp	r3, #2
 8000754:	d00f      	beq.n	8000776 <__aeabi_fmul+0x9e>
 8000756:	2b03      	cmp	r3, #3
 8000758:	d100      	bne.n	800075c <__aeabi_fmul+0x84>
 800075a:	e0d7      	b.n	800090c <__aeabi_fmul+0x234>
 800075c:	2b01      	cmp	r3, #1
 800075e:	d137      	bne.n	80007d0 <__aeabi_fmul+0xf8>
 8000760:	2000      	movs	r0, #0
 8000762:	2400      	movs	r4, #0
 8000764:	05c0      	lsls	r0, r0, #23
 8000766:	4320      	orrs	r0, r4
 8000768:	07c9      	lsls	r1, r1, #31
 800076a:	4308      	orrs	r0, r1
 800076c:	bce0      	pop	{r5, r6, r7}
 800076e:	46ba      	mov	sl, r7
 8000770:	46b1      	mov	r9, r6
 8000772:	46a8      	mov	r8, r5
 8000774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000776:	20ff      	movs	r0, #255	; 0xff
 8000778:	2400      	movs	r4, #0
 800077a:	e7f3      	b.n	8000764 <__aeabi_fmul+0x8c>
 800077c:	0c26      	lsrs	r6, r4, #16
 800077e:	0424      	lsls	r4, r4, #16
 8000780:	0c22      	lsrs	r2, r4, #16
 8000782:	4644      	mov	r4, r8
 8000784:	0424      	lsls	r4, r4, #16
 8000786:	0c24      	lsrs	r4, r4, #16
 8000788:	4643      	mov	r3, r8
 800078a:	0027      	movs	r7, r4
 800078c:	0c1b      	lsrs	r3, r3, #16
 800078e:	4357      	muls	r7, r2
 8000790:	4374      	muls	r4, r6
 8000792:	435a      	muls	r2, r3
 8000794:	435e      	muls	r6, r3
 8000796:	1912      	adds	r2, r2, r4
 8000798:	0c3b      	lsrs	r3, r7, #16
 800079a:	189b      	adds	r3, r3, r2
 800079c:	429c      	cmp	r4, r3
 800079e:	d903      	bls.n	80007a8 <__aeabi_fmul+0xd0>
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	0252      	lsls	r2, r2, #9
 80007a4:	4694      	mov	ip, r2
 80007a6:	4466      	add	r6, ip
 80007a8:	043f      	lsls	r7, r7, #16
 80007aa:	041a      	lsls	r2, r3, #16
 80007ac:	0c3f      	lsrs	r7, r7, #16
 80007ae:	19d2      	adds	r2, r2, r7
 80007b0:	0194      	lsls	r4, r2, #6
 80007b2:	1e67      	subs	r7, r4, #1
 80007b4:	41bc      	sbcs	r4, r7
 80007b6:	0c1b      	lsrs	r3, r3, #16
 80007b8:	0e92      	lsrs	r2, r2, #26
 80007ba:	199b      	adds	r3, r3, r6
 80007bc:	4314      	orrs	r4, r2
 80007be:	019b      	lsls	r3, r3, #6
 80007c0:	431c      	orrs	r4, r3
 80007c2:	011b      	lsls	r3, r3, #4
 80007c4:	d400      	bmi.n	80007c8 <__aeabi_fmul+0xf0>
 80007c6:	e09b      	b.n	8000900 <__aeabi_fmul+0x228>
 80007c8:	2301      	movs	r3, #1
 80007ca:	0862      	lsrs	r2, r4, #1
 80007cc:	401c      	ands	r4, r3
 80007ce:	4314      	orrs	r4, r2
 80007d0:	0002      	movs	r2, r0
 80007d2:	327f      	adds	r2, #127	; 0x7f
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	dd64      	ble.n	80008a2 <__aeabi_fmul+0x1ca>
 80007d8:	0763      	lsls	r3, r4, #29
 80007da:	d004      	beq.n	80007e6 <__aeabi_fmul+0x10e>
 80007dc:	230f      	movs	r3, #15
 80007de:	4023      	ands	r3, r4
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	d000      	beq.n	80007e6 <__aeabi_fmul+0x10e>
 80007e4:	3404      	adds	r4, #4
 80007e6:	0123      	lsls	r3, r4, #4
 80007e8:	d503      	bpl.n	80007f2 <__aeabi_fmul+0x11a>
 80007ea:	0002      	movs	r2, r0
 80007ec:	4b4c      	ldr	r3, [pc, #304]	; (8000920 <__aeabi_fmul+0x248>)
 80007ee:	3280      	adds	r2, #128	; 0x80
 80007f0:	401c      	ands	r4, r3
 80007f2:	2afe      	cmp	r2, #254	; 0xfe
 80007f4:	dcbf      	bgt.n	8000776 <__aeabi_fmul+0x9e>
 80007f6:	01a4      	lsls	r4, r4, #6
 80007f8:	0a64      	lsrs	r4, r4, #9
 80007fa:	b2d0      	uxtb	r0, r2
 80007fc:	e7b2      	b.n	8000764 <__aeabi_fmul+0x8c>
 80007fe:	4643      	mov	r3, r8
 8000800:	2b00      	cmp	r3, #0
 8000802:	d13d      	bne.n	8000880 <__aeabi_fmul+0x1a8>
 8000804:	464a      	mov	r2, r9
 8000806:	3301      	adds	r3, #1
 8000808:	431a      	orrs	r2, r3
 800080a:	4691      	mov	r9, r2
 800080c:	469c      	mov	ip, r3
 800080e:	e792      	b.n	8000736 <__aeabi_fmul+0x5e>
 8000810:	2c00      	cmp	r4, #0
 8000812:	d129      	bne.n	8000868 <__aeabi_fmul+0x190>
 8000814:	2304      	movs	r3, #4
 8000816:	4699      	mov	r9, r3
 8000818:	3b03      	subs	r3, #3
 800081a:	2500      	movs	r5, #0
 800081c:	469a      	mov	sl, r3
 800081e:	e774      	b.n	800070a <__aeabi_fmul+0x32>
 8000820:	2c00      	cmp	r4, #0
 8000822:	d11b      	bne.n	800085c <__aeabi_fmul+0x184>
 8000824:	2308      	movs	r3, #8
 8000826:	4699      	mov	r9, r3
 8000828:	3b06      	subs	r3, #6
 800082a:	25ff      	movs	r5, #255	; 0xff
 800082c:	469a      	mov	sl, r3
 800082e:	e76c      	b.n	800070a <__aeabi_fmul+0x32>
 8000830:	4643      	mov	r3, r8
 8000832:	35ff      	adds	r5, #255	; 0xff
 8000834:	2b00      	cmp	r3, #0
 8000836:	d10b      	bne.n	8000850 <__aeabi_fmul+0x178>
 8000838:	2302      	movs	r3, #2
 800083a:	464a      	mov	r2, r9
 800083c:	431a      	orrs	r2, r3
 800083e:	4691      	mov	r9, r2
 8000840:	469c      	mov	ip, r3
 8000842:	e778      	b.n	8000736 <__aeabi_fmul+0x5e>
 8000844:	4653      	mov	r3, sl
 8000846:	0031      	movs	r1, r6
 8000848:	2b02      	cmp	r3, #2
 800084a:	d000      	beq.n	800084e <__aeabi_fmul+0x176>
 800084c:	e783      	b.n	8000756 <__aeabi_fmul+0x7e>
 800084e:	e792      	b.n	8000776 <__aeabi_fmul+0x9e>
 8000850:	2303      	movs	r3, #3
 8000852:	464a      	mov	r2, r9
 8000854:	431a      	orrs	r2, r3
 8000856:	4691      	mov	r9, r2
 8000858:	469c      	mov	ip, r3
 800085a:	e76c      	b.n	8000736 <__aeabi_fmul+0x5e>
 800085c:	230c      	movs	r3, #12
 800085e:	4699      	mov	r9, r3
 8000860:	3b09      	subs	r3, #9
 8000862:	25ff      	movs	r5, #255	; 0xff
 8000864:	469a      	mov	sl, r3
 8000866:	e750      	b.n	800070a <__aeabi_fmul+0x32>
 8000868:	0020      	movs	r0, r4
 800086a:	f001 ff5f 	bl	800272c <__clzsi2>
 800086e:	2576      	movs	r5, #118	; 0x76
 8000870:	1f43      	subs	r3, r0, #5
 8000872:	409c      	lsls	r4, r3
 8000874:	2300      	movs	r3, #0
 8000876:	426d      	negs	r5, r5
 8000878:	4699      	mov	r9, r3
 800087a:	469a      	mov	sl, r3
 800087c:	1a2d      	subs	r5, r5, r0
 800087e:	e744      	b.n	800070a <__aeabi_fmul+0x32>
 8000880:	4640      	mov	r0, r8
 8000882:	f001 ff53 	bl	800272c <__clzsi2>
 8000886:	4642      	mov	r2, r8
 8000888:	1f43      	subs	r3, r0, #5
 800088a:	409a      	lsls	r2, r3
 800088c:	2300      	movs	r3, #0
 800088e:	1a2d      	subs	r5, r5, r0
 8000890:	4690      	mov	r8, r2
 8000892:	469c      	mov	ip, r3
 8000894:	3d76      	subs	r5, #118	; 0x76
 8000896:	e74e      	b.n	8000736 <__aeabi_fmul+0x5e>
 8000898:	2480      	movs	r4, #128	; 0x80
 800089a:	2100      	movs	r1, #0
 800089c:	20ff      	movs	r0, #255	; 0xff
 800089e:	03e4      	lsls	r4, r4, #15
 80008a0:	e760      	b.n	8000764 <__aeabi_fmul+0x8c>
 80008a2:	2301      	movs	r3, #1
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	2b1b      	cmp	r3, #27
 80008a8:	dd00      	ble.n	80008ac <__aeabi_fmul+0x1d4>
 80008aa:	e759      	b.n	8000760 <__aeabi_fmul+0x88>
 80008ac:	0022      	movs	r2, r4
 80008ae:	309e      	adds	r0, #158	; 0x9e
 80008b0:	40da      	lsrs	r2, r3
 80008b2:	4084      	lsls	r4, r0
 80008b4:	0013      	movs	r3, r2
 80008b6:	1e62      	subs	r2, r4, #1
 80008b8:	4194      	sbcs	r4, r2
 80008ba:	431c      	orrs	r4, r3
 80008bc:	0763      	lsls	r3, r4, #29
 80008be:	d004      	beq.n	80008ca <__aeabi_fmul+0x1f2>
 80008c0:	230f      	movs	r3, #15
 80008c2:	4023      	ands	r3, r4
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d000      	beq.n	80008ca <__aeabi_fmul+0x1f2>
 80008c8:	3404      	adds	r4, #4
 80008ca:	0163      	lsls	r3, r4, #5
 80008cc:	d51a      	bpl.n	8000904 <__aeabi_fmul+0x22c>
 80008ce:	2001      	movs	r0, #1
 80008d0:	2400      	movs	r4, #0
 80008d2:	e747      	b.n	8000764 <__aeabi_fmul+0x8c>
 80008d4:	2080      	movs	r0, #128	; 0x80
 80008d6:	03c0      	lsls	r0, r0, #15
 80008d8:	4204      	tst	r4, r0
 80008da:	d009      	beq.n	80008f0 <__aeabi_fmul+0x218>
 80008dc:	4643      	mov	r3, r8
 80008de:	4203      	tst	r3, r0
 80008e0:	d106      	bne.n	80008f0 <__aeabi_fmul+0x218>
 80008e2:	4644      	mov	r4, r8
 80008e4:	4304      	orrs	r4, r0
 80008e6:	0264      	lsls	r4, r4, #9
 80008e8:	0039      	movs	r1, r7
 80008ea:	20ff      	movs	r0, #255	; 0xff
 80008ec:	0a64      	lsrs	r4, r4, #9
 80008ee:	e739      	b.n	8000764 <__aeabi_fmul+0x8c>
 80008f0:	2080      	movs	r0, #128	; 0x80
 80008f2:	03c0      	lsls	r0, r0, #15
 80008f4:	4304      	orrs	r4, r0
 80008f6:	0264      	lsls	r4, r4, #9
 80008f8:	0031      	movs	r1, r6
 80008fa:	20ff      	movs	r0, #255	; 0xff
 80008fc:	0a64      	lsrs	r4, r4, #9
 80008fe:	e731      	b.n	8000764 <__aeabi_fmul+0x8c>
 8000900:	0028      	movs	r0, r5
 8000902:	e765      	b.n	80007d0 <__aeabi_fmul+0xf8>
 8000904:	01a4      	lsls	r4, r4, #6
 8000906:	2000      	movs	r0, #0
 8000908:	0a64      	lsrs	r4, r4, #9
 800090a:	e72b      	b.n	8000764 <__aeabi_fmul+0x8c>
 800090c:	2080      	movs	r0, #128	; 0x80
 800090e:	03c0      	lsls	r0, r0, #15
 8000910:	4304      	orrs	r4, r0
 8000912:	0264      	lsls	r4, r4, #9
 8000914:	20ff      	movs	r0, #255	; 0xff
 8000916:	0a64      	lsrs	r4, r4, #9
 8000918:	e724      	b.n	8000764 <__aeabi_fmul+0x8c>
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	0800953c 	.word	0x0800953c
 8000920:	f7ffffff 	.word	0xf7ffffff

08000924 <__aeabi_i2f>:
 8000924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000926:	2800      	cmp	r0, #0
 8000928:	d013      	beq.n	8000952 <__aeabi_i2f+0x2e>
 800092a:	17c3      	asrs	r3, r0, #31
 800092c:	18c6      	adds	r6, r0, r3
 800092e:	405e      	eors	r6, r3
 8000930:	0fc4      	lsrs	r4, r0, #31
 8000932:	0030      	movs	r0, r6
 8000934:	f001 fefa 	bl	800272c <__clzsi2>
 8000938:	239e      	movs	r3, #158	; 0x9e
 800093a:	0005      	movs	r5, r0
 800093c:	1a1b      	subs	r3, r3, r0
 800093e:	2b96      	cmp	r3, #150	; 0x96
 8000940:	dc0f      	bgt.n	8000962 <__aeabi_i2f+0x3e>
 8000942:	2808      	cmp	r0, #8
 8000944:	dd01      	ble.n	800094a <__aeabi_i2f+0x26>
 8000946:	3d08      	subs	r5, #8
 8000948:	40ae      	lsls	r6, r5
 800094a:	0276      	lsls	r6, r6, #9
 800094c:	0a76      	lsrs	r6, r6, #9
 800094e:	b2d8      	uxtb	r0, r3
 8000950:	e002      	b.n	8000958 <__aeabi_i2f+0x34>
 8000952:	2400      	movs	r4, #0
 8000954:	2000      	movs	r0, #0
 8000956:	2600      	movs	r6, #0
 8000958:	05c0      	lsls	r0, r0, #23
 800095a:	4330      	orrs	r0, r6
 800095c:	07e4      	lsls	r4, r4, #31
 800095e:	4320      	orrs	r0, r4
 8000960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000962:	2b99      	cmp	r3, #153	; 0x99
 8000964:	dd0c      	ble.n	8000980 <__aeabi_i2f+0x5c>
 8000966:	2205      	movs	r2, #5
 8000968:	0031      	movs	r1, r6
 800096a:	1a12      	subs	r2, r2, r0
 800096c:	40d1      	lsrs	r1, r2
 800096e:	000a      	movs	r2, r1
 8000970:	0001      	movs	r1, r0
 8000972:	0030      	movs	r0, r6
 8000974:	311b      	adds	r1, #27
 8000976:	4088      	lsls	r0, r1
 8000978:	1e41      	subs	r1, r0, #1
 800097a:	4188      	sbcs	r0, r1
 800097c:	4302      	orrs	r2, r0
 800097e:	0016      	movs	r6, r2
 8000980:	2d05      	cmp	r5, #5
 8000982:	dc12      	bgt.n	80009aa <__aeabi_i2f+0x86>
 8000984:	0031      	movs	r1, r6
 8000986:	4f0d      	ldr	r7, [pc, #52]	; (80009bc <__aeabi_i2f+0x98>)
 8000988:	4039      	ands	r1, r7
 800098a:	0772      	lsls	r2, r6, #29
 800098c:	d009      	beq.n	80009a2 <__aeabi_i2f+0x7e>
 800098e:	200f      	movs	r0, #15
 8000990:	4030      	ands	r0, r6
 8000992:	2804      	cmp	r0, #4
 8000994:	d005      	beq.n	80009a2 <__aeabi_i2f+0x7e>
 8000996:	3104      	adds	r1, #4
 8000998:	014a      	lsls	r2, r1, #5
 800099a:	d502      	bpl.n	80009a2 <__aeabi_i2f+0x7e>
 800099c:	239f      	movs	r3, #159	; 0x9f
 800099e:	4039      	ands	r1, r7
 80009a0:	1b5b      	subs	r3, r3, r5
 80009a2:	0189      	lsls	r1, r1, #6
 80009a4:	0a4e      	lsrs	r6, r1, #9
 80009a6:	b2d8      	uxtb	r0, r3
 80009a8:	e7d6      	b.n	8000958 <__aeabi_i2f+0x34>
 80009aa:	1f6a      	subs	r2, r5, #5
 80009ac:	4096      	lsls	r6, r2
 80009ae:	0031      	movs	r1, r6
 80009b0:	4f02      	ldr	r7, [pc, #8]	; (80009bc <__aeabi_i2f+0x98>)
 80009b2:	4039      	ands	r1, r7
 80009b4:	0772      	lsls	r2, r6, #29
 80009b6:	d0f4      	beq.n	80009a2 <__aeabi_i2f+0x7e>
 80009b8:	e7e9      	b.n	800098e <__aeabi_i2f+0x6a>
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	fbffffff 	.word	0xfbffffff

080009c0 <__aeabi_dadd>:
 80009c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c2:	464f      	mov	r7, r9
 80009c4:	4646      	mov	r6, r8
 80009c6:	46d6      	mov	lr, sl
 80009c8:	000d      	movs	r5, r1
 80009ca:	0004      	movs	r4, r0
 80009cc:	b5c0      	push	{r6, r7, lr}
 80009ce:	001f      	movs	r7, r3
 80009d0:	0011      	movs	r1, r2
 80009d2:	0328      	lsls	r0, r5, #12
 80009d4:	0f62      	lsrs	r2, r4, #29
 80009d6:	0a40      	lsrs	r0, r0, #9
 80009d8:	4310      	orrs	r0, r2
 80009da:	007a      	lsls	r2, r7, #1
 80009dc:	0d52      	lsrs	r2, r2, #21
 80009de:	00e3      	lsls	r3, r4, #3
 80009e0:	033c      	lsls	r4, r7, #12
 80009e2:	4691      	mov	r9, r2
 80009e4:	0a64      	lsrs	r4, r4, #9
 80009e6:	0ffa      	lsrs	r2, r7, #31
 80009e8:	0f4f      	lsrs	r7, r1, #29
 80009ea:	006e      	lsls	r6, r5, #1
 80009ec:	4327      	orrs	r7, r4
 80009ee:	4692      	mov	sl, r2
 80009f0:	46b8      	mov	r8, r7
 80009f2:	0d76      	lsrs	r6, r6, #21
 80009f4:	0fed      	lsrs	r5, r5, #31
 80009f6:	00c9      	lsls	r1, r1, #3
 80009f8:	4295      	cmp	r5, r2
 80009fa:	d100      	bne.n	80009fe <__aeabi_dadd+0x3e>
 80009fc:	e099      	b.n	8000b32 <__aeabi_dadd+0x172>
 80009fe:	464c      	mov	r4, r9
 8000a00:	1b34      	subs	r4, r6, r4
 8000a02:	46a4      	mov	ip, r4
 8000a04:	2c00      	cmp	r4, #0
 8000a06:	dc00      	bgt.n	8000a0a <__aeabi_dadd+0x4a>
 8000a08:	e07c      	b.n	8000b04 <__aeabi_dadd+0x144>
 8000a0a:	464a      	mov	r2, r9
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_dadd+0x52>
 8000a10:	e0b8      	b.n	8000b84 <__aeabi_dadd+0x1c4>
 8000a12:	4ac5      	ldr	r2, [pc, #788]	; (8000d28 <__aeabi_dadd+0x368>)
 8000a14:	4296      	cmp	r6, r2
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x5a>
 8000a18:	e11c      	b.n	8000c54 <__aeabi_dadd+0x294>
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	003c      	movs	r4, r7
 8000a1e:	0412      	lsls	r2, r2, #16
 8000a20:	4314      	orrs	r4, r2
 8000a22:	46a0      	mov	r8, r4
 8000a24:	4662      	mov	r2, ip
 8000a26:	2a38      	cmp	r2, #56	; 0x38
 8000a28:	dd00      	ble.n	8000a2c <__aeabi_dadd+0x6c>
 8000a2a:	e161      	b.n	8000cf0 <__aeabi_dadd+0x330>
 8000a2c:	2a1f      	cmp	r2, #31
 8000a2e:	dd00      	ble.n	8000a32 <__aeabi_dadd+0x72>
 8000a30:	e1cc      	b.n	8000dcc <__aeabi_dadd+0x40c>
 8000a32:	4664      	mov	r4, ip
 8000a34:	2220      	movs	r2, #32
 8000a36:	1b12      	subs	r2, r2, r4
 8000a38:	4644      	mov	r4, r8
 8000a3a:	4094      	lsls	r4, r2
 8000a3c:	000f      	movs	r7, r1
 8000a3e:	46a1      	mov	r9, r4
 8000a40:	4664      	mov	r4, ip
 8000a42:	4091      	lsls	r1, r2
 8000a44:	40e7      	lsrs	r7, r4
 8000a46:	464c      	mov	r4, r9
 8000a48:	1e4a      	subs	r2, r1, #1
 8000a4a:	4191      	sbcs	r1, r2
 8000a4c:	433c      	orrs	r4, r7
 8000a4e:	4642      	mov	r2, r8
 8000a50:	4321      	orrs	r1, r4
 8000a52:	4664      	mov	r4, ip
 8000a54:	40e2      	lsrs	r2, r4
 8000a56:	1a80      	subs	r0, r0, r2
 8000a58:	1a5c      	subs	r4, r3, r1
 8000a5a:	42a3      	cmp	r3, r4
 8000a5c:	419b      	sbcs	r3, r3
 8000a5e:	425f      	negs	r7, r3
 8000a60:	1bc7      	subs	r7, r0, r7
 8000a62:	023b      	lsls	r3, r7, #8
 8000a64:	d400      	bmi.n	8000a68 <__aeabi_dadd+0xa8>
 8000a66:	e0d0      	b.n	8000c0a <__aeabi_dadd+0x24a>
 8000a68:	027f      	lsls	r7, r7, #9
 8000a6a:	0a7f      	lsrs	r7, r7, #9
 8000a6c:	2f00      	cmp	r7, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dadd+0xb2>
 8000a70:	e0ff      	b.n	8000c72 <__aeabi_dadd+0x2b2>
 8000a72:	0038      	movs	r0, r7
 8000a74:	f001 fe5a 	bl	800272c <__clzsi2>
 8000a78:	0001      	movs	r1, r0
 8000a7a:	3908      	subs	r1, #8
 8000a7c:	2320      	movs	r3, #32
 8000a7e:	0022      	movs	r2, r4
 8000a80:	1a5b      	subs	r3, r3, r1
 8000a82:	408f      	lsls	r7, r1
 8000a84:	40da      	lsrs	r2, r3
 8000a86:	408c      	lsls	r4, r1
 8000a88:	4317      	orrs	r7, r2
 8000a8a:	42b1      	cmp	r1, r6
 8000a8c:	da00      	bge.n	8000a90 <__aeabi_dadd+0xd0>
 8000a8e:	e0ff      	b.n	8000c90 <__aeabi_dadd+0x2d0>
 8000a90:	1b89      	subs	r1, r1, r6
 8000a92:	1c4b      	adds	r3, r1, #1
 8000a94:	2b1f      	cmp	r3, #31
 8000a96:	dd00      	ble.n	8000a9a <__aeabi_dadd+0xda>
 8000a98:	e0a8      	b.n	8000bec <__aeabi_dadd+0x22c>
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	0039      	movs	r1, r7
 8000a9e:	1ad2      	subs	r2, r2, r3
 8000aa0:	0020      	movs	r0, r4
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	4091      	lsls	r1, r2
 8000aa6:	40d8      	lsrs	r0, r3
 8000aa8:	1e62      	subs	r2, r4, #1
 8000aaa:	4194      	sbcs	r4, r2
 8000aac:	40df      	lsrs	r7, r3
 8000aae:	2600      	movs	r6, #0
 8000ab0:	4301      	orrs	r1, r0
 8000ab2:	430c      	orrs	r4, r1
 8000ab4:	0763      	lsls	r3, r4, #29
 8000ab6:	d009      	beq.n	8000acc <__aeabi_dadd+0x10c>
 8000ab8:	230f      	movs	r3, #15
 8000aba:	4023      	ands	r3, r4
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d005      	beq.n	8000acc <__aeabi_dadd+0x10c>
 8000ac0:	1d23      	adds	r3, r4, #4
 8000ac2:	42a3      	cmp	r3, r4
 8000ac4:	41a4      	sbcs	r4, r4
 8000ac6:	4264      	negs	r4, r4
 8000ac8:	193f      	adds	r7, r7, r4
 8000aca:	001c      	movs	r4, r3
 8000acc:	023b      	lsls	r3, r7, #8
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_dadd+0x112>
 8000ad0:	e09e      	b.n	8000c10 <__aeabi_dadd+0x250>
 8000ad2:	4b95      	ldr	r3, [pc, #596]	; (8000d28 <__aeabi_dadd+0x368>)
 8000ad4:	3601      	adds	r6, #1
 8000ad6:	429e      	cmp	r6, r3
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0x11c>
 8000ada:	e0b7      	b.n	8000c4c <__aeabi_dadd+0x28c>
 8000adc:	4a93      	ldr	r2, [pc, #588]	; (8000d2c <__aeabi_dadd+0x36c>)
 8000ade:	08e4      	lsrs	r4, r4, #3
 8000ae0:	4017      	ands	r7, r2
 8000ae2:	077b      	lsls	r3, r7, #29
 8000ae4:	0571      	lsls	r1, r6, #21
 8000ae6:	027f      	lsls	r7, r7, #9
 8000ae8:	4323      	orrs	r3, r4
 8000aea:	0b3f      	lsrs	r7, r7, #12
 8000aec:	0d4a      	lsrs	r2, r1, #21
 8000aee:	0512      	lsls	r2, r2, #20
 8000af0:	433a      	orrs	r2, r7
 8000af2:	07ed      	lsls	r5, r5, #31
 8000af4:	432a      	orrs	r2, r5
 8000af6:	0018      	movs	r0, r3
 8000af8:	0011      	movs	r1, r2
 8000afa:	bce0      	pop	{r5, r6, r7}
 8000afc:	46ba      	mov	sl, r7
 8000afe:	46b1      	mov	r9, r6
 8000b00:	46a8      	mov	r8, r5
 8000b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b04:	2c00      	cmp	r4, #0
 8000b06:	d04b      	beq.n	8000ba0 <__aeabi_dadd+0x1e0>
 8000b08:	464c      	mov	r4, r9
 8000b0a:	1ba4      	subs	r4, r4, r6
 8000b0c:	46a4      	mov	ip, r4
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d000      	beq.n	8000b14 <__aeabi_dadd+0x154>
 8000b12:	e123      	b.n	8000d5c <__aeabi_dadd+0x39c>
 8000b14:	0004      	movs	r4, r0
 8000b16:	431c      	orrs	r4, r3
 8000b18:	d100      	bne.n	8000b1c <__aeabi_dadd+0x15c>
 8000b1a:	e1af      	b.n	8000e7c <__aeabi_dadd+0x4bc>
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	1e54      	subs	r4, r2, #1
 8000b20:	2a01      	cmp	r2, #1
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x166>
 8000b24:	e215      	b.n	8000f52 <__aeabi_dadd+0x592>
 8000b26:	4d80      	ldr	r5, [pc, #512]	; (8000d28 <__aeabi_dadd+0x368>)
 8000b28:	45ac      	cmp	ip, r5
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x16e>
 8000b2c:	e1c8      	b.n	8000ec0 <__aeabi_dadd+0x500>
 8000b2e:	46a4      	mov	ip, r4
 8000b30:	e11b      	b.n	8000d6a <__aeabi_dadd+0x3aa>
 8000b32:	464a      	mov	r2, r9
 8000b34:	1ab2      	subs	r2, r6, r2
 8000b36:	4694      	mov	ip, r2
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	dc00      	bgt.n	8000b3e <__aeabi_dadd+0x17e>
 8000b3c:	e0ac      	b.n	8000c98 <__aeabi_dadd+0x2d8>
 8000b3e:	464a      	mov	r2, r9
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	d043      	beq.n	8000bcc <__aeabi_dadd+0x20c>
 8000b44:	4a78      	ldr	r2, [pc, #480]	; (8000d28 <__aeabi_dadd+0x368>)
 8000b46:	4296      	cmp	r6, r2
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x18c>
 8000b4a:	e1af      	b.n	8000eac <__aeabi_dadd+0x4ec>
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	003c      	movs	r4, r7
 8000b50:	0412      	lsls	r2, r2, #16
 8000b52:	4314      	orrs	r4, r2
 8000b54:	46a0      	mov	r8, r4
 8000b56:	4662      	mov	r2, ip
 8000b58:	2a38      	cmp	r2, #56	; 0x38
 8000b5a:	dc67      	bgt.n	8000c2c <__aeabi_dadd+0x26c>
 8000b5c:	2a1f      	cmp	r2, #31
 8000b5e:	dc00      	bgt.n	8000b62 <__aeabi_dadd+0x1a2>
 8000b60:	e15f      	b.n	8000e22 <__aeabi_dadd+0x462>
 8000b62:	4647      	mov	r7, r8
 8000b64:	3a20      	subs	r2, #32
 8000b66:	40d7      	lsrs	r7, r2
 8000b68:	4662      	mov	r2, ip
 8000b6a:	2a20      	cmp	r2, #32
 8000b6c:	d005      	beq.n	8000b7a <__aeabi_dadd+0x1ba>
 8000b6e:	4664      	mov	r4, ip
 8000b70:	2240      	movs	r2, #64	; 0x40
 8000b72:	1b12      	subs	r2, r2, r4
 8000b74:	4644      	mov	r4, r8
 8000b76:	4094      	lsls	r4, r2
 8000b78:	4321      	orrs	r1, r4
 8000b7a:	1e4a      	subs	r2, r1, #1
 8000b7c:	4191      	sbcs	r1, r2
 8000b7e:	000c      	movs	r4, r1
 8000b80:	433c      	orrs	r4, r7
 8000b82:	e057      	b.n	8000c34 <__aeabi_dadd+0x274>
 8000b84:	003a      	movs	r2, r7
 8000b86:	430a      	orrs	r2, r1
 8000b88:	d100      	bne.n	8000b8c <__aeabi_dadd+0x1cc>
 8000b8a:	e105      	b.n	8000d98 <__aeabi_dadd+0x3d8>
 8000b8c:	0022      	movs	r2, r4
 8000b8e:	3a01      	subs	r2, #1
 8000b90:	2c01      	cmp	r4, #1
 8000b92:	d100      	bne.n	8000b96 <__aeabi_dadd+0x1d6>
 8000b94:	e182      	b.n	8000e9c <__aeabi_dadd+0x4dc>
 8000b96:	4c64      	ldr	r4, [pc, #400]	; (8000d28 <__aeabi_dadd+0x368>)
 8000b98:	45a4      	cmp	ip, r4
 8000b9a:	d05b      	beq.n	8000c54 <__aeabi_dadd+0x294>
 8000b9c:	4694      	mov	ip, r2
 8000b9e:	e741      	b.n	8000a24 <__aeabi_dadd+0x64>
 8000ba0:	4c63      	ldr	r4, [pc, #396]	; (8000d30 <__aeabi_dadd+0x370>)
 8000ba2:	1c77      	adds	r7, r6, #1
 8000ba4:	4227      	tst	r7, r4
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x1ea>
 8000ba8:	e0c4      	b.n	8000d34 <__aeabi_dadd+0x374>
 8000baa:	0004      	movs	r4, r0
 8000bac:	431c      	orrs	r4, r3
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_dadd+0x1f4>
 8000bb2:	e169      	b.n	8000e88 <__aeabi_dadd+0x4c8>
 8000bb4:	2c00      	cmp	r4, #0
 8000bb6:	d100      	bne.n	8000bba <__aeabi_dadd+0x1fa>
 8000bb8:	e1bf      	b.n	8000f3a <__aeabi_dadd+0x57a>
 8000bba:	4644      	mov	r4, r8
 8000bbc:	430c      	orrs	r4, r1
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_dadd+0x202>
 8000bc0:	e1d0      	b.n	8000f64 <__aeabi_dadd+0x5a4>
 8000bc2:	0742      	lsls	r2, r0, #29
 8000bc4:	08db      	lsrs	r3, r3, #3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	08c0      	lsrs	r0, r0, #3
 8000bca:	e029      	b.n	8000c20 <__aeabi_dadd+0x260>
 8000bcc:	003a      	movs	r2, r7
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dadd+0x214>
 8000bd2:	e170      	b.n	8000eb6 <__aeabi_dadd+0x4f6>
 8000bd4:	4662      	mov	r2, ip
 8000bd6:	4664      	mov	r4, ip
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	2c01      	cmp	r4, #1
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x220>
 8000bde:	e0e0      	b.n	8000da2 <__aeabi_dadd+0x3e2>
 8000be0:	4c51      	ldr	r4, [pc, #324]	; (8000d28 <__aeabi_dadd+0x368>)
 8000be2:	45a4      	cmp	ip, r4
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dadd+0x228>
 8000be6:	e161      	b.n	8000eac <__aeabi_dadd+0x4ec>
 8000be8:	4694      	mov	ip, r2
 8000bea:	e7b4      	b.n	8000b56 <__aeabi_dadd+0x196>
 8000bec:	003a      	movs	r2, r7
 8000bee:	391f      	subs	r1, #31
 8000bf0:	40ca      	lsrs	r2, r1
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	2b20      	cmp	r3, #32
 8000bf6:	d003      	beq.n	8000c00 <__aeabi_dadd+0x240>
 8000bf8:	2240      	movs	r2, #64	; 0x40
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	433c      	orrs	r4, r7
 8000c00:	1e63      	subs	r3, r4, #1
 8000c02:	419c      	sbcs	r4, r3
 8000c04:	2700      	movs	r7, #0
 8000c06:	2600      	movs	r6, #0
 8000c08:	430c      	orrs	r4, r1
 8000c0a:	0763      	lsls	r3, r4, #29
 8000c0c:	d000      	beq.n	8000c10 <__aeabi_dadd+0x250>
 8000c0e:	e753      	b.n	8000ab8 <__aeabi_dadd+0xf8>
 8000c10:	46b4      	mov	ip, r6
 8000c12:	08e4      	lsrs	r4, r4, #3
 8000c14:	077b      	lsls	r3, r7, #29
 8000c16:	4323      	orrs	r3, r4
 8000c18:	08f8      	lsrs	r0, r7, #3
 8000c1a:	4a43      	ldr	r2, [pc, #268]	; (8000d28 <__aeabi_dadd+0x368>)
 8000c1c:	4594      	cmp	ip, r2
 8000c1e:	d01d      	beq.n	8000c5c <__aeabi_dadd+0x29c>
 8000c20:	4662      	mov	r2, ip
 8000c22:	0307      	lsls	r7, r0, #12
 8000c24:	0552      	lsls	r2, r2, #21
 8000c26:	0b3f      	lsrs	r7, r7, #12
 8000c28:	0d52      	lsrs	r2, r2, #21
 8000c2a:	e760      	b.n	8000aee <__aeabi_dadd+0x12e>
 8000c2c:	4644      	mov	r4, r8
 8000c2e:	430c      	orrs	r4, r1
 8000c30:	1e62      	subs	r2, r4, #1
 8000c32:	4194      	sbcs	r4, r2
 8000c34:	18e4      	adds	r4, r4, r3
 8000c36:	429c      	cmp	r4, r3
 8000c38:	419b      	sbcs	r3, r3
 8000c3a:	425f      	negs	r7, r3
 8000c3c:	183f      	adds	r7, r7, r0
 8000c3e:	023b      	lsls	r3, r7, #8
 8000c40:	d5e3      	bpl.n	8000c0a <__aeabi_dadd+0x24a>
 8000c42:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <__aeabi_dadd+0x368>)
 8000c44:	3601      	adds	r6, #1
 8000c46:	429e      	cmp	r6, r3
 8000c48:	d000      	beq.n	8000c4c <__aeabi_dadd+0x28c>
 8000c4a:	e0b5      	b.n	8000db8 <__aeabi_dadd+0x3f8>
 8000c4c:	0032      	movs	r2, r6
 8000c4e:	2700      	movs	r7, #0
 8000c50:	2300      	movs	r3, #0
 8000c52:	e74c      	b.n	8000aee <__aeabi_dadd+0x12e>
 8000c54:	0742      	lsls	r2, r0, #29
 8000c56:	08db      	lsrs	r3, r3, #3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	08c0      	lsrs	r0, r0, #3
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	4302      	orrs	r2, r0
 8000c60:	d100      	bne.n	8000c64 <__aeabi_dadd+0x2a4>
 8000c62:	e1e1      	b.n	8001028 <__aeabi_dadd+0x668>
 8000c64:	2780      	movs	r7, #128	; 0x80
 8000c66:	033f      	lsls	r7, r7, #12
 8000c68:	4307      	orrs	r7, r0
 8000c6a:	033f      	lsls	r7, r7, #12
 8000c6c:	4a2e      	ldr	r2, [pc, #184]	; (8000d28 <__aeabi_dadd+0x368>)
 8000c6e:	0b3f      	lsrs	r7, r7, #12
 8000c70:	e73d      	b.n	8000aee <__aeabi_dadd+0x12e>
 8000c72:	0020      	movs	r0, r4
 8000c74:	f001 fd5a 	bl	800272c <__clzsi2>
 8000c78:	0001      	movs	r1, r0
 8000c7a:	3118      	adds	r1, #24
 8000c7c:	291f      	cmp	r1, #31
 8000c7e:	dc00      	bgt.n	8000c82 <__aeabi_dadd+0x2c2>
 8000c80:	e6fc      	b.n	8000a7c <__aeabi_dadd+0xbc>
 8000c82:	3808      	subs	r0, #8
 8000c84:	4084      	lsls	r4, r0
 8000c86:	0027      	movs	r7, r4
 8000c88:	2400      	movs	r4, #0
 8000c8a:	42b1      	cmp	r1, r6
 8000c8c:	db00      	blt.n	8000c90 <__aeabi_dadd+0x2d0>
 8000c8e:	e6ff      	b.n	8000a90 <__aeabi_dadd+0xd0>
 8000c90:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <__aeabi_dadd+0x36c>)
 8000c92:	1a76      	subs	r6, r6, r1
 8000c94:	4017      	ands	r7, r2
 8000c96:	e70d      	b.n	8000ab4 <__aeabi_dadd+0xf4>
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	d02f      	beq.n	8000cfc <__aeabi_dadd+0x33c>
 8000c9c:	464a      	mov	r2, r9
 8000c9e:	1b92      	subs	r2, r2, r6
 8000ca0:	4694      	mov	ip, r2
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d100      	bne.n	8000ca8 <__aeabi_dadd+0x2e8>
 8000ca6:	e0ad      	b.n	8000e04 <__aeabi_dadd+0x444>
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <__aeabi_dadd+0x368>)
 8000caa:	4591      	cmp	r9, r2
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dadd+0x2f0>
 8000cae:	e10f      	b.n	8000ed0 <__aeabi_dadd+0x510>
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0412      	lsls	r2, r2, #16
 8000cb4:	4310      	orrs	r0, r2
 8000cb6:	4662      	mov	r2, ip
 8000cb8:	2a38      	cmp	r2, #56	; 0x38
 8000cba:	dd00      	ble.n	8000cbe <__aeabi_dadd+0x2fe>
 8000cbc:	e10f      	b.n	8000ede <__aeabi_dadd+0x51e>
 8000cbe:	2a1f      	cmp	r2, #31
 8000cc0:	dd00      	ble.n	8000cc4 <__aeabi_dadd+0x304>
 8000cc2:	e180      	b.n	8000fc6 <__aeabi_dadd+0x606>
 8000cc4:	4664      	mov	r4, ip
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	001e      	movs	r6, r3
 8000cca:	1b12      	subs	r2, r2, r4
 8000ccc:	4667      	mov	r7, ip
 8000cce:	0004      	movs	r4, r0
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	4094      	lsls	r4, r2
 8000cd4:	40fe      	lsrs	r6, r7
 8000cd6:	1e5a      	subs	r2, r3, #1
 8000cd8:	4193      	sbcs	r3, r2
 8000cda:	40f8      	lsrs	r0, r7
 8000cdc:	4334      	orrs	r4, r6
 8000cde:	431c      	orrs	r4, r3
 8000ce0:	4480      	add	r8, r0
 8000ce2:	1864      	adds	r4, r4, r1
 8000ce4:	428c      	cmp	r4, r1
 8000ce6:	41bf      	sbcs	r7, r7
 8000ce8:	427f      	negs	r7, r7
 8000cea:	464e      	mov	r6, r9
 8000cec:	4447      	add	r7, r8
 8000cee:	e7a6      	b.n	8000c3e <__aeabi_dadd+0x27e>
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	0011      	movs	r1, r2
 8000cf6:	1e4a      	subs	r2, r1, #1
 8000cf8:	4191      	sbcs	r1, r2
 8000cfa:	e6ad      	b.n	8000a58 <__aeabi_dadd+0x98>
 8000cfc:	4c0c      	ldr	r4, [pc, #48]	; (8000d30 <__aeabi_dadd+0x370>)
 8000cfe:	1c72      	adds	r2, r6, #1
 8000d00:	4222      	tst	r2, r4
 8000d02:	d000      	beq.n	8000d06 <__aeabi_dadd+0x346>
 8000d04:	e0a1      	b.n	8000e4a <__aeabi_dadd+0x48a>
 8000d06:	0002      	movs	r2, r0
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_dadd+0x350>
 8000d0e:	e0fa      	b.n	8000f06 <__aeabi_dadd+0x546>
 8000d10:	2a00      	cmp	r2, #0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x356>
 8000d14:	e145      	b.n	8000fa2 <__aeabi_dadd+0x5e2>
 8000d16:	003a      	movs	r2, r7
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dadd+0x35e>
 8000d1c:	e146      	b.n	8000fac <__aeabi_dadd+0x5ec>
 8000d1e:	0742      	lsls	r2, r0, #29
 8000d20:	08db      	lsrs	r3, r3, #3
 8000d22:	4313      	orrs	r3, r2
 8000d24:	08c0      	lsrs	r0, r0, #3
 8000d26:	e77b      	b.n	8000c20 <__aeabi_dadd+0x260>
 8000d28:	000007ff 	.word	0x000007ff
 8000d2c:	ff7fffff 	.word	0xff7fffff
 8000d30:	000007fe 	.word	0x000007fe
 8000d34:	4647      	mov	r7, r8
 8000d36:	1a5c      	subs	r4, r3, r1
 8000d38:	1bc2      	subs	r2, r0, r7
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	41bf      	sbcs	r7, r7
 8000d3e:	427f      	negs	r7, r7
 8000d40:	46b9      	mov	r9, r7
 8000d42:	0017      	movs	r7, r2
 8000d44:	464a      	mov	r2, r9
 8000d46:	1abf      	subs	r7, r7, r2
 8000d48:	023a      	lsls	r2, r7, #8
 8000d4a:	d500      	bpl.n	8000d4e <__aeabi_dadd+0x38e>
 8000d4c:	e08d      	b.n	8000e6a <__aeabi_dadd+0x4aa>
 8000d4e:	0023      	movs	r3, r4
 8000d50:	433b      	orrs	r3, r7
 8000d52:	d000      	beq.n	8000d56 <__aeabi_dadd+0x396>
 8000d54:	e68a      	b.n	8000a6c <__aeabi_dadd+0xac>
 8000d56:	2000      	movs	r0, #0
 8000d58:	2500      	movs	r5, #0
 8000d5a:	e761      	b.n	8000c20 <__aeabi_dadd+0x260>
 8000d5c:	4cb4      	ldr	r4, [pc, #720]	; (8001030 <__aeabi_dadd+0x670>)
 8000d5e:	45a1      	cmp	r9, r4
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dadd+0x3a4>
 8000d62:	e0ad      	b.n	8000ec0 <__aeabi_dadd+0x500>
 8000d64:	2480      	movs	r4, #128	; 0x80
 8000d66:	0424      	lsls	r4, r4, #16
 8000d68:	4320      	orrs	r0, r4
 8000d6a:	4664      	mov	r4, ip
 8000d6c:	2c38      	cmp	r4, #56	; 0x38
 8000d6e:	dc3d      	bgt.n	8000dec <__aeabi_dadd+0x42c>
 8000d70:	4662      	mov	r2, ip
 8000d72:	2c1f      	cmp	r4, #31
 8000d74:	dd00      	ble.n	8000d78 <__aeabi_dadd+0x3b8>
 8000d76:	e0b7      	b.n	8000ee8 <__aeabi_dadd+0x528>
 8000d78:	2520      	movs	r5, #32
 8000d7a:	001e      	movs	r6, r3
 8000d7c:	1b2d      	subs	r5, r5, r4
 8000d7e:	0004      	movs	r4, r0
 8000d80:	40ab      	lsls	r3, r5
 8000d82:	40ac      	lsls	r4, r5
 8000d84:	40d6      	lsrs	r6, r2
 8000d86:	40d0      	lsrs	r0, r2
 8000d88:	4642      	mov	r2, r8
 8000d8a:	1e5d      	subs	r5, r3, #1
 8000d8c:	41ab      	sbcs	r3, r5
 8000d8e:	4334      	orrs	r4, r6
 8000d90:	1a12      	subs	r2, r2, r0
 8000d92:	4690      	mov	r8, r2
 8000d94:	4323      	orrs	r3, r4
 8000d96:	e02c      	b.n	8000df2 <__aeabi_dadd+0x432>
 8000d98:	0742      	lsls	r2, r0, #29
 8000d9a:	08db      	lsrs	r3, r3, #3
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	08c0      	lsrs	r0, r0, #3
 8000da0:	e73b      	b.n	8000c1a <__aeabi_dadd+0x25a>
 8000da2:	185c      	adds	r4, r3, r1
 8000da4:	429c      	cmp	r4, r3
 8000da6:	419b      	sbcs	r3, r3
 8000da8:	4440      	add	r0, r8
 8000daa:	425b      	negs	r3, r3
 8000dac:	18c7      	adds	r7, r0, r3
 8000dae:	2601      	movs	r6, #1
 8000db0:	023b      	lsls	r3, r7, #8
 8000db2:	d400      	bmi.n	8000db6 <__aeabi_dadd+0x3f6>
 8000db4:	e729      	b.n	8000c0a <__aeabi_dadd+0x24a>
 8000db6:	2602      	movs	r6, #2
 8000db8:	4a9e      	ldr	r2, [pc, #632]	; (8001034 <__aeabi_dadd+0x674>)
 8000dba:	0863      	lsrs	r3, r4, #1
 8000dbc:	4017      	ands	r7, r2
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	431c      	orrs	r4, r3
 8000dc4:	07fb      	lsls	r3, r7, #31
 8000dc6:	431c      	orrs	r4, r3
 8000dc8:	087f      	lsrs	r7, r7, #1
 8000dca:	e673      	b.n	8000ab4 <__aeabi_dadd+0xf4>
 8000dcc:	4644      	mov	r4, r8
 8000dce:	3a20      	subs	r2, #32
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	4662      	mov	r2, ip
 8000dd4:	2a20      	cmp	r2, #32
 8000dd6:	d005      	beq.n	8000de4 <__aeabi_dadd+0x424>
 8000dd8:	4667      	mov	r7, ip
 8000dda:	2240      	movs	r2, #64	; 0x40
 8000ddc:	1bd2      	subs	r2, r2, r7
 8000dde:	4647      	mov	r7, r8
 8000de0:	4097      	lsls	r7, r2
 8000de2:	4339      	orrs	r1, r7
 8000de4:	1e4a      	subs	r2, r1, #1
 8000de6:	4191      	sbcs	r1, r2
 8000de8:	4321      	orrs	r1, r4
 8000dea:	e635      	b.n	8000a58 <__aeabi_dadd+0x98>
 8000dec:	4303      	orrs	r3, r0
 8000dee:	1e58      	subs	r0, r3, #1
 8000df0:	4183      	sbcs	r3, r0
 8000df2:	1acc      	subs	r4, r1, r3
 8000df4:	42a1      	cmp	r1, r4
 8000df6:	41bf      	sbcs	r7, r7
 8000df8:	4643      	mov	r3, r8
 8000dfa:	427f      	negs	r7, r7
 8000dfc:	4655      	mov	r5, sl
 8000dfe:	464e      	mov	r6, r9
 8000e00:	1bdf      	subs	r7, r3, r7
 8000e02:	e62e      	b.n	8000a62 <__aeabi_dadd+0xa2>
 8000e04:	0002      	movs	r2, r0
 8000e06:	431a      	orrs	r2, r3
 8000e08:	d100      	bne.n	8000e0c <__aeabi_dadd+0x44c>
 8000e0a:	e0bd      	b.n	8000f88 <__aeabi_dadd+0x5c8>
 8000e0c:	4662      	mov	r2, ip
 8000e0e:	4664      	mov	r4, ip
 8000e10:	3a01      	subs	r2, #1
 8000e12:	2c01      	cmp	r4, #1
 8000e14:	d100      	bne.n	8000e18 <__aeabi_dadd+0x458>
 8000e16:	e0e5      	b.n	8000fe4 <__aeabi_dadd+0x624>
 8000e18:	4c85      	ldr	r4, [pc, #532]	; (8001030 <__aeabi_dadd+0x670>)
 8000e1a:	45a4      	cmp	ip, r4
 8000e1c:	d058      	beq.n	8000ed0 <__aeabi_dadd+0x510>
 8000e1e:	4694      	mov	ip, r2
 8000e20:	e749      	b.n	8000cb6 <__aeabi_dadd+0x2f6>
 8000e22:	4664      	mov	r4, ip
 8000e24:	2220      	movs	r2, #32
 8000e26:	1b12      	subs	r2, r2, r4
 8000e28:	4644      	mov	r4, r8
 8000e2a:	4094      	lsls	r4, r2
 8000e2c:	000f      	movs	r7, r1
 8000e2e:	46a1      	mov	r9, r4
 8000e30:	4664      	mov	r4, ip
 8000e32:	4091      	lsls	r1, r2
 8000e34:	40e7      	lsrs	r7, r4
 8000e36:	464c      	mov	r4, r9
 8000e38:	1e4a      	subs	r2, r1, #1
 8000e3a:	4191      	sbcs	r1, r2
 8000e3c:	433c      	orrs	r4, r7
 8000e3e:	4642      	mov	r2, r8
 8000e40:	430c      	orrs	r4, r1
 8000e42:	4661      	mov	r1, ip
 8000e44:	40ca      	lsrs	r2, r1
 8000e46:	1880      	adds	r0, r0, r2
 8000e48:	e6f4      	b.n	8000c34 <__aeabi_dadd+0x274>
 8000e4a:	4c79      	ldr	r4, [pc, #484]	; (8001030 <__aeabi_dadd+0x670>)
 8000e4c:	42a2      	cmp	r2, r4
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_dadd+0x492>
 8000e50:	e6fd      	b.n	8000c4e <__aeabi_dadd+0x28e>
 8000e52:	1859      	adds	r1, r3, r1
 8000e54:	4299      	cmp	r1, r3
 8000e56:	419b      	sbcs	r3, r3
 8000e58:	4440      	add	r0, r8
 8000e5a:	425f      	negs	r7, r3
 8000e5c:	19c7      	adds	r7, r0, r7
 8000e5e:	07fc      	lsls	r4, r7, #31
 8000e60:	0849      	lsrs	r1, r1, #1
 8000e62:	0016      	movs	r6, r2
 8000e64:	430c      	orrs	r4, r1
 8000e66:	087f      	lsrs	r7, r7, #1
 8000e68:	e6cf      	b.n	8000c0a <__aeabi_dadd+0x24a>
 8000e6a:	1acc      	subs	r4, r1, r3
 8000e6c:	42a1      	cmp	r1, r4
 8000e6e:	41bf      	sbcs	r7, r7
 8000e70:	4643      	mov	r3, r8
 8000e72:	427f      	negs	r7, r7
 8000e74:	1a18      	subs	r0, r3, r0
 8000e76:	4655      	mov	r5, sl
 8000e78:	1bc7      	subs	r7, r0, r7
 8000e7a:	e5f7      	b.n	8000a6c <__aeabi_dadd+0xac>
 8000e7c:	08c9      	lsrs	r1, r1, #3
 8000e7e:	077b      	lsls	r3, r7, #29
 8000e80:	4655      	mov	r5, sl
 8000e82:	430b      	orrs	r3, r1
 8000e84:	08f8      	lsrs	r0, r7, #3
 8000e86:	e6c8      	b.n	8000c1a <__aeabi_dadd+0x25a>
 8000e88:	2c00      	cmp	r4, #0
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_dadd+0x4ce>
 8000e8c:	e081      	b.n	8000f92 <__aeabi_dadd+0x5d2>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	430b      	orrs	r3, r1
 8000e92:	d115      	bne.n	8000ec0 <__aeabi_dadd+0x500>
 8000e94:	2080      	movs	r0, #128	; 0x80
 8000e96:	2500      	movs	r5, #0
 8000e98:	0300      	lsls	r0, r0, #12
 8000e9a:	e6e3      	b.n	8000c64 <__aeabi_dadd+0x2a4>
 8000e9c:	1a5c      	subs	r4, r3, r1
 8000e9e:	42a3      	cmp	r3, r4
 8000ea0:	419b      	sbcs	r3, r3
 8000ea2:	1bc7      	subs	r7, r0, r7
 8000ea4:	425b      	negs	r3, r3
 8000ea6:	2601      	movs	r6, #1
 8000ea8:	1aff      	subs	r7, r7, r3
 8000eaa:	e5da      	b.n	8000a62 <__aeabi_dadd+0xa2>
 8000eac:	0742      	lsls	r2, r0, #29
 8000eae:	08db      	lsrs	r3, r3, #3
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	08c0      	lsrs	r0, r0, #3
 8000eb4:	e6d2      	b.n	8000c5c <__aeabi_dadd+0x29c>
 8000eb6:	0742      	lsls	r2, r0, #29
 8000eb8:	08db      	lsrs	r3, r3, #3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	08c0      	lsrs	r0, r0, #3
 8000ebe:	e6ac      	b.n	8000c1a <__aeabi_dadd+0x25a>
 8000ec0:	4643      	mov	r3, r8
 8000ec2:	4642      	mov	r2, r8
 8000ec4:	08c9      	lsrs	r1, r1, #3
 8000ec6:	075b      	lsls	r3, r3, #29
 8000ec8:	4655      	mov	r5, sl
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	08d0      	lsrs	r0, r2, #3
 8000ece:	e6c5      	b.n	8000c5c <__aeabi_dadd+0x29c>
 8000ed0:	4643      	mov	r3, r8
 8000ed2:	4642      	mov	r2, r8
 8000ed4:	075b      	lsls	r3, r3, #29
 8000ed6:	08c9      	lsrs	r1, r1, #3
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	08d0      	lsrs	r0, r2, #3
 8000edc:	e6be      	b.n	8000c5c <__aeabi_dadd+0x29c>
 8000ede:	4303      	orrs	r3, r0
 8000ee0:	001c      	movs	r4, r3
 8000ee2:	1e63      	subs	r3, r4, #1
 8000ee4:	419c      	sbcs	r4, r3
 8000ee6:	e6fc      	b.n	8000ce2 <__aeabi_dadd+0x322>
 8000ee8:	0002      	movs	r2, r0
 8000eea:	3c20      	subs	r4, #32
 8000eec:	40e2      	lsrs	r2, r4
 8000eee:	0014      	movs	r4, r2
 8000ef0:	4662      	mov	r2, ip
 8000ef2:	2a20      	cmp	r2, #32
 8000ef4:	d003      	beq.n	8000efe <__aeabi_dadd+0x53e>
 8000ef6:	2540      	movs	r5, #64	; 0x40
 8000ef8:	1aad      	subs	r5, r5, r2
 8000efa:	40a8      	lsls	r0, r5
 8000efc:	4303      	orrs	r3, r0
 8000efe:	1e58      	subs	r0, r3, #1
 8000f00:	4183      	sbcs	r3, r0
 8000f02:	4323      	orrs	r3, r4
 8000f04:	e775      	b.n	8000df2 <__aeabi_dadd+0x432>
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	d0e2      	beq.n	8000ed0 <__aeabi_dadd+0x510>
 8000f0a:	003a      	movs	r2, r7
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	d0cd      	beq.n	8000eac <__aeabi_dadd+0x4ec>
 8000f10:	0742      	lsls	r2, r0, #29
 8000f12:	08db      	lsrs	r3, r3, #3
 8000f14:	4313      	orrs	r3, r2
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	08c0      	lsrs	r0, r0, #3
 8000f1a:	0312      	lsls	r2, r2, #12
 8000f1c:	4210      	tst	r0, r2
 8000f1e:	d006      	beq.n	8000f2e <__aeabi_dadd+0x56e>
 8000f20:	08fc      	lsrs	r4, r7, #3
 8000f22:	4214      	tst	r4, r2
 8000f24:	d103      	bne.n	8000f2e <__aeabi_dadd+0x56e>
 8000f26:	0020      	movs	r0, r4
 8000f28:	08cb      	lsrs	r3, r1, #3
 8000f2a:	077a      	lsls	r2, r7, #29
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	0f5a      	lsrs	r2, r3, #29
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	0752      	lsls	r2, r2, #29
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	e690      	b.n	8000c5c <__aeabi_dadd+0x29c>
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dadd+0x582>
 8000f40:	e709      	b.n	8000d56 <__aeabi_dadd+0x396>
 8000f42:	4643      	mov	r3, r8
 8000f44:	4642      	mov	r2, r8
 8000f46:	08c9      	lsrs	r1, r1, #3
 8000f48:	075b      	lsls	r3, r3, #29
 8000f4a:	4655      	mov	r5, sl
 8000f4c:	430b      	orrs	r3, r1
 8000f4e:	08d0      	lsrs	r0, r2, #3
 8000f50:	e666      	b.n	8000c20 <__aeabi_dadd+0x260>
 8000f52:	1acc      	subs	r4, r1, r3
 8000f54:	42a1      	cmp	r1, r4
 8000f56:	4189      	sbcs	r1, r1
 8000f58:	1a3f      	subs	r7, r7, r0
 8000f5a:	4249      	negs	r1, r1
 8000f5c:	4655      	mov	r5, sl
 8000f5e:	2601      	movs	r6, #1
 8000f60:	1a7f      	subs	r7, r7, r1
 8000f62:	e57e      	b.n	8000a62 <__aeabi_dadd+0xa2>
 8000f64:	4642      	mov	r2, r8
 8000f66:	1a5c      	subs	r4, r3, r1
 8000f68:	1a87      	subs	r7, r0, r2
 8000f6a:	42a3      	cmp	r3, r4
 8000f6c:	4192      	sbcs	r2, r2
 8000f6e:	4252      	negs	r2, r2
 8000f70:	1abf      	subs	r7, r7, r2
 8000f72:	023a      	lsls	r2, r7, #8
 8000f74:	d53d      	bpl.n	8000ff2 <__aeabi_dadd+0x632>
 8000f76:	1acc      	subs	r4, r1, r3
 8000f78:	42a1      	cmp	r1, r4
 8000f7a:	4189      	sbcs	r1, r1
 8000f7c:	4643      	mov	r3, r8
 8000f7e:	4249      	negs	r1, r1
 8000f80:	1a1f      	subs	r7, r3, r0
 8000f82:	4655      	mov	r5, sl
 8000f84:	1a7f      	subs	r7, r7, r1
 8000f86:	e595      	b.n	8000ab4 <__aeabi_dadd+0xf4>
 8000f88:	077b      	lsls	r3, r7, #29
 8000f8a:	08c9      	lsrs	r1, r1, #3
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	08f8      	lsrs	r0, r7, #3
 8000f90:	e643      	b.n	8000c1a <__aeabi_dadd+0x25a>
 8000f92:	4644      	mov	r4, r8
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	430c      	orrs	r4, r1
 8000f98:	d130      	bne.n	8000ffc <__aeabi_dadd+0x63c>
 8000f9a:	0742      	lsls	r2, r0, #29
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	08c0      	lsrs	r0, r0, #3
 8000fa0:	e65c      	b.n	8000c5c <__aeabi_dadd+0x29c>
 8000fa2:	077b      	lsls	r3, r7, #29
 8000fa4:	08c9      	lsrs	r1, r1, #3
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	08f8      	lsrs	r0, r7, #3
 8000faa:	e639      	b.n	8000c20 <__aeabi_dadd+0x260>
 8000fac:	185c      	adds	r4, r3, r1
 8000fae:	429c      	cmp	r4, r3
 8000fb0:	419b      	sbcs	r3, r3
 8000fb2:	4440      	add	r0, r8
 8000fb4:	425b      	negs	r3, r3
 8000fb6:	18c7      	adds	r7, r0, r3
 8000fb8:	023b      	lsls	r3, r7, #8
 8000fba:	d400      	bmi.n	8000fbe <__aeabi_dadd+0x5fe>
 8000fbc:	e625      	b.n	8000c0a <__aeabi_dadd+0x24a>
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <__aeabi_dadd+0x674>)
 8000fc0:	2601      	movs	r6, #1
 8000fc2:	401f      	ands	r7, r3
 8000fc4:	e621      	b.n	8000c0a <__aeabi_dadd+0x24a>
 8000fc6:	0004      	movs	r4, r0
 8000fc8:	3a20      	subs	r2, #32
 8000fca:	40d4      	lsrs	r4, r2
 8000fcc:	4662      	mov	r2, ip
 8000fce:	2a20      	cmp	r2, #32
 8000fd0:	d004      	beq.n	8000fdc <__aeabi_dadd+0x61c>
 8000fd2:	2240      	movs	r2, #64	; 0x40
 8000fd4:	4666      	mov	r6, ip
 8000fd6:	1b92      	subs	r2, r2, r6
 8000fd8:	4090      	lsls	r0, r2
 8000fda:	4303      	orrs	r3, r0
 8000fdc:	1e5a      	subs	r2, r3, #1
 8000fde:	4193      	sbcs	r3, r2
 8000fe0:	431c      	orrs	r4, r3
 8000fe2:	e67e      	b.n	8000ce2 <__aeabi_dadd+0x322>
 8000fe4:	185c      	adds	r4, r3, r1
 8000fe6:	428c      	cmp	r4, r1
 8000fe8:	4189      	sbcs	r1, r1
 8000fea:	4440      	add	r0, r8
 8000fec:	4249      	negs	r1, r1
 8000fee:	1847      	adds	r7, r0, r1
 8000ff0:	e6dd      	b.n	8000dae <__aeabi_dadd+0x3ee>
 8000ff2:	0023      	movs	r3, r4
 8000ff4:	433b      	orrs	r3, r7
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_dadd+0x63a>
 8000ff8:	e6ad      	b.n	8000d56 <__aeabi_dadd+0x396>
 8000ffa:	e606      	b.n	8000c0a <__aeabi_dadd+0x24a>
 8000ffc:	0744      	lsls	r4, r0, #29
 8000ffe:	4323      	orrs	r3, r4
 8001000:	2480      	movs	r4, #128	; 0x80
 8001002:	08c0      	lsrs	r0, r0, #3
 8001004:	0324      	lsls	r4, r4, #12
 8001006:	4220      	tst	r0, r4
 8001008:	d008      	beq.n	800101c <__aeabi_dadd+0x65c>
 800100a:	4642      	mov	r2, r8
 800100c:	08d6      	lsrs	r6, r2, #3
 800100e:	4226      	tst	r6, r4
 8001010:	d104      	bne.n	800101c <__aeabi_dadd+0x65c>
 8001012:	4655      	mov	r5, sl
 8001014:	0030      	movs	r0, r6
 8001016:	08cb      	lsrs	r3, r1, #3
 8001018:	0751      	lsls	r1, r2, #29
 800101a:	430b      	orrs	r3, r1
 800101c:	0f5a      	lsrs	r2, r3, #29
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	0752      	lsls	r2, r2, #29
 8001024:	4313      	orrs	r3, r2
 8001026:	e619      	b.n	8000c5c <__aeabi_dadd+0x29c>
 8001028:	2300      	movs	r3, #0
 800102a:	4a01      	ldr	r2, [pc, #4]	; (8001030 <__aeabi_dadd+0x670>)
 800102c:	001f      	movs	r7, r3
 800102e:	e55e      	b.n	8000aee <__aeabi_dadd+0x12e>
 8001030:	000007ff 	.word	0x000007ff
 8001034:	ff7fffff 	.word	0xff7fffff

08001038 <__aeabi_ddiv>:
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	4657      	mov	r7, sl
 800103c:	464e      	mov	r6, r9
 800103e:	4645      	mov	r5, r8
 8001040:	46de      	mov	lr, fp
 8001042:	b5e0      	push	{r5, r6, r7, lr}
 8001044:	4681      	mov	r9, r0
 8001046:	0005      	movs	r5, r0
 8001048:	030c      	lsls	r4, r1, #12
 800104a:	0048      	lsls	r0, r1, #1
 800104c:	4692      	mov	sl, r2
 800104e:	001f      	movs	r7, r3
 8001050:	b085      	sub	sp, #20
 8001052:	0b24      	lsrs	r4, r4, #12
 8001054:	0d40      	lsrs	r0, r0, #21
 8001056:	0fce      	lsrs	r6, r1, #31
 8001058:	2800      	cmp	r0, #0
 800105a:	d100      	bne.n	800105e <__aeabi_ddiv+0x26>
 800105c:	e156      	b.n	800130c <__aeabi_ddiv+0x2d4>
 800105e:	4bd4      	ldr	r3, [pc, #848]	; (80013b0 <__aeabi_ddiv+0x378>)
 8001060:	4298      	cmp	r0, r3
 8001062:	d100      	bne.n	8001066 <__aeabi_ddiv+0x2e>
 8001064:	e172      	b.n	800134c <__aeabi_ddiv+0x314>
 8001066:	0f6b      	lsrs	r3, r5, #29
 8001068:	00e4      	lsls	r4, r4, #3
 800106a:	431c      	orrs	r4, r3
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	041b      	lsls	r3, r3, #16
 8001070:	4323      	orrs	r3, r4
 8001072:	4698      	mov	r8, r3
 8001074:	4bcf      	ldr	r3, [pc, #828]	; (80013b4 <__aeabi_ddiv+0x37c>)
 8001076:	00ed      	lsls	r5, r5, #3
 8001078:	469b      	mov	fp, r3
 800107a:	2300      	movs	r3, #0
 800107c:	4699      	mov	r9, r3
 800107e:	4483      	add	fp, r0
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	033c      	lsls	r4, r7, #12
 8001084:	007b      	lsls	r3, r7, #1
 8001086:	4650      	mov	r0, sl
 8001088:	0b24      	lsrs	r4, r4, #12
 800108a:	0d5b      	lsrs	r3, r3, #21
 800108c:	0fff      	lsrs	r7, r7, #31
 800108e:	2b00      	cmp	r3, #0
 8001090:	d100      	bne.n	8001094 <__aeabi_ddiv+0x5c>
 8001092:	e11f      	b.n	80012d4 <__aeabi_ddiv+0x29c>
 8001094:	4ac6      	ldr	r2, [pc, #792]	; (80013b0 <__aeabi_ddiv+0x378>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d100      	bne.n	800109c <__aeabi_ddiv+0x64>
 800109a:	e162      	b.n	8001362 <__aeabi_ddiv+0x32a>
 800109c:	49c5      	ldr	r1, [pc, #788]	; (80013b4 <__aeabi_ddiv+0x37c>)
 800109e:	0f42      	lsrs	r2, r0, #29
 80010a0:	468c      	mov	ip, r1
 80010a2:	00e4      	lsls	r4, r4, #3
 80010a4:	4659      	mov	r1, fp
 80010a6:	4314      	orrs	r4, r2
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	4463      	add	r3, ip
 80010ac:	0412      	lsls	r2, r2, #16
 80010ae:	1acb      	subs	r3, r1, r3
 80010b0:	4314      	orrs	r4, r2
 80010b2:	469b      	mov	fp, r3
 80010b4:	00c2      	lsls	r2, r0, #3
 80010b6:	2000      	movs	r0, #0
 80010b8:	0033      	movs	r3, r6
 80010ba:	407b      	eors	r3, r7
 80010bc:	469a      	mov	sl, r3
 80010be:	464b      	mov	r3, r9
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d827      	bhi.n	8001114 <__aeabi_ddiv+0xdc>
 80010c4:	49bc      	ldr	r1, [pc, #752]	; (80013b8 <__aeabi_ddiv+0x380>)
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	58cb      	ldr	r3, [r1, r3]
 80010ca:	469f      	mov	pc, r3
 80010cc:	46b2      	mov	sl, r6
 80010ce:	9b00      	ldr	r3, [sp, #0]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d016      	beq.n	8001102 <__aeabi_ddiv+0xca>
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d100      	bne.n	80010da <__aeabi_ddiv+0xa2>
 80010d8:	e28e      	b.n	80015f8 <__aeabi_ddiv+0x5c0>
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0xa8>
 80010de:	e0d9      	b.n	8001294 <__aeabi_ddiv+0x25c>
 80010e0:	2300      	movs	r3, #0
 80010e2:	2400      	movs	r4, #0
 80010e4:	2500      	movs	r5, #0
 80010e6:	4652      	mov	r2, sl
 80010e8:	051b      	lsls	r3, r3, #20
 80010ea:	4323      	orrs	r3, r4
 80010ec:	07d2      	lsls	r2, r2, #31
 80010ee:	4313      	orrs	r3, r2
 80010f0:	0028      	movs	r0, r5
 80010f2:	0019      	movs	r1, r3
 80010f4:	b005      	add	sp, #20
 80010f6:	bcf0      	pop	{r4, r5, r6, r7}
 80010f8:	46bb      	mov	fp, r7
 80010fa:	46b2      	mov	sl, r6
 80010fc:	46a9      	mov	r9, r5
 80010fe:	46a0      	mov	r8, r4
 8001100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001102:	2400      	movs	r4, #0
 8001104:	2500      	movs	r5, #0
 8001106:	4baa      	ldr	r3, [pc, #680]	; (80013b0 <__aeabi_ddiv+0x378>)
 8001108:	e7ed      	b.n	80010e6 <__aeabi_ddiv+0xae>
 800110a:	46ba      	mov	sl, r7
 800110c:	46a0      	mov	r8, r4
 800110e:	0015      	movs	r5, r2
 8001110:	9000      	str	r0, [sp, #0]
 8001112:	e7dc      	b.n	80010ce <__aeabi_ddiv+0x96>
 8001114:	4544      	cmp	r4, r8
 8001116:	d200      	bcs.n	800111a <__aeabi_ddiv+0xe2>
 8001118:	e1c7      	b.n	80014aa <__aeabi_ddiv+0x472>
 800111a:	d100      	bne.n	800111e <__aeabi_ddiv+0xe6>
 800111c:	e1c2      	b.n	80014a4 <__aeabi_ddiv+0x46c>
 800111e:	2301      	movs	r3, #1
 8001120:	425b      	negs	r3, r3
 8001122:	469c      	mov	ip, r3
 8001124:	002e      	movs	r6, r5
 8001126:	4640      	mov	r0, r8
 8001128:	2500      	movs	r5, #0
 800112a:	44e3      	add	fp, ip
 800112c:	0223      	lsls	r3, r4, #8
 800112e:	0e14      	lsrs	r4, r2, #24
 8001130:	431c      	orrs	r4, r3
 8001132:	0c1b      	lsrs	r3, r3, #16
 8001134:	4699      	mov	r9, r3
 8001136:	0423      	lsls	r3, r4, #16
 8001138:	0c1f      	lsrs	r7, r3, #16
 800113a:	0212      	lsls	r2, r2, #8
 800113c:	4649      	mov	r1, r9
 800113e:	9200      	str	r2, [sp, #0]
 8001140:	9701      	str	r7, [sp, #4]
 8001142:	f7ff f883 	bl	800024c <__aeabi_uidivmod>
 8001146:	0002      	movs	r2, r0
 8001148:	437a      	muls	r2, r7
 800114a:	040b      	lsls	r3, r1, #16
 800114c:	0c31      	lsrs	r1, r6, #16
 800114e:	4680      	mov	r8, r0
 8001150:	4319      	orrs	r1, r3
 8001152:	428a      	cmp	r2, r1
 8001154:	d907      	bls.n	8001166 <__aeabi_ddiv+0x12e>
 8001156:	2301      	movs	r3, #1
 8001158:	425b      	negs	r3, r3
 800115a:	469c      	mov	ip, r3
 800115c:	1909      	adds	r1, r1, r4
 800115e:	44e0      	add	r8, ip
 8001160:	428c      	cmp	r4, r1
 8001162:	d800      	bhi.n	8001166 <__aeabi_ddiv+0x12e>
 8001164:	e207      	b.n	8001576 <__aeabi_ddiv+0x53e>
 8001166:	1a88      	subs	r0, r1, r2
 8001168:	4649      	mov	r1, r9
 800116a:	f7ff f86f 	bl	800024c <__aeabi_uidivmod>
 800116e:	0409      	lsls	r1, r1, #16
 8001170:	468c      	mov	ip, r1
 8001172:	0431      	lsls	r1, r6, #16
 8001174:	4666      	mov	r6, ip
 8001176:	9a01      	ldr	r2, [sp, #4]
 8001178:	0c09      	lsrs	r1, r1, #16
 800117a:	4342      	muls	r2, r0
 800117c:	0003      	movs	r3, r0
 800117e:	4331      	orrs	r1, r6
 8001180:	428a      	cmp	r2, r1
 8001182:	d904      	bls.n	800118e <__aeabi_ddiv+0x156>
 8001184:	1909      	adds	r1, r1, r4
 8001186:	3b01      	subs	r3, #1
 8001188:	428c      	cmp	r4, r1
 800118a:	d800      	bhi.n	800118e <__aeabi_ddiv+0x156>
 800118c:	e1ed      	b.n	800156a <__aeabi_ddiv+0x532>
 800118e:	1a88      	subs	r0, r1, r2
 8001190:	4642      	mov	r2, r8
 8001192:	0412      	lsls	r2, r2, #16
 8001194:	431a      	orrs	r2, r3
 8001196:	4690      	mov	r8, r2
 8001198:	4641      	mov	r1, r8
 800119a:	9b00      	ldr	r3, [sp, #0]
 800119c:	040e      	lsls	r6, r1, #16
 800119e:	0c1b      	lsrs	r3, r3, #16
 80011a0:	001f      	movs	r7, r3
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	9b00      	ldr	r3, [sp, #0]
 80011a6:	0c36      	lsrs	r6, r6, #16
 80011a8:	041b      	lsls	r3, r3, #16
 80011aa:	0c19      	lsrs	r1, r3, #16
 80011ac:	000b      	movs	r3, r1
 80011ae:	4373      	muls	r3, r6
 80011b0:	0c12      	lsrs	r2, r2, #16
 80011b2:	437e      	muls	r6, r7
 80011b4:	9103      	str	r1, [sp, #12]
 80011b6:	4351      	muls	r1, r2
 80011b8:	437a      	muls	r2, r7
 80011ba:	0c1f      	lsrs	r7, r3, #16
 80011bc:	46bc      	mov	ip, r7
 80011be:	1876      	adds	r6, r6, r1
 80011c0:	4466      	add	r6, ip
 80011c2:	42b1      	cmp	r1, r6
 80011c4:	d903      	bls.n	80011ce <__aeabi_ddiv+0x196>
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	0249      	lsls	r1, r1, #9
 80011ca:	468c      	mov	ip, r1
 80011cc:	4462      	add	r2, ip
 80011ce:	0c31      	lsrs	r1, r6, #16
 80011d0:	188a      	adds	r2, r1, r2
 80011d2:	0431      	lsls	r1, r6, #16
 80011d4:	041e      	lsls	r6, r3, #16
 80011d6:	0c36      	lsrs	r6, r6, #16
 80011d8:	198e      	adds	r6, r1, r6
 80011da:	4290      	cmp	r0, r2
 80011dc:	d302      	bcc.n	80011e4 <__aeabi_ddiv+0x1ac>
 80011de:	d112      	bne.n	8001206 <__aeabi_ddiv+0x1ce>
 80011e0:	42b5      	cmp	r5, r6
 80011e2:	d210      	bcs.n	8001206 <__aeabi_ddiv+0x1ce>
 80011e4:	4643      	mov	r3, r8
 80011e6:	1e59      	subs	r1, r3, #1
 80011e8:	9b00      	ldr	r3, [sp, #0]
 80011ea:	469c      	mov	ip, r3
 80011ec:	4465      	add	r5, ip
 80011ee:	001f      	movs	r7, r3
 80011f0:	429d      	cmp	r5, r3
 80011f2:	419b      	sbcs	r3, r3
 80011f4:	425b      	negs	r3, r3
 80011f6:	191b      	adds	r3, r3, r4
 80011f8:	18c0      	adds	r0, r0, r3
 80011fa:	4284      	cmp	r4, r0
 80011fc:	d200      	bcs.n	8001200 <__aeabi_ddiv+0x1c8>
 80011fe:	e1a0      	b.n	8001542 <__aeabi_ddiv+0x50a>
 8001200:	d100      	bne.n	8001204 <__aeabi_ddiv+0x1cc>
 8001202:	e19b      	b.n	800153c <__aeabi_ddiv+0x504>
 8001204:	4688      	mov	r8, r1
 8001206:	1bae      	subs	r6, r5, r6
 8001208:	42b5      	cmp	r5, r6
 800120a:	41ad      	sbcs	r5, r5
 800120c:	1a80      	subs	r0, r0, r2
 800120e:	426d      	negs	r5, r5
 8001210:	1b40      	subs	r0, r0, r5
 8001212:	4284      	cmp	r4, r0
 8001214:	d100      	bne.n	8001218 <__aeabi_ddiv+0x1e0>
 8001216:	e1d5      	b.n	80015c4 <__aeabi_ddiv+0x58c>
 8001218:	4649      	mov	r1, r9
 800121a:	f7ff f817 	bl	800024c <__aeabi_uidivmod>
 800121e:	9a01      	ldr	r2, [sp, #4]
 8001220:	040b      	lsls	r3, r1, #16
 8001222:	4342      	muls	r2, r0
 8001224:	0c31      	lsrs	r1, r6, #16
 8001226:	0005      	movs	r5, r0
 8001228:	4319      	orrs	r1, r3
 800122a:	428a      	cmp	r2, r1
 800122c:	d900      	bls.n	8001230 <__aeabi_ddiv+0x1f8>
 800122e:	e16c      	b.n	800150a <__aeabi_ddiv+0x4d2>
 8001230:	1a88      	subs	r0, r1, r2
 8001232:	4649      	mov	r1, r9
 8001234:	f7ff f80a 	bl	800024c <__aeabi_uidivmod>
 8001238:	9a01      	ldr	r2, [sp, #4]
 800123a:	0436      	lsls	r6, r6, #16
 800123c:	4342      	muls	r2, r0
 800123e:	0409      	lsls	r1, r1, #16
 8001240:	0c36      	lsrs	r6, r6, #16
 8001242:	0003      	movs	r3, r0
 8001244:	430e      	orrs	r6, r1
 8001246:	42b2      	cmp	r2, r6
 8001248:	d900      	bls.n	800124c <__aeabi_ddiv+0x214>
 800124a:	e153      	b.n	80014f4 <__aeabi_ddiv+0x4bc>
 800124c:	9803      	ldr	r0, [sp, #12]
 800124e:	1ab6      	subs	r6, r6, r2
 8001250:	0002      	movs	r2, r0
 8001252:	042d      	lsls	r5, r5, #16
 8001254:	431d      	orrs	r5, r3
 8001256:	9f02      	ldr	r7, [sp, #8]
 8001258:	042b      	lsls	r3, r5, #16
 800125a:	0c1b      	lsrs	r3, r3, #16
 800125c:	435a      	muls	r2, r3
 800125e:	437b      	muls	r3, r7
 8001260:	469c      	mov	ip, r3
 8001262:	0c29      	lsrs	r1, r5, #16
 8001264:	4348      	muls	r0, r1
 8001266:	0c13      	lsrs	r3, r2, #16
 8001268:	4484      	add	ip, r0
 800126a:	4463      	add	r3, ip
 800126c:	4379      	muls	r1, r7
 800126e:	4298      	cmp	r0, r3
 8001270:	d903      	bls.n	800127a <__aeabi_ddiv+0x242>
 8001272:	2080      	movs	r0, #128	; 0x80
 8001274:	0240      	lsls	r0, r0, #9
 8001276:	4684      	mov	ip, r0
 8001278:	4461      	add	r1, ip
 800127a:	0c18      	lsrs	r0, r3, #16
 800127c:	0412      	lsls	r2, r2, #16
 800127e:	041b      	lsls	r3, r3, #16
 8001280:	0c12      	lsrs	r2, r2, #16
 8001282:	1841      	adds	r1, r0, r1
 8001284:	189b      	adds	r3, r3, r2
 8001286:	428e      	cmp	r6, r1
 8001288:	d200      	bcs.n	800128c <__aeabi_ddiv+0x254>
 800128a:	e0ff      	b.n	800148c <__aeabi_ddiv+0x454>
 800128c:	d100      	bne.n	8001290 <__aeabi_ddiv+0x258>
 800128e:	e0fa      	b.n	8001486 <__aeabi_ddiv+0x44e>
 8001290:	2301      	movs	r3, #1
 8001292:	431d      	orrs	r5, r3
 8001294:	4a49      	ldr	r2, [pc, #292]	; (80013bc <__aeabi_ddiv+0x384>)
 8001296:	445a      	add	r2, fp
 8001298:	2a00      	cmp	r2, #0
 800129a:	dc00      	bgt.n	800129e <__aeabi_ddiv+0x266>
 800129c:	e0aa      	b.n	80013f4 <__aeabi_ddiv+0x3bc>
 800129e:	076b      	lsls	r3, r5, #29
 80012a0:	d000      	beq.n	80012a4 <__aeabi_ddiv+0x26c>
 80012a2:	e13d      	b.n	8001520 <__aeabi_ddiv+0x4e8>
 80012a4:	08ed      	lsrs	r5, r5, #3
 80012a6:	4643      	mov	r3, r8
 80012a8:	01db      	lsls	r3, r3, #7
 80012aa:	d506      	bpl.n	80012ba <__aeabi_ddiv+0x282>
 80012ac:	4642      	mov	r2, r8
 80012ae:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <__aeabi_ddiv+0x388>)
 80012b0:	401a      	ands	r2, r3
 80012b2:	4690      	mov	r8, r2
 80012b4:	2280      	movs	r2, #128	; 0x80
 80012b6:	00d2      	lsls	r2, r2, #3
 80012b8:	445a      	add	r2, fp
 80012ba:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <__aeabi_ddiv+0x38c>)
 80012bc:	429a      	cmp	r2, r3
 80012be:	dd00      	ble.n	80012c2 <__aeabi_ddiv+0x28a>
 80012c0:	e71f      	b.n	8001102 <__aeabi_ddiv+0xca>
 80012c2:	4643      	mov	r3, r8
 80012c4:	075b      	lsls	r3, r3, #29
 80012c6:	431d      	orrs	r5, r3
 80012c8:	4643      	mov	r3, r8
 80012ca:	0552      	lsls	r2, r2, #21
 80012cc:	025c      	lsls	r4, r3, #9
 80012ce:	0b24      	lsrs	r4, r4, #12
 80012d0:	0d53      	lsrs	r3, r2, #21
 80012d2:	e708      	b.n	80010e6 <__aeabi_ddiv+0xae>
 80012d4:	4652      	mov	r2, sl
 80012d6:	4322      	orrs	r2, r4
 80012d8:	d100      	bne.n	80012dc <__aeabi_ddiv+0x2a4>
 80012da:	e07b      	b.n	80013d4 <__aeabi_ddiv+0x39c>
 80012dc:	2c00      	cmp	r4, #0
 80012de:	d100      	bne.n	80012e2 <__aeabi_ddiv+0x2aa>
 80012e0:	e0fa      	b.n	80014d8 <__aeabi_ddiv+0x4a0>
 80012e2:	0020      	movs	r0, r4
 80012e4:	f001 fa22 	bl	800272c <__clzsi2>
 80012e8:	0002      	movs	r2, r0
 80012ea:	3a0b      	subs	r2, #11
 80012ec:	231d      	movs	r3, #29
 80012ee:	0001      	movs	r1, r0
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	4652      	mov	r2, sl
 80012f4:	3908      	subs	r1, #8
 80012f6:	40da      	lsrs	r2, r3
 80012f8:	408c      	lsls	r4, r1
 80012fa:	4314      	orrs	r4, r2
 80012fc:	4652      	mov	r2, sl
 80012fe:	408a      	lsls	r2, r1
 8001300:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <__aeabi_ddiv+0x390>)
 8001302:	4458      	add	r0, fp
 8001304:	469b      	mov	fp, r3
 8001306:	4483      	add	fp, r0
 8001308:	2000      	movs	r0, #0
 800130a:	e6d5      	b.n	80010b8 <__aeabi_ddiv+0x80>
 800130c:	464b      	mov	r3, r9
 800130e:	4323      	orrs	r3, r4
 8001310:	4698      	mov	r8, r3
 8001312:	d044      	beq.n	800139e <__aeabi_ddiv+0x366>
 8001314:	2c00      	cmp	r4, #0
 8001316:	d100      	bne.n	800131a <__aeabi_ddiv+0x2e2>
 8001318:	e0ce      	b.n	80014b8 <__aeabi_ddiv+0x480>
 800131a:	0020      	movs	r0, r4
 800131c:	f001 fa06 	bl	800272c <__clzsi2>
 8001320:	0001      	movs	r1, r0
 8001322:	0002      	movs	r2, r0
 8001324:	390b      	subs	r1, #11
 8001326:	231d      	movs	r3, #29
 8001328:	1a5b      	subs	r3, r3, r1
 800132a:	4649      	mov	r1, r9
 800132c:	0010      	movs	r0, r2
 800132e:	40d9      	lsrs	r1, r3
 8001330:	3808      	subs	r0, #8
 8001332:	4084      	lsls	r4, r0
 8001334:	000b      	movs	r3, r1
 8001336:	464d      	mov	r5, r9
 8001338:	4323      	orrs	r3, r4
 800133a:	4698      	mov	r8, r3
 800133c:	4085      	lsls	r5, r0
 800133e:	4823      	ldr	r0, [pc, #140]	; (80013cc <__aeabi_ddiv+0x394>)
 8001340:	1a83      	subs	r3, r0, r2
 8001342:	469b      	mov	fp, r3
 8001344:	2300      	movs	r3, #0
 8001346:	4699      	mov	r9, r3
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	e69a      	b.n	8001082 <__aeabi_ddiv+0x4a>
 800134c:	464b      	mov	r3, r9
 800134e:	4323      	orrs	r3, r4
 8001350:	4698      	mov	r8, r3
 8001352:	d11d      	bne.n	8001390 <__aeabi_ddiv+0x358>
 8001354:	2308      	movs	r3, #8
 8001356:	4699      	mov	r9, r3
 8001358:	3b06      	subs	r3, #6
 800135a:	2500      	movs	r5, #0
 800135c:	4683      	mov	fp, r0
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	e68f      	b.n	8001082 <__aeabi_ddiv+0x4a>
 8001362:	4652      	mov	r2, sl
 8001364:	4322      	orrs	r2, r4
 8001366:	d109      	bne.n	800137c <__aeabi_ddiv+0x344>
 8001368:	2302      	movs	r3, #2
 800136a:	4649      	mov	r1, r9
 800136c:	4319      	orrs	r1, r3
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <__aeabi_ddiv+0x398>)
 8001370:	4689      	mov	r9, r1
 8001372:	469c      	mov	ip, r3
 8001374:	2400      	movs	r4, #0
 8001376:	2002      	movs	r0, #2
 8001378:	44e3      	add	fp, ip
 800137a:	e69d      	b.n	80010b8 <__aeabi_ddiv+0x80>
 800137c:	2303      	movs	r3, #3
 800137e:	464a      	mov	r2, r9
 8001380:	431a      	orrs	r2, r3
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <__aeabi_ddiv+0x398>)
 8001384:	4691      	mov	r9, r2
 8001386:	469c      	mov	ip, r3
 8001388:	4652      	mov	r2, sl
 800138a:	2003      	movs	r0, #3
 800138c:	44e3      	add	fp, ip
 800138e:	e693      	b.n	80010b8 <__aeabi_ddiv+0x80>
 8001390:	230c      	movs	r3, #12
 8001392:	4699      	mov	r9, r3
 8001394:	3b09      	subs	r3, #9
 8001396:	46a0      	mov	r8, r4
 8001398:	4683      	mov	fp, r0
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	e671      	b.n	8001082 <__aeabi_ddiv+0x4a>
 800139e:	2304      	movs	r3, #4
 80013a0:	4699      	mov	r9, r3
 80013a2:	2300      	movs	r3, #0
 80013a4:	469b      	mov	fp, r3
 80013a6:	3301      	adds	r3, #1
 80013a8:	2500      	movs	r5, #0
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	e669      	b.n	8001082 <__aeabi_ddiv+0x4a>
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	000007ff 	.word	0x000007ff
 80013b4:	fffffc01 	.word	0xfffffc01
 80013b8:	0800957c 	.word	0x0800957c
 80013bc:	000003ff 	.word	0x000003ff
 80013c0:	feffffff 	.word	0xfeffffff
 80013c4:	000007fe 	.word	0x000007fe
 80013c8:	000003f3 	.word	0x000003f3
 80013cc:	fffffc0d 	.word	0xfffffc0d
 80013d0:	fffff801 	.word	0xfffff801
 80013d4:	4649      	mov	r1, r9
 80013d6:	2301      	movs	r3, #1
 80013d8:	4319      	orrs	r1, r3
 80013da:	4689      	mov	r9, r1
 80013dc:	2400      	movs	r4, #0
 80013de:	2001      	movs	r0, #1
 80013e0:	e66a      	b.n	80010b8 <__aeabi_ddiv+0x80>
 80013e2:	2300      	movs	r3, #0
 80013e4:	2480      	movs	r4, #128	; 0x80
 80013e6:	469a      	mov	sl, r3
 80013e8:	2500      	movs	r5, #0
 80013ea:	4b8a      	ldr	r3, [pc, #552]	; (8001614 <__aeabi_ddiv+0x5dc>)
 80013ec:	0324      	lsls	r4, r4, #12
 80013ee:	e67a      	b.n	80010e6 <__aeabi_ddiv+0xae>
 80013f0:	2501      	movs	r5, #1
 80013f2:	426d      	negs	r5, r5
 80013f4:	2301      	movs	r3, #1
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	2b38      	cmp	r3, #56	; 0x38
 80013fa:	dd00      	ble.n	80013fe <__aeabi_ddiv+0x3c6>
 80013fc:	e670      	b.n	80010e0 <__aeabi_ddiv+0xa8>
 80013fe:	2b1f      	cmp	r3, #31
 8001400:	dc00      	bgt.n	8001404 <__aeabi_ddiv+0x3cc>
 8001402:	e0bf      	b.n	8001584 <__aeabi_ddiv+0x54c>
 8001404:	211f      	movs	r1, #31
 8001406:	4249      	negs	r1, r1
 8001408:	1a8a      	subs	r2, r1, r2
 800140a:	4641      	mov	r1, r8
 800140c:	40d1      	lsrs	r1, r2
 800140e:	000a      	movs	r2, r1
 8001410:	2b20      	cmp	r3, #32
 8001412:	d004      	beq.n	800141e <__aeabi_ddiv+0x3e6>
 8001414:	4641      	mov	r1, r8
 8001416:	4b80      	ldr	r3, [pc, #512]	; (8001618 <__aeabi_ddiv+0x5e0>)
 8001418:	445b      	add	r3, fp
 800141a:	4099      	lsls	r1, r3
 800141c:	430d      	orrs	r5, r1
 800141e:	1e6b      	subs	r3, r5, #1
 8001420:	419d      	sbcs	r5, r3
 8001422:	2307      	movs	r3, #7
 8001424:	432a      	orrs	r2, r5
 8001426:	001d      	movs	r5, r3
 8001428:	2400      	movs	r4, #0
 800142a:	4015      	ands	r5, r2
 800142c:	4213      	tst	r3, r2
 800142e:	d100      	bne.n	8001432 <__aeabi_ddiv+0x3fa>
 8001430:	e0d4      	b.n	80015dc <__aeabi_ddiv+0x5a4>
 8001432:	210f      	movs	r1, #15
 8001434:	2300      	movs	r3, #0
 8001436:	4011      	ands	r1, r2
 8001438:	2904      	cmp	r1, #4
 800143a:	d100      	bne.n	800143e <__aeabi_ddiv+0x406>
 800143c:	e0cb      	b.n	80015d6 <__aeabi_ddiv+0x59e>
 800143e:	1d11      	adds	r1, r2, #4
 8001440:	4291      	cmp	r1, r2
 8001442:	4192      	sbcs	r2, r2
 8001444:	4252      	negs	r2, r2
 8001446:	189b      	adds	r3, r3, r2
 8001448:	000a      	movs	r2, r1
 800144a:	0219      	lsls	r1, r3, #8
 800144c:	d400      	bmi.n	8001450 <__aeabi_ddiv+0x418>
 800144e:	e0c2      	b.n	80015d6 <__aeabi_ddiv+0x59e>
 8001450:	2301      	movs	r3, #1
 8001452:	2400      	movs	r4, #0
 8001454:	2500      	movs	r5, #0
 8001456:	e646      	b.n	80010e6 <__aeabi_ddiv+0xae>
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	4641      	mov	r1, r8
 800145c:	031b      	lsls	r3, r3, #12
 800145e:	4219      	tst	r1, r3
 8001460:	d008      	beq.n	8001474 <__aeabi_ddiv+0x43c>
 8001462:	421c      	tst	r4, r3
 8001464:	d106      	bne.n	8001474 <__aeabi_ddiv+0x43c>
 8001466:	431c      	orrs	r4, r3
 8001468:	0324      	lsls	r4, r4, #12
 800146a:	46ba      	mov	sl, r7
 800146c:	0015      	movs	r5, r2
 800146e:	4b69      	ldr	r3, [pc, #420]	; (8001614 <__aeabi_ddiv+0x5dc>)
 8001470:	0b24      	lsrs	r4, r4, #12
 8001472:	e638      	b.n	80010e6 <__aeabi_ddiv+0xae>
 8001474:	2480      	movs	r4, #128	; 0x80
 8001476:	4643      	mov	r3, r8
 8001478:	0324      	lsls	r4, r4, #12
 800147a:	431c      	orrs	r4, r3
 800147c:	0324      	lsls	r4, r4, #12
 800147e:	46b2      	mov	sl, r6
 8001480:	4b64      	ldr	r3, [pc, #400]	; (8001614 <__aeabi_ddiv+0x5dc>)
 8001482:	0b24      	lsrs	r4, r4, #12
 8001484:	e62f      	b.n	80010e6 <__aeabi_ddiv+0xae>
 8001486:	2b00      	cmp	r3, #0
 8001488:	d100      	bne.n	800148c <__aeabi_ddiv+0x454>
 800148a:	e703      	b.n	8001294 <__aeabi_ddiv+0x25c>
 800148c:	19a6      	adds	r6, r4, r6
 800148e:	1e68      	subs	r0, r5, #1
 8001490:	42a6      	cmp	r6, r4
 8001492:	d200      	bcs.n	8001496 <__aeabi_ddiv+0x45e>
 8001494:	e08d      	b.n	80015b2 <__aeabi_ddiv+0x57a>
 8001496:	428e      	cmp	r6, r1
 8001498:	d200      	bcs.n	800149c <__aeabi_ddiv+0x464>
 800149a:	e0a3      	b.n	80015e4 <__aeabi_ddiv+0x5ac>
 800149c:	d100      	bne.n	80014a0 <__aeabi_ddiv+0x468>
 800149e:	e0b3      	b.n	8001608 <__aeabi_ddiv+0x5d0>
 80014a0:	0005      	movs	r5, r0
 80014a2:	e6f5      	b.n	8001290 <__aeabi_ddiv+0x258>
 80014a4:	42aa      	cmp	r2, r5
 80014a6:	d900      	bls.n	80014aa <__aeabi_ddiv+0x472>
 80014a8:	e639      	b.n	800111e <__aeabi_ddiv+0xe6>
 80014aa:	4643      	mov	r3, r8
 80014ac:	07de      	lsls	r6, r3, #31
 80014ae:	0858      	lsrs	r0, r3, #1
 80014b0:	086b      	lsrs	r3, r5, #1
 80014b2:	431e      	orrs	r6, r3
 80014b4:	07ed      	lsls	r5, r5, #31
 80014b6:	e639      	b.n	800112c <__aeabi_ddiv+0xf4>
 80014b8:	4648      	mov	r0, r9
 80014ba:	f001 f937 	bl	800272c <__clzsi2>
 80014be:	0001      	movs	r1, r0
 80014c0:	0002      	movs	r2, r0
 80014c2:	3115      	adds	r1, #21
 80014c4:	3220      	adds	r2, #32
 80014c6:	291c      	cmp	r1, #28
 80014c8:	dc00      	bgt.n	80014cc <__aeabi_ddiv+0x494>
 80014ca:	e72c      	b.n	8001326 <__aeabi_ddiv+0x2ee>
 80014cc:	464b      	mov	r3, r9
 80014ce:	3808      	subs	r0, #8
 80014d0:	4083      	lsls	r3, r0
 80014d2:	2500      	movs	r5, #0
 80014d4:	4698      	mov	r8, r3
 80014d6:	e732      	b.n	800133e <__aeabi_ddiv+0x306>
 80014d8:	f001 f928 	bl	800272c <__clzsi2>
 80014dc:	0003      	movs	r3, r0
 80014de:	001a      	movs	r2, r3
 80014e0:	3215      	adds	r2, #21
 80014e2:	3020      	adds	r0, #32
 80014e4:	2a1c      	cmp	r2, #28
 80014e6:	dc00      	bgt.n	80014ea <__aeabi_ddiv+0x4b2>
 80014e8:	e700      	b.n	80012ec <__aeabi_ddiv+0x2b4>
 80014ea:	4654      	mov	r4, sl
 80014ec:	3b08      	subs	r3, #8
 80014ee:	2200      	movs	r2, #0
 80014f0:	409c      	lsls	r4, r3
 80014f2:	e705      	b.n	8001300 <__aeabi_ddiv+0x2c8>
 80014f4:	1936      	adds	r6, r6, r4
 80014f6:	3b01      	subs	r3, #1
 80014f8:	42b4      	cmp	r4, r6
 80014fa:	d900      	bls.n	80014fe <__aeabi_ddiv+0x4c6>
 80014fc:	e6a6      	b.n	800124c <__aeabi_ddiv+0x214>
 80014fe:	42b2      	cmp	r2, r6
 8001500:	d800      	bhi.n	8001504 <__aeabi_ddiv+0x4cc>
 8001502:	e6a3      	b.n	800124c <__aeabi_ddiv+0x214>
 8001504:	1e83      	subs	r3, r0, #2
 8001506:	1936      	adds	r6, r6, r4
 8001508:	e6a0      	b.n	800124c <__aeabi_ddiv+0x214>
 800150a:	1909      	adds	r1, r1, r4
 800150c:	3d01      	subs	r5, #1
 800150e:	428c      	cmp	r4, r1
 8001510:	d900      	bls.n	8001514 <__aeabi_ddiv+0x4dc>
 8001512:	e68d      	b.n	8001230 <__aeabi_ddiv+0x1f8>
 8001514:	428a      	cmp	r2, r1
 8001516:	d800      	bhi.n	800151a <__aeabi_ddiv+0x4e2>
 8001518:	e68a      	b.n	8001230 <__aeabi_ddiv+0x1f8>
 800151a:	1e85      	subs	r5, r0, #2
 800151c:	1909      	adds	r1, r1, r4
 800151e:	e687      	b.n	8001230 <__aeabi_ddiv+0x1f8>
 8001520:	230f      	movs	r3, #15
 8001522:	402b      	ands	r3, r5
 8001524:	2b04      	cmp	r3, #4
 8001526:	d100      	bne.n	800152a <__aeabi_ddiv+0x4f2>
 8001528:	e6bc      	b.n	80012a4 <__aeabi_ddiv+0x26c>
 800152a:	2305      	movs	r3, #5
 800152c:	425b      	negs	r3, r3
 800152e:	42ab      	cmp	r3, r5
 8001530:	419b      	sbcs	r3, r3
 8001532:	3504      	adds	r5, #4
 8001534:	425b      	negs	r3, r3
 8001536:	08ed      	lsrs	r5, r5, #3
 8001538:	4498      	add	r8, r3
 800153a:	e6b4      	b.n	80012a6 <__aeabi_ddiv+0x26e>
 800153c:	42af      	cmp	r7, r5
 800153e:	d900      	bls.n	8001542 <__aeabi_ddiv+0x50a>
 8001540:	e660      	b.n	8001204 <__aeabi_ddiv+0x1cc>
 8001542:	4282      	cmp	r2, r0
 8001544:	d804      	bhi.n	8001550 <__aeabi_ddiv+0x518>
 8001546:	d000      	beq.n	800154a <__aeabi_ddiv+0x512>
 8001548:	e65c      	b.n	8001204 <__aeabi_ddiv+0x1cc>
 800154a:	42ae      	cmp	r6, r5
 800154c:	d800      	bhi.n	8001550 <__aeabi_ddiv+0x518>
 800154e:	e659      	b.n	8001204 <__aeabi_ddiv+0x1cc>
 8001550:	2302      	movs	r3, #2
 8001552:	425b      	negs	r3, r3
 8001554:	469c      	mov	ip, r3
 8001556:	9b00      	ldr	r3, [sp, #0]
 8001558:	44e0      	add	r8, ip
 800155a:	469c      	mov	ip, r3
 800155c:	4465      	add	r5, ip
 800155e:	429d      	cmp	r5, r3
 8001560:	419b      	sbcs	r3, r3
 8001562:	425b      	negs	r3, r3
 8001564:	191b      	adds	r3, r3, r4
 8001566:	18c0      	adds	r0, r0, r3
 8001568:	e64d      	b.n	8001206 <__aeabi_ddiv+0x1ce>
 800156a:	428a      	cmp	r2, r1
 800156c:	d800      	bhi.n	8001570 <__aeabi_ddiv+0x538>
 800156e:	e60e      	b.n	800118e <__aeabi_ddiv+0x156>
 8001570:	1e83      	subs	r3, r0, #2
 8001572:	1909      	adds	r1, r1, r4
 8001574:	e60b      	b.n	800118e <__aeabi_ddiv+0x156>
 8001576:	428a      	cmp	r2, r1
 8001578:	d800      	bhi.n	800157c <__aeabi_ddiv+0x544>
 800157a:	e5f4      	b.n	8001166 <__aeabi_ddiv+0x12e>
 800157c:	1e83      	subs	r3, r0, #2
 800157e:	4698      	mov	r8, r3
 8001580:	1909      	adds	r1, r1, r4
 8001582:	e5f0      	b.n	8001166 <__aeabi_ddiv+0x12e>
 8001584:	4925      	ldr	r1, [pc, #148]	; (800161c <__aeabi_ddiv+0x5e4>)
 8001586:	0028      	movs	r0, r5
 8001588:	4459      	add	r1, fp
 800158a:	408d      	lsls	r5, r1
 800158c:	4642      	mov	r2, r8
 800158e:	408a      	lsls	r2, r1
 8001590:	1e69      	subs	r1, r5, #1
 8001592:	418d      	sbcs	r5, r1
 8001594:	4641      	mov	r1, r8
 8001596:	40d8      	lsrs	r0, r3
 8001598:	40d9      	lsrs	r1, r3
 800159a:	4302      	orrs	r2, r0
 800159c:	432a      	orrs	r2, r5
 800159e:	000b      	movs	r3, r1
 80015a0:	0751      	lsls	r1, r2, #29
 80015a2:	d100      	bne.n	80015a6 <__aeabi_ddiv+0x56e>
 80015a4:	e751      	b.n	800144a <__aeabi_ddiv+0x412>
 80015a6:	210f      	movs	r1, #15
 80015a8:	4011      	ands	r1, r2
 80015aa:	2904      	cmp	r1, #4
 80015ac:	d000      	beq.n	80015b0 <__aeabi_ddiv+0x578>
 80015ae:	e746      	b.n	800143e <__aeabi_ddiv+0x406>
 80015b0:	e74b      	b.n	800144a <__aeabi_ddiv+0x412>
 80015b2:	0005      	movs	r5, r0
 80015b4:	428e      	cmp	r6, r1
 80015b6:	d000      	beq.n	80015ba <__aeabi_ddiv+0x582>
 80015b8:	e66a      	b.n	8001290 <__aeabi_ddiv+0x258>
 80015ba:	9a00      	ldr	r2, [sp, #0]
 80015bc:	4293      	cmp	r3, r2
 80015be:	d000      	beq.n	80015c2 <__aeabi_ddiv+0x58a>
 80015c0:	e666      	b.n	8001290 <__aeabi_ddiv+0x258>
 80015c2:	e667      	b.n	8001294 <__aeabi_ddiv+0x25c>
 80015c4:	4a16      	ldr	r2, [pc, #88]	; (8001620 <__aeabi_ddiv+0x5e8>)
 80015c6:	445a      	add	r2, fp
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	dc00      	bgt.n	80015ce <__aeabi_ddiv+0x596>
 80015cc:	e710      	b.n	80013f0 <__aeabi_ddiv+0x3b8>
 80015ce:	2301      	movs	r3, #1
 80015d0:	2500      	movs	r5, #0
 80015d2:	4498      	add	r8, r3
 80015d4:	e667      	b.n	80012a6 <__aeabi_ddiv+0x26e>
 80015d6:	075d      	lsls	r5, r3, #29
 80015d8:	025b      	lsls	r3, r3, #9
 80015da:	0b1c      	lsrs	r4, r3, #12
 80015dc:	08d2      	lsrs	r2, r2, #3
 80015de:	2300      	movs	r3, #0
 80015e0:	4315      	orrs	r5, r2
 80015e2:	e580      	b.n	80010e6 <__aeabi_ddiv+0xae>
 80015e4:	9800      	ldr	r0, [sp, #0]
 80015e6:	3d02      	subs	r5, #2
 80015e8:	0042      	lsls	r2, r0, #1
 80015ea:	4282      	cmp	r2, r0
 80015ec:	41bf      	sbcs	r7, r7
 80015ee:	427f      	negs	r7, r7
 80015f0:	193c      	adds	r4, r7, r4
 80015f2:	1936      	adds	r6, r6, r4
 80015f4:	9200      	str	r2, [sp, #0]
 80015f6:	e7dd      	b.n	80015b4 <__aeabi_ddiv+0x57c>
 80015f8:	2480      	movs	r4, #128	; 0x80
 80015fa:	4643      	mov	r3, r8
 80015fc:	0324      	lsls	r4, r4, #12
 80015fe:	431c      	orrs	r4, r3
 8001600:	0324      	lsls	r4, r4, #12
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__aeabi_ddiv+0x5dc>)
 8001604:	0b24      	lsrs	r4, r4, #12
 8001606:	e56e      	b.n	80010e6 <__aeabi_ddiv+0xae>
 8001608:	9a00      	ldr	r2, [sp, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d3ea      	bcc.n	80015e4 <__aeabi_ddiv+0x5ac>
 800160e:	0005      	movs	r5, r0
 8001610:	e7d3      	b.n	80015ba <__aeabi_ddiv+0x582>
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	000007ff 	.word	0x000007ff
 8001618:	0000043e 	.word	0x0000043e
 800161c:	0000041e 	.word	0x0000041e
 8001620:	000003ff 	.word	0x000003ff

08001624 <__eqdf2>:
 8001624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	46de      	mov	lr, fp
 800162c:	4657      	mov	r7, sl
 800162e:	4690      	mov	r8, r2
 8001630:	b5e0      	push	{r5, r6, r7, lr}
 8001632:	0017      	movs	r7, r2
 8001634:	031a      	lsls	r2, r3, #12
 8001636:	0b12      	lsrs	r2, r2, #12
 8001638:	0005      	movs	r5, r0
 800163a:	4684      	mov	ip, r0
 800163c:	4819      	ldr	r0, [pc, #100]	; (80016a4 <__eqdf2+0x80>)
 800163e:	030e      	lsls	r6, r1, #12
 8001640:	004c      	lsls	r4, r1, #1
 8001642:	4691      	mov	r9, r2
 8001644:	005a      	lsls	r2, r3, #1
 8001646:	0fdb      	lsrs	r3, r3, #31
 8001648:	469b      	mov	fp, r3
 800164a:	0b36      	lsrs	r6, r6, #12
 800164c:	0d64      	lsrs	r4, r4, #21
 800164e:	0fc9      	lsrs	r1, r1, #31
 8001650:	0d52      	lsrs	r2, r2, #21
 8001652:	4284      	cmp	r4, r0
 8001654:	d019      	beq.n	800168a <__eqdf2+0x66>
 8001656:	4282      	cmp	r2, r0
 8001658:	d010      	beq.n	800167c <__eqdf2+0x58>
 800165a:	2001      	movs	r0, #1
 800165c:	4294      	cmp	r4, r2
 800165e:	d10e      	bne.n	800167e <__eqdf2+0x5a>
 8001660:	454e      	cmp	r6, r9
 8001662:	d10c      	bne.n	800167e <__eqdf2+0x5a>
 8001664:	2001      	movs	r0, #1
 8001666:	45c4      	cmp	ip, r8
 8001668:	d109      	bne.n	800167e <__eqdf2+0x5a>
 800166a:	4559      	cmp	r1, fp
 800166c:	d017      	beq.n	800169e <__eqdf2+0x7a>
 800166e:	2c00      	cmp	r4, #0
 8001670:	d105      	bne.n	800167e <__eqdf2+0x5a>
 8001672:	0030      	movs	r0, r6
 8001674:	4328      	orrs	r0, r5
 8001676:	1e43      	subs	r3, r0, #1
 8001678:	4198      	sbcs	r0, r3
 800167a:	e000      	b.n	800167e <__eqdf2+0x5a>
 800167c:	2001      	movs	r0, #1
 800167e:	bcf0      	pop	{r4, r5, r6, r7}
 8001680:	46bb      	mov	fp, r7
 8001682:	46b2      	mov	sl, r6
 8001684:	46a9      	mov	r9, r5
 8001686:	46a0      	mov	r8, r4
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168a:	0033      	movs	r3, r6
 800168c:	2001      	movs	r0, #1
 800168e:	432b      	orrs	r3, r5
 8001690:	d1f5      	bne.n	800167e <__eqdf2+0x5a>
 8001692:	42a2      	cmp	r2, r4
 8001694:	d1f3      	bne.n	800167e <__eqdf2+0x5a>
 8001696:	464b      	mov	r3, r9
 8001698:	433b      	orrs	r3, r7
 800169a:	d1f0      	bne.n	800167e <__eqdf2+0x5a>
 800169c:	e7e2      	b.n	8001664 <__eqdf2+0x40>
 800169e:	2000      	movs	r0, #0
 80016a0:	e7ed      	b.n	800167e <__eqdf2+0x5a>
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	000007ff 	.word	0x000007ff

080016a8 <__gedf2>:
 80016a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016aa:	4647      	mov	r7, r8
 80016ac:	46ce      	mov	lr, r9
 80016ae:	0004      	movs	r4, r0
 80016b0:	0018      	movs	r0, r3
 80016b2:	0016      	movs	r6, r2
 80016b4:	031b      	lsls	r3, r3, #12
 80016b6:	0b1b      	lsrs	r3, r3, #12
 80016b8:	4d2d      	ldr	r5, [pc, #180]	; (8001770 <__gedf2+0xc8>)
 80016ba:	004a      	lsls	r2, r1, #1
 80016bc:	4699      	mov	r9, r3
 80016be:	b580      	push	{r7, lr}
 80016c0:	0043      	lsls	r3, r0, #1
 80016c2:	030f      	lsls	r7, r1, #12
 80016c4:	46a4      	mov	ip, r4
 80016c6:	46b0      	mov	r8, r6
 80016c8:	0b3f      	lsrs	r7, r7, #12
 80016ca:	0d52      	lsrs	r2, r2, #21
 80016cc:	0fc9      	lsrs	r1, r1, #31
 80016ce:	0d5b      	lsrs	r3, r3, #21
 80016d0:	0fc0      	lsrs	r0, r0, #31
 80016d2:	42aa      	cmp	r2, r5
 80016d4:	d021      	beq.n	800171a <__gedf2+0x72>
 80016d6:	42ab      	cmp	r3, r5
 80016d8:	d013      	beq.n	8001702 <__gedf2+0x5a>
 80016da:	2a00      	cmp	r2, #0
 80016dc:	d122      	bne.n	8001724 <__gedf2+0x7c>
 80016de:	433c      	orrs	r4, r7
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <__gedf2+0x42>
 80016e4:	464d      	mov	r5, r9
 80016e6:	432e      	orrs	r6, r5
 80016e8:	d022      	beq.n	8001730 <__gedf2+0x88>
 80016ea:	2c00      	cmp	r4, #0
 80016ec:	d010      	beq.n	8001710 <__gedf2+0x68>
 80016ee:	4281      	cmp	r1, r0
 80016f0:	d022      	beq.n	8001738 <__gedf2+0x90>
 80016f2:	2002      	movs	r0, #2
 80016f4:	3901      	subs	r1, #1
 80016f6:	4008      	ands	r0, r1
 80016f8:	3801      	subs	r0, #1
 80016fa:	bcc0      	pop	{r6, r7}
 80016fc:	46b9      	mov	r9, r7
 80016fe:	46b0      	mov	r8, r6
 8001700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001702:	464d      	mov	r5, r9
 8001704:	432e      	orrs	r6, r5
 8001706:	d129      	bne.n	800175c <__gedf2+0xb4>
 8001708:	2a00      	cmp	r2, #0
 800170a:	d1f0      	bne.n	80016ee <__gedf2+0x46>
 800170c:	433c      	orrs	r4, r7
 800170e:	d1ee      	bne.n	80016ee <__gedf2+0x46>
 8001710:	2800      	cmp	r0, #0
 8001712:	d1f2      	bne.n	80016fa <__gedf2+0x52>
 8001714:	2001      	movs	r0, #1
 8001716:	4240      	negs	r0, r0
 8001718:	e7ef      	b.n	80016fa <__gedf2+0x52>
 800171a:	003d      	movs	r5, r7
 800171c:	4325      	orrs	r5, r4
 800171e:	d11d      	bne.n	800175c <__gedf2+0xb4>
 8001720:	4293      	cmp	r3, r2
 8001722:	d0ee      	beq.n	8001702 <__gedf2+0x5a>
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e2      	bne.n	80016ee <__gedf2+0x46>
 8001728:	464c      	mov	r4, r9
 800172a:	4326      	orrs	r6, r4
 800172c:	d1df      	bne.n	80016ee <__gedf2+0x46>
 800172e:	e7e0      	b.n	80016f2 <__gedf2+0x4a>
 8001730:	2000      	movs	r0, #0
 8001732:	2c00      	cmp	r4, #0
 8001734:	d0e1      	beq.n	80016fa <__gedf2+0x52>
 8001736:	e7dc      	b.n	80016f2 <__gedf2+0x4a>
 8001738:	429a      	cmp	r2, r3
 800173a:	dc0a      	bgt.n	8001752 <__gedf2+0xaa>
 800173c:	dbe8      	blt.n	8001710 <__gedf2+0x68>
 800173e:	454f      	cmp	r7, r9
 8001740:	d8d7      	bhi.n	80016f2 <__gedf2+0x4a>
 8001742:	d00e      	beq.n	8001762 <__gedf2+0xba>
 8001744:	2000      	movs	r0, #0
 8001746:	454f      	cmp	r7, r9
 8001748:	d2d7      	bcs.n	80016fa <__gedf2+0x52>
 800174a:	2900      	cmp	r1, #0
 800174c:	d0e2      	beq.n	8001714 <__gedf2+0x6c>
 800174e:	0008      	movs	r0, r1
 8001750:	e7d3      	b.n	80016fa <__gedf2+0x52>
 8001752:	4243      	negs	r3, r0
 8001754:	4158      	adcs	r0, r3
 8001756:	0040      	lsls	r0, r0, #1
 8001758:	3801      	subs	r0, #1
 800175a:	e7ce      	b.n	80016fa <__gedf2+0x52>
 800175c:	2002      	movs	r0, #2
 800175e:	4240      	negs	r0, r0
 8001760:	e7cb      	b.n	80016fa <__gedf2+0x52>
 8001762:	45c4      	cmp	ip, r8
 8001764:	d8c5      	bhi.n	80016f2 <__gedf2+0x4a>
 8001766:	2000      	movs	r0, #0
 8001768:	45c4      	cmp	ip, r8
 800176a:	d2c6      	bcs.n	80016fa <__gedf2+0x52>
 800176c:	e7ed      	b.n	800174a <__gedf2+0xa2>
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	000007ff 	.word	0x000007ff

08001774 <__ledf2>:
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	4647      	mov	r7, r8
 8001778:	46ce      	mov	lr, r9
 800177a:	0004      	movs	r4, r0
 800177c:	0018      	movs	r0, r3
 800177e:	0016      	movs	r6, r2
 8001780:	031b      	lsls	r3, r3, #12
 8001782:	0b1b      	lsrs	r3, r3, #12
 8001784:	4d2c      	ldr	r5, [pc, #176]	; (8001838 <__ledf2+0xc4>)
 8001786:	004a      	lsls	r2, r1, #1
 8001788:	4699      	mov	r9, r3
 800178a:	b580      	push	{r7, lr}
 800178c:	0043      	lsls	r3, r0, #1
 800178e:	030f      	lsls	r7, r1, #12
 8001790:	46a4      	mov	ip, r4
 8001792:	46b0      	mov	r8, r6
 8001794:	0b3f      	lsrs	r7, r7, #12
 8001796:	0d52      	lsrs	r2, r2, #21
 8001798:	0fc9      	lsrs	r1, r1, #31
 800179a:	0d5b      	lsrs	r3, r3, #21
 800179c:	0fc0      	lsrs	r0, r0, #31
 800179e:	42aa      	cmp	r2, r5
 80017a0:	d00d      	beq.n	80017be <__ledf2+0x4a>
 80017a2:	42ab      	cmp	r3, r5
 80017a4:	d010      	beq.n	80017c8 <__ledf2+0x54>
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	d127      	bne.n	80017fa <__ledf2+0x86>
 80017aa:	433c      	orrs	r4, r7
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d111      	bne.n	80017d4 <__ledf2+0x60>
 80017b0:	464d      	mov	r5, r9
 80017b2:	432e      	orrs	r6, r5
 80017b4:	d10e      	bne.n	80017d4 <__ledf2+0x60>
 80017b6:	2000      	movs	r0, #0
 80017b8:	2c00      	cmp	r4, #0
 80017ba:	d015      	beq.n	80017e8 <__ledf2+0x74>
 80017bc:	e00e      	b.n	80017dc <__ledf2+0x68>
 80017be:	003d      	movs	r5, r7
 80017c0:	4325      	orrs	r5, r4
 80017c2:	d110      	bne.n	80017e6 <__ledf2+0x72>
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d118      	bne.n	80017fa <__ledf2+0x86>
 80017c8:	464d      	mov	r5, r9
 80017ca:	432e      	orrs	r6, r5
 80017cc:	d10b      	bne.n	80017e6 <__ledf2+0x72>
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	d102      	bne.n	80017d8 <__ledf2+0x64>
 80017d2:	433c      	orrs	r4, r7
 80017d4:	2c00      	cmp	r4, #0
 80017d6:	d00b      	beq.n	80017f0 <__ledf2+0x7c>
 80017d8:	4281      	cmp	r1, r0
 80017da:	d014      	beq.n	8001806 <__ledf2+0x92>
 80017dc:	2002      	movs	r0, #2
 80017de:	3901      	subs	r1, #1
 80017e0:	4008      	ands	r0, r1
 80017e2:	3801      	subs	r0, #1
 80017e4:	e000      	b.n	80017e8 <__ledf2+0x74>
 80017e6:	2002      	movs	r0, #2
 80017e8:	bcc0      	pop	{r6, r7}
 80017ea:	46b9      	mov	r9, r7
 80017ec:	46b0      	mov	r8, r6
 80017ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d1f9      	bne.n	80017e8 <__ledf2+0x74>
 80017f4:	2001      	movs	r0, #1
 80017f6:	4240      	negs	r0, r0
 80017f8:	e7f6      	b.n	80017e8 <__ledf2+0x74>
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1ec      	bne.n	80017d8 <__ledf2+0x64>
 80017fe:	464c      	mov	r4, r9
 8001800:	4326      	orrs	r6, r4
 8001802:	d1e9      	bne.n	80017d8 <__ledf2+0x64>
 8001804:	e7ea      	b.n	80017dc <__ledf2+0x68>
 8001806:	429a      	cmp	r2, r3
 8001808:	dd04      	ble.n	8001814 <__ledf2+0xa0>
 800180a:	4243      	negs	r3, r0
 800180c:	4158      	adcs	r0, r3
 800180e:	0040      	lsls	r0, r0, #1
 8001810:	3801      	subs	r0, #1
 8001812:	e7e9      	b.n	80017e8 <__ledf2+0x74>
 8001814:	429a      	cmp	r2, r3
 8001816:	dbeb      	blt.n	80017f0 <__ledf2+0x7c>
 8001818:	454f      	cmp	r7, r9
 800181a:	d8df      	bhi.n	80017dc <__ledf2+0x68>
 800181c:	d006      	beq.n	800182c <__ledf2+0xb8>
 800181e:	2000      	movs	r0, #0
 8001820:	454f      	cmp	r7, r9
 8001822:	d2e1      	bcs.n	80017e8 <__ledf2+0x74>
 8001824:	2900      	cmp	r1, #0
 8001826:	d0e5      	beq.n	80017f4 <__ledf2+0x80>
 8001828:	0008      	movs	r0, r1
 800182a:	e7dd      	b.n	80017e8 <__ledf2+0x74>
 800182c:	45c4      	cmp	ip, r8
 800182e:	d8d5      	bhi.n	80017dc <__ledf2+0x68>
 8001830:	2000      	movs	r0, #0
 8001832:	45c4      	cmp	ip, r8
 8001834:	d2d8      	bcs.n	80017e8 <__ledf2+0x74>
 8001836:	e7f5      	b.n	8001824 <__ledf2+0xb0>
 8001838:	000007ff 	.word	0x000007ff

0800183c <__aeabi_dmul>:
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	4657      	mov	r7, sl
 8001840:	464e      	mov	r6, r9
 8001842:	4645      	mov	r5, r8
 8001844:	46de      	mov	lr, fp
 8001846:	b5e0      	push	{r5, r6, r7, lr}
 8001848:	4698      	mov	r8, r3
 800184a:	030c      	lsls	r4, r1, #12
 800184c:	004b      	lsls	r3, r1, #1
 800184e:	0006      	movs	r6, r0
 8001850:	4692      	mov	sl, r2
 8001852:	b087      	sub	sp, #28
 8001854:	0b24      	lsrs	r4, r4, #12
 8001856:	0d5b      	lsrs	r3, r3, #21
 8001858:	0fcf      	lsrs	r7, r1, #31
 800185a:	2b00      	cmp	r3, #0
 800185c:	d100      	bne.n	8001860 <__aeabi_dmul+0x24>
 800185e:	e15c      	b.n	8001b1a <__aeabi_dmul+0x2de>
 8001860:	4ad9      	ldr	r2, [pc, #868]	; (8001bc8 <__aeabi_dmul+0x38c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d100      	bne.n	8001868 <__aeabi_dmul+0x2c>
 8001866:	e175      	b.n	8001b54 <__aeabi_dmul+0x318>
 8001868:	0f42      	lsrs	r2, r0, #29
 800186a:	00e4      	lsls	r4, r4, #3
 800186c:	4314      	orrs	r4, r2
 800186e:	2280      	movs	r2, #128	; 0x80
 8001870:	0412      	lsls	r2, r2, #16
 8001872:	4314      	orrs	r4, r2
 8001874:	4ad5      	ldr	r2, [pc, #852]	; (8001bcc <__aeabi_dmul+0x390>)
 8001876:	00c5      	lsls	r5, r0, #3
 8001878:	4694      	mov	ip, r2
 800187a:	4463      	add	r3, ip
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	4699      	mov	r9, r3
 8001882:	469b      	mov	fp, r3
 8001884:	4643      	mov	r3, r8
 8001886:	4642      	mov	r2, r8
 8001888:	031e      	lsls	r6, r3, #12
 800188a:	0fd2      	lsrs	r2, r2, #31
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4650      	mov	r0, sl
 8001890:	4690      	mov	r8, r2
 8001892:	0b36      	lsrs	r6, r6, #12
 8001894:	0d5b      	lsrs	r3, r3, #21
 8001896:	d100      	bne.n	800189a <__aeabi_dmul+0x5e>
 8001898:	e120      	b.n	8001adc <__aeabi_dmul+0x2a0>
 800189a:	4acb      	ldr	r2, [pc, #812]	; (8001bc8 <__aeabi_dmul+0x38c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d100      	bne.n	80018a2 <__aeabi_dmul+0x66>
 80018a0:	e162      	b.n	8001b68 <__aeabi_dmul+0x32c>
 80018a2:	49ca      	ldr	r1, [pc, #808]	; (8001bcc <__aeabi_dmul+0x390>)
 80018a4:	0f42      	lsrs	r2, r0, #29
 80018a6:	468c      	mov	ip, r1
 80018a8:	9900      	ldr	r1, [sp, #0]
 80018aa:	4463      	add	r3, ip
 80018ac:	00f6      	lsls	r6, r6, #3
 80018ae:	468c      	mov	ip, r1
 80018b0:	4316      	orrs	r6, r2
 80018b2:	2280      	movs	r2, #128	; 0x80
 80018b4:	449c      	add	ip, r3
 80018b6:	0412      	lsls	r2, r2, #16
 80018b8:	4663      	mov	r3, ip
 80018ba:	4316      	orrs	r6, r2
 80018bc:	00c2      	lsls	r2, r0, #3
 80018be:	2000      	movs	r0, #0
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	9900      	ldr	r1, [sp, #0]
 80018c4:	4643      	mov	r3, r8
 80018c6:	3101      	adds	r1, #1
 80018c8:	468c      	mov	ip, r1
 80018ca:	4649      	mov	r1, r9
 80018cc:	407b      	eors	r3, r7
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	290f      	cmp	r1, #15
 80018d2:	d826      	bhi.n	8001922 <__aeabi_dmul+0xe6>
 80018d4:	4bbe      	ldr	r3, [pc, #760]	; (8001bd0 <__aeabi_dmul+0x394>)
 80018d6:	0089      	lsls	r1, r1, #2
 80018d8:	5859      	ldr	r1, [r3, r1]
 80018da:	468f      	mov	pc, r1
 80018dc:	4643      	mov	r3, r8
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	0034      	movs	r4, r6
 80018e2:	0015      	movs	r5, r2
 80018e4:	4683      	mov	fp, r0
 80018e6:	465b      	mov	r3, fp
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d016      	beq.n	800191a <__aeabi_dmul+0xde>
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dmul+0xb6>
 80018f0:	e203      	b.n	8001cfa <__aeabi_dmul+0x4be>
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d000      	beq.n	80018f8 <__aeabi_dmul+0xbc>
 80018f6:	e0cd      	b.n	8001a94 <__aeabi_dmul+0x258>
 80018f8:	2200      	movs	r2, #0
 80018fa:	2400      	movs	r4, #0
 80018fc:	2500      	movs	r5, #0
 80018fe:	9b01      	ldr	r3, [sp, #4]
 8001900:	0512      	lsls	r2, r2, #20
 8001902:	4322      	orrs	r2, r4
 8001904:	07db      	lsls	r3, r3, #31
 8001906:	431a      	orrs	r2, r3
 8001908:	0028      	movs	r0, r5
 800190a:	0011      	movs	r1, r2
 800190c:	b007      	add	sp, #28
 800190e:	bcf0      	pop	{r4, r5, r6, r7}
 8001910:	46bb      	mov	fp, r7
 8001912:	46b2      	mov	sl, r6
 8001914:	46a9      	mov	r9, r5
 8001916:	46a0      	mov	r8, r4
 8001918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800191a:	2400      	movs	r4, #0
 800191c:	2500      	movs	r5, #0
 800191e:	4aaa      	ldr	r2, [pc, #680]	; (8001bc8 <__aeabi_dmul+0x38c>)
 8001920:	e7ed      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001922:	0c28      	lsrs	r0, r5, #16
 8001924:	042d      	lsls	r5, r5, #16
 8001926:	0c2d      	lsrs	r5, r5, #16
 8001928:	002b      	movs	r3, r5
 800192a:	0c11      	lsrs	r1, r2, #16
 800192c:	0412      	lsls	r2, r2, #16
 800192e:	0c12      	lsrs	r2, r2, #16
 8001930:	4353      	muls	r3, r2
 8001932:	4698      	mov	r8, r3
 8001934:	0013      	movs	r3, r2
 8001936:	002f      	movs	r7, r5
 8001938:	4343      	muls	r3, r0
 800193a:	4699      	mov	r9, r3
 800193c:	434f      	muls	r7, r1
 800193e:	444f      	add	r7, r9
 8001940:	46bb      	mov	fp, r7
 8001942:	4647      	mov	r7, r8
 8001944:	000b      	movs	r3, r1
 8001946:	0c3f      	lsrs	r7, r7, #16
 8001948:	46ba      	mov	sl, r7
 800194a:	4343      	muls	r3, r0
 800194c:	44da      	add	sl, fp
 800194e:	9302      	str	r3, [sp, #8]
 8001950:	45d1      	cmp	r9, sl
 8001952:	d904      	bls.n	800195e <__aeabi_dmul+0x122>
 8001954:	2780      	movs	r7, #128	; 0x80
 8001956:	027f      	lsls	r7, r7, #9
 8001958:	46b9      	mov	r9, r7
 800195a:	444b      	add	r3, r9
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	4653      	mov	r3, sl
 8001960:	0c1b      	lsrs	r3, r3, #16
 8001962:	469b      	mov	fp, r3
 8001964:	4653      	mov	r3, sl
 8001966:	041f      	lsls	r7, r3, #16
 8001968:	4643      	mov	r3, r8
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	0c1b      	lsrs	r3, r3, #16
 800196e:	4698      	mov	r8, r3
 8001970:	003b      	movs	r3, r7
 8001972:	4443      	add	r3, r8
 8001974:	9304      	str	r3, [sp, #16]
 8001976:	0c33      	lsrs	r3, r6, #16
 8001978:	0436      	lsls	r6, r6, #16
 800197a:	0c36      	lsrs	r6, r6, #16
 800197c:	4698      	mov	r8, r3
 800197e:	0033      	movs	r3, r6
 8001980:	4343      	muls	r3, r0
 8001982:	4699      	mov	r9, r3
 8001984:	4643      	mov	r3, r8
 8001986:	4343      	muls	r3, r0
 8001988:	002f      	movs	r7, r5
 800198a:	469a      	mov	sl, r3
 800198c:	4643      	mov	r3, r8
 800198e:	4377      	muls	r7, r6
 8001990:	435d      	muls	r5, r3
 8001992:	0c38      	lsrs	r0, r7, #16
 8001994:	444d      	add	r5, r9
 8001996:	1945      	adds	r5, r0, r5
 8001998:	45a9      	cmp	r9, r5
 800199a:	d903      	bls.n	80019a4 <__aeabi_dmul+0x168>
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	025b      	lsls	r3, r3, #9
 80019a0:	4699      	mov	r9, r3
 80019a2:	44ca      	add	sl, r9
 80019a4:	043f      	lsls	r7, r7, #16
 80019a6:	0c28      	lsrs	r0, r5, #16
 80019a8:	0c3f      	lsrs	r7, r7, #16
 80019aa:	042d      	lsls	r5, r5, #16
 80019ac:	19ed      	adds	r5, r5, r7
 80019ae:	0c27      	lsrs	r7, r4, #16
 80019b0:	0424      	lsls	r4, r4, #16
 80019b2:	0c24      	lsrs	r4, r4, #16
 80019b4:	0003      	movs	r3, r0
 80019b6:	0020      	movs	r0, r4
 80019b8:	4350      	muls	r0, r2
 80019ba:	437a      	muls	r2, r7
 80019bc:	4691      	mov	r9, r2
 80019be:	003a      	movs	r2, r7
 80019c0:	4453      	add	r3, sl
 80019c2:	9305      	str	r3, [sp, #20]
 80019c4:	0c03      	lsrs	r3, r0, #16
 80019c6:	469a      	mov	sl, r3
 80019c8:	434a      	muls	r2, r1
 80019ca:	4361      	muls	r1, r4
 80019cc:	4449      	add	r1, r9
 80019ce:	4451      	add	r1, sl
 80019d0:	44ab      	add	fp, r5
 80019d2:	4589      	cmp	r9, r1
 80019d4:	d903      	bls.n	80019de <__aeabi_dmul+0x1a2>
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	4699      	mov	r9, r3
 80019dc:	444a      	add	r2, r9
 80019de:	0400      	lsls	r0, r0, #16
 80019e0:	0c0b      	lsrs	r3, r1, #16
 80019e2:	0c00      	lsrs	r0, r0, #16
 80019e4:	0409      	lsls	r1, r1, #16
 80019e6:	1809      	adds	r1, r1, r0
 80019e8:	0020      	movs	r0, r4
 80019ea:	4699      	mov	r9, r3
 80019ec:	4643      	mov	r3, r8
 80019ee:	4370      	muls	r0, r6
 80019f0:	435c      	muls	r4, r3
 80019f2:	437e      	muls	r6, r7
 80019f4:	435f      	muls	r7, r3
 80019f6:	0c03      	lsrs	r3, r0, #16
 80019f8:	4698      	mov	r8, r3
 80019fa:	19a4      	adds	r4, r4, r6
 80019fc:	4444      	add	r4, r8
 80019fe:	444a      	add	r2, r9
 8001a00:	9703      	str	r7, [sp, #12]
 8001a02:	42a6      	cmp	r6, r4
 8001a04:	d904      	bls.n	8001a10 <__aeabi_dmul+0x1d4>
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	025b      	lsls	r3, r3, #9
 8001a0a:	4698      	mov	r8, r3
 8001a0c:	4447      	add	r7, r8
 8001a0e:	9703      	str	r7, [sp, #12]
 8001a10:	0423      	lsls	r3, r4, #16
 8001a12:	9e02      	ldr	r6, [sp, #8]
 8001a14:	469a      	mov	sl, r3
 8001a16:	9b05      	ldr	r3, [sp, #20]
 8001a18:	445e      	add	r6, fp
 8001a1a:	4698      	mov	r8, r3
 8001a1c:	42ae      	cmp	r6, r5
 8001a1e:	41ad      	sbcs	r5, r5
 8001a20:	1876      	adds	r6, r6, r1
 8001a22:	428e      	cmp	r6, r1
 8001a24:	4189      	sbcs	r1, r1
 8001a26:	0400      	lsls	r0, r0, #16
 8001a28:	0c00      	lsrs	r0, r0, #16
 8001a2a:	4450      	add	r0, sl
 8001a2c:	4440      	add	r0, r8
 8001a2e:	426d      	negs	r5, r5
 8001a30:	1947      	adds	r7, r0, r5
 8001a32:	46b8      	mov	r8, r7
 8001a34:	4693      	mov	fp, r2
 8001a36:	4249      	negs	r1, r1
 8001a38:	4689      	mov	r9, r1
 8001a3a:	44c3      	add	fp, r8
 8001a3c:	44d9      	add	r9, fp
 8001a3e:	4298      	cmp	r0, r3
 8001a40:	4180      	sbcs	r0, r0
 8001a42:	45a8      	cmp	r8, r5
 8001a44:	41ad      	sbcs	r5, r5
 8001a46:	4593      	cmp	fp, r2
 8001a48:	4192      	sbcs	r2, r2
 8001a4a:	4589      	cmp	r9, r1
 8001a4c:	4189      	sbcs	r1, r1
 8001a4e:	426d      	negs	r5, r5
 8001a50:	4240      	negs	r0, r0
 8001a52:	4328      	orrs	r0, r5
 8001a54:	0c24      	lsrs	r4, r4, #16
 8001a56:	4252      	negs	r2, r2
 8001a58:	4249      	negs	r1, r1
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	9b03      	ldr	r3, [sp, #12]
 8001a5e:	1900      	adds	r0, r0, r4
 8001a60:	1880      	adds	r0, r0, r2
 8001a62:	18c7      	adds	r7, r0, r3
 8001a64:	464b      	mov	r3, r9
 8001a66:	0ddc      	lsrs	r4, r3, #23
 8001a68:	9b04      	ldr	r3, [sp, #16]
 8001a6a:	0275      	lsls	r5, r6, #9
 8001a6c:	431d      	orrs	r5, r3
 8001a6e:	1e6a      	subs	r2, r5, #1
 8001a70:	4195      	sbcs	r5, r2
 8001a72:	464b      	mov	r3, r9
 8001a74:	0df6      	lsrs	r6, r6, #23
 8001a76:	027f      	lsls	r7, r7, #9
 8001a78:	4335      	orrs	r5, r6
 8001a7a:	025a      	lsls	r2, r3, #9
 8001a7c:	433c      	orrs	r4, r7
 8001a7e:	4315      	orrs	r5, r2
 8001a80:	01fb      	lsls	r3, r7, #7
 8001a82:	d400      	bmi.n	8001a86 <__aeabi_dmul+0x24a>
 8001a84:	e11c      	b.n	8001cc0 <__aeabi_dmul+0x484>
 8001a86:	2101      	movs	r1, #1
 8001a88:	086a      	lsrs	r2, r5, #1
 8001a8a:	400d      	ands	r5, r1
 8001a8c:	4315      	orrs	r5, r2
 8001a8e:	07e2      	lsls	r2, r4, #31
 8001a90:	4315      	orrs	r5, r2
 8001a92:	0864      	lsrs	r4, r4, #1
 8001a94:	494f      	ldr	r1, [pc, #316]	; (8001bd4 <__aeabi_dmul+0x398>)
 8001a96:	4461      	add	r1, ip
 8001a98:	2900      	cmp	r1, #0
 8001a9a:	dc00      	bgt.n	8001a9e <__aeabi_dmul+0x262>
 8001a9c:	e0b0      	b.n	8001c00 <__aeabi_dmul+0x3c4>
 8001a9e:	076b      	lsls	r3, r5, #29
 8001aa0:	d009      	beq.n	8001ab6 <__aeabi_dmul+0x27a>
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	402a      	ands	r2, r5
 8001aa6:	2a04      	cmp	r2, #4
 8001aa8:	d005      	beq.n	8001ab6 <__aeabi_dmul+0x27a>
 8001aaa:	1d2a      	adds	r2, r5, #4
 8001aac:	42aa      	cmp	r2, r5
 8001aae:	41ad      	sbcs	r5, r5
 8001ab0:	426d      	negs	r5, r5
 8001ab2:	1964      	adds	r4, r4, r5
 8001ab4:	0015      	movs	r5, r2
 8001ab6:	01e3      	lsls	r3, r4, #7
 8001ab8:	d504      	bpl.n	8001ac4 <__aeabi_dmul+0x288>
 8001aba:	2180      	movs	r1, #128	; 0x80
 8001abc:	4a46      	ldr	r2, [pc, #280]	; (8001bd8 <__aeabi_dmul+0x39c>)
 8001abe:	00c9      	lsls	r1, r1, #3
 8001ac0:	4014      	ands	r4, r2
 8001ac2:	4461      	add	r1, ip
 8001ac4:	4a45      	ldr	r2, [pc, #276]	; (8001bdc <__aeabi_dmul+0x3a0>)
 8001ac6:	4291      	cmp	r1, r2
 8001ac8:	dd00      	ble.n	8001acc <__aeabi_dmul+0x290>
 8001aca:	e726      	b.n	800191a <__aeabi_dmul+0xde>
 8001acc:	0762      	lsls	r2, r4, #29
 8001ace:	08ed      	lsrs	r5, r5, #3
 8001ad0:	0264      	lsls	r4, r4, #9
 8001ad2:	0549      	lsls	r1, r1, #21
 8001ad4:	4315      	orrs	r5, r2
 8001ad6:	0b24      	lsrs	r4, r4, #12
 8001ad8:	0d4a      	lsrs	r2, r1, #21
 8001ada:	e710      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001adc:	4652      	mov	r2, sl
 8001ade:	4332      	orrs	r2, r6
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_dmul+0x2a8>
 8001ae2:	e07f      	b.n	8001be4 <__aeabi_dmul+0x3a8>
 8001ae4:	2e00      	cmp	r6, #0
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dmul+0x2ae>
 8001ae8:	e0dc      	b.n	8001ca4 <__aeabi_dmul+0x468>
 8001aea:	0030      	movs	r0, r6
 8001aec:	f000 fe1e 	bl	800272c <__clzsi2>
 8001af0:	0002      	movs	r2, r0
 8001af2:	3a0b      	subs	r2, #11
 8001af4:	231d      	movs	r3, #29
 8001af6:	0001      	movs	r1, r0
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	4652      	mov	r2, sl
 8001afc:	3908      	subs	r1, #8
 8001afe:	40da      	lsrs	r2, r3
 8001b00:	408e      	lsls	r6, r1
 8001b02:	4316      	orrs	r6, r2
 8001b04:	4652      	mov	r2, sl
 8001b06:	408a      	lsls	r2, r1
 8001b08:	9b00      	ldr	r3, [sp, #0]
 8001b0a:	4935      	ldr	r1, [pc, #212]	; (8001be0 <__aeabi_dmul+0x3a4>)
 8001b0c:	1a18      	subs	r0, r3, r0
 8001b0e:	0003      	movs	r3, r0
 8001b10:	468c      	mov	ip, r1
 8001b12:	4463      	add	r3, ip
 8001b14:	2000      	movs	r0, #0
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	e6d3      	b.n	80018c2 <__aeabi_dmul+0x86>
 8001b1a:	0025      	movs	r5, r4
 8001b1c:	4305      	orrs	r5, r0
 8001b1e:	d04a      	beq.n	8001bb6 <__aeabi_dmul+0x37a>
 8001b20:	2c00      	cmp	r4, #0
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dmul+0x2ea>
 8001b24:	e0b0      	b.n	8001c88 <__aeabi_dmul+0x44c>
 8001b26:	0020      	movs	r0, r4
 8001b28:	f000 fe00 	bl	800272c <__clzsi2>
 8001b2c:	0001      	movs	r1, r0
 8001b2e:	0002      	movs	r2, r0
 8001b30:	390b      	subs	r1, #11
 8001b32:	231d      	movs	r3, #29
 8001b34:	0010      	movs	r0, r2
 8001b36:	1a5b      	subs	r3, r3, r1
 8001b38:	0031      	movs	r1, r6
 8001b3a:	0035      	movs	r5, r6
 8001b3c:	3808      	subs	r0, #8
 8001b3e:	4084      	lsls	r4, r0
 8001b40:	40d9      	lsrs	r1, r3
 8001b42:	4085      	lsls	r5, r0
 8001b44:	430c      	orrs	r4, r1
 8001b46:	4826      	ldr	r0, [pc, #152]	; (8001be0 <__aeabi_dmul+0x3a4>)
 8001b48:	1a83      	subs	r3, r0, r2
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	4699      	mov	r9, r3
 8001b50:	469b      	mov	fp, r3
 8001b52:	e697      	b.n	8001884 <__aeabi_dmul+0x48>
 8001b54:	0005      	movs	r5, r0
 8001b56:	4325      	orrs	r5, r4
 8001b58:	d126      	bne.n	8001ba8 <__aeabi_dmul+0x36c>
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2302      	movs	r3, #2
 8001b60:	2400      	movs	r4, #0
 8001b62:	4691      	mov	r9, r2
 8001b64:	469b      	mov	fp, r3
 8001b66:	e68d      	b.n	8001884 <__aeabi_dmul+0x48>
 8001b68:	4652      	mov	r2, sl
 8001b6a:	9b00      	ldr	r3, [sp, #0]
 8001b6c:	4332      	orrs	r2, r6
 8001b6e:	d110      	bne.n	8001b92 <__aeabi_dmul+0x356>
 8001b70:	4915      	ldr	r1, [pc, #84]	; (8001bc8 <__aeabi_dmul+0x38c>)
 8001b72:	2600      	movs	r6, #0
 8001b74:	468c      	mov	ip, r1
 8001b76:	4463      	add	r3, ip
 8001b78:	4649      	mov	r1, r9
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	4319      	orrs	r1, r3
 8001b80:	4689      	mov	r9, r1
 8001b82:	2002      	movs	r0, #2
 8001b84:	e69d      	b.n	80018c2 <__aeabi_dmul+0x86>
 8001b86:	465b      	mov	r3, fp
 8001b88:	9701      	str	r7, [sp, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d000      	beq.n	8001b90 <__aeabi_dmul+0x354>
 8001b8e:	e6ad      	b.n	80018ec <__aeabi_dmul+0xb0>
 8001b90:	e6c3      	b.n	800191a <__aeabi_dmul+0xde>
 8001b92:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <__aeabi_dmul+0x38c>)
 8001b94:	2003      	movs	r0, #3
 8001b96:	4694      	mov	ip, r2
 8001b98:	4463      	add	r3, ip
 8001b9a:	464a      	mov	r2, r9
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	4691      	mov	r9, r2
 8001ba4:	4652      	mov	r2, sl
 8001ba6:	e68c      	b.n	80018c2 <__aeabi_dmul+0x86>
 8001ba8:	220c      	movs	r2, #12
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2303      	movs	r3, #3
 8001bae:	0005      	movs	r5, r0
 8001bb0:	4691      	mov	r9, r2
 8001bb2:	469b      	mov	fp, r3
 8001bb4:	e666      	b.n	8001884 <__aeabi_dmul+0x48>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	4699      	mov	r9, r3
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	2400      	movs	r4, #0
 8001bc2:	469b      	mov	fp, r3
 8001bc4:	e65e      	b.n	8001884 <__aeabi_dmul+0x48>
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	000007ff 	.word	0x000007ff
 8001bcc:	fffffc01 	.word	0xfffffc01
 8001bd0:	080095bc 	.word	0x080095bc
 8001bd4:	000003ff 	.word	0x000003ff
 8001bd8:	feffffff 	.word	0xfeffffff
 8001bdc:	000007fe 	.word	0x000007fe
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	4649      	mov	r1, r9
 8001be6:	2301      	movs	r3, #1
 8001be8:	4319      	orrs	r1, r3
 8001bea:	4689      	mov	r9, r1
 8001bec:	2600      	movs	r6, #0
 8001bee:	2001      	movs	r0, #1
 8001bf0:	e667      	b.n	80018c2 <__aeabi_dmul+0x86>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	2480      	movs	r4, #128	; 0x80
 8001bf6:	2500      	movs	r5, #0
 8001bf8:	4a43      	ldr	r2, [pc, #268]	; (8001d08 <__aeabi_dmul+0x4cc>)
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	0324      	lsls	r4, r4, #12
 8001bfe:	e67e      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001c00:	2001      	movs	r0, #1
 8001c02:	1a40      	subs	r0, r0, r1
 8001c04:	2838      	cmp	r0, #56	; 0x38
 8001c06:	dd00      	ble.n	8001c0a <__aeabi_dmul+0x3ce>
 8001c08:	e676      	b.n	80018f8 <__aeabi_dmul+0xbc>
 8001c0a:	281f      	cmp	r0, #31
 8001c0c:	dd5b      	ble.n	8001cc6 <__aeabi_dmul+0x48a>
 8001c0e:	221f      	movs	r2, #31
 8001c10:	0023      	movs	r3, r4
 8001c12:	4252      	negs	r2, r2
 8001c14:	1a51      	subs	r1, r2, r1
 8001c16:	40cb      	lsrs	r3, r1
 8001c18:	0019      	movs	r1, r3
 8001c1a:	2820      	cmp	r0, #32
 8001c1c:	d003      	beq.n	8001c26 <__aeabi_dmul+0x3ea>
 8001c1e:	4a3b      	ldr	r2, [pc, #236]	; (8001d0c <__aeabi_dmul+0x4d0>)
 8001c20:	4462      	add	r2, ip
 8001c22:	4094      	lsls	r4, r2
 8001c24:	4325      	orrs	r5, r4
 8001c26:	1e6a      	subs	r2, r5, #1
 8001c28:	4195      	sbcs	r5, r2
 8001c2a:	002a      	movs	r2, r5
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	2107      	movs	r1, #7
 8001c30:	000d      	movs	r5, r1
 8001c32:	2400      	movs	r4, #0
 8001c34:	4015      	ands	r5, r2
 8001c36:	4211      	tst	r1, r2
 8001c38:	d05b      	beq.n	8001cf2 <__aeabi_dmul+0x4b6>
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	2400      	movs	r4, #0
 8001c3e:	4011      	ands	r1, r2
 8001c40:	2904      	cmp	r1, #4
 8001c42:	d053      	beq.n	8001cec <__aeabi_dmul+0x4b0>
 8001c44:	1d11      	adds	r1, r2, #4
 8001c46:	4291      	cmp	r1, r2
 8001c48:	4192      	sbcs	r2, r2
 8001c4a:	4252      	negs	r2, r2
 8001c4c:	18a4      	adds	r4, r4, r2
 8001c4e:	000a      	movs	r2, r1
 8001c50:	0223      	lsls	r3, r4, #8
 8001c52:	d54b      	bpl.n	8001cec <__aeabi_dmul+0x4b0>
 8001c54:	2201      	movs	r2, #1
 8001c56:	2400      	movs	r4, #0
 8001c58:	2500      	movs	r5, #0
 8001c5a:	e650      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	031b      	lsls	r3, r3, #12
 8001c60:	421c      	tst	r4, r3
 8001c62:	d009      	beq.n	8001c78 <__aeabi_dmul+0x43c>
 8001c64:	421e      	tst	r6, r3
 8001c66:	d107      	bne.n	8001c78 <__aeabi_dmul+0x43c>
 8001c68:	4333      	orrs	r3, r6
 8001c6a:	031c      	lsls	r4, r3, #12
 8001c6c:	4643      	mov	r3, r8
 8001c6e:	0015      	movs	r5, r2
 8001c70:	0b24      	lsrs	r4, r4, #12
 8001c72:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <__aeabi_dmul+0x4cc>)
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	e642      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	0312      	lsls	r2, r2, #12
 8001c7c:	4314      	orrs	r4, r2
 8001c7e:	0324      	lsls	r4, r4, #12
 8001c80:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <__aeabi_dmul+0x4cc>)
 8001c82:	0b24      	lsrs	r4, r4, #12
 8001c84:	9701      	str	r7, [sp, #4]
 8001c86:	e63a      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001c88:	f000 fd50 	bl	800272c <__clzsi2>
 8001c8c:	0001      	movs	r1, r0
 8001c8e:	0002      	movs	r2, r0
 8001c90:	3115      	adds	r1, #21
 8001c92:	3220      	adds	r2, #32
 8001c94:	291c      	cmp	r1, #28
 8001c96:	dc00      	bgt.n	8001c9a <__aeabi_dmul+0x45e>
 8001c98:	e74b      	b.n	8001b32 <__aeabi_dmul+0x2f6>
 8001c9a:	0034      	movs	r4, r6
 8001c9c:	3808      	subs	r0, #8
 8001c9e:	2500      	movs	r5, #0
 8001ca0:	4084      	lsls	r4, r0
 8001ca2:	e750      	b.n	8001b46 <__aeabi_dmul+0x30a>
 8001ca4:	f000 fd42 	bl	800272c <__clzsi2>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	001a      	movs	r2, r3
 8001cac:	3215      	adds	r2, #21
 8001cae:	3020      	adds	r0, #32
 8001cb0:	2a1c      	cmp	r2, #28
 8001cb2:	dc00      	bgt.n	8001cb6 <__aeabi_dmul+0x47a>
 8001cb4:	e71e      	b.n	8001af4 <__aeabi_dmul+0x2b8>
 8001cb6:	4656      	mov	r6, sl
 8001cb8:	3b08      	subs	r3, #8
 8001cba:	2200      	movs	r2, #0
 8001cbc:	409e      	lsls	r6, r3
 8001cbe:	e723      	b.n	8001b08 <__aeabi_dmul+0x2cc>
 8001cc0:	9b00      	ldr	r3, [sp, #0]
 8001cc2:	469c      	mov	ip, r3
 8001cc4:	e6e6      	b.n	8001a94 <__aeabi_dmul+0x258>
 8001cc6:	4912      	ldr	r1, [pc, #72]	; (8001d10 <__aeabi_dmul+0x4d4>)
 8001cc8:	0022      	movs	r2, r4
 8001cca:	4461      	add	r1, ip
 8001ccc:	002e      	movs	r6, r5
 8001cce:	408d      	lsls	r5, r1
 8001cd0:	408a      	lsls	r2, r1
 8001cd2:	40c6      	lsrs	r6, r0
 8001cd4:	1e69      	subs	r1, r5, #1
 8001cd6:	418d      	sbcs	r5, r1
 8001cd8:	4332      	orrs	r2, r6
 8001cda:	432a      	orrs	r2, r5
 8001cdc:	40c4      	lsrs	r4, r0
 8001cde:	0753      	lsls	r3, r2, #29
 8001ce0:	d0b6      	beq.n	8001c50 <__aeabi_dmul+0x414>
 8001ce2:	210f      	movs	r1, #15
 8001ce4:	4011      	ands	r1, r2
 8001ce6:	2904      	cmp	r1, #4
 8001ce8:	d1ac      	bne.n	8001c44 <__aeabi_dmul+0x408>
 8001cea:	e7b1      	b.n	8001c50 <__aeabi_dmul+0x414>
 8001cec:	0765      	lsls	r5, r4, #29
 8001cee:	0264      	lsls	r4, r4, #9
 8001cf0:	0b24      	lsrs	r4, r4, #12
 8001cf2:	08d2      	lsrs	r2, r2, #3
 8001cf4:	4315      	orrs	r5, r2
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	e601      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	0312      	lsls	r2, r2, #12
 8001cfe:	4314      	orrs	r4, r2
 8001d00:	0324      	lsls	r4, r4, #12
 8001d02:	4a01      	ldr	r2, [pc, #4]	; (8001d08 <__aeabi_dmul+0x4cc>)
 8001d04:	0b24      	lsrs	r4, r4, #12
 8001d06:	e5fa      	b.n	80018fe <__aeabi_dmul+0xc2>
 8001d08:	000007ff 	.word	0x000007ff
 8001d0c:	0000043e 	.word	0x0000043e
 8001d10:	0000041e 	.word	0x0000041e

08001d14 <__aeabi_dsub>:
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	4657      	mov	r7, sl
 8001d18:	464e      	mov	r6, r9
 8001d1a:	4645      	mov	r5, r8
 8001d1c:	46de      	mov	lr, fp
 8001d1e:	b5e0      	push	{r5, r6, r7, lr}
 8001d20:	001e      	movs	r6, r3
 8001d22:	0017      	movs	r7, r2
 8001d24:	004a      	lsls	r2, r1, #1
 8001d26:	030b      	lsls	r3, r1, #12
 8001d28:	0d52      	lsrs	r2, r2, #21
 8001d2a:	0a5b      	lsrs	r3, r3, #9
 8001d2c:	4690      	mov	r8, r2
 8001d2e:	0f42      	lsrs	r2, r0, #29
 8001d30:	431a      	orrs	r2, r3
 8001d32:	0fcd      	lsrs	r5, r1, #31
 8001d34:	4ccd      	ldr	r4, [pc, #820]	; (800206c <__aeabi_dsub+0x358>)
 8001d36:	0331      	lsls	r1, r6, #12
 8001d38:	00c3      	lsls	r3, r0, #3
 8001d3a:	4694      	mov	ip, r2
 8001d3c:	0070      	lsls	r0, r6, #1
 8001d3e:	0f7a      	lsrs	r2, r7, #29
 8001d40:	0a49      	lsrs	r1, r1, #9
 8001d42:	00ff      	lsls	r7, r7, #3
 8001d44:	469a      	mov	sl, r3
 8001d46:	46b9      	mov	r9, r7
 8001d48:	0d40      	lsrs	r0, r0, #21
 8001d4a:	0ff6      	lsrs	r6, r6, #31
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	42a0      	cmp	r0, r4
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x40>
 8001d52:	e0b1      	b.n	8001eb8 <__aeabi_dsub+0x1a4>
 8001d54:	2201      	movs	r2, #1
 8001d56:	4056      	eors	r6, r2
 8001d58:	46b3      	mov	fp, r6
 8001d5a:	42b5      	cmp	r5, r6
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x4c>
 8001d5e:	e088      	b.n	8001e72 <__aeabi_dsub+0x15e>
 8001d60:	4642      	mov	r2, r8
 8001d62:	1a12      	subs	r2, r2, r0
 8001d64:	2a00      	cmp	r2, #0
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x56>
 8001d68:	e0ae      	b.n	8001ec8 <__aeabi_dsub+0x1b4>
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x5c>
 8001d6e:	e0c1      	b.n	8001ef4 <__aeabi_dsub+0x1e0>
 8001d70:	48be      	ldr	r0, [pc, #760]	; (800206c <__aeabi_dsub+0x358>)
 8001d72:	4580      	cmp	r8, r0
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x64>
 8001d76:	e151      	b.n	800201c <__aeabi_dsub+0x308>
 8001d78:	2080      	movs	r0, #128	; 0x80
 8001d7a:	0400      	lsls	r0, r0, #16
 8001d7c:	4301      	orrs	r1, r0
 8001d7e:	2a38      	cmp	r2, #56	; 0x38
 8001d80:	dd00      	ble.n	8001d84 <__aeabi_dsub+0x70>
 8001d82:	e17b      	b.n	800207c <__aeabi_dsub+0x368>
 8001d84:	2a1f      	cmp	r2, #31
 8001d86:	dd00      	ble.n	8001d8a <__aeabi_dsub+0x76>
 8001d88:	e1ee      	b.n	8002168 <__aeabi_dsub+0x454>
 8001d8a:	2020      	movs	r0, #32
 8001d8c:	003e      	movs	r6, r7
 8001d8e:	1a80      	subs	r0, r0, r2
 8001d90:	000c      	movs	r4, r1
 8001d92:	40d6      	lsrs	r6, r2
 8001d94:	40d1      	lsrs	r1, r2
 8001d96:	4087      	lsls	r7, r0
 8001d98:	4662      	mov	r2, ip
 8001d9a:	4084      	lsls	r4, r0
 8001d9c:	1a52      	subs	r2, r2, r1
 8001d9e:	1e78      	subs	r0, r7, #1
 8001da0:	4187      	sbcs	r7, r0
 8001da2:	4694      	mov	ip, r2
 8001da4:	4334      	orrs	r4, r6
 8001da6:	4327      	orrs	r7, r4
 8001da8:	1bdc      	subs	r4, r3, r7
 8001daa:	42a3      	cmp	r3, r4
 8001dac:	419b      	sbcs	r3, r3
 8001dae:	4662      	mov	r2, ip
 8001db0:	425b      	negs	r3, r3
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	4699      	mov	r9, r3
 8001db6:	464b      	mov	r3, r9
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	d400      	bmi.n	8001dbe <__aeabi_dsub+0xaa>
 8001dbc:	e118      	b.n	8001ff0 <__aeabi_dsub+0x2dc>
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	0258      	lsls	r0, r3, #9
 8001dc2:	0a43      	lsrs	r3, r0, #9
 8001dc4:	4699      	mov	r9, r3
 8001dc6:	464b      	mov	r3, r9
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d100      	bne.n	8001dce <__aeabi_dsub+0xba>
 8001dcc:	e137      	b.n	800203e <__aeabi_dsub+0x32a>
 8001dce:	4648      	mov	r0, r9
 8001dd0:	f000 fcac 	bl	800272c <__clzsi2>
 8001dd4:	0001      	movs	r1, r0
 8001dd6:	3908      	subs	r1, #8
 8001dd8:	2320      	movs	r3, #32
 8001dda:	0022      	movs	r2, r4
 8001ddc:	4648      	mov	r0, r9
 8001dde:	1a5b      	subs	r3, r3, r1
 8001de0:	40da      	lsrs	r2, r3
 8001de2:	4088      	lsls	r0, r1
 8001de4:	408c      	lsls	r4, r1
 8001de6:	4643      	mov	r3, r8
 8001de8:	4310      	orrs	r0, r2
 8001dea:	4588      	cmp	r8, r1
 8001dec:	dd00      	ble.n	8001df0 <__aeabi_dsub+0xdc>
 8001dee:	e136      	b.n	800205e <__aeabi_dsub+0x34a>
 8001df0:	1ac9      	subs	r1, r1, r3
 8001df2:	1c4b      	adds	r3, r1, #1
 8001df4:	2b1f      	cmp	r3, #31
 8001df6:	dd00      	ble.n	8001dfa <__aeabi_dsub+0xe6>
 8001df8:	e0ea      	b.n	8001fd0 <__aeabi_dsub+0x2bc>
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	0026      	movs	r6, r4
 8001dfe:	1ad2      	subs	r2, r2, r3
 8001e00:	0001      	movs	r1, r0
 8001e02:	4094      	lsls	r4, r2
 8001e04:	40de      	lsrs	r6, r3
 8001e06:	40d8      	lsrs	r0, r3
 8001e08:	2300      	movs	r3, #0
 8001e0a:	4091      	lsls	r1, r2
 8001e0c:	1e62      	subs	r2, r4, #1
 8001e0e:	4194      	sbcs	r4, r2
 8001e10:	4681      	mov	r9, r0
 8001e12:	4698      	mov	r8, r3
 8001e14:	4331      	orrs	r1, r6
 8001e16:	430c      	orrs	r4, r1
 8001e18:	0763      	lsls	r3, r4, #29
 8001e1a:	d009      	beq.n	8001e30 <__aeabi_dsub+0x11c>
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	4023      	ands	r3, r4
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d005      	beq.n	8001e30 <__aeabi_dsub+0x11c>
 8001e24:	1d23      	adds	r3, r4, #4
 8001e26:	42a3      	cmp	r3, r4
 8001e28:	41a4      	sbcs	r4, r4
 8001e2a:	4264      	negs	r4, r4
 8001e2c:	44a1      	add	r9, r4
 8001e2e:	001c      	movs	r4, r3
 8001e30:	464b      	mov	r3, r9
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	d400      	bmi.n	8001e38 <__aeabi_dsub+0x124>
 8001e36:	e0de      	b.n	8001ff6 <__aeabi_dsub+0x2e2>
 8001e38:	4641      	mov	r1, r8
 8001e3a:	4b8c      	ldr	r3, [pc, #560]	; (800206c <__aeabi_dsub+0x358>)
 8001e3c:	3101      	adds	r1, #1
 8001e3e:	4299      	cmp	r1, r3
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x130>
 8001e42:	e0e7      	b.n	8002014 <__aeabi_dsub+0x300>
 8001e44:	464b      	mov	r3, r9
 8001e46:	488a      	ldr	r0, [pc, #552]	; (8002070 <__aeabi_dsub+0x35c>)
 8001e48:	08e4      	lsrs	r4, r4, #3
 8001e4a:	4003      	ands	r3, r0
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	0549      	lsls	r1, r1, #21
 8001e50:	075b      	lsls	r3, r3, #29
 8001e52:	0240      	lsls	r0, r0, #9
 8001e54:	4323      	orrs	r3, r4
 8001e56:	0d4a      	lsrs	r2, r1, #21
 8001e58:	0b04      	lsrs	r4, r0, #12
 8001e5a:	0512      	lsls	r2, r2, #20
 8001e5c:	07ed      	lsls	r5, r5, #31
 8001e5e:	4322      	orrs	r2, r4
 8001e60:	432a      	orrs	r2, r5
 8001e62:	0018      	movs	r0, r3
 8001e64:	0011      	movs	r1, r2
 8001e66:	bcf0      	pop	{r4, r5, r6, r7}
 8001e68:	46bb      	mov	fp, r7
 8001e6a:	46b2      	mov	sl, r6
 8001e6c:	46a9      	mov	r9, r5
 8001e6e:	46a0      	mov	r8, r4
 8001e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e72:	4642      	mov	r2, r8
 8001e74:	1a12      	subs	r2, r2, r0
 8001e76:	2a00      	cmp	r2, #0
 8001e78:	dd52      	ble.n	8001f20 <__aeabi_dsub+0x20c>
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d100      	bne.n	8001e80 <__aeabi_dsub+0x16c>
 8001e7e:	e09c      	b.n	8001fba <__aeabi_dsub+0x2a6>
 8001e80:	45a0      	cmp	r8, r4
 8001e82:	d100      	bne.n	8001e86 <__aeabi_dsub+0x172>
 8001e84:	e0ca      	b.n	800201c <__aeabi_dsub+0x308>
 8001e86:	2080      	movs	r0, #128	; 0x80
 8001e88:	0400      	lsls	r0, r0, #16
 8001e8a:	4301      	orrs	r1, r0
 8001e8c:	2a38      	cmp	r2, #56	; 0x38
 8001e8e:	dd00      	ble.n	8001e92 <__aeabi_dsub+0x17e>
 8001e90:	e149      	b.n	8002126 <__aeabi_dsub+0x412>
 8001e92:	2a1f      	cmp	r2, #31
 8001e94:	dc00      	bgt.n	8001e98 <__aeabi_dsub+0x184>
 8001e96:	e197      	b.n	80021c8 <__aeabi_dsub+0x4b4>
 8001e98:	0010      	movs	r0, r2
 8001e9a:	000e      	movs	r6, r1
 8001e9c:	3820      	subs	r0, #32
 8001e9e:	40c6      	lsrs	r6, r0
 8001ea0:	2a20      	cmp	r2, #32
 8001ea2:	d004      	beq.n	8001eae <__aeabi_dsub+0x19a>
 8001ea4:	2040      	movs	r0, #64	; 0x40
 8001ea6:	1a82      	subs	r2, r0, r2
 8001ea8:	4091      	lsls	r1, r2
 8001eaa:	430f      	orrs	r7, r1
 8001eac:	46b9      	mov	r9, r7
 8001eae:	464c      	mov	r4, r9
 8001eb0:	1e62      	subs	r2, r4, #1
 8001eb2:	4194      	sbcs	r4, r2
 8001eb4:	4334      	orrs	r4, r6
 8001eb6:	e13a      	b.n	800212e <__aeabi_dsub+0x41a>
 8001eb8:	000a      	movs	r2, r1
 8001eba:	433a      	orrs	r2, r7
 8001ebc:	d028      	beq.n	8001f10 <__aeabi_dsub+0x1fc>
 8001ebe:	46b3      	mov	fp, r6
 8001ec0:	42b5      	cmp	r5, r6
 8001ec2:	d02b      	beq.n	8001f1c <__aeabi_dsub+0x208>
 8001ec4:	4a6b      	ldr	r2, [pc, #428]	; (8002074 <__aeabi_dsub+0x360>)
 8001ec6:	4442      	add	r2, r8
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	d05d      	beq.n	8001f88 <__aeabi_dsub+0x274>
 8001ecc:	4642      	mov	r2, r8
 8001ece:	4644      	mov	r4, r8
 8001ed0:	1a82      	subs	r2, r0, r2
 8001ed2:	2c00      	cmp	r4, #0
 8001ed4:	d000      	beq.n	8001ed8 <__aeabi_dsub+0x1c4>
 8001ed6:	e0f5      	b.n	80020c4 <__aeabi_dsub+0x3b0>
 8001ed8:	4665      	mov	r5, ip
 8001eda:	431d      	orrs	r5, r3
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_dsub+0x1cc>
 8001ede:	e19c      	b.n	800221a <__aeabi_dsub+0x506>
 8001ee0:	1e55      	subs	r5, r2, #1
 8001ee2:	2a01      	cmp	r2, #1
 8001ee4:	d100      	bne.n	8001ee8 <__aeabi_dsub+0x1d4>
 8001ee6:	e1fb      	b.n	80022e0 <__aeabi_dsub+0x5cc>
 8001ee8:	4c60      	ldr	r4, [pc, #384]	; (800206c <__aeabi_dsub+0x358>)
 8001eea:	42a2      	cmp	r2, r4
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_dsub+0x1dc>
 8001eee:	e1bd      	b.n	800226c <__aeabi_dsub+0x558>
 8001ef0:	002a      	movs	r2, r5
 8001ef2:	e0f0      	b.n	80020d6 <__aeabi_dsub+0x3c2>
 8001ef4:	0008      	movs	r0, r1
 8001ef6:	4338      	orrs	r0, r7
 8001ef8:	d100      	bne.n	8001efc <__aeabi_dsub+0x1e8>
 8001efa:	e0c3      	b.n	8002084 <__aeabi_dsub+0x370>
 8001efc:	1e50      	subs	r0, r2, #1
 8001efe:	2a01      	cmp	r2, #1
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x1f0>
 8001f02:	e1a8      	b.n	8002256 <__aeabi_dsub+0x542>
 8001f04:	4c59      	ldr	r4, [pc, #356]	; (800206c <__aeabi_dsub+0x358>)
 8001f06:	42a2      	cmp	r2, r4
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dsub+0x1f8>
 8001f0a:	e087      	b.n	800201c <__aeabi_dsub+0x308>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	e736      	b.n	8001d7e <__aeabi_dsub+0x6a>
 8001f10:	2201      	movs	r2, #1
 8001f12:	4056      	eors	r6, r2
 8001f14:	46b3      	mov	fp, r6
 8001f16:	42b5      	cmp	r5, r6
 8001f18:	d000      	beq.n	8001f1c <__aeabi_dsub+0x208>
 8001f1a:	e721      	b.n	8001d60 <__aeabi_dsub+0x4c>
 8001f1c:	4a55      	ldr	r2, [pc, #340]	; (8002074 <__aeabi_dsub+0x360>)
 8001f1e:	4442      	add	r2, r8
 8001f20:	2a00      	cmp	r2, #0
 8001f22:	d100      	bne.n	8001f26 <__aeabi_dsub+0x212>
 8001f24:	e0b5      	b.n	8002092 <__aeabi_dsub+0x37e>
 8001f26:	4642      	mov	r2, r8
 8001f28:	4644      	mov	r4, r8
 8001f2a:	1a82      	subs	r2, r0, r2
 8001f2c:	2c00      	cmp	r4, #0
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_dsub+0x21e>
 8001f30:	e138      	b.n	80021a4 <__aeabi_dsub+0x490>
 8001f32:	4e4e      	ldr	r6, [pc, #312]	; (800206c <__aeabi_dsub+0x358>)
 8001f34:	42b0      	cmp	r0, r6
 8001f36:	d100      	bne.n	8001f3a <__aeabi_dsub+0x226>
 8001f38:	e1de      	b.n	80022f8 <__aeabi_dsub+0x5e4>
 8001f3a:	2680      	movs	r6, #128	; 0x80
 8001f3c:	4664      	mov	r4, ip
 8001f3e:	0436      	lsls	r6, r6, #16
 8001f40:	4334      	orrs	r4, r6
 8001f42:	46a4      	mov	ip, r4
 8001f44:	2a38      	cmp	r2, #56	; 0x38
 8001f46:	dd00      	ble.n	8001f4a <__aeabi_dsub+0x236>
 8001f48:	e196      	b.n	8002278 <__aeabi_dsub+0x564>
 8001f4a:	2a1f      	cmp	r2, #31
 8001f4c:	dd00      	ble.n	8001f50 <__aeabi_dsub+0x23c>
 8001f4e:	e224      	b.n	800239a <__aeabi_dsub+0x686>
 8001f50:	2620      	movs	r6, #32
 8001f52:	1ab4      	subs	r4, r6, r2
 8001f54:	46a2      	mov	sl, r4
 8001f56:	4664      	mov	r4, ip
 8001f58:	4656      	mov	r6, sl
 8001f5a:	40b4      	lsls	r4, r6
 8001f5c:	46a1      	mov	r9, r4
 8001f5e:	001c      	movs	r4, r3
 8001f60:	464e      	mov	r6, r9
 8001f62:	40d4      	lsrs	r4, r2
 8001f64:	4326      	orrs	r6, r4
 8001f66:	0034      	movs	r4, r6
 8001f68:	4656      	mov	r6, sl
 8001f6a:	40b3      	lsls	r3, r6
 8001f6c:	1e5e      	subs	r6, r3, #1
 8001f6e:	41b3      	sbcs	r3, r6
 8001f70:	431c      	orrs	r4, r3
 8001f72:	4663      	mov	r3, ip
 8001f74:	40d3      	lsrs	r3, r2
 8001f76:	18c9      	adds	r1, r1, r3
 8001f78:	19e4      	adds	r4, r4, r7
 8001f7a:	42bc      	cmp	r4, r7
 8001f7c:	41bf      	sbcs	r7, r7
 8001f7e:	427f      	negs	r7, r7
 8001f80:	46b9      	mov	r9, r7
 8001f82:	4680      	mov	r8, r0
 8001f84:	4489      	add	r9, r1
 8001f86:	e0d8      	b.n	800213a <__aeabi_dsub+0x426>
 8001f88:	4640      	mov	r0, r8
 8001f8a:	4c3b      	ldr	r4, [pc, #236]	; (8002078 <__aeabi_dsub+0x364>)
 8001f8c:	3001      	adds	r0, #1
 8001f8e:	4220      	tst	r0, r4
 8001f90:	d000      	beq.n	8001f94 <__aeabi_dsub+0x280>
 8001f92:	e0b4      	b.n	80020fe <__aeabi_dsub+0x3ea>
 8001f94:	4640      	mov	r0, r8
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d000      	beq.n	8001f9c <__aeabi_dsub+0x288>
 8001f9a:	e144      	b.n	8002226 <__aeabi_dsub+0x512>
 8001f9c:	4660      	mov	r0, ip
 8001f9e:	4318      	orrs	r0, r3
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dsub+0x290>
 8001fa2:	e190      	b.n	80022c6 <__aeabi_dsub+0x5b2>
 8001fa4:	0008      	movs	r0, r1
 8001fa6:	4338      	orrs	r0, r7
 8001fa8:	d000      	beq.n	8001fac <__aeabi_dsub+0x298>
 8001faa:	e1aa      	b.n	8002302 <__aeabi_dsub+0x5ee>
 8001fac:	4661      	mov	r1, ip
 8001fae:	08db      	lsrs	r3, r3, #3
 8001fb0:	0749      	lsls	r1, r1, #29
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	4661      	mov	r1, ip
 8001fb6:	08cc      	lsrs	r4, r1, #3
 8001fb8:	e027      	b.n	800200a <__aeabi_dsub+0x2f6>
 8001fba:	0008      	movs	r0, r1
 8001fbc:	4338      	orrs	r0, r7
 8001fbe:	d061      	beq.n	8002084 <__aeabi_dsub+0x370>
 8001fc0:	1e50      	subs	r0, r2, #1
 8001fc2:	2a01      	cmp	r2, #1
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x2b4>
 8001fc6:	e139      	b.n	800223c <__aeabi_dsub+0x528>
 8001fc8:	42a2      	cmp	r2, r4
 8001fca:	d027      	beq.n	800201c <__aeabi_dsub+0x308>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	e75d      	b.n	8001e8c <__aeabi_dsub+0x178>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	391f      	subs	r1, #31
 8001fd4:	40ca      	lsrs	r2, r1
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d003      	beq.n	8001fe4 <__aeabi_dsub+0x2d0>
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	4098      	lsls	r0, r3
 8001fe2:	4304      	orrs	r4, r0
 8001fe4:	1e63      	subs	r3, r4, #1
 8001fe6:	419c      	sbcs	r4, r3
 8001fe8:	2300      	movs	r3, #0
 8001fea:	4699      	mov	r9, r3
 8001fec:	4698      	mov	r8, r3
 8001fee:	430c      	orrs	r4, r1
 8001ff0:	0763      	lsls	r3, r4, #29
 8001ff2:	d000      	beq.n	8001ff6 <__aeabi_dsub+0x2e2>
 8001ff4:	e712      	b.n	8001e1c <__aeabi_dsub+0x108>
 8001ff6:	464b      	mov	r3, r9
 8001ff8:	464a      	mov	r2, r9
 8001ffa:	08e4      	lsrs	r4, r4, #3
 8001ffc:	075b      	lsls	r3, r3, #29
 8001ffe:	4323      	orrs	r3, r4
 8002000:	08d4      	lsrs	r4, r2, #3
 8002002:	4642      	mov	r2, r8
 8002004:	4919      	ldr	r1, [pc, #100]	; (800206c <__aeabi_dsub+0x358>)
 8002006:	428a      	cmp	r2, r1
 8002008:	d00e      	beq.n	8002028 <__aeabi_dsub+0x314>
 800200a:	0324      	lsls	r4, r4, #12
 800200c:	0552      	lsls	r2, r2, #21
 800200e:	0b24      	lsrs	r4, r4, #12
 8002010:	0d52      	lsrs	r2, r2, #21
 8002012:	e722      	b.n	8001e5a <__aeabi_dsub+0x146>
 8002014:	000a      	movs	r2, r1
 8002016:	2400      	movs	r4, #0
 8002018:	2300      	movs	r3, #0
 800201a:	e71e      	b.n	8001e5a <__aeabi_dsub+0x146>
 800201c:	08db      	lsrs	r3, r3, #3
 800201e:	4662      	mov	r2, ip
 8002020:	0752      	lsls	r2, r2, #29
 8002022:	4313      	orrs	r3, r2
 8002024:	4662      	mov	r2, ip
 8002026:	08d4      	lsrs	r4, r2, #3
 8002028:	001a      	movs	r2, r3
 800202a:	4322      	orrs	r2, r4
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x31c>
 800202e:	e1fc      	b.n	800242a <__aeabi_dsub+0x716>
 8002030:	2280      	movs	r2, #128	; 0x80
 8002032:	0312      	lsls	r2, r2, #12
 8002034:	4314      	orrs	r4, r2
 8002036:	0324      	lsls	r4, r4, #12
 8002038:	4a0c      	ldr	r2, [pc, #48]	; (800206c <__aeabi_dsub+0x358>)
 800203a:	0b24      	lsrs	r4, r4, #12
 800203c:	e70d      	b.n	8001e5a <__aeabi_dsub+0x146>
 800203e:	0020      	movs	r0, r4
 8002040:	f000 fb74 	bl	800272c <__clzsi2>
 8002044:	0001      	movs	r1, r0
 8002046:	3118      	adds	r1, #24
 8002048:	291f      	cmp	r1, #31
 800204a:	dc00      	bgt.n	800204e <__aeabi_dsub+0x33a>
 800204c:	e6c4      	b.n	8001dd8 <__aeabi_dsub+0xc4>
 800204e:	3808      	subs	r0, #8
 8002050:	4084      	lsls	r4, r0
 8002052:	4643      	mov	r3, r8
 8002054:	0020      	movs	r0, r4
 8002056:	2400      	movs	r4, #0
 8002058:	4588      	cmp	r8, r1
 800205a:	dc00      	bgt.n	800205e <__aeabi_dsub+0x34a>
 800205c:	e6c8      	b.n	8001df0 <__aeabi_dsub+0xdc>
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__aeabi_dsub+0x35c>)
 8002060:	1a5b      	subs	r3, r3, r1
 8002062:	4010      	ands	r0, r2
 8002064:	4698      	mov	r8, r3
 8002066:	4681      	mov	r9, r0
 8002068:	e6d6      	b.n	8001e18 <__aeabi_dsub+0x104>
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	000007ff 	.word	0x000007ff
 8002070:	ff7fffff 	.word	0xff7fffff
 8002074:	fffff801 	.word	0xfffff801
 8002078:	000007fe 	.word	0x000007fe
 800207c:	430f      	orrs	r7, r1
 800207e:	1e7a      	subs	r2, r7, #1
 8002080:	4197      	sbcs	r7, r2
 8002082:	e691      	b.n	8001da8 <__aeabi_dsub+0x94>
 8002084:	4661      	mov	r1, ip
 8002086:	08db      	lsrs	r3, r3, #3
 8002088:	0749      	lsls	r1, r1, #29
 800208a:	430b      	orrs	r3, r1
 800208c:	4661      	mov	r1, ip
 800208e:	08cc      	lsrs	r4, r1, #3
 8002090:	e7b8      	b.n	8002004 <__aeabi_dsub+0x2f0>
 8002092:	4640      	mov	r0, r8
 8002094:	4cd3      	ldr	r4, [pc, #844]	; (80023e4 <__aeabi_dsub+0x6d0>)
 8002096:	3001      	adds	r0, #1
 8002098:	4220      	tst	r0, r4
 800209a:	d000      	beq.n	800209e <__aeabi_dsub+0x38a>
 800209c:	e0a2      	b.n	80021e4 <__aeabi_dsub+0x4d0>
 800209e:	4640      	mov	r0, r8
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d000      	beq.n	80020a6 <__aeabi_dsub+0x392>
 80020a4:	e101      	b.n	80022aa <__aeabi_dsub+0x596>
 80020a6:	4660      	mov	r0, ip
 80020a8:	4318      	orrs	r0, r3
 80020aa:	d100      	bne.n	80020ae <__aeabi_dsub+0x39a>
 80020ac:	e15e      	b.n	800236c <__aeabi_dsub+0x658>
 80020ae:	0008      	movs	r0, r1
 80020b0:	4338      	orrs	r0, r7
 80020b2:	d000      	beq.n	80020b6 <__aeabi_dsub+0x3a2>
 80020b4:	e15f      	b.n	8002376 <__aeabi_dsub+0x662>
 80020b6:	4661      	mov	r1, ip
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	0749      	lsls	r1, r1, #29
 80020bc:	430b      	orrs	r3, r1
 80020be:	4661      	mov	r1, ip
 80020c0:	08cc      	lsrs	r4, r1, #3
 80020c2:	e7a2      	b.n	800200a <__aeabi_dsub+0x2f6>
 80020c4:	4dc8      	ldr	r5, [pc, #800]	; (80023e8 <__aeabi_dsub+0x6d4>)
 80020c6:	42a8      	cmp	r0, r5
 80020c8:	d100      	bne.n	80020cc <__aeabi_dsub+0x3b8>
 80020ca:	e0cf      	b.n	800226c <__aeabi_dsub+0x558>
 80020cc:	2580      	movs	r5, #128	; 0x80
 80020ce:	4664      	mov	r4, ip
 80020d0:	042d      	lsls	r5, r5, #16
 80020d2:	432c      	orrs	r4, r5
 80020d4:	46a4      	mov	ip, r4
 80020d6:	2a38      	cmp	r2, #56	; 0x38
 80020d8:	dc56      	bgt.n	8002188 <__aeabi_dsub+0x474>
 80020da:	2a1f      	cmp	r2, #31
 80020dc:	dd00      	ble.n	80020e0 <__aeabi_dsub+0x3cc>
 80020de:	e0d1      	b.n	8002284 <__aeabi_dsub+0x570>
 80020e0:	2520      	movs	r5, #32
 80020e2:	001e      	movs	r6, r3
 80020e4:	1aad      	subs	r5, r5, r2
 80020e6:	4664      	mov	r4, ip
 80020e8:	40ab      	lsls	r3, r5
 80020ea:	40ac      	lsls	r4, r5
 80020ec:	40d6      	lsrs	r6, r2
 80020ee:	1e5d      	subs	r5, r3, #1
 80020f0:	41ab      	sbcs	r3, r5
 80020f2:	4334      	orrs	r4, r6
 80020f4:	4323      	orrs	r3, r4
 80020f6:	4664      	mov	r4, ip
 80020f8:	40d4      	lsrs	r4, r2
 80020fa:	1b09      	subs	r1, r1, r4
 80020fc:	e049      	b.n	8002192 <__aeabi_dsub+0x47e>
 80020fe:	4660      	mov	r0, ip
 8002100:	1bdc      	subs	r4, r3, r7
 8002102:	1a46      	subs	r6, r0, r1
 8002104:	42a3      	cmp	r3, r4
 8002106:	4180      	sbcs	r0, r0
 8002108:	4240      	negs	r0, r0
 800210a:	4681      	mov	r9, r0
 800210c:	0030      	movs	r0, r6
 800210e:	464e      	mov	r6, r9
 8002110:	1b80      	subs	r0, r0, r6
 8002112:	4681      	mov	r9, r0
 8002114:	0200      	lsls	r0, r0, #8
 8002116:	d476      	bmi.n	8002206 <__aeabi_dsub+0x4f2>
 8002118:	464b      	mov	r3, r9
 800211a:	4323      	orrs	r3, r4
 800211c:	d000      	beq.n	8002120 <__aeabi_dsub+0x40c>
 800211e:	e652      	b.n	8001dc6 <__aeabi_dsub+0xb2>
 8002120:	2400      	movs	r4, #0
 8002122:	2500      	movs	r5, #0
 8002124:	e771      	b.n	800200a <__aeabi_dsub+0x2f6>
 8002126:	4339      	orrs	r1, r7
 8002128:	000c      	movs	r4, r1
 800212a:	1e62      	subs	r2, r4, #1
 800212c:	4194      	sbcs	r4, r2
 800212e:	18e4      	adds	r4, r4, r3
 8002130:	429c      	cmp	r4, r3
 8002132:	419b      	sbcs	r3, r3
 8002134:	425b      	negs	r3, r3
 8002136:	4463      	add	r3, ip
 8002138:	4699      	mov	r9, r3
 800213a:	464b      	mov	r3, r9
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	d400      	bmi.n	8002142 <__aeabi_dsub+0x42e>
 8002140:	e756      	b.n	8001ff0 <__aeabi_dsub+0x2dc>
 8002142:	2301      	movs	r3, #1
 8002144:	469c      	mov	ip, r3
 8002146:	4ba8      	ldr	r3, [pc, #672]	; (80023e8 <__aeabi_dsub+0x6d4>)
 8002148:	44e0      	add	r8, ip
 800214a:	4598      	cmp	r8, r3
 800214c:	d038      	beq.n	80021c0 <__aeabi_dsub+0x4ac>
 800214e:	464b      	mov	r3, r9
 8002150:	48a6      	ldr	r0, [pc, #664]	; (80023ec <__aeabi_dsub+0x6d8>)
 8002152:	2201      	movs	r2, #1
 8002154:	4003      	ands	r3, r0
 8002156:	0018      	movs	r0, r3
 8002158:	0863      	lsrs	r3, r4, #1
 800215a:	4014      	ands	r4, r2
 800215c:	431c      	orrs	r4, r3
 800215e:	07c3      	lsls	r3, r0, #31
 8002160:	431c      	orrs	r4, r3
 8002162:	0843      	lsrs	r3, r0, #1
 8002164:	4699      	mov	r9, r3
 8002166:	e657      	b.n	8001e18 <__aeabi_dsub+0x104>
 8002168:	0010      	movs	r0, r2
 800216a:	000e      	movs	r6, r1
 800216c:	3820      	subs	r0, #32
 800216e:	40c6      	lsrs	r6, r0
 8002170:	2a20      	cmp	r2, #32
 8002172:	d004      	beq.n	800217e <__aeabi_dsub+0x46a>
 8002174:	2040      	movs	r0, #64	; 0x40
 8002176:	1a82      	subs	r2, r0, r2
 8002178:	4091      	lsls	r1, r2
 800217a:	430f      	orrs	r7, r1
 800217c:	46b9      	mov	r9, r7
 800217e:	464f      	mov	r7, r9
 8002180:	1e7a      	subs	r2, r7, #1
 8002182:	4197      	sbcs	r7, r2
 8002184:	4337      	orrs	r7, r6
 8002186:	e60f      	b.n	8001da8 <__aeabi_dsub+0x94>
 8002188:	4662      	mov	r2, ip
 800218a:	431a      	orrs	r2, r3
 800218c:	0013      	movs	r3, r2
 800218e:	1e5a      	subs	r2, r3, #1
 8002190:	4193      	sbcs	r3, r2
 8002192:	1afc      	subs	r4, r7, r3
 8002194:	42a7      	cmp	r7, r4
 8002196:	41bf      	sbcs	r7, r7
 8002198:	427f      	negs	r7, r7
 800219a:	1bcb      	subs	r3, r1, r7
 800219c:	4699      	mov	r9, r3
 800219e:	465d      	mov	r5, fp
 80021a0:	4680      	mov	r8, r0
 80021a2:	e608      	b.n	8001db6 <__aeabi_dsub+0xa2>
 80021a4:	4666      	mov	r6, ip
 80021a6:	431e      	orrs	r6, r3
 80021a8:	d100      	bne.n	80021ac <__aeabi_dsub+0x498>
 80021aa:	e0be      	b.n	800232a <__aeabi_dsub+0x616>
 80021ac:	1e56      	subs	r6, r2, #1
 80021ae:	2a01      	cmp	r2, #1
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x4a0>
 80021b2:	e109      	b.n	80023c8 <__aeabi_dsub+0x6b4>
 80021b4:	4c8c      	ldr	r4, [pc, #560]	; (80023e8 <__aeabi_dsub+0x6d4>)
 80021b6:	42a2      	cmp	r2, r4
 80021b8:	d100      	bne.n	80021bc <__aeabi_dsub+0x4a8>
 80021ba:	e119      	b.n	80023f0 <__aeabi_dsub+0x6dc>
 80021bc:	0032      	movs	r2, r6
 80021be:	e6c1      	b.n	8001f44 <__aeabi_dsub+0x230>
 80021c0:	4642      	mov	r2, r8
 80021c2:	2400      	movs	r4, #0
 80021c4:	2300      	movs	r3, #0
 80021c6:	e648      	b.n	8001e5a <__aeabi_dsub+0x146>
 80021c8:	2020      	movs	r0, #32
 80021ca:	000c      	movs	r4, r1
 80021cc:	1a80      	subs	r0, r0, r2
 80021ce:	003e      	movs	r6, r7
 80021d0:	4087      	lsls	r7, r0
 80021d2:	4084      	lsls	r4, r0
 80021d4:	40d6      	lsrs	r6, r2
 80021d6:	1e78      	subs	r0, r7, #1
 80021d8:	4187      	sbcs	r7, r0
 80021da:	40d1      	lsrs	r1, r2
 80021dc:	4334      	orrs	r4, r6
 80021de:	433c      	orrs	r4, r7
 80021e0:	448c      	add	ip, r1
 80021e2:	e7a4      	b.n	800212e <__aeabi_dsub+0x41a>
 80021e4:	4a80      	ldr	r2, [pc, #512]	; (80023e8 <__aeabi_dsub+0x6d4>)
 80021e6:	4290      	cmp	r0, r2
 80021e8:	d100      	bne.n	80021ec <__aeabi_dsub+0x4d8>
 80021ea:	e0e9      	b.n	80023c0 <__aeabi_dsub+0x6ac>
 80021ec:	19df      	adds	r7, r3, r7
 80021ee:	429f      	cmp	r7, r3
 80021f0:	419b      	sbcs	r3, r3
 80021f2:	4461      	add	r1, ip
 80021f4:	425b      	negs	r3, r3
 80021f6:	18c9      	adds	r1, r1, r3
 80021f8:	07cc      	lsls	r4, r1, #31
 80021fa:	087f      	lsrs	r7, r7, #1
 80021fc:	084b      	lsrs	r3, r1, #1
 80021fe:	4699      	mov	r9, r3
 8002200:	4680      	mov	r8, r0
 8002202:	433c      	orrs	r4, r7
 8002204:	e6f4      	b.n	8001ff0 <__aeabi_dsub+0x2dc>
 8002206:	1afc      	subs	r4, r7, r3
 8002208:	42a7      	cmp	r7, r4
 800220a:	41bf      	sbcs	r7, r7
 800220c:	4663      	mov	r3, ip
 800220e:	427f      	negs	r7, r7
 8002210:	1ac9      	subs	r1, r1, r3
 8002212:	1bcb      	subs	r3, r1, r7
 8002214:	4699      	mov	r9, r3
 8002216:	465d      	mov	r5, fp
 8002218:	e5d5      	b.n	8001dc6 <__aeabi_dsub+0xb2>
 800221a:	08ff      	lsrs	r7, r7, #3
 800221c:	074b      	lsls	r3, r1, #29
 800221e:	465d      	mov	r5, fp
 8002220:	433b      	orrs	r3, r7
 8002222:	08cc      	lsrs	r4, r1, #3
 8002224:	e6ee      	b.n	8002004 <__aeabi_dsub+0x2f0>
 8002226:	4662      	mov	r2, ip
 8002228:	431a      	orrs	r2, r3
 800222a:	d000      	beq.n	800222e <__aeabi_dsub+0x51a>
 800222c:	e082      	b.n	8002334 <__aeabi_dsub+0x620>
 800222e:	000b      	movs	r3, r1
 8002230:	433b      	orrs	r3, r7
 8002232:	d11b      	bne.n	800226c <__aeabi_dsub+0x558>
 8002234:	2480      	movs	r4, #128	; 0x80
 8002236:	2500      	movs	r5, #0
 8002238:	0324      	lsls	r4, r4, #12
 800223a:	e6f9      	b.n	8002030 <__aeabi_dsub+0x31c>
 800223c:	19dc      	adds	r4, r3, r7
 800223e:	429c      	cmp	r4, r3
 8002240:	419b      	sbcs	r3, r3
 8002242:	4461      	add	r1, ip
 8002244:	4689      	mov	r9, r1
 8002246:	425b      	negs	r3, r3
 8002248:	4499      	add	r9, r3
 800224a:	464b      	mov	r3, r9
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	d444      	bmi.n	80022da <__aeabi_dsub+0x5c6>
 8002250:	2301      	movs	r3, #1
 8002252:	4698      	mov	r8, r3
 8002254:	e6cc      	b.n	8001ff0 <__aeabi_dsub+0x2dc>
 8002256:	1bdc      	subs	r4, r3, r7
 8002258:	4662      	mov	r2, ip
 800225a:	42a3      	cmp	r3, r4
 800225c:	419b      	sbcs	r3, r3
 800225e:	1a51      	subs	r1, r2, r1
 8002260:	425b      	negs	r3, r3
 8002262:	1acb      	subs	r3, r1, r3
 8002264:	4699      	mov	r9, r3
 8002266:	2301      	movs	r3, #1
 8002268:	4698      	mov	r8, r3
 800226a:	e5a4      	b.n	8001db6 <__aeabi_dsub+0xa2>
 800226c:	08ff      	lsrs	r7, r7, #3
 800226e:	074b      	lsls	r3, r1, #29
 8002270:	465d      	mov	r5, fp
 8002272:	433b      	orrs	r3, r7
 8002274:	08cc      	lsrs	r4, r1, #3
 8002276:	e6d7      	b.n	8002028 <__aeabi_dsub+0x314>
 8002278:	4662      	mov	r2, ip
 800227a:	431a      	orrs	r2, r3
 800227c:	0014      	movs	r4, r2
 800227e:	1e63      	subs	r3, r4, #1
 8002280:	419c      	sbcs	r4, r3
 8002282:	e679      	b.n	8001f78 <__aeabi_dsub+0x264>
 8002284:	0015      	movs	r5, r2
 8002286:	4664      	mov	r4, ip
 8002288:	3d20      	subs	r5, #32
 800228a:	40ec      	lsrs	r4, r5
 800228c:	46a0      	mov	r8, r4
 800228e:	2a20      	cmp	r2, #32
 8002290:	d005      	beq.n	800229e <__aeabi_dsub+0x58a>
 8002292:	2540      	movs	r5, #64	; 0x40
 8002294:	4664      	mov	r4, ip
 8002296:	1aaa      	subs	r2, r5, r2
 8002298:	4094      	lsls	r4, r2
 800229a:	4323      	orrs	r3, r4
 800229c:	469a      	mov	sl, r3
 800229e:	4654      	mov	r4, sl
 80022a0:	1e63      	subs	r3, r4, #1
 80022a2:	419c      	sbcs	r4, r3
 80022a4:	4643      	mov	r3, r8
 80022a6:	4323      	orrs	r3, r4
 80022a8:	e773      	b.n	8002192 <__aeabi_dsub+0x47e>
 80022aa:	4662      	mov	r2, ip
 80022ac:	431a      	orrs	r2, r3
 80022ae:	d023      	beq.n	80022f8 <__aeabi_dsub+0x5e4>
 80022b0:	000a      	movs	r2, r1
 80022b2:	433a      	orrs	r2, r7
 80022b4:	d000      	beq.n	80022b8 <__aeabi_dsub+0x5a4>
 80022b6:	e0a0      	b.n	80023fa <__aeabi_dsub+0x6e6>
 80022b8:	4662      	mov	r2, ip
 80022ba:	08db      	lsrs	r3, r3, #3
 80022bc:	0752      	lsls	r2, r2, #29
 80022be:	4313      	orrs	r3, r2
 80022c0:	4662      	mov	r2, ip
 80022c2:	08d4      	lsrs	r4, r2, #3
 80022c4:	e6b0      	b.n	8002028 <__aeabi_dsub+0x314>
 80022c6:	000b      	movs	r3, r1
 80022c8:	433b      	orrs	r3, r7
 80022ca:	d100      	bne.n	80022ce <__aeabi_dsub+0x5ba>
 80022cc:	e728      	b.n	8002120 <__aeabi_dsub+0x40c>
 80022ce:	08ff      	lsrs	r7, r7, #3
 80022d0:	074b      	lsls	r3, r1, #29
 80022d2:	465d      	mov	r5, fp
 80022d4:	433b      	orrs	r3, r7
 80022d6:	08cc      	lsrs	r4, r1, #3
 80022d8:	e697      	b.n	800200a <__aeabi_dsub+0x2f6>
 80022da:	2302      	movs	r3, #2
 80022dc:	4698      	mov	r8, r3
 80022de:	e736      	b.n	800214e <__aeabi_dsub+0x43a>
 80022e0:	1afc      	subs	r4, r7, r3
 80022e2:	42a7      	cmp	r7, r4
 80022e4:	41bf      	sbcs	r7, r7
 80022e6:	4663      	mov	r3, ip
 80022e8:	427f      	negs	r7, r7
 80022ea:	1ac9      	subs	r1, r1, r3
 80022ec:	1bcb      	subs	r3, r1, r7
 80022ee:	4699      	mov	r9, r3
 80022f0:	2301      	movs	r3, #1
 80022f2:	465d      	mov	r5, fp
 80022f4:	4698      	mov	r8, r3
 80022f6:	e55e      	b.n	8001db6 <__aeabi_dsub+0xa2>
 80022f8:	074b      	lsls	r3, r1, #29
 80022fa:	08ff      	lsrs	r7, r7, #3
 80022fc:	433b      	orrs	r3, r7
 80022fe:	08cc      	lsrs	r4, r1, #3
 8002300:	e692      	b.n	8002028 <__aeabi_dsub+0x314>
 8002302:	1bdc      	subs	r4, r3, r7
 8002304:	4660      	mov	r0, ip
 8002306:	42a3      	cmp	r3, r4
 8002308:	41b6      	sbcs	r6, r6
 800230a:	1a40      	subs	r0, r0, r1
 800230c:	4276      	negs	r6, r6
 800230e:	1b80      	subs	r0, r0, r6
 8002310:	4681      	mov	r9, r0
 8002312:	0200      	lsls	r0, r0, #8
 8002314:	d560      	bpl.n	80023d8 <__aeabi_dsub+0x6c4>
 8002316:	1afc      	subs	r4, r7, r3
 8002318:	42a7      	cmp	r7, r4
 800231a:	41bf      	sbcs	r7, r7
 800231c:	4663      	mov	r3, ip
 800231e:	427f      	negs	r7, r7
 8002320:	1ac9      	subs	r1, r1, r3
 8002322:	1bcb      	subs	r3, r1, r7
 8002324:	4699      	mov	r9, r3
 8002326:	465d      	mov	r5, fp
 8002328:	e576      	b.n	8001e18 <__aeabi_dsub+0x104>
 800232a:	08ff      	lsrs	r7, r7, #3
 800232c:	074b      	lsls	r3, r1, #29
 800232e:	433b      	orrs	r3, r7
 8002330:	08cc      	lsrs	r4, r1, #3
 8002332:	e667      	b.n	8002004 <__aeabi_dsub+0x2f0>
 8002334:	000a      	movs	r2, r1
 8002336:	08db      	lsrs	r3, r3, #3
 8002338:	433a      	orrs	r2, r7
 800233a:	d100      	bne.n	800233e <__aeabi_dsub+0x62a>
 800233c:	e66f      	b.n	800201e <__aeabi_dsub+0x30a>
 800233e:	4662      	mov	r2, ip
 8002340:	0752      	lsls	r2, r2, #29
 8002342:	4313      	orrs	r3, r2
 8002344:	4662      	mov	r2, ip
 8002346:	08d4      	lsrs	r4, r2, #3
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	0312      	lsls	r2, r2, #12
 800234c:	4214      	tst	r4, r2
 800234e:	d007      	beq.n	8002360 <__aeabi_dsub+0x64c>
 8002350:	08c8      	lsrs	r0, r1, #3
 8002352:	4210      	tst	r0, r2
 8002354:	d104      	bne.n	8002360 <__aeabi_dsub+0x64c>
 8002356:	465d      	mov	r5, fp
 8002358:	0004      	movs	r4, r0
 800235a:	08fb      	lsrs	r3, r7, #3
 800235c:	0749      	lsls	r1, r1, #29
 800235e:	430b      	orrs	r3, r1
 8002360:	0f5a      	lsrs	r2, r3, #29
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	08db      	lsrs	r3, r3, #3
 8002366:	0752      	lsls	r2, r2, #29
 8002368:	4313      	orrs	r3, r2
 800236a:	e65d      	b.n	8002028 <__aeabi_dsub+0x314>
 800236c:	074b      	lsls	r3, r1, #29
 800236e:	08ff      	lsrs	r7, r7, #3
 8002370:	433b      	orrs	r3, r7
 8002372:	08cc      	lsrs	r4, r1, #3
 8002374:	e649      	b.n	800200a <__aeabi_dsub+0x2f6>
 8002376:	19dc      	adds	r4, r3, r7
 8002378:	429c      	cmp	r4, r3
 800237a:	419b      	sbcs	r3, r3
 800237c:	4461      	add	r1, ip
 800237e:	4689      	mov	r9, r1
 8002380:	425b      	negs	r3, r3
 8002382:	4499      	add	r9, r3
 8002384:	464b      	mov	r3, r9
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	d400      	bmi.n	800238c <__aeabi_dsub+0x678>
 800238a:	e631      	b.n	8001ff0 <__aeabi_dsub+0x2dc>
 800238c:	464a      	mov	r2, r9
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <__aeabi_dsub+0x6d8>)
 8002390:	401a      	ands	r2, r3
 8002392:	2301      	movs	r3, #1
 8002394:	4691      	mov	r9, r2
 8002396:	4698      	mov	r8, r3
 8002398:	e62a      	b.n	8001ff0 <__aeabi_dsub+0x2dc>
 800239a:	0016      	movs	r6, r2
 800239c:	4664      	mov	r4, ip
 800239e:	3e20      	subs	r6, #32
 80023a0:	40f4      	lsrs	r4, r6
 80023a2:	46a0      	mov	r8, r4
 80023a4:	2a20      	cmp	r2, #32
 80023a6:	d005      	beq.n	80023b4 <__aeabi_dsub+0x6a0>
 80023a8:	2640      	movs	r6, #64	; 0x40
 80023aa:	4664      	mov	r4, ip
 80023ac:	1ab2      	subs	r2, r6, r2
 80023ae:	4094      	lsls	r4, r2
 80023b0:	4323      	orrs	r3, r4
 80023b2:	469a      	mov	sl, r3
 80023b4:	4654      	mov	r4, sl
 80023b6:	1e63      	subs	r3, r4, #1
 80023b8:	419c      	sbcs	r4, r3
 80023ba:	4643      	mov	r3, r8
 80023bc:	431c      	orrs	r4, r3
 80023be:	e5db      	b.n	8001f78 <__aeabi_dsub+0x264>
 80023c0:	0002      	movs	r2, r0
 80023c2:	2400      	movs	r4, #0
 80023c4:	2300      	movs	r3, #0
 80023c6:	e548      	b.n	8001e5a <__aeabi_dsub+0x146>
 80023c8:	19dc      	adds	r4, r3, r7
 80023ca:	42bc      	cmp	r4, r7
 80023cc:	41bf      	sbcs	r7, r7
 80023ce:	4461      	add	r1, ip
 80023d0:	4689      	mov	r9, r1
 80023d2:	427f      	negs	r7, r7
 80023d4:	44b9      	add	r9, r7
 80023d6:	e738      	b.n	800224a <__aeabi_dsub+0x536>
 80023d8:	464b      	mov	r3, r9
 80023da:	4323      	orrs	r3, r4
 80023dc:	d100      	bne.n	80023e0 <__aeabi_dsub+0x6cc>
 80023de:	e69f      	b.n	8002120 <__aeabi_dsub+0x40c>
 80023e0:	e606      	b.n	8001ff0 <__aeabi_dsub+0x2dc>
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	000007fe 	.word	0x000007fe
 80023e8:	000007ff 	.word	0x000007ff
 80023ec:	ff7fffff 	.word	0xff7fffff
 80023f0:	08ff      	lsrs	r7, r7, #3
 80023f2:	074b      	lsls	r3, r1, #29
 80023f4:	433b      	orrs	r3, r7
 80023f6:	08cc      	lsrs	r4, r1, #3
 80023f8:	e616      	b.n	8002028 <__aeabi_dsub+0x314>
 80023fa:	4662      	mov	r2, ip
 80023fc:	08db      	lsrs	r3, r3, #3
 80023fe:	0752      	lsls	r2, r2, #29
 8002400:	4313      	orrs	r3, r2
 8002402:	4662      	mov	r2, ip
 8002404:	08d4      	lsrs	r4, r2, #3
 8002406:	2280      	movs	r2, #128	; 0x80
 8002408:	0312      	lsls	r2, r2, #12
 800240a:	4214      	tst	r4, r2
 800240c:	d007      	beq.n	800241e <__aeabi_dsub+0x70a>
 800240e:	08c8      	lsrs	r0, r1, #3
 8002410:	4210      	tst	r0, r2
 8002412:	d104      	bne.n	800241e <__aeabi_dsub+0x70a>
 8002414:	465d      	mov	r5, fp
 8002416:	0004      	movs	r4, r0
 8002418:	08fb      	lsrs	r3, r7, #3
 800241a:	0749      	lsls	r1, r1, #29
 800241c:	430b      	orrs	r3, r1
 800241e:	0f5a      	lsrs	r2, r3, #29
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	0752      	lsls	r2, r2, #29
 8002424:	08db      	lsrs	r3, r3, #3
 8002426:	4313      	orrs	r3, r2
 8002428:	e5fe      	b.n	8002028 <__aeabi_dsub+0x314>
 800242a:	2300      	movs	r3, #0
 800242c:	4a01      	ldr	r2, [pc, #4]	; (8002434 <__aeabi_dsub+0x720>)
 800242e:	001c      	movs	r4, r3
 8002430:	e513      	b.n	8001e5a <__aeabi_dsub+0x146>
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	000007ff 	.word	0x000007ff

08002438 <__aeabi_dcmpun>:
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	0005      	movs	r5, r0
 800243c:	480c      	ldr	r0, [pc, #48]	; (8002470 <__aeabi_dcmpun+0x38>)
 800243e:	031c      	lsls	r4, r3, #12
 8002440:	0016      	movs	r6, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	030a      	lsls	r2, r1, #12
 8002446:	0049      	lsls	r1, r1, #1
 8002448:	0b12      	lsrs	r2, r2, #12
 800244a:	0d49      	lsrs	r1, r1, #21
 800244c:	0b24      	lsrs	r4, r4, #12
 800244e:	0d5b      	lsrs	r3, r3, #21
 8002450:	4281      	cmp	r1, r0
 8002452:	d008      	beq.n	8002466 <__aeabi_dcmpun+0x2e>
 8002454:	4a06      	ldr	r2, [pc, #24]	; (8002470 <__aeabi_dcmpun+0x38>)
 8002456:	2000      	movs	r0, #0
 8002458:	4293      	cmp	r3, r2
 800245a:	d103      	bne.n	8002464 <__aeabi_dcmpun+0x2c>
 800245c:	0020      	movs	r0, r4
 800245e:	4330      	orrs	r0, r6
 8002460:	1e43      	subs	r3, r0, #1
 8002462:	4198      	sbcs	r0, r3
 8002464:	bd70      	pop	{r4, r5, r6, pc}
 8002466:	2001      	movs	r0, #1
 8002468:	432a      	orrs	r2, r5
 800246a:	d1fb      	bne.n	8002464 <__aeabi_dcmpun+0x2c>
 800246c:	e7f2      	b.n	8002454 <__aeabi_dcmpun+0x1c>
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	000007ff 	.word	0x000007ff

08002474 <__aeabi_d2iz>:
 8002474:	000a      	movs	r2, r1
 8002476:	b530      	push	{r4, r5, lr}
 8002478:	4c13      	ldr	r4, [pc, #76]	; (80024c8 <__aeabi_d2iz+0x54>)
 800247a:	0053      	lsls	r3, r2, #1
 800247c:	0309      	lsls	r1, r1, #12
 800247e:	0005      	movs	r5, r0
 8002480:	0b09      	lsrs	r1, r1, #12
 8002482:	2000      	movs	r0, #0
 8002484:	0d5b      	lsrs	r3, r3, #21
 8002486:	0fd2      	lsrs	r2, r2, #31
 8002488:	42a3      	cmp	r3, r4
 800248a:	dd04      	ble.n	8002496 <__aeabi_d2iz+0x22>
 800248c:	480f      	ldr	r0, [pc, #60]	; (80024cc <__aeabi_d2iz+0x58>)
 800248e:	4283      	cmp	r3, r0
 8002490:	dd02      	ble.n	8002498 <__aeabi_d2iz+0x24>
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <__aeabi_d2iz+0x5c>)
 8002494:	18d0      	adds	r0, r2, r3
 8002496:	bd30      	pop	{r4, r5, pc}
 8002498:	2080      	movs	r0, #128	; 0x80
 800249a:	0340      	lsls	r0, r0, #13
 800249c:	4301      	orrs	r1, r0
 800249e:	480d      	ldr	r0, [pc, #52]	; (80024d4 <__aeabi_d2iz+0x60>)
 80024a0:	1ac0      	subs	r0, r0, r3
 80024a2:	281f      	cmp	r0, #31
 80024a4:	dd08      	ble.n	80024b8 <__aeabi_d2iz+0x44>
 80024a6:	480c      	ldr	r0, [pc, #48]	; (80024d8 <__aeabi_d2iz+0x64>)
 80024a8:	1ac3      	subs	r3, r0, r3
 80024aa:	40d9      	lsrs	r1, r3
 80024ac:	000b      	movs	r3, r1
 80024ae:	4258      	negs	r0, r3
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	d1f0      	bne.n	8002496 <__aeabi_d2iz+0x22>
 80024b4:	0018      	movs	r0, r3
 80024b6:	e7ee      	b.n	8002496 <__aeabi_d2iz+0x22>
 80024b8:	4c08      	ldr	r4, [pc, #32]	; (80024dc <__aeabi_d2iz+0x68>)
 80024ba:	40c5      	lsrs	r5, r0
 80024bc:	46a4      	mov	ip, r4
 80024be:	4463      	add	r3, ip
 80024c0:	4099      	lsls	r1, r3
 80024c2:	000b      	movs	r3, r1
 80024c4:	432b      	orrs	r3, r5
 80024c6:	e7f2      	b.n	80024ae <__aeabi_d2iz+0x3a>
 80024c8:	000003fe 	.word	0x000003fe
 80024cc:	0000041d 	.word	0x0000041d
 80024d0:	7fffffff 	.word	0x7fffffff
 80024d4:	00000433 	.word	0x00000433
 80024d8:	00000413 	.word	0x00000413
 80024dc:	fffffbed 	.word	0xfffffbed

080024e0 <__aeabi_i2d>:
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	2800      	cmp	r0, #0
 80024e4:	d016      	beq.n	8002514 <__aeabi_i2d+0x34>
 80024e6:	17c3      	asrs	r3, r0, #31
 80024e8:	18c5      	adds	r5, r0, r3
 80024ea:	405d      	eors	r5, r3
 80024ec:	0fc4      	lsrs	r4, r0, #31
 80024ee:	0028      	movs	r0, r5
 80024f0:	f000 f91c 	bl	800272c <__clzsi2>
 80024f4:	4a11      	ldr	r2, [pc, #68]	; (800253c <__aeabi_i2d+0x5c>)
 80024f6:	1a12      	subs	r2, r2, r0
 80024f8:	280a      	cmp	r0, #10
 80024fa:	dc16      	bgt.n	800252a <__aeabi_i2d+0x4a>
 80024fc:	0003      	movs	r3, r0
 80024fe:	002e      	movs	r6, r5
 8002500:	3315      	adds	r3, #21
 8002502:	409e      	lsls	r6, r3
 8002504:	230b      	movs	r3, #11
 8002506:	1a18      	subs	r0, r3, r0
 8002508:	40c5      	lsrs	r5, r0
 800250a:	0552      	lsls	r2, r2, #21
 800250c:	032d      	lsls	r5, r5, #12
 800250e:	0b2d      	lsrs	r5, r5, #12
 8002510:	0d53      	lsrs	r3, r2, #21
 8002512:	e003      	b.n	800251c <__aeabi_i2d+0x3c>
 8002514:	2400      	movs	r4, #0
 8002516:	2300      	movs	r3, #0
 8002518:	2500      	movs	r5, #0
 800251a:	2600      	movs	r6, #0
 800251c:	051b      	lsls	r3, r3, #20
 800251e:	432b      	orrs	r3, r5
 8002520:	07e4      	lsls	r4, r4, #31
 8002522:	4323      	orrs	r3, r4
 8002524:	0030      	movs	r0, r6
 8002526:	0019      	movs	r1, r3
 8002528:	bd70      	pop	{r4, r5, r6, pc}
 800252a:	380b      	subs	r0, #11
 800252c:	4085      	lsls	r5, r0
 800252e:	0552      	lsls	r2, r2, #21
 8002530:	032d      	lsls	r5, r5, #12
 8002532:	2600      	movs	r6, #0
 8002534:	0b2d      	lsrs	r5, r5, #12
 8002536:	0d53      	lsrs	r3, r2, #21
 8002538:	e7f0      	b.n	800251c <__aeabi_i2d+0x3c>
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	0000041e 	.word	0x0000041e

08002540 <__aeabi_ui2d>:
 8002540:	b510      	push	{r4, lr}
 8002542:	1e04      	subs	r4, r0, #0
 8002544:	d010      	beq.n	8002568 <__aeabi_ui2d+0x28>
 8002546:	f000 f8f1 	bl	800272c <__clzsi2>
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <__aeabi_ui2d+0x48>)
 800254c:	1a1b      	subs	r3, r3, r0
 800254e:	280a      	cmp	r0, #10
 8002550:	dc11      	bgt.n	8002576 <__aeabi_ui2d+0x36>
 8002552:	220b      	movs	r2, #11
 8002554:	0021      	movs	r1, r4
 8002556:	1a12      	subs	r2, r2, r0
 8002558:	40d1      	lsrs	r1, r2
 800255a:	3015      	adds	r0, #21
 800255c:	030a      	lsls	r2, r1, #12
 800255e:	055b      	lsls	r3, r3, #21
 8002560:	4084      	lsls	r4, r0
 8002562:	0b12      	lsrs	r2, r2, #12
 8002564:	0d5b      	lsrs	r3, r3, #21
 8002566:	e001      	b.n	800256c <__aeabi_ui2d+0x2c>
 8002568:	2300      	movs	r3, #0
 800256a:	2200      	movs	r2, #0
 800256c:	051b      	lsls	r3, r3, #20
 800256e:	4313      	orrs	r3, r2
 8002570:	0020      	movs	r0, r4
 8002572:	0019      	movs	r1, r3
 8002574:	bd10      	pop	{r4, pc}
 8002576:	0022      	movs	r2, r4
 8002578:	380b      	subs	r0, #11
 800257a:	4082      	lsls	r2, r0
 800257c:	055b      	lsls	r3, r3, #21
 800257e:	0312      	lsls	r2, r2, #12
 8002580:	2400      	movs	r4, #0
 8002582:	0b12      	lsrs	r2, r2, #12
 8002584:	0d5b      	lsrs	r3, r3, #21
 8002586:	e7f1      	b.n	800256c <__aeabi_ui2d+0x2c>
 8002588:	0000041e 	.word	0x0000041e

0800258c <__aeabi_f2d>:
 800258c:	b570      	push	{r4, r5, r6, lr}
 800258e:	0043      	lsls	r3, r0, #1
 8002590:	0246      	lsls	r6, r0, #9
 8002592:	0fc4      	lsrs	r4, r0, #31
 8002594:	20fe      	movs	r0, #254	; 0xfe
 8002596:	0e1b      	lsrs	r3, r3, #24
 8002598:	1c59      	adds	r1, r3, #1
 800259a:	0a75      	lsrs	r5, r6, #9
 800259c:	4208      	tst	r0, r1
 800259e:	d00c      	beq.n	80025ba <__aeabi_f2d+0x2e>
 80025a0:	22e0      	movs	r2, #224	; 0xe0
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	4694      	mov	ip, r2
 80025a6:	076d      	lsls	r5, r5, #29
 80025a8:	0b36      	lsrs	r6, r6, #12
 80025aa:	4463      	add	r3, ip
 80025ac:	051b      	lsls	r3, r3, #20
 80025ae:	4333      	orrs	r3, r6
 80025b0:	07e4      	lsls	r4, r4, #31
 80025b2:	4323      	orrs	r3, r4
 80025b4:	0028      	movs	r0, r5
 80025b6:	0019      	movs	r1, r3
 80025b8:	bd70      	pop	{r4, r5, r6, pc}
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d114      	bne.n	80025e8 <__aeabi_f2d+0x5c>
 80025be:	2d00      	cmp	r5, #0
 80025c0:	d01b      	beq.n	80025fa <__aeabi_f2d+0x6e>
 80025c2:	0028      	movs	r0, r5
 80025c4:	f000 f8b2 	bl	800272c <__clzsi2>
 80025c8:	280a      	cmp	r0, #10
 80025ca:	dc1c      	bgt.n	8002606 <__aeabi_f2d+0x7a>
 80025cc:	230b      	movs	r3, #11
 80025ce:	002e      	movs	r6, r5
 80025d0:	1a1b      	subs	r3, r3, r0
 80025d2:	40de      	lsrs	r6, r3
 80025d4:	0003      	movs	r3, r0
 80025d6:	3315      	adds	r3, #21
 80025d8:	409d      	lsls	r5, r3
 80025da:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <__aeabi_f2d+0x88>)
 80025dc:	0336      	lsls	r6, r6, #12
 80025de:	1a12      	subs	r2, r2, r0
 80025e0:	0552      	lsls	r2, r2, #21
 80025e2:	0b36      	lsrs	r6, r6, #12
 80025e4:	0d53      	lsrs	r3, r2, #21
 80025e6:	e7e1      	b.n	80025ac <__aeabi_f2d+0x20>
 80025e8:	2d00      	cmp	r5, #0
 80025ea:	d009      	beq.n	8002600 <__aeabi_f2d+0x74>
 80025ec:	2280      	movs	r2, #128	; 0x80
 80025ee:	0b36      	lsrs	r6, r6, #12
 80025f0:	0312      	lsls	r2, r2, #12
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <__aeabi_f2d+0x8c>)
 80025f4:	076d      	lsls	r5, r5, #29
 80025f6:	4316      	orrs	r6, r2
 80025f8:	e7d8      	b.n	80025ac <__aeabi_f2d+0x20>
 80025fa:	2300      	movs	r3, #0
 80025fc:	2600      	movs	r6, #0
 80025fe:	e7d5      	b.n	80025ac <__aeabi_f2d+0x20>
 8002600:	2600      	movs	r6, #0
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <__aeabi_f2d+0x8c>)
 8002604:	e7d2      	b.n	80025ac <__aeabi_f2d+0x20>
 8002606:	0003      	movs	r3, r0
 8002608:	3b0b      	subs	r3, #11
 800260a:	409d      	lsls	r5, r3
 800260c:	002e      	movs	r6, r5
 800260e:	2500      	movs	r5, #0
 8002610:	e7e3      	b.n	80025da <__aeabi_f2d+0x4e>
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	00000389 	.word	0x00000389
 8002618:	000007ff 	.word	0x000007ff

0800261c <__aeabi_d2f>:
 800261c:	0002      	movs	r2, r0
 800261e:	004b      	lsls	r3, r1, #1
 8002620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002622:	0d5b      	lsrs	r3, r3, #21
 8002624:	030c      	lsls	r4, r1, #12
 8002626:	4e3d      	ldr	r6, [pc, #244]	; (800271c <__aeabi_d2f+0x100>)
 8002628:	0a64      	lsrs	r4, r4, #9
 800262a:	0f40      	lsrs	r0, r0, #29
 800262c:	1c5f      	adds	r7, r3, #1
 800262e:	0fc9      	lsrs	r1, r1, #31
 8002630:	4304      	orrs	r4, r0
 8002632:	00d5      	lsls	r5, r2, #3
 8002634:	4237      	tst	r7, r6
 8002636:	d00a      	beq.n	800264e <__aeabi_d2f+0x32>
 8002638:	4839      	ldr	r0, [pc, #228]	; (8002720 <__aeabi_d2f+0x104>)
 800263a:	181e      	adds	r6, r3, r0
 800263c:	2efe      	cmp	r6, #254	; 0xfe
 800263e:	dd16      	ble.n	800266e <__aeabi_d2f+0x52>
 8002640:	20ff      	movs	r0, #255	; 0xff
 8002642:	2400      	movs	r4, #0
 8002644:	05c0      	lsls	r0, r0, #23
 8002646:	4320      	orrs	r0, r4
 8002648:	07c9      	lsls	r1, r1, #31
 800264a:	4308      	orrs	r0, r1
 800264c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <__aeabi_d2f+0x44>
 8002652:	432c      	orrs	r4, r5
 8002654:	d026      	beq.n	80026a4 <__aeabi_d2f+0x88>
 8002656:	2205      	movs	r2, #5
 8002658:	0192      	lsls	r2, r2, #6
 800265a:	0a54      	lsrs	r4, r2, #9
 800265c:	b2d8      	uxtb	r0, r3
 800265e:	e7f1      	b.n	8002644 <__aeabi_d2f+0x28>
 8002660:	4325      	orrs	r5, r4
 8002662:	d0ed      	beq.n	8002640 <__aeabi_d2f+0x24>
 8002664:	2080      	movs	r0, #128	; 0x80
 8002666:	03c0      	lsls	r0, r0, #15
 8002668:	4304      	orrs	r4, r0
 800266a:	20ff      	movs	r0, #255	; 0xff
 800266c:	e7ea      	b.n	8002644 <__aeabi_d2f+0x28>
 800266e:	2e00      	cmp	r6, #0
 8002670:	dd1b      	ble.n	80026aa <__aeabi_d2f+0x8e>
 8002672:	0192      	lsls	r2, r2, #6
 8002674:	1e53      	subs	r3, r2, #1
 8002676:	419a      	sbcs	r2, r3
 8002678:	00e4      	lsls	r4, r4, #3
 800267a:	0f6d      	lsrs	r5, r5, #29
 800267c:	4322      	orrs	r2, r4
 800267e:	432a      	orrs	r2, r5
 8002680:	0753      	lsls	r3, r2, #29
 8002682:	d048      	beq.n	8002716 <__aeabi_d2f+0xfa>
 8002684:	230f      	movs	r3, #15
 8002686:	4013      	ands	r3, r2
 8002688:	2b04      	cmp	r3, #4
 800268a:	d000      	beq.n	800268e <__aeabi_d2f+0x72>
 800268c:	3204      	adds	r2, #4
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	04db      	lsls	r3, r3, #19
 8002692:	4013      	ands	r3, r2
 8002694:	d03f      	beq.n	8002716 <__aeabi_d2f+0xfa>
 8002696:	1c70      	adds	r0, r6, #1
 8002698:	2efe      	cmp	r6, #254	; 0xfe
 800269a:	d0d1      	beq.n	8002640 <__aeabi_d2f+0x24>
 800269c:	0192      	lsls	r2, r2, #6
 800269e:	0a54      	lsrs	r4, r2, #9
 80026a0:	b2c0      	uxtb	r0, r0
 80026a2:	e7cf      	b.n	8002644 <__aeabi_d2f+0x28>
 80026a4:	2000      	movs	r0, #0
 80026a6:	2400      	movs	r4, #0
 80026a8:	e7cc      	b.n	8002644 <__aeabi_d2f+0x28>
 80026aa:	0032      	movs	r2, r6
 80026ac:	3217      	adds	r2, #23
 80026ae:	db22      	blt.n	80026f6 <__aeabi_d2f+0xda>
 80026b0:	2080      	movs	r0, #128	; 0x80
 80026b2:	0400      	lsls	r0, r0, #16
 80026b4:	4320      	orrs	r0, r4
 80026b6:	241e      	movs	r4, #30
 80026b8:	1ba4      	subs	r4, r4, r6
 80026ba:	2c1f      	cmp	r4, #31
 80026bc:	dd1d      	ble.n	80026fa <__aeabi_d2f+0xde>
 80026be:	2202      	movs	r2, #2
 80026c0:	4252      	negs	r2, r2
 80026c2:	1b96      	subs	r6, r2, r6
 80026c4:	0002      	movs	r2, r0
 80026c6:	40f2      	lsrs	r2, r6
 80026c8:	0016      	movs	r6, r2
 80026ca:	2c20      	cmp	r4, #32
 80026cc:	d004      	beq.n	80026d8 <__aeabi_d2f+0xbc>
 80026ce:	4a15      	ldr	r2, [pc, #84]	; (8002724 <__aeabi_d2f+0x108>)
 80026d0:	4694      	mov	ip, r2
 80026d2:	4463      	add	r3, ip
 80026d4:	4098      	lsls	r0, r3
 80026d6:	4305      	orrs	r5, r0
 80026d8:	002a      	movs	r2, r5
 80026da:	1e53      	subs	r3, r2, #1
 80026dc:	419a      	sbcs	r2, r3
 80026de:	4332      	orrs	r2, r6
 80026e0:	2600      	movs	r6, #0
 80026e2:	0753      	lsls	r3, r2, #29
 80026e4:	d1ce      	bne.n	8002684 <__aeabi_d2f+0x68>
 80026e6:	2480      	movs	r4, #128	; 0x80
 80026e8:	0013      	movs	r3, r2
 80026ea:	04e4      	lsls	r4, r4, #19
 80026ec:	2001      	movs	r0, #1
 80026ee:	4023      	ands	r3, r4
 80026f0:	4222      	tst	r2, r4
 80026f2:	d1d3      	bne.n	800269c <__aeabi_d2f+0x80>
 80026f4:	e7b0      	b.n	8002658 <__aeabi_d2f+0x3c>
 80026f6:	2300      	movs	r3, #0
 80026f8:	e7ad      	b.n	8002656 <__aeabi_d2f+0x3a>
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <__aeabi_d2f+0x10c>)
 80026fc:	4694      	mov	ip, r2
 80026fe:	002a      	movs	r2, r5
 8002700:	40e2      	lsrs	r2, r4
 8002702:	0014      	movs	r4, r2
 8002704:	002a      	movs	r2, r5
 8002706:	4463      	add	r3, ip
 8002708:	409a      	lsls	r2, r3
 800270a:	4098      	lsls	r0, r3
 800270c:	1e55      	subs	r5, r2, #1
 800270e:	41aa      	sbcs	r2, r5
 8002710:	4302      	orrs	r2, r0
 8002712:	4322      	orrs	r2, r4
 8002714:	e7e4      	b.n	80026e0 <__aeabi_d2f+0xc4>
 8002716:	0033      	movs	r3, r6
 8002718:	e79e      	b.n	8002658 <__aeabi_d2f+0x3c>
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	000007fe 	.word	0x000007fe
 8002720:	fffffc80 	.word	0xfffffc80
 8002724:	fffffca2 	.word	0xfffffca2
 8002728:	fffffc82 	.word	0xfffffc82

0800272c <__clzsi2>:
 800272c:	211c      	movs	r1, #28
 800272e:	2301      	movs	r3, #1
 8002730:	041b      	lsls	r3, r3, #16
 8002732:	4298      	cmp	r0, r3
 8002734:	d301      	bcc.n	800273a <__clzsi2+0xe>
 8002736:	0c00      	lsrs	r0, r0, #16
 8002738:	3910      	subs	r1, #16
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	4298      	cmp	r0, r3
 800273e:	d301      	bcc.n	8002744 <__clzsi2+0x18>
 8002740:	0a00      	lsrs	r0, r0, #8
 8002742:	3908      	subs	r1, #8
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	4298      	cmp	r0, r3
 8002748:	d301      	bcc.n	800274e <__clzsi2+0x22>
 800274a:	0900      	lsrs	r0, r0, #4
 800274c:	3904      	subs	r1, #4
 800274e:	a202      	add	r2, pc, #8	; (adr r2, 8002758 <__clzsi2+0x2c>)
 8002750:	5c10      	ldrb	r0, [r2, r0]
 8002752:	1840      	adds	r0, r0, r1
 8002754:	4770      	bx	lr
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	02020304 	.word	0x02020304
 800275c:	01010101 	.word	0x01010101
	...

08002768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800276c:	f000 ff06 	bl	800357c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002770:	f000 f88a 	bl	8002888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002774:	f000 fa46 	bl	8002c04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002778:	f000 fa14 	bl	8002ba4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800277c:	f000 f8d0 	bl	8002920 <MX_SPI1_Init>
  MX_TIM3_Init();
 8002780:	f000 f90c 	bl	800299c <MX_TIM3_Init>
  MX_TIM14_Init();
 8002784:	f000 f96e 	bl	8002a64 <MX_TIM14_Init>
  MX_TIM16_Init();
 8002788:	f000 f9bc 	bl	8002b04 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  // Filter_Configuration(&hcan1, 0x5E6, 0x400, 0x000);
  // CAN_Interrupt_Enabler(&hcan1);
  // if(HAL_CAN_Start(&hcan1) != HAL_OK) Error_Handler();
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800278c:	4b36      	ldr	r3, [pc, #216]	; (8002868 <main+0x100>)
 800278e:	2100      	movs	r1, #0
 8002790:	0018      	movs	r0, r3
 8002792:	f002 f929 	bl	80049e8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002796:	4b35      	ldr	r3, [pc, #212]	; (800286c <main+0x104>)
 8002798:	213c      	movs	r1, #60	; 0x3c
 800279a:	0018      	movs	r0, r3
 800279c:	f002 fad6 	bl	8004d4c <HAL_TIM_Encoder_Start>
  // HAL_TIM_Base_Start(&htim6); //TODO: Check
  mot_init();
 80027a0:	f000 faf4 	bl	8002d8c <mot_init>
  mot_set(0xFFFF, MOT_FORWARD);
 80027a4:	4b32      	ldr	r3, [pc, #200]	; (8002870 <main+0x108>)
 80027a6:	2101      	movs	r1, #1
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 fb77 	bl	8002e9c <mot_set>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
    sprintf(printf_buf, "odom:%f\n", mot_get_odometer());
 80027ae:	f000 fb93 	bl	8002ed8 <mot_get_odometer>
 80027b2:	1c03      	adds	r3, r0, #0
 80027b4:	1c18      	adds	r0, r3, #0
 80027b6:	f7ff fee9 	bl	800258c <__aeabi_f2d>
 80027ba:	0002      	movs	r2, r0
 80027bc:	000b      	movs	r3, r1
 80027be:	492d      	ldr	r1, [pc, #180]	; (8002874 <main+0x10c>)
 80027c0:	482d      	ldr	r0, [pc, #180]	; (8002878 <main+0x110>)
 80027c2:	f004 fb3b 	bl	8006e3c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)printf_buf, strlen(printf_buf), 1000);
 80027c6:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <main+0x110>)
 80027c8:	0018      	movs	r0, r3
 80027ca:	f7fd fc9d 	bl	8000108 <strlen>
 80027ce:	0003      	movs	r3, r0
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	23fa      	movs	r3, #250	; 0xfa
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4928      	ldr	r1, [pc, #160]	; (8002878 <main+0x110>)
 80027d8:	4828      	ldr	r0, [pc, #160]	; (800287c <main+0x114>)
 80027da:	f003 fa6d 	bl	8005cb8 <HAL_UART_Transmit>

	static uint8_t dir = 0;
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	019b      	lsls	r3, r3, #6
 80027e2:	4a27      	ldr	r2, [pc, #156]	; (8002880 <main+0x118>)
 80027e4:	0019      	movs	r1, r3
 80027e6:	0010      	movs	r0, r2
 80027e8:	f001 f9e4 	bl	8003bb4 <HAL_GPIO_ReadPin>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d1de      	bne.n	80027ae <main+0x46>
		if(dir == 0)
 80027f0:	4b24      	ldr	r3, [pc, #144]	; (8002884 <main+0x11c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <main+0x9c>
				mot_set(0xFFFF, MOT_FORWARD);
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <main+0x108>)
 80027fa:	2101      	movs	r1, #1
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 fb4d 	bl	8002e9c <mot_set>
 8002802:	e01e      	b.n	8002842 <main+0xda>
			else if(dir == 1)
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <main+0x11c>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <main+0xb0>
				mot_set(0xFFFF, MOT_STOP);
 800280c:	4b18      	ldr	r3, [pc, #96]	; (8002870 <main+0x108>)
 800280e:	2100      	movs	r1, #0
 8002810:	0018      	movs	r0, r3
 8002812:	f000 fb43 	bl	8002e9c <mot_set>
 8002816:	e014      	b.n	8002842 <main+0xda>
			else if(dir == 2)
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <main+0x11c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d107      	bne.n	8002830 <main+0xc8>
				mot_set(0xFFFF, MOT_BACKWARD);
 8002820:	2301      	movs	r3, #1
 8002822:	425b      	negs	r3, r3
 8002824:	4a12      	ldr	r2, [pc, #72]	; (8002870 <main+0x108>)
 8002826:	0019      	movs	r1, r3
 8002828:	0010      	movs	r0, r2
 800282a:	f000 fb37 	bl	8002e9c <mot_set>
 800282e:	e008      	b.n	8002842 <main+0xda>
			else if(dir == 3)
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <main+0x11c>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d104      	bne.n	8002842 <main+0xda>
				mot_set(0xFFFF, MOT_STOP);
 8002838:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <main+0x108>)
 800283a:	2100      	movs	r1, #0
 800283c:	0018      	movs	r0, r3
 800283e:	f000 fb2d 	bl	8002e9c <mot_set>
			dir++;
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <main+0x11c>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	3301      	adds	r3, #1
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <main+0x11c>)
 800284c:	701a      	strb	r2, [r3, #0]
			if(dir == 4)
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <main+0x11c>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d102      	bne.n	800285c <main+0xf4>
				dir = 0;
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <main+0x11c>)
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 800285c:	23fa      	movs	r3, #250	; 0xfa
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	0018      	movs	r0, r3
 8002862:	f000 feef 	bl	8003644 <HAL_Delay>
  while (1){
 8002866:	e7a2      	b.n	80027ae <main+0x46>
 8002868:	200002a4 	.word	0x200002a4
 800286c:	2000025c 	.word	0x2000025c
 8002870:	0000ffff 	.word	0x0000ffff
 8002874:	080094b0 	.word	0x080094b0
 8002878:	200003bc 	.word	0x200003bc
 800287c:	20000334 	.word	0x20000334
 8002880:	48000800 	.word	0x48000800
 8002884:	200004bc 	.word	0x200004bc

08002888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b091      	sub	sp, #68	; 0x44
 800288c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800288e:	2410      	movs	r4, #16
 8002890:	193b      	adds	r3, r7, r4
 8002892:	0018      	movs	r0, r3
 8002894:	2330      	movs	r3, #48	; 0x30
 8002896:	001a      	movs	r2, r3
 8002898:	2100      	movs	r1, #0
 800289a:	f003 fe59 	bl	8006550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800289e:	003b      	movs	r3, r7
 80028a0:	0018      	movs	r0, r3
 80028a2:	2310      	movs	r3, #16
 80028a4:	001a      	movs	r2, r3
 80028a6:	2100      	movs	r1, #0
 80028a8:	f003 fe52 	bl	8006550 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028ac:	0021      	movs	r1, r4
 80028ae:	187b      	adds	r3, r7, r1
 80028b0:	2202      	movs	r2, #2
 80028b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028b4:	187b      	adds	r3, r7, r1
 80028b6:	2201      	movs	r2, #1
 80028b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	2210      	movs	r2, #16
 80028be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028c0:	187b      	adds	r3, r7, r1
 80028c2:	2202      	movs	r2, #2
 80028c4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	2280      	movs	r2, #128	; 0x80
 80028ca:	0212      	lsls	r2, r2, #8
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	2280      	movs	r2, #128	; 0x80
 80028d2:	0352      	lsls	r2, r2, #13
 80028d4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	2200      	movs	r2, #0
 80028da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028dc:	187b      	adds	r3, r7, r1
 80028de:	0018      	movs	r0, r3
 80028e0:	f001 f9a2 	bl	8003c28 <HAL_RCC_OscConfig>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d001      	beq.n	80028ec <SystemClock_Config+0x64>
  {
    Error_Handler();
 80028e8:	f000 fa4a 	bl	8002d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ec:	003b      	movs	r3, r7
 80028ee:	2207      	movs	r2, #7
 80028f0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028f2:	003b      	movs	r3, r7
 80028f4:	2202      	movs	r2, #2
 80028f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028f8:	003b      	movs	r3, r7
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028fe:	003b      	movs	r3, r7
 8002900:	2200      	movs	r2, #0
 8002902:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002904:	003b      	movs	r3, r7
 8002906:	2101      	movs	r1, #1
 8002908:	0018      	movs	r0, r3
 800290a:	f001 fcab 	bl	8004264 <HAL_RCC_ClockConfig>
 800290e:	1e03      	subs	r3, r0, #0
 8002910:	d001      	beq.n	8002916 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002912:	f000 fa35 	bl	8002d80 <Error_Handler>
  }
}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	46bd      	mov	sp, r7
 800291a:	b011      	add	sp, #68	; 0x44
 800291c:	bd90      	pop	{r4, r7, pc}
	...

08002920 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <MX_SPI1_Init+0x74>)
 8002926:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <MX_SPI1_Init+0x78>)
 8002928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800292a:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <MX_SPI1_Init+0x74>)
 800292c:	2282      	movs	r2, #130	; 0x82
 800292e:	0052      	lsls	r2, r2, #1
 8002930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <MX_SPI1_Init+0x74>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002938:	4b16      	ldr	r3, [pc, #88]	; (8002994 <MX_SPI1_Init+0x74>)
 800293a:	22c0      	movs	r2, #192	; 0xc0
 800293c:	0092      	lsls	r2, r2, #2
 800293e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <MX_SPI1_Init+0x74>)
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <MX_SPI1_Init+0x74>)
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <MX_SPI1_Init+0x74>)
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <MX_SPI1_Init+0x74>)
 8002956:	2210      	movs	r2, #16
 8002958:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <MX_SPI1_Init+0x74>)
 800295c:	2200      	movs	r2, #0
 800295e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <MX_SPI1_Init+0x74>)
 8002962:	2200      	movs	r2, #0
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <MX_SPI1_Init+0x74>)
 8002968:	2200      	movs	r2, #0
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <MX_SPI1_Init+0x74>)
 800296e:	2207      	movs	r2, #7
 8002970:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <MX_SPI1_Init+0x74>)
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <MX_SPI1_Init+0x74>)
 800297a:	2208      	movs	r2, #8
 800297c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800297e:	4b05      	ldr	r3, [pc, #20]	; (8002994 <MX_SPI1_Init+0x74>)
 8002980:	0018      	movs	r0, r3
 8002982:	f001 fdb5 	bl	80044f0 <HAL_SPI_Init>
 8002986:	1e03      	subs	r3, r0, #0
 8002988:	d001      	beq.n	800298e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800298a:	f000 f9f9 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	200001f8 	.word	0x200001f8
 8002998:	40013000 	.word	0x40013000

0800299c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b08d      	sub	sp, #52	; 0x34
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029a2:	240c      	movs	r4, #12
 80029a4:	193b      	adds	r3, r7, r4
 80029a6:	0018      	movs	r0, r3
 80029a8:	2324      	movs	r3, #36	; 0x24
 80029aa:	001a      	movs	r2, r3
 80029ac:	2100      	movs	r1, #0
 80029ae:	f003 fdcf 	bl	8006550 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	0018      	movs	r0, r3
 80029b6:	2308      	movs	r3, #8
 80029b8:	001a      	movs	r2, r3
 80029ba:	2100      	movs	r1, #0
 80029bc:	f003 fdc8 	bl	8006550 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029c0:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <MX_TIM3_Init+0xbc>)
 80029c2:	4a26      	ldr	r2, [pc, #152]	; (8002a5c <MX_TIM3_Init+0xc0>)
 80029c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029c6:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <MX_TIM3_Init+0xbc>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029cc:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <MX_TIM3_Init+0xbc>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80029d2:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <MX_TIM3_Init+0xbc>)
 80029d4:	4a22      	ldr	r2, [pc, #136]	; (8002a60 <MX_TIM3_Init+0xc4>)
 80029d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d8:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <MX_TIM3_Init+0xbc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029de:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <MX_TIM3_Init+0xbc>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80029e4:	0021      	movs	r1, r4
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	2200      	movs	r2, #0
 80029f0:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029f2:	187b      	adds	r3, r7, r1
 80029f4:	2201      	movs	r2, #1
 80029f6:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80029fe:	187b      	adds	r3, r7, r1
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a10:	187b      	adds	r3, r7, r1
 8002a12:	2200      	movs	r2, #0
 8002a14:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	2200      	movs	r2, #0
 8002a1a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a1c:	187a      	adds	r2, r7, r1
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <MX_TIM3_Init+0xbc>)
 8002a20:	0011      	movs	r1, r2
 8002a22:	0018      	movs	r0, r3
 8002a24:	f002 f8ea 	bl	8004bfc <HAL_TIM_Encoder_Init>
 8002a28:	1e03      	subs	r3, r0, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002a2c:	f000 f9a8 	bl	8002d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a30:	1d3b      	adds	r3, r7, #4
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	2200      	movs	r2, #0
 8002a3a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a3c:	1d3a      	adds	r2, r7, #4
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <MX_TIM3_Init+0xbc>)
 8002a40:	0011      	movs	r1, r2
 8002a42:	0018      	movs	r0, r3
 8002a44:	f003 f87c 	bl	8005b40 <HAL_TIMEx_MasterConfigSynchronization>
 8002a48:	1e03      	subs	r3, r0, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002a4c:	f000 f998 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b00d      	add	sp, #52	; 0x34
 8002a56:	bd90      	pop	{r4, r7, pc}
 8002a58:	2000025c 	.word	0x2000025c
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	0000ffff 	.word	0x0000ffff

08002a64 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	231c      	movs	r3, #28
 8002a70:	001a      	movs	r2, r3
 8002a72:	2100      	movs	r1, #0
 8002a74:	f003 fd6c 	bl	8006550 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002a78:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <MX_TIM14_Init+0x94>)
 8002a7a:	4a20      	ldr	r2, [pc, #128]	; (8002afc <MX_TIM14_Init+0x98>)
 8002a7c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <MX_TIM14_Init+0x94>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a84:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <MX_TIM14_Init+0x94>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <MX_TIM14_Init+0x94>)
 8002a8c:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <MX_TIM14_Init+0x9c>)
 8002a8e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <MX_TIM14_Init+0x94>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <MX_TIM14_Init+0x94>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <MX_TIM14_Init+0x94>)
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f001 fefa 	bl	8004898 <HAL_TIM_Base_Init>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8002aa8:	f000 f96a 	bl	8002d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002aac:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <MX_TIM14_Init+0x94>)
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f001 ff42 	bl	8004938 <HAL_TIM_PWM_Init>
 8002ab4:	1e03      	subs	r3, r0, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8002ab8:	f000 f962 	bl	8002d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	2260      	movs	r2, #96	; 0x60
 8002ac0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ad4:	1d39      	adds	r1, r7, #4
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <MX_TIM14_Init+0x94>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	0018      	movs	r0, r3
 8002adc:	f002 fb94 	bl	8005208 <HAL_TIM_PWM_ConfigChannel>
 8002ae0:	1e03      	subs	r3, r0, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002ae4:	f000 f94c 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <MX_TIM14_Init+0x94>)
 8002aea:	0018      	movs	r0, r3
 8002aec:	f000 fb92 	bl	8003214 <HAL_TIM_MspPostInit>

}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b008      	add	sp, #32
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	200002a4 	.word	0x200002a4
 8002afc:	40002000 	.word	0x40002000
 8002b00:	0000ffff 	.word	0x0000ffff

08002b04 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b0a:	003b      	movs	r3, r7
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	2310      	movs	r3, #16
 8002b10:	001a      	movs	r2, r3
 8002b12:	2100      	movs	r1, #0
 8002b14:	f003 fd1c 	bl	8006550 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002b18:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <MX_TIM16_Init+0x94>)
 8002b1a:	4a20      	ldr	r2, [pc, #128]	; (8002b9c <MX_TIM16_Init+0x98>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <MX_TIM16_Init+0x94>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <MX_TIM16_Init+0x94>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <MX_TIM16_Init+0x94>)
 8002b2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ba0 <MX_TIM16_Init+0x9c>)
 8002b2e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <MX_TIM16_Init+0x94>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002b36:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <MX_TIM16_Init+0x94>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3c:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <MX_TIM16_Init+0x94>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <MX_TIM16_Init+0x94>)
 8002b44:	0018      	movs	r0, r3
 8002b46:	f001 fea7 	bl	8004898 <HAL_TIM_Base_Init>
 8002b4a:	1e03      	subs	r3, r0, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8002b4e:	f000 f917 	bl	8002d80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <MX_TIM16_Init+0x94>)
 8002b54:	0018      	movs	r0, r3
 8002b56:	f001 fff9 	bl	8004b4c <HAL_TIM_IC_Init>
 8002b5a:	1e03      	subs	r3, r0, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002b5e:	f000 f90f 	bl	8002d80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b62:	003b      	movs	r3, r7
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b68:	003b      	movs	r3, r7
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b6e:	003b      	movs	r3, r7
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002b74:	003b      	movs	r3, r7
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b7a:	0039      	movs	r1, r7
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <MX_TIM16_Init+0x94>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	0018      	movs	r0, r3
 8002b82:	f002 fa9d 	bl	80050c0 <HAL_TIM_IC_ConfigChannel>
 8002b86:	1e03      	subs	r3, r0, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM16_Init+0x8a>
  {
    Error_Handler();
 8002b8a:	f000 f8f9 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b004      	add	sp, #16
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	200002ec 	.word	0x200002ec
 8002b9c:	40014400 	.word	0x40014400
 8002ba0:	0000ffff 	.word	0x0000ffff

08002ba4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <MX_USART2_UART_Init+0x58>)
 8002baa:	4a15      	ldr	r2, [pc, #84]	; (8002c00 <MX_USART2_UART_Init+0x5c>)
 8002bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <MX_USART2_UART_Init+0x58>)
 8002bb0:	22e1      	movs	r2, #225	; 0xe1
 8002bb2:	0252      	lsls	r2, r2, #9
 8002bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bb6:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <MX_USART2_UART_Init+0x58>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <MX_USART2_UART_Init+0x58>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <MX_USART2_UART_Init+0x58>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <MX_USART2_UART_Init+0x58>)
 8002bca:	220c      	movs	r2, #12
 8002bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <MX_USART2_UART_Init+0x58>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <MX_USART2_UART_Init+0x58>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bda:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <MX_USART2_UART_Init+0x58>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <MX_USART2_UART_Init+0x58>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <MX_USART2_UART_Init+0x58>)
 8002be8:	0018      	movs	r0, r3
 8002bea:	f003 f811 	bl	8005c10 <HAL_UART_Init>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002bf2:	f000 f8c5 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000334 	.word	0x20000334
 8002c00:	40004400 	.word	0x40004400

08002c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b08b      	sub	sp, #44	; 0x2c
 8002c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0a:	2414      	movs	r4, #20
 8002c0c:	193b      	adds	r3, r7, r4
 8002c0e:	0018      	movs	r0, r3
 8002c10:	2314      	movs	r3, #20
 8002c12:	001a      	movs	r2, r3
 8002c14:	2100      	movs	r1, #0
 8002c16:	f003 fc9b 	bl	8006550 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1a:	4b4c      	ldr	r3, [pc, #304]	; (8002d4c <MX_GPIO_Init+0x148>)
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <MX_GPIO_Init+0x148>)
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	0309      	lsls	r1, r1, #12
 8002c24:	430a      	orrs	r2, r1
 8002c26:	615a      	str	r2, [r3, #20]
 8002c28:	4b48      	ldr	r3, [pc, #288]	; (8002d4c <MX_GPIO_Init+0x148>)
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	031b      	lsls	r3, r3, #12
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c36:	4b45      	ldr	r3, [pc, #276]	; (8002d4c <MX_GPIO_Init+0x148>)
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	4b44      	ldr	r3, [pc, #272]	; (8002d4c <MX_GPIO_Init+0x148>)
 8002c3c:	2180      	movs	r1, #128	; 0x80
 8002c3e:	03c9      	lsls	r1, r1, #15
 8002c40:	430a      	orrs	r2, r1
 8002c42:	615a      	str	r2, [r3, #20]
 8002c44:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <MX_GPIO_Init+0x148>)
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	03db      	lsls	r3, r3, #15
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c52:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <MX_GPIO_Init+0x148>)
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	4b3d      	ldr	r3, [pc, #244]	; (8002d4c <MX_GPIO_Init+0x148>)
 8002c58:	2180      	movs	r1, #128	; 0x80
 8002c5a:	0289      	lsls	r1, r1, #10
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	615a      	str	r2, [r3, #20]
 8002c60:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <MX_GPIO_Init+0x148>)
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	029b      	lsls	r3, r3, #10
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6e:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <MX_GPIO_Init+0x148>)
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <MX_GPIO_Init+0x148>)
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	02c9      	lsls	r1, r1, #11
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	615a      	str	r2, [r3, #20]
 8002c7c:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <MX_GPIO_Init+0x148>)
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	02db      	lsls	r3, r3, #11
 8002c84:	4013      	ands	r3, r2
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c8a:	2390      	movs	r3, #144	; 0x90
 8002c8c:	05db      	lsls	r3, r3, #23
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2120      	movs	r1, #32
 8002c92:	0018      	movs	r0, r3
 8002c94:	f000 ffab 	bl	8003bee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002c98:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <MX_GPIO_Init+0x14c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2180      	movs	r1, #128	; 0x80
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 ffa5 	bl	8003bee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <MX_GPIO_Init+0x150>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2140      	movs	r1, #64	; 0x40
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 ff9f 	bl	8003bee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002cb0:	193b      	adds	r3, r7, r4
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	0192      	lsls	r2, r2, #6
 8002cb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	2284      	movs	r2, #132	; 0x84
 8002cbc:	0392      	lsls	r2, r2, #14
 8002cbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	4a21      	ldr	r2, [pc, #132]	; (8002d50 <MX_GPIO_Init+0x14c>)
 8002cca:	0019      	movs	r1, r3
 8002ccc:	0010      	movs	r0, r2
 8002cce:	f000 fe01 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd8:	193b      	adds	r3, r7, r4
 8002cda:	2201      	movs	r2, #1
 8002cdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	193b      	adds	r3, r7, r4
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002cea:	193a      	adds	r2, r7, r4
 8002cec:	2390      	movs	r3, #144	; 0x90
 8002cee:	05db      	lsls	r3, r3, #23
 8002cf0:	0011      	movs	r1, r2
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 fdee 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cf8:	193b      	adds	r3, r7, r4
 8002cfa:	2280      	movs	r2, #128	; 0x80
 8002cfc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cfe:	193b      	adds	r3, r7, r4
 8002d00:	2201      	movs	r2, #1
 8002d02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	193b      	adds	r3, r7, r4
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0a:	193b      	adds	r3, r7, r4
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d10:	193b      	adds	r3, r7, r4
 8002d12:	4a0f      	ldr	r2, [pc, #60]	; (8002d50 <MX_GPIO_Init+0x14c>)
 8002d14:	0019      	movs	r1, r3
 8002d16:	0010      	movs	r0, r2
 8002d18:	f000 fddc 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d1c:	0021      	movs	r1, r4
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	2201      	movs	r2, #1
 8002d28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	4a06      	ldr	r2, [pc, #24]	; (8002d54 <MX_GPIO_Init+0x150>)
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	0010      	movs	r0, r2
 8002d3e:	f000 fdc9 	bl	80038d4 <HAL_GPIO_Init>

}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b00b      	add	sp, #44	; 0x2c
 8002d48:	bd90      	pop	{r4, r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	48000800 	.word	0x48000800
 8002d54:	48000400 	.word	0x48000400

08002d58 <HAL_TIM_PeriodElapsedCallback>:
//	}

//	__enable_irq();
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == MOT_ENC_TIM)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d103      	bne.n	8002d72 <HAL_TIM_PeriodElapsedCallback+0x1a>
		mot_enc_tim_PeriodElapsedCallback(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f000 f909 	bl	8002f84 <mot_enc_tim_PeriodElapsedCallback>
//	  	TxHeader.RTR = CAN_RTR_DATA;
//	    // sending 2 bytes through can, the MSB being the direction bit and the rest of of the bits being the rotations per second bits
//	  	if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,dir_rpst,&TxMailbox) != HAL_OK)
//	  		Error_Handler();
//	}
}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b002      	add	sp, #8
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	40000400 	.word	0x40000400

08002d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d84:	b672      	cpsid	i
}
 8002d86:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d88:	e7fe      	b.n	8002d88 <Error_Handler+0x8>
	...

08002d8c <mot_init>:
#pragma GCC diagnostic ignored "-Wunused-variable"
static float angularVelocity = 0;
static float angularAcceleration = 0;
#pragma GCC diagnostic pop

void mot_init(void){
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
	mot_dir = MOT_FWD;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <mot_init+0x38>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
	mot_pwm = 0;
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <mot_init+0x3c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	801a      	strh	r2, [r3, #0]
	mot_pos = MOT_ENC_TIM->CNT;
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <mot_init+0x40>)
 8002d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <mot_init+0x44>)
 8002da2:	601a      	str	r2, [r3, #0]
	mot_last_sample_time = HAL_GetTick();
 8002da4:	f000 fc44 	bl	8003630 <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <mot_init+0x48>)
 8002dac:	601a      	str	r2, [r3, #0]
	mot_set(mot_pwm, mot_dir);
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <mot_init+0x3c>)
 8002db0:	881a      	ldrh	r2, [r3, #0]
 8002db2:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <mot_init+0x38>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	0019      	movs	r1, r3
 8002db8:	0010      	movs	r0, r2
 8002dba:	f000 f86f 	bl	8002e9c <mot_set>
}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	200004c0 	.word	0x200004c0
 8002dc8:	200004c4 	.word	0x200004c4
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	200004c8 	.word	0x200004c8
 8002dd4:	200004cc 	.word	0x200004cc

08002dd8 <mot_set_dir>:

void mot_set_dir(int dir){
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	switch(dir){
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d009      	beq.n	8002dfa <mot_set_dir+0x22>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	dc36      	bgt.n	8002e5a <mot_set_dir+0x82>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3301      	adds	r3, #1
 8002df0:	d013      	beq.n	8002e1a <mot_set_dir+0x42>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d020      	beq.n	8002e3a <mot_set_dir+0x62>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
			mot_dir = dir;
			break;
	}
}
 8002df8:	e02f      	b.n	8002e5a <mot_set_dir+0x82>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <mot_set_dir+0x8c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2140      	movs	r1, #64	; 0x40
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 fef4 	bl	8003bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_SET);
 8002e06:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <mot_set_dir+0x90>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2180      	movs	r1, #128	; 0x80
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 feee 	bl	8003bee <HAL_GPIO_WritePin>
			mot_dir = dir;
 8002e12:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <mot_set_dir+0x94>)
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	601a      	str	r2, [r3, #0]
			break;
 8002e18:	e01f      	b.n	8002e5a <mot_set_dir+0x82>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_SET);
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <mot_set_dir+0x8c>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	2140      	movs	r1, #64	; 0x40
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 fee4 	bl	8003bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <mot_set_dir+0x90>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f000 fede 	bl	8003bee <HAL_GPIO_WritePin>
			mot_dir = dir;
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <mot_set_dir+0x94>)
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	601a      	str	r2, [r3, #0]
			break;
 8002e38:	e00f      	b.n	8002e5a <mot_set_dir+0x82>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <mot_set_dir+0x8c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2140      	movs	r1, #64	; 0x40
 8002e40:	0018      	movs	r0, r3
 8002e42:	f000 fed4 	bl	8003bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <mot_set_dir+0x90>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2180      	movs	r1, #128	; 0x80
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f000 fece 	bl	8003bee <HAL_GPIO_WritePin>
			mot_dir = dir;
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <mot_set_dir+0x94>)
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	601a      	str	r2, [r3, #0]
			break;
 8002e58:	46c0      	nop			; (mov r8, r8)
}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b002      	add	sp, #8
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	48000400 	.word	0x48000400
 8002e68:	48000800 	.word	0x48000800
 8002e6c:	200004c0 	.word	0x200004c0

08002e70 <mot_set_pwm>:

void mot_set_pwm(uint16_t pwm){
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	0002      	movs	r2, r0
 8002e78:	1dbb      	adds	r3, r7, #6
 8002e7a:	801a      	strh	r2, [r3, #0]
	MOT_PWM_TIM->CCR1 = pwm;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <mot_set_pwm+0x24>)
 8002e7e:	1dba      	adds	r2, r7, #6
 8002e80:	8812      	ldrh	r2, [r2, #0]
 8002e82:	635a      	str	r2, [r3, #52]	; 0x34
	mot_pwm = pwm;
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <mot_set_pwm+0x28>)
 8002e86:	1dba      	adds	r2, r7, #6
 8002e88:	8812      	ldrh	r2, [r2, #0]
 8002e8a:	801a      	strh	r2, [r3, #0]
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40002000 	.word	0x40002000
 8002e98:	200004c4 	.word	0x200004c4

08002e9c <mot_set>:

void mot_set(uint16_t pwm, int dir){
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	0002      	movs	r2, r0
 8002ea4:	6039      	str	r1, [r7, #0]
 8002ea6:	1dbb      	adds	r3, r7, #6
 8002ea8:	801a      	strh	r2, [r3, #0]
	mot_set_dir(dir);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	0018      	movs	r0, r3
 8002eae:	f7ff ff93 	bl	8002dd8 <mot_set_dir>
	mot_set_pwm(pwm);
 8002eb2:	1dbb      	adds	r3, r7, #6
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f7ff ffda 	bl	8002e70 <mot_set_pwm>
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b002      	add	sp, #8
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <mot_get_pos>:
		case MOT_BACKWARD: mot_dir = MOT_FORWARD; break;
	}
	mot_set_dir(mot_dir);
}

uint32_t mot_get_pos(){
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
	return MOT_ENC_TIM->CNT;
 8002ec8:	4b02      	ldr	r3, [pc, #8]	; (8002ed4 <mot_get_pos+0x10>)
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	40000400 	.word	0x40000400

08002ed8 <mot_get_odometer>:

float mot_get_vel(void){
	return 1;
}

float mot_get_odometer(void){
 8002ed8:	b5b0      	push	{r4, r5, r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
	static int32_t lastPos = 0;
	int32_t pos = mot_get_pos();
 8002ede:	f7ff fff1 	bl	8002ec4 <mot_get_pos>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	607b      	str	r3, [r7, #4]
	int32_t dp = pos>lastPos ? pos - lastPos : lastPos - pos;
 8002ee6:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <mot_get_odometer+0x94>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	dd04      	ble.n	8002efa <mot_get_odometer+0x22>
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <mot_get_odometer+0x94>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	e003      	b.n	8002f02 <mot_get_odometer+0x2a>
 8002efa:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <mot_get_odometer+0x94>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	603b      	str	r3, [r7, #0]
	odometer += ( (float)dp * 93 / 10000 ) * 0.22;
 8002f04:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <mot_get_odometer+0x98>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	1c18      	adds	r0, r3, #0
 8002f0a:	f7ff fb3f 	bl	800258c <__aeabi_f2d>
 8002f0e:	0004      	movs	r4, r0
 8002f10:	000d      	movs	r5, r1
 8002f12:	6838      	ldr	r0, [r7, #0]
 8002f14:	f7fd fd06 	bl	8000924 <__aeabi_i2f>
 8002f18:	1c03      	adds	r3, r0, #0
 8002f1a:	4916      	ldr	r1, [pc, #88]	; (8002f74 <mot_get_odometer+0x9c>)
 8002f1c:	1c18      	adds	r0, r3, #0
 8002f1e:	f7fd fbdb 	bl	80006d8 <__aeabi_fmul>
 8002f22:	1c03      	adds	r3, r0, #0
 8002f24:	4914      	ldr	r1, [pc, #80]	; (8002f78 <mot_get_odometer+0xa0>)
 8002f26:	1c18      	adds	r0, r3, #0
 8002f28:	f7fd fabe 	bl	80004a8 <__aeabi_fdiv>
 8002f2c:	1c03      	adds	r3, r0, #0
 8002f2e:	1c18      	adds	r0, r3, #0
 8002f30:	f7ff fb2c 	bl	800258c <__aeabi_f2d>
 8002f34:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <mot_get_odometer+0xa4>)
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <mot_get_odometer+0xa8>)
 8002f38:	f7fe fc80 	bl	800183c <__aeabi_dmul>
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	000b      	movs	r3, r1
 8002f40:	0020      	movs	r0, r4
 8002f42:	0029      	movs	r1, r5
 8002f44:	f7fd fd3c 	bl	80009c0 <__aeabi_dadd>
 8002f48:	0002      	movs	r2, r0
 8002f4a:	000b      	movs	r3, r1
 8002f4c:	0010      	movs	r0, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	f7ff fb64 	bl	800261c <__aeabi_d2f>
 8002f54:	1c02      	adds	r2, r0, #0
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <mot_get_odometer+0x98>)
 8002f58:	601a      	str	r2, [r3, #0]
	lastPos = pos;
 8002f5a:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <mot_get_odometer+0x94>)
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	601a      	str	r2, [r3, #0]
	return odometer;
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <mot_get_odometer+0x98>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	1c18      	adds	r0, r3, #0
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f6c:	200004d8 	.word	0x200004d8
 8002f70:	200004d4 	.word	0x200004d4
 8002f74:	42ba0000 	.word	0x42ba0000
 8002f78:	461c4000 	.word	0x461c4000
 8002f7c:	c28f5c29 	.word	0xc28f5c29
 8002f80:	3fcc28f5 	.word	0x3fcc28f5

08002f84 <mot_enc_tim_PeriodElapsedCallback>:

void mot_enc_tim_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	overflowCtr++;
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <mot_enc_tim_PeriodElapsedCallback+0x1c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <mot_enc_tim_PeriodElapsedCallback+0x1c>)
 8002f94:	601a      	str	r2, [r3, #0]
}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b002      	add	sp, #8
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	200004d0 	.word	0x200004d0

08002fa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002faa:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <HAL_MspInit+0x44>)
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_MspInit+0x44>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	619a      	str	r2, [r3, #24]
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_MspInit+0x44>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <HAL_MspInit+0x44>)
 8002fc4:	69da      	ldr	r2, [r3, #28]
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <HAL_MspInit+0x44>)
 8002fc8:	2180      	movs	r1, #128	; 0x80
 8002fca:	0549      	lsls	r1, r1, #21
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	61da      	str	r2, [r3, #28]
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_MspInit+0x44>)
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	055b      	lsls	r3, r3, #21
 8002fd8:	4013      	ands	r3, r2
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b002      	add	sp, #8
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	40021000 	.word	0x40021000

08002fec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b08b      	sub	sp, #44	; 0x2c
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	2414      	movs	r4, #20
 8002ff6:	193b      	adds	r3, r7, r4
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	2314      	movs	r3, #20
 8002ffc:	001a      	movs	r2, r3
 8002ffe:	2100      	movs	r1, #0
 8003000:	f003 faa6 	bl	8006550 <memset>
  if(hspi->Instance==SPI1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a20      	ldr	r2, [pc, #128]	; (800308c <HAL_SPI_MspInit+0xa0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d139      	bne.n	8003082 <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_SPI_MspInit+0xa4>)
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	4b1f      	ldr	r3, [pc, #124]	; (8003090 <HAL_SPI_MspInit+0xa4>)
 8003014:	2180      	movs	r1, #128	; 0x80
 8003016:	0149      	lsls	r1, r1, #5
 8003018:	430a      	orrs	r2, r1
 800301a:	619a      	str	r2, [r3, #24]
 800301c:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <HAL_SPI_MspInit+0xa4>)
 800301e:	699a      	ldr	r2, [r3, #24]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	015b      	lsls	r3, r3, #5
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_SPI_MspInit+0xa4>)
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <HAL_SPI_MspInit+0xa4>)
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	02c9      	lsls	r1, r1, #11
 8003034:	430a      	orrs	r2, r1
 8003036:	615a      	str	r2, [r3, #20]
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <HAL_SPI_MspInit+0xa4>)
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	02db      	lsls	r3, r3, #11
 8003040:	4013      	ands	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003046:	0021      	movs	r1, r4
 8003048:	187b      	adds	r3, r7, r1
 800304a:	2238      	movs	r2, #56	; 0x38
 800304c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304e:	187b      	adds	r3, r7, r1
 8003050:	2202      	movs	r2, #2
 8003052:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	187b      	adds	r3, r7, r1
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800305a:	187b      	adds	r3, r7, r1
 800305c:	2203      	movs	r2, #3
 800305e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003060:	187b      	adds	r3, r7, r1
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003066:	187b      	adds	r3, r7, r1
 8003068:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <HAL_SPI_MspInit+0xa8>)
 800306a:	0019      	movs	r1, r3
 800306c:	0010      	movs	r0, r2
 800306e:	f000 fc31 	bl	80038d4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2100      	movs	r1, #0
 8003076:	2019      	movs	r0, #25
 8003078:	f000 fbb4 	bl	80037e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800307c:	2019      	movs	r0, #25
 800307e:	f000 fbc6 	bl	800380e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	b00b      	add	sp, #44	; 0x2c
 8003088:	bd90      	pop	{r4, r7, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	40013000 	.word	0x40013000
 8003090:	40021000 	.word	0x40021000
 8003094:	48000400 	.word	0x48000400

08003098 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b08b      	sub	sp, #44	; 0x2c
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	2414      	movs	r4, #20
 80030a2:	193b      	adds	r3, r7, r4
 80030a4:	0018      	movs	r0, r3
 80030a6:	2314      	movs	r3, #20
 80030a8:	001a      	movs	r2, r3
 80030aa:	2100      	movs	r1, #0
 80030ac:	f003 fa50 	bl	8006550 <memset>
  if(htim_encoder->Instance==TIM3)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1f      	ldr	r2, [pc, #124]	; (8003134 <HAL_TIM_Encoder_MspInit+0x9c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d138      	bne.n	800312c <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ba:	4b1f      	ldr	r3, [pc, #124]	; (8003138 <HAL_TIM_Encoder_MspInit+0xa0>)
 80030bc:	69da      	ldr	r2, [r3, #28]
 80030be:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <HAL_TIM_Encoder_MspInit+0xa0>)
 80030c0:	2102      	movs	r1, #2
 80030c2:	430a      	orrs	r2, r1
 80030c4:	61da      	str	r2, [r3, #28]
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <HAL_TIM_Encoder_MspInit+0xa0>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	2202      	movs	r2, #2
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d2:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_TIM_Encoder_MspInit+0xa0>)
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	4b18      	ldr	r3, [pc, #96]	; (8003138 <HAL_TIM_Encoder_MspInit+0xa0>)
 80030d8:	2180      	movs	r1, #128	; 0x80
 80030da:	0289      	lsls	r1, r1, #10
 80030dc:	430a      	orrs	r2, r1
 80030de:	615a      	str	r2, [r3, #20]
 80030e0:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_TIM_Encoder_MspInit+0xa0>)
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	029b      	lsls	r3, r3, #10
 80030e8:	4013      	ands	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030ee:	0021      	movs	r1, r4
 80030f0:	187b      	adds	r3, r7, r1
 80030f2:	22c0      	movs	r2, #192	; 0xc0
 80030f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f6:	187b      	adds	r3, r7, r1
 80030f8:	2202      	movs	r2, #2
 80030fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003102:	187b      	adds	r3, r7, r1
 8003104:	2200      	movs	r2, #0
 8003106:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003108:	187b      	adds	r3, r7, r1
 800310a:	2201      	movs	r2, #1
 800310c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310e:	187a      	adds	r2, r7, r1
 8003110:	2390      	movs	r3, #144	; 0x90
 8003112:	05db      	lsls	r3, r3, #23
 8003114:	0011      	movs	r1, r2
 8003116:	0018      	movs	r0, r3
 8003118:	f000 fbdc 	bl	80038d4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800311c:	2200      	movs	r2, #0
 800311e:	2100      	movs	r1, #0
 8003120:	2010      	movs	r0, #16
 8003122:	f000 fb5f 	bl	80037e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003126:	2010      	movs	r0, #16
 8003128:	f000 fb71 	bl	800380e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b00b      	add	sp, #44	; 0x2c
 8003132:	bd90      	pop	{r4, r7, pc}
 8003134:	40000400 	.word	0x40000400
 8003138:	40021000 	.word	0x40021000

0800313c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	2314      	movs	r3, #20
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	0018      	movs	r0, r3
 800314a:	2314      	movs	r3, #20
 800314c:	001a      	movs	r2, r3
 800314e:	2100      	movs	r1, #0
 8003150:	f003 f9fe 	bl	8006550 <memset>
  if(htim_base->Instance==TIM14)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a2a      	ldr	r2, [pc, #168]	; (8003204 <HAL_TIM_Base_MspInit+0xc8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d10e      	bne.n	800317c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800315e:	4b2a      	ldr	r3, [pc, #168]	; (8003208 <HAL_TIM_Base_MspInit+0xcc>)
 8003160:	69da      	ldr	r2, [r3, #28]
 8003162:	4b29      	ldr	r3, [pc, #164]	; (8003208 <HAL_TIM_Base_MspInit+0xcc>)
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	0049      	lsls	r1, r1, #1
 8003168:	430a      	orrs	r2, r1
 800316a:	61da      	str	r2, [r3, #28]
 800316c:	4b26      	ldr	r3, [pc, #152]	; (8003208 <HAL_TIM_Base_MspInit+0xcc>)
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800317a:	e03f      	b.n	80031fc <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM16)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a22      	ldr	r2, [pc, #136]	; (800320c <HAL_TIM_Base_MspInit+0xd0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d13a      	bne.n	80031fc <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003186:	4b20      	ldr	r3, [pc, #128]	; (8003208 <HAL_TIM_Base_MspInit+0xcc>)
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <HAL_TIM_Base_MspInit+0xcc>)
 800318c:	2180      	movs	r1, #128	; 0x80
 800318e:	0289      	lsls	r1, r1, #10
 8003190:	430a      	orrs	r2, r1
 8003192:	619a      	str	r2, [r3, #24]
 8003194:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <HAL_TIM_Base_MspInit+0xcc>)
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	029b      	lsls	r3, r3, #10
 800319c:	4013      	ands	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_TIM_Base_MspInit+0xcc>)
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	4b18      	ldr	r3, [pc, #96]	; (8003208 <HAL_TIM_Base_MspInit+0xcc>)
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	02c9      	lsls	r1, r1, #11
 80031ac:	430a      	orrs	r2, r1
 80031ae:	615a      	str	r2, [r3, #20]
 80031b0:	4b15      	ldr	r3, [pc, #84]	; (8003208 <HAL_TIM_Base_MspInit+0xcc>)
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	02db      	lsls	r3, r3, #11
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031be:	2114      	movs	r1, #20
 80031c0:	187b      	adds	r3, r7, r1
 80031c2:	2280      	movs	r2, #128	; 0x80
 80031c4:	0052      	lsls	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	187b      	adds	r3, r7, r1
 80031ca:	2202      	movs	r2, #2
 80031cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d4:	187b      	adds	r3, r7, r1
 80031d6:	2200      	movs	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80031da:	187b      	adds	r3, r7, r1
 80031dc:	2202      	movs	r2, #2
 80031de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e0:	187b      	adds	r3, r7, r1
 80031e2:	4a0b      	ldr	r2, [pc, #44]	; (8003210 <HAL_TIM_Base_MspInit+0xd4>)
 80031e4:	0019      	movs	r1, r3
 80031e6:	0010      	movs	r0, r2
 80031e8:	f000 fb74 	bl	80038d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80031ec:	2200      	movs	r2, #0
 80031ee:	2100      	movs	r1, #0
 80031f0:	2015      	movs	r0, #21
 80031f2:	f000 faf7 	bl	80037e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80031f6:	2015      	movs	r0, #21
 80031f8:	f000 fb09 	bl	800380e <HAL_NVIC_EnableIRQ>
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b00a      	add	sp, #40	; 0x28
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40002000 	.word	0x40002000
 8003208:	40021000 	.word	0x40021000
 800320c:	40014400 	.word	0x40014400
 8003210:	48000400 	.word	0x48000400

08003214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b089      	sub	sp, #36	; 0x24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	240c      	movs	r4, #12
 800321e:	193b      	adds	r3, r7, r4
 8003220:	0018      	movs	r0, r3
 8003222:	2314      	movs	r3, #20
 8003224:	001a      	movs	r2, r3
 8003226:	2100      	movs	r1, #0
 8003228:	f003 f992 	bl	8006550 <memset>
  if(htim->Instance==TIM14)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a15      	ldr	r2, [pc, #84]	; (8003288 <HAL_TIM_MspPostInit+0x74>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d124      	bne.n	8003280 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_TIM_MspPostInit+0x78>)
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_TIM_MspPostInit+0x78>)
 800323c:	2180      	movs	r1, #128	; 0x80
 800323e:	0289      	lsls	r1, r1, #10
 8003240:	430a      	orrs	r2, r1
 8003242:	615a      	str	r2, [r3, #20]
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_TIM_MspPostInit+0x78>)
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	029b      	lsls	r3, r3, #10
 800324c:	4013      	ands	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003252:	0021      	movs	r1, r4
 8003254:	187b      	adds	r3, r7, r1
 8003256:	2210      	movs	r2, #16
 8003258:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325a:	187b      	adds	r3, r7, r1
 800325c:	2202      	movs	r2, #2
 800325e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	187b      	adds	r3, r7, r1
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	187b      	adds	r3, r7, r1
 8003268:	2200      	movs	r2, #0
 800326a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 800326c:	187b      	adds	r3, r7, r1
 800326e:	2204      	movs	r2, #4
 8003270:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003272:	187a      	adds	r2, r7, r1
 8003274:	2390      	movs	r3, #144	; 0x90
 8003276:	05db      	lsls	r3, r3, #23
 8003278:	0011      	movs	r1, r2
 800327a:	0018      	movs	r0, r3
 800327c:	f000 fb2a 	bl	80038d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003280:	46c0      	nop			; (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	b009      	add	sp, #36	; 0x24
 8003286:	bd90      	pop	{r4, r7, pc}
 8003288:	40002000 	.word	0x40002000
 800328c:	40021000 	.word	0x40021000

08003290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b08b      	sub	sp, #44	; 0x2c
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003298:	2414      	movs	r4, #20
 800329a:	193b      	adds	r3, r7, r4
 800329c:	0018      	movs	r0, r3
 800329e:	2314      	movs	r3, #20
 80032a0:	001a      	movs	r2, r3
 80032a2:	2100      	movs	r1, #0
 80032a4:	f003 f954 	bl	8006550 <memset>
  if(huart->Instance==USART2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1c      	ldr	r2, [pc, #112]	; (8003320 <HAL_UART_MspInit+0x90>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d132      	bne.n	8003318 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032b2:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <HAL_UART_MspInit+0x94>)
 80032b4:	69da      	ldr	r2, [r3, #28]
 80032b6:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <HAL_UART_MspInit+0x94>)
 80032b8:	2180      	movs	r1, #128	; 0x80
 80032ba:	0289      	lsls	r1, r1, #10
 80032bc:	430a      	orrs	r2, r1
 80032be:	61da      	str	r2, [r3, #28]
 80032c0:	4b18      	ldr	r3, [pc, #96]	; (8003324 <HAL_UART_MspInit+0x94>)
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	029b      	lsls	r3, r3, #10
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <HAL_UART_MspInit+0x94>)
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	4b14      	ldr	r3, [pc, #80]	; (8003324 <HAL_UART_MspInit+0x94>)
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	0289      	lsls	r1, r1, #10
 80032d8:	430a      	orrs	r2, r1
 80032da:	615a      	str	r2, [r3, #20]
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_UART_MspInit+0x94>)
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	029b      	lsls	r3, r3, #10
 80032e4:	4013      	ands	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80032ea:	0021      	movs	r1, r4
 80032ec:	187b      	adds	r3, r7, r1
 80032ee:	220c      	movs	r2, #12
 80032f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	187b      	adds	r3, r7, r1
 80032f4:	2202      	movs	r2, #2
 80032f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032fe:	187b      	adds	r3, r7, r1
 8003300:	2203      	movs	r2, #3
 8003302:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003304:	187b      	adds	r3, r7, r1
 8003306:	2201      	movs	r2, #1
 8003308:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330a:	187a      	adds	r2, r7, r1
 800330c:	2390      	movs	r3, #144	; 0x90
 800330e:	05db      	lsls	r3, r3, #23
 8003310:	0011      	movs	r1, r2
 8003312:	0018      	movs	r0, r3
 8003314:	f000 fade 	bl	80038d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b00b      	add	sp, #44	; 0x2c
 800331e:	bd90      	pop	{r4, r7, pc}
 8003320:	40004400 	.word	0x40004400
 8003324:	40021000 	.word	0x40021000

08003328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800332c:	e7fe      	b.n	800332c <NMI_Handler+0x4>

0800332e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003332:	e7fe      	b.n	8003332 <HardFault_Handler+0x4>

08003334 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800334c:	f000 f95e 	bl	800360c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <TIM3_IRQHandler+0x14>)
 800335e:	0018      	movs	r0, r3
 8003360:	f001 fd98 	bl	8004e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	2000025c 	.word	0x2000025c

08003370 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <TIM16_IRQHandler+0x14>)
 8003376:	0018      	movs	r0, r3
 8003378:	f001 fd8c 	bl	8004e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	200002ec 	.word	0x200002ec

08003388 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <SPI1_IRQHandler+0x14>)
 800338e:	0018      	movs	r0, r3
 8003390:	f001 f966 	bl	8004660 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003394:	46c0      	nop			; (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	200001f8 	.word	0x200001f8

080033a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  return 1;
 80033a4:	2301      	movs	r3, #1
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <_kill>:

int _kill(int pid, int sig)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033b6:	f003 f8a1 	bl	80064fc <__errno>
 80033ba:	0003      	movs	r3, r0
 80033bc:	2216      	movs	r2, #22
 80033be:	601a      	str	r2, [r3, #0]
  return -1;
 80033c0:	2301      	movs	r3, #1
 80033c2:	425b      	negs	r3, r3
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b002      	add	sp, #8
 80033ca:	bd80      	pop	{r7, pc}

080033cc <_exit>:

void _exit (int status)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033d4:	2301      	movs	r3, #1
 80033d6:	425a      	negs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	0011      	movs	r1, r2
 80033dc:	0018      	movs	r0, r3
 80033de:	f7ff ffe5 	bl	80033ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80033e2:	e7fe      	b.n	80033e2 <_exit+0x16>

080033e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e00a      	b.n	800340c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033f6:	e000      	b.n	80033fa <_read+0x16>
 80033f8:	bf00      	nop
 80033fa:	0001      	movs	r1, r0
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	60ba      	str	r2, [r7, #8]
 8003402:	b2ca      	uxtb	r2, r1
 8003404:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	3301      	adds	r3, #1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	429a      	cmp	r2, r3
 8003412:	dbf0      	blt.n	80033f6 <_read+0x12>
  }

  return len;
 8003414:	687b      	ldr	r3, [r7, #4]
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b006      	add	sp, #24
 800341c:	bd80      	pop	{r7, pc}

0800341e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	e009      	b.n	8003444 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	60ba      	str	r2, [r7, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	0018      	movs	r0, r3
 800343a:	e000      	b.n	800343e <_write+0x20>
 800343c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3301      	adds	r3, #1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	dbf1      	blt.n	8003430 <_write+0x12>
  }
  return len;
 800344c:	687b      	ldr	r3, [r7, #4]
}
 800344e:	0018      	movs	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	b006      	add	sp, #24
 8003454:	bd80      	pop	{r7, pc}

08003456 <_close>:

int _close(int file)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800345e:	2301      	movs	r3, #1
 8003460:	425b      	negs	r3, r3
}
 8003462:	0018      	movs	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	b002      	add	sp, #8
 8003468:	bd80      	pop	{r7, pc}

0800346a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	0192      	lsls	r2, r2, #6
 800347a:	605a      	str	r2, [r3, #4]
  return 0;
 800347c:	2300      	movs	r3, #0
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	b002      	add	sp, #8
 8003484:	bd80      	pop	{r7, pc}

08003486 <_isatty>:

int _isatty(int file)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800348e:	2301      	movs	r3, #1
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}

08003498 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	0018      	movs	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b004      	add	sp, #16
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034b8:	4a14      	ldr	r2, [pc, #80]	; (800350c <_sbrk+0x5c>)
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <_sbrk+0x60>)
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <_sbrk+0x64>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d102      	bne.n	80034d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <_sbrk+0x64>)
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <_sbrk+0x68>)
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <_sbrk+0x64>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	18d3      	adds	r3, r2, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d207      	bcs.n	80034f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034e0:	f003 f80c 	bl	80064fc <__errno>
 80034e4:	0003      	movs	r3, r0
 80034e6:	220c      	movs	r2, #12
 80034e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034ea:	2301      	movs	r3, #1
 80034ec:	425b      	negs	r3, r3
 80034ee:	e009      	b.n	8003504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <_sbrk+0x64>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <_sbrk+0x64>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	18d2      	adds	r2, r2, r3
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <_sbrk+0x64>)
 8003500:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b006      	add	sp, #24
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20004000 	.word	0x20004000
 8003510:	00000400 	.word	0x00000400
 8003514:	200004dc 	.word	0x200004dc
 8003518:	200004f8 	.word	0x200004f8

0800351c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003528:	480d      	ldr	r0, [pc, #52]	; (8003560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800352a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800352c:	f7ff fff6 	bl	800351c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003530:	480c      	ldr	r0, [pc, #48]	; (8003564 <LoopForever+0x6>)
  ldr r1, =_edata
 8003532:	490d      	ldr	r1, [pc, #52]	; (8003568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003534:	4a0d      	ldr	r2, [pc, #52]	; (800356c <LoopForever+0xe>)
  movs r3, #0
 8003536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003538:	e002      	b.n	8003540 <LoopCopyDataInit>

0800353a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800353a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800353c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800353e:	3304      	adds	r3, #4

08003540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003544:	d3f9      	bcc.n	800353a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003548:	4c0a      	ldr	r4, [pc, #40]	; (8003574 <LoopForever+0x16>)
  movs r3, #0
 800354a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800354c:	e001      	b.n	8003552 <LoopFillZerobss>

0800354e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800354e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003550:	3204      	adds	r2, #4

08003552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003554:	d3fb      	bcc.n	800354e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003556:	f002 ffd7 	bl	8006508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800355a:	f7ff f905 	bl	8002768 <main>

0800355e <LoopForever>:

LoopForever:
    b LoopForever
 800355e:	e7fe      	b.n	800355e <LoopForever>
  ldr   r0, =_estack
 8003560:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003568:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800356c:	08009a14 	.word	0x08009a14
  ldr r2, =_sbss
 8003570:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003574:	200004f4 	.word	0x200004f4

08003578 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003578:	e7fe      	b.n	8003578 <ADC1_IRQHandler>
	...

0800357c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <HAL_Init+0x24>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_Init+0x24>)
 8003586:	2110      	movs	r1, #16
 8003588:	430a      	orrs	r2, r1
 800358a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800358c:	2000      	movs	r0, #0
 800358e:	f000 f809 	bl	80035a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003592:	f7ff fd07 	bl	8002fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	0018      	movs	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	40022000 	.word	0x40022000

080035a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035ac:	4b14      	ldr	r3, [pc, #80]	; (8003600 <HAL_InitTick+0x5c>)
 80035ae:	681c      	ldr	r4, [r3, #0]
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <HAL_InitTick+0x60>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	0019      	movs	r1, r3
 80035b6:	23fa      	movs	r3, #250	; 0xfa
 80035b8:	0098      	lsls	r0, r3, #2
 80035ba:	f7fc fdc1 	bl	8000140 <__udivsi3>
 80035be:	0003      	movs	r3, r0
 80035c0:	0019      	movs	r1, r3
 80035c2:	0020      	movs	r0, r4
 80035c4:	f7fc fdbc 	bl	8000140 <__udivsi3>
 80035c8:	0003      	movs	r3, r0
 80035ca:	0018      	movs	r0, r3
 80035cc:	f000 f92f 	bl	800382e <HAL_SYSTICK_Config>
 80035d0:	1e03      	subs	r3, r0, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e00f      	b.n	80035f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d80b      	bhi.n	80035f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	2301      	movs	r3, #1
 80035e2:	425b      	negs	r3, r3
 80035e4:	2200      	movs	r2, #0
 80035e6:	0018      	movs	r0, r3
 80035e8:	f000 f8fc 	bl	80037e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_InitTick+0x64>)
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e000      	b.n	80035f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b003      	add	sp, #12
 80035fe:	bd90      	pop	{r4, r7, pc}
 8003600:	20000000 	.word	0x20000000
 8003604:	20000008 	.word	0x20000008
 8003608:	20000004 	.word	0x20000004

0800360c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_IncTick+0x1c>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	001a      	movs	r2, r3
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_IncTick+0x20>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	18d2      	adds	r2, r2, r3
 800361c:	4b03      	ldr	r3, [pc, #12]	; (800362c <HAL_IncTick+0x20>)
 800361e:	601a      	str	r2, [r3, #0]
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	20000008 	.word	0x20000008
 800362c:	200004e0 	.word	0x200004e0

08003630 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  return uwTick;
 8003634:	4b02      	ldr	r3, [pc, #8]	; (8003640 <HAL_GetTick+0x10>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	0018      	movs	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	200004e0 	.word	0x200004e0

08003644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800364c:	f7ff fff0 	bl	8003630 <HAL_GetTick>
 8003650:	0003      	movs	r3, r0
 8003652:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	3301      	adds	r3, #1
 800365c:	d005      	beq.n	800366a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <HAL_Delay+0x44>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	001a      	movs	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	189b      	adds	r3, r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	f7ff ffe0 	bl	8003630 <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	429a      	cmp	r2, r3
 800367a:	d8f7      	bhi.n	800366c <HAL_Delay+0x28>
  {
  }
}
 800367c:	46c0      	nop			; (mov r8, r8)
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	46bd      	mov	sp, r7
 8003682:	b004      	add	sp, #16
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	20000008 	.word	0x20000008

0800368c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	0002      	movs	r2, r0
 8003694:	1dfb      	adds	r3, r7, #7
 8003696:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003698:	1dfb      	adds	r3, r7, #7
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b7f      	cmp	r3, #127	; 0x7f
 800369e:	d809      	bhi.n	80036b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a0:	1dfb      	adds	r3, r7, #7
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	001a      	movs	r2, r3
 80036a6:	231f      	movs	r3, #31
 80036a8:	401a      	ands	r2, r3
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <__NVIC_EnableIRQ+0x30>)
 80036ac:	2101      	movs	r1, #1
 80036ae:	4091      	lsls	r1, r2
 80036b0:	000a      	movs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]
  }
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b002      	add	sp, #8
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	e000e100 	.word	0xe000e100

080036c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	0002      	movs	r2, r0
 80036c8:	6039      	str	r1, [r7, #0]
 80036ca:	1dfb      	adds	r3, r7, #7
 80036cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036ce:	1dfb      	adds	r3, r7, #7
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b7f      	cmp	r3, #127	; 0x7f
 80036d4:	d828      	bhi.n	8003728 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036d6:	4a2f      	ldr	r2, [pc, #188]	; (8003794 <__NVIC_SetPriority+0xd4>)
 80036d8:	1dfb      	adds	r3, r7, #7
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	b25b      	sxtb	r3, r3
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	33c0      	adds	r3, #192	; 0xc0
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	589b      	ldr	r3, [r3, r2]
 80036e6:	1dfa      	adds	r2, r7, #7
 80036e8:	7812      	ldrb	r2, [r2, #0]
 80036ea:	0011      	movs	r1, r2
 80036ec:	2203      	movs	r2, #3
 80036ee:	400a      	ands	r2, r1
 80036f0:	00d2      	lsls	r2, r2, #3
 80036f2:	21ff      	movs	r1, #255	; 0xff
 80036f4:	4091      	lsls	r1, r2
 80036f6:	000a      	movs	r2, r1
 80036f8:	43d2      	mvns	r2, r2
 80036fa:	401a      	ands	r2, r3
 80036fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	019b      	lsls	r3, r3, #6
 8003702:	22ff      	movs	r2, #255	; 0xff
 8003704:	401a      	ands	r2, r3
 8003706:	1dfb      	adds	r3, r7, #7
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	0018      	movs	r0, r3
 800370c:	2303      	movs	r3, #3
 800370e:	4003      	ands	r3, r0
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003714:	481f      	ldr	r0, [pc, #124]	; (8003794 <__NVIC_SetPriority+0xd4>)
 8003716:	1dfb      	adds	r3, r7, #7
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	b25b      	sxtb	r3, r3
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	430a      	orrs	r2, r1
 8003720:	33c0      	adds	r3, #192	; 0xc0
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003726:	e031      	b.n	800378c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003728:	4a1b      	ldr	r2, [pc, #108]	; (8003798 <__NVIC_SetPriority+0xd8>)
 800372a:	1dfb      	adds	r3, r7, #7
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	0019      	movs	r1, r3
 8003730:	230f      	movs	r3, #15
 8003732:	400b      	ands	r3, r1
 8003734:	3b08      	subs	r3, #8
 8003736:	089b      	lsrs	r3, r3, #2
 8003738:	3306      	adds	r3, #6
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	18d3      	adds	r3, r2, r3
 800373e:	3304      	adds	r3, #4
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	1dfa      	adds	r2, r7, #7
 8003744:	7812      	ldrb	r2, [r2, #0]
 8003746:	0011      	movs	r1, r2
 8003748:	2203      	movs	r2, #3
 800374a:	400a      	ands	r2, r1
 800374c:	00d2      	lsls	r2, r2, #3
 800374e:	21ff      	movs	r1, #255	; 0xff
 8003750:	4091      	lsls	r1, r2
 8003752:	000a      	movs	r2, r1
 8003754:	43d2      	mvns	r2, r2
 8003756:	401a      	ands	r2, r3
 8003758:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	019b      	lsls	r3, r3, #6
 800375e:	22ff      	movs	r2, #255	; 0xff
 8003760:	401a      	ands	r2, r3
 8003762:	1dfb      	adds	r3, r7, #7
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	0018      	movs	r0, r3
 8003768:	2303      	movs	r3, #3
 800376a:	4003      	ands	r3, r0
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003770:	4809      	ldr	r0, [pc, #36]	; (8003798 <__NVIC_SetPriority+0xd8>)
 8003772:	1dfb      	adds	r3, r7, #7
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	001c      	movs	r4, r3
 8003778:	230f      	movs	r3, #15
 800377a:	4023      	ands	r3, r4
 800377c:	3b08      	subs	r3, #8
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	430a      	orrs	r2, r1
 8003782:	3306      	adds	r3, #6
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	18c3      	adds	r3, r0, r3
 8003788:	3304      	adds	r3, #4
 800378a:	601a      	str	r2, [r3, #0]
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b003      	add	sp, #12
 8003792:	bd90      	pop	{r4, r7, pc}
 8003794:	e000e100 	.word	0xe000e100
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	1e5a      	subs	r2, r3, #1
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	045b      	lsls	r3, r3, #17
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d301      	bcc.n	80037b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037b0:	2301      	movs	r3, #1
 80037b2:	e010      	b.n	80037d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b4:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <SysTick_Config+0x44>)
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	3a01      	subs	r2, #1
 80037ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037bc:	2301      	movs	r3, #1
 80037be:	425b      	negs	r3, r3
 80037c0:	2103      	movs	r1, #3
 80037c2:	0018      	movs	r0, r3
 80037c4:	f7ff ff7c 	bl	80036c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <SysTick_Config+0x44>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <SysTick_Config+0x44>)
 80037d0:	2207      	movs	r2, #7
 80037d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	0018      	movs	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	b002      	add	sp, #8
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	e000e010 	.word	0xe000e010

080037e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	210f      	movs	r1, #15
 80037f0:	187b      	adds	r3, r7, r1
 80037f2:	1c02      	adds	r2, r0, #0
 80037f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	b25b      	sxtb	r3, r3
 80037fe:	0011      	movs	r1, r2
 8003800:	0018      	movs	r0, r3
 8003802:	f7ff ff5d 	bl	80036c0 <__NVIC_SetPriority>
}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	b004      	add	sp, #16
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	0002      	movs	r2, r0
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800381a:	1dfb      	adds	r3, r7, #7
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	b25b      	sxtb	r3, r3
 8003820:	0018      	movs	r0, r3
 8003822:	f7ff ff33 	bl	800368c <__NVIC_EnableIRQ>
}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b002      	add	sp, #8
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0018      	movs	r0, r3
 800383a:	f7ff ffaf 	bl	800379c <SysTick_Config>
 800383e:	0003      	movs	r3, r0
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b002      	add	sp, #8
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003850:	210f      	movs	r1, #15
 8003852:	187b      	adds	r3, r7, r1
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2221      	movs	r2, #33	; 0x21
 800385c:	5c9b      	ldrb	r3, [r3, r2]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d006      	beq.n	8003872 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2204      	movs	r2, #4
 8003868:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800386a:	187b      	adds	r3, r7, r1
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e028      	b.n	80038c4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	210e      	movs	r1, #14
 800387e:	438a      	bics	r2, r1
 8003880:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2101      	movs	r1, #1
 800388e:	438a      	bics	r2, r1
 8003890:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	2101      	movs	r1, #1
 800389c:	4091      	lsls	r1, r2
 800389e:	000a      	movs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2221      	movs	r2, #33	; 0x21
 80038a6:	2101      	movs	r1, #1
 80038a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2220      	movs	r2, #32
 80038ae:	2100      	movs	r1, #0
 80038b0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	0010      	movs	r0, r2
 80038c2:	4798      	blx	r3
    }
  }
  return status;
 80038c4:	230f      	movs	r3, #15
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	781b      	ldrb	r3, [r3, #0]
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b004      	add	sp, #16
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038e2:	e14f      	b.n	8003b84 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2101      	movs	r1, #1
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4091      	lsls	r1, r2
 80038ee:	000a      	movs	r2, r1
 80038f0:	4013      	ands	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d100      	bne.n	80038fc <HAL_GPIO_Init+0x28>
 80038fa:	e140      	b.n	8003b7e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2203      	movs	r2, #3
 8003902:	4013      	ands	r3, r2
 8003904:	2b01      	cmp	r3, #1
 8003906:	d005      	beq.n	8003914 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2203      	movs	r2, #3
 800390e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003910:	2b02      	cmp	r3, #2
 8003912:	d130      	bne.n	8003976 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	2203      	movs	r2, #3
 8003920:	409a      	lsls	r2, r3
 8003922:	0013      	movs	r3, r2
 8003924:	43da      	mvns	r2, r3
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	409a      	lsls	r2, r3
 8003936:	0013      	movs	r3, r2
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800394a:	2201      	movs	r2, #1
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	409a      	lsls	r2, r3
 8003950:	0013      	movs	r3, r2
 8003952:	43da      	mvns	r2, r3
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4013      	ands	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	2201      	movs	r2, #1
 8003962:	401a      	ands	r2, r3
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	409a      	lsls	r2, r3
 8003968:	0013      	movs	r3, r2
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2203      	movs	r2, #3
 800397c:	4013      	ands	r3, r2
 800397e:	2b03      	cmp	r3, #3
 8003980:	d017      	beq.n	80039b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	2203      	movs	r2, #3
 800398e:	409a      	lsls	r2, r3
 8003990:	0013      	movs	r3, r2
 8003992:	43da      	mvns	r2, r3
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	409a      	lsls	r2, r3
 80039a4:	0013      	movs	r3, r2
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2203      	movs	r2, #3
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d123      	bne.n	8003a06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	08da      	lsrs	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3208      	adds	r2, #8
 80039c6:	0092      	lsls	r2, r2, #2
 80039c8:	58d3      	ldr	r3, [r2, r3]
 80039ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2207      	movs	r2, #7
 80039d0:	4013      	ands	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	220f      	movs	r2, #15
 80039d6:	409a      	lsls	r2, r3
 80039d8:	0013      	movs	r3, r2
 80039da:	43da      	mvns	r2, r3
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2107      	movs	r1, #7
 80039ea:	400b      	ands	r3, r1
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	409a      	lsls	r2, r3
 80039f0:	0013      	movs	r3, r2
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	08da      	lsrs	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3208      	adds	r2, #8
 8003a00:	0092      	lsls	r2, r2, #2
 8003a02:	6939      	ldr	r1, [r7, #16]
 8003a04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	2203      	movs	r2, #3
 8003a12:	409a      	lsls	r2, r3
 8003a14:	0013      	movs	r3, r2
 8003a16:	43da      	mvns	r2, r3
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2203      	movs	r2, #3
 8003a24:	401a      	ands	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	0013      	movs	r3, r2
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	23c0      	movs	r3, #192	; 0xc0
 8003a40:	029b      	lsls	r3, r3, #10
 8003a42:	4013      	ands	r3, r2
 8003a44:	d100      	bne.n	8003a48 <HAL_GPIO_Init+0x174>
 8003a46:	e09a      	b.n	8003b7e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a48:	4b54      	ldr	r3, [pc, #336]	; (8003b9c <HAL_GPIO_Init+0x2c8>)
 8003a4a:	699a      	ldr	r2, [r3, #24]
 8003a4c:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <HAL_GPIO_Init+0x2c8>)
 8003a4e:	2101      	movs	r1, #1
 8003a50:	430a      	orrs	r2, r1
 8003a52:	619a      	str	r2, [r3, #24]
 8003a54:	4b51      	ldr	r3, [pc, #324]	; (8003b9c <HAL_GPIO_Init+0x2c8>)
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a60:	4a4f      	ldr	r2, [pc, #316]	; (8003ba0 <HAL_GPIO_Init+0x2cc>)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	3302      	adds	r3, #2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	589b      	ldr	r3, [r3, r2]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2203      	movs	r2, #3
 8003a72:	4013      	ands	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	220f      	movs	r2, #15
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	0013      	movs	r3, r2
 8003a7c:	43da      	mvns	r2, r3
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	2390      	movs	r3, #144	; 0x90
 8003a88:	05db      	lsls	r3, r3, #23
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d013      	beq.n	8003ab6 <HAL_GPIO_Init+0x1e2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a44      	ldr	r2, [pc, #272]	; (8003ba4 <HAL_GPIO_Init+0x2d0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00d      	beq.n	8003ab2 <HAL_GPIO_Init+0x1de>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a43      	ldr	r2, [pc, #268]	; (8003ba8 <HAL_GPIO_Init+0x2d4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <HAL_GPIO_Init+0x1da>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a42      	ldr	r2, [pc, #264]	; (8003bac <HAL_GPIO_Init+0x2d8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_GPIO_Init+0x1d6>
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e006      	b.n	8003ab8 <HAL_GPIO_Init+0x1e4>
 8003aaa:	2305      	movs	r3, #5
 8003aac:	e004      	b.n	8003ab8 <HAL_GPIO_Init+0x1e4>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e002      	b.n	8003ab8 <HAL_GPIO_Init+0x1e4>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <HAL_GPIO_Init+0x1e4>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	2103      	movs	r1, #3
 8003abc:	400a      	ands	r2, r1
 8003abe:	0092      	lsls	r2, r2, #2
 8003ac0:	4093      	lsls	r3, r2
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ac8:	4935      	ldr	r1, [pc, #212]	; (8003ba0 <HAL_GPIO_Init+0x2cc>)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	089b      	lsrs	r3, r3, #2
 8003ace:	3302      	adds	r3, #2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <HAL_GPIO_Init+0x2dc>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	035b      	lsls	r3, r3, #13
 8003aee:	4013      	ands	r3, r2
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003afa:	4b2d      	ldr	r3, [pc, #180]	; (8003bb0 <HAL_GPIO_Init+0x2dc>)
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003b00:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <HAL_GPIO_Init+0x2dc>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	43da      	mvns	r2, r3
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	039b      	lsls	r3, r3, #14
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b24:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <HAL_GPIO_Init+0x2dc>)
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003b2a:	4b21      	ldr	r3, [pc, #132]	; (8003bb0 <HAL_GPIO_Init+0x2dc>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	43da      	mvns	r2, r3
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	029b      	lsls	r3, r3, #10
 8003b42:	4013      	ands	r3, r2
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b4e:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <HAL_GPIO_Init+0x2dc>)
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003b54:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <HAL_GPIO_Init+0x2dc>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	43da      	mvns	r2, r3
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	025b      	lsls	r3, r3, #9
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b78:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <HAL_GPIO_Init+0x2dc>)
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	3301      	adds	r3, #1
 8003b82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	40da      	lsrs	r2, r3
 8003b8c:	1e13      	subs	r3, r2, #0
 8003b8e:	d000      	beq.n	8003b92 <HAL_GPIO_Init+0x2be>
 8003b90:	e6a8      	b.n	80038e4 <HAL_GPIO_Init+0x10>
  } 
}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b006      	add	sp, #24
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	48000400 	.word	0x48000400
 8003ba8:	48000800 	.word	0x48000800
 8003bac:	48000c00 	.word	0x48000c00
 8003bb0:	40010400 	.word	0x40010400

08003bb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	000a      	movs	r2, r1
 8003bbe:	1cbb      	adds	r3, r7, #2
 8003bc0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	1cba      	adds	r2, r7, #2
 8003bc8:	8812      	ldrh	r2, [r2, #0]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d004      	beq.n	8003bd8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003bce:	230f      	movs	r3, #15
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e003      	b.n	8003be0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bd8:	230f      	movs	r3, #15
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003be0:	230f      	movs	r3, #15
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	781b      	ldrb	r3, [r3, #0]
  }
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b004      	add	sp, #16
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	0008      	movs	r0, r1
 8003bf8:	0011      	movs	r1, r2
 8003bfa:	1cbb      	adds	r3, r7, #2
 8003bfc:	1c02      	adds	r2, r0, #0
 8003bfe:	801a      	strh	r2, [r3, #0]
 8003c00:	1c7b      	adds	r3, r7, #1
 8003c02:	1c0a      	adds	r2, r1, #0
 8003c04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c06:	1c7b      	adds	r3, r7, #1
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d004      	beq.n	8003c18 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c0e:	1cbb      	adds	r3, r7, #2
 8003c10:	881a      	ldrh	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c16:	e003      	b.n	8003c20 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c18:	1cbb      	adds	r3, r7, #2
 8003c1a:	881a      	ldrh	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b002      	add	sp, #8
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e305      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	4013      	ands	r3, r2
 8003c42:	d100      	bne.n	8003c46 <HAL_RCC_OscConfig+0x1e>
 8003c44:	e08d      	b.n	8003d62 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c46:	4bc5      	ldr	r3, [pc, #788]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	220c      	movs	r2, #12
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d00e      	beq.n	8003c70 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c52:	4bc2      	ldr	r3, [pc, #776]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	220c      	movs	r2, #12
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d116      	bne.n	8003c8c <HAL_RCC_OscConfig+0x64>
 8003c5e:	4bbf      	ldr	r3, [pc, #764]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	23c0      	movs	r3, #192	; 0xc0
 8003c64:	025b      	lsls	r3, r3, #9
 8003c66:	401a      	ands	r2, r3
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	025b      	lsls	r3, r3, #9
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d10d      	bne.n	8003c8c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c70:	4bba      	ldr	r3, [pc, #744]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	029b      	lsls	r3, r3, #10
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d100      	bne.n	8003c7e <HAL_RCC_OscConfig+0x56>
 8003c7c:	e070      	b.n	8003d60 <HAL_RCC_OscConfig+0x138>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d000      	beq.n	8003c88 <HAL_RCC_OscConfig+0x60>
 8003c86:	e06b      	b.n	8003d60 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e2dc      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d107      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x7c>
 8003c94:	4bb1      	ldr	r3, [pc, #708]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4bb0      	ldr	r3, [pc, #704]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003c9a:	2180      	movs	r1, #128	; 0x80
 8003c9c:	0249      	lsls	r1, r1, #9
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e02f      	b.n	8003d04 <HAL_RCC_OscConfig+0xdc>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10c      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x9e>
 8003cac:	4bab      	ldr	r3, [pc, #684]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4baa      	ldr	r3, [pc, #680]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003cb2:	49ab      	ldr	r1, [pc, #684]	; (8003f60 <HAL_RCC_OscConfig+0x338>)
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	4ba8      	ldr	r3, [pc, #672]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4ba7      	ldr	r3, [pc, #668]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003cbe:	49a9      	ldr	r1, [pc, #676]	; (8003f64 <HAL_RCC_OscConfig+0x33c>)
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e01e      	b.n	8003d04 <HAL_RCC_OscConfig+0xdc>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d10e      	bne.n	8003cec <HAL_RCC_OscConfig+0xc4>
 8003cce:	4ba3      	ldr	r3, [pc, #652]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	4ba2      	ldr	r3, [pc, #648]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003cd4:	2180      	movs	r1, #128	; 0x80
 8003cd6:	02c9      	lsls	r1, r1, #11
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	4b9f      	ldr	r3, [pc, #636]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b9e      	ldr	r3, [pc, #632]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003ce2:	2180      	movs	r1, #128	; 0x80
 8003ce4:	0249      	lsls	r1, r1, #9
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	e00b      	b.n	8003d04 <HAL_RCC_OscConfig+0xdc>
 8003cec:	4b9b      	ldr	r3, [pc, #620]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4b9a      	ldr	r3, [pc, #616]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003cf2:	499b      	ldr	r1, [pc, #620]	; (8003f60 <HAL_RCC_OscConfig+0x338>)
 8003cf4:	400a      	ands	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	4b98      	ldr	r3, [pc, #608]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b97      	ldr	r3, [pc, #604]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003cfe:	4999      	ldr	r1, [pc, #612]	; (8003f64 <HAL_RCC_OscConfig+0x33c>)
 8003d00:	400a      	ands	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d014      	beq.n	8003d36 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7ff fc90 	bl	8003630 <HAL_GetTick>
 8003d10:	0003      	movs	r3, r0
 8003d12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d16:	f7ff fc8b 	bl	8003630 <HAL_GetTick>
 8003d1a:	0002      	movs	r2, r0
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b64      	cmp	r3, #100	; 0x64
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e28e      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d28:	4b8c      	ldr	r3, [pc, #560]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	029b      	lsls	r3, r3, #10
 8003d30:	4013      	ands	r3, r2
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0xee>
 8003d34:	e015      	b.n	8003d62 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7ff fc7b 	bl	8003630 <HAL_GetTick>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d40:	f7ff fc76 	bl	8003630 <HAL_GetTick>
 8003d44:	0002      	movs	r2, r0
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b64      	cmp	r3, #100	; 0x64
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e279      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d52:	4b82      	ldr	r3, [pc, #520]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	029b      	lsls	r3, r3, #10
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x118>
 8003d5e:	e000      	b.n	8003d62 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d60:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2202      	movs	r2, #2
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d100      	bne.n	8003d6e <HAL_RCC_OscConfig+0x146>
 8003d6c:	e06c      	b.n	8003e48 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d6e:	4b7b      	ldr	r3, [pc, #492]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	220c      	movs	r2, #12
 8003d74:	4013      	ands	r3, r2
 8003d76:	d00e      	beq.n	8003d96 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d78:	4b78      	ldr	r3, [pc, #480]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	220c      	movs	r2, #12
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d11f      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x19c>
 8003d84:	4b75      	ldr	r3, [pc, #468]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	23c0      	movs	r3, #192	; 0xc0
 8003d8a:	025b      	lsls	r3, r3, #9
 8003d8c:	401a      	ands	r2, r3
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d116      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d96:	4b71      	ldr	r3, [pc, #452]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_OscConfig+0x184>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e24c      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dac:	4b6b      	ldr	r3, [pc, #428]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	22f8      	movs	r2, #248	; 0xf8
 8003db2:	4393      	bics	r3, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	00da      	lsls	r2, r3, #3
 8003dbc:	4b67      	ldr	r3, [pc, #412]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc2:	e041      	b.n	8003e48 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d024      	beq.n	8003e16 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dcc:	4b63      	ldr	r3, [pc, #396]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b62      	ldr	r3, [pc, #392]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd8:	f7ff fc2a 	bl	8003630 <HAL_GetTick>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003de2:	f7ff fc25 	bl	8003630 <HAL_GetTick>
 8003de6:	0002      	movs	r2, r0
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e228      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df4:	4b59      	ldr	r3, [pc, #356]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d0f1      	beq.n	8003de2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfe:	4b57      	ldr	r3, [pc, #348]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	22f8      	movs	r2, #248	; 0xf8
 8003e04:	4393      	bics	r3, r2
 8003e06:	0019      	movs	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	00da      	lsls	r2, r3, #3
 8003e0e:	4b53      	ldr	r3, [pc, #332]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003e10:	430a      	orrs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e018      	b.n	8003e48 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e16:	4b51      	ldr	r3, [pc, #324]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4b50      	ldr	r3, [pc, #320]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	438a      	bics	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e22:	f7ff fc05 	bl	8003630 <HAL_GetTick>
 8003e26:	0003      	movs	r3, r0
 8003e28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e2c:	f7ff fc00 	bl	8003630 <HAL_GetTick>
 8003e30:	0002      	movs	r2, r0
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e203      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3e:	4b47      	ldr	r3, [pc, #284]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2202      	movs	r2, #2
 8003e44:	4013      	ands	r3, r2
 8003e46:	d1f1      	bne.n	8003e2c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d036      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d019      	beq.n	8003e8e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e5a:	4b40      	ldr	r3, [pc, #256]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e5e:	4b3f      	ldr	r3, [pc, #252]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003e60:	2101      	movs	r1, #1
 8003e62:	430a      	orrs	r2, r1
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e66:	f7ff fbe3 	bl	8003630 <HAL_GetTick>
 8003e6a:	0003      	movs	r3, r0
 8003e6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e70:	f7ff fbde 	bl	8003630 <HAL_GetTick>
 8003e74:	0002      	movs	r2, r0
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e1e1      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e82:	4b36      	ldr	r3, [pc, #216]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	2202      	movs	r2, #2
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d0f1      	beq.n	8003e70 <HAL_RCC_OscConfig+0x248>
 8003e8c:	e018      	b.n	8003ec0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e8e:	4b33      	ldr	r3, [pc, #204]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e92:	4b32      	ldr	r3, [pc, #200]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003e94:	2101      	movs	r1, #1
 8003e96:	438a      	bics	r2, r1
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7ff fbc9 	bl	8003630 <HAL_GetTick>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea4:	f7ff fbc4 	bl	8003630 <HAL_GetTick>
 8003ea8:	0002      	movs	r2, r0
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e1c7      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb6:	4b29      	ldr	r3, [pc, #164]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	2202      	movs	r2, #2
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d1f1      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d100      	bne.n	8003ecc <HAL_RCC_OscConfig+0x2a4>
 8003eca:	e0b5      	b.n	8004038 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ecc:	201f      	movs	r0, #31
 8003ece:	183b      	adds	r3, r7, r0
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed4:	4b21      	ldr	r3, [pc, #132]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	055b      	lsls	r3, r3, #21
 8003edc:	4013      	ands	r3, r2
 8003ede:	d110      	bne.n	8003f02 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee0:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003ee6:	2180      	movs	r1, #128	; 0x80
 8003ee8:	0549      	lsls	r1, r1, #21
 8003eea:	430a      	orrs	r2, r1
 8003eec:	61da      	str	r2, [r3, #28]
 8003eee:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	055b      	lsls	r3, r3, #21
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003efc:	183b      	adds	r3, r7, r0
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f02:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <HAL_RCC_OscConfig+0x340>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	2380      	movs	r3, #128	; 0x80
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d11a      	bne.n	8003f44 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f0e:	4b16      	ldr	r3, [pc, #88]	; (8003f68 <HAL_RCC_OscConfig+0x340>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <HAL_RCC_OscConfig+0x340>)
 8003f14:	2180      	movs	r1, #128	; 0x80
 8003f16:	0049      	lsls	r1, r1, #1
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f1c:	f7ff fb88 	bl	8003630 <HAL_GetTick>
 8003f20:	0003      	movs	r3, r0
 8003f22:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f26:	f7ff fb83 	bl	8003630 <HAL_GetTick>
 8003f2a:	0002      	movs	r2, r0
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b64      	cmp	r3, #100	; 0x64
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e186      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCC_OscConfig+0x340>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	2380      	movs	r3, #128	; 0x80
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4013      	ands	r3, r2
 8003f42:	d0f0      	beq.n	8003f26 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d10f      	bne.n	8003f6c <HAL_RCC_OscConfig+0x344>
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003f4e:	6a1a      	ldr	r2, [r3, #32]
 8003f50:	4b02      	ldr	r3, [pc, #8]	; (8003f5c <HAL_RCC_OscConfig+0x334>)
 8003f52:	2101      	movs	r1, #1
 8003f54:	430a      	orrs	r2, r1
 8003f56:	621a      	str	r2, [r3, #32]
 8003f58:	e036      	b.n	8003fc8 <HAL_RCC_OscConfig+0x3a0>
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	fffeffff 	.word	0xfffeffff
 8003f64:	fffbffff 	.word	0xfffbffff
 8003f68:	40007000 	.word	0x40007000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10c      	bne.n	8003f8e <HAL_RCC_OscConfig+0x366>
 8003f74:	4bb6      	ldr	r3, [pc, #728]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8003f76:	6a1a      	ldr	r2, [r3, #32]
 8003f78:	4bb5      	ldr	r3, [pc, #724]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	438a      	bics	r2, r1
 8003f7e:	621a      	str	r2, [r3, #32]
 8003f80:	4bb3      	ldr	r3, [pc, #716]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8003f82:	6a1a      	ldr	r2, [r3, #32]
 8003f84:	4bb2      	ldr	r3, [pc, #712]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8003f86:	2104      	movs	r1, #4
 8003f88:	438a      	bics	r2, r1
 8003f8a:	621a      	str	r2, [r3, #32]
 8003f8c:	e01c      	b.n	8003fc8 <HAL_RCC_OscConfig+0x3a0>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x388>
 8003f96:	4bae      	ldr	r3, [pc, #696]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8003f98:	6a1a      	ldr	r2, [r3, #32]
 8003f9a:	4bad      	ldr	r3, [pc, #692]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8003f9c:	2104      	movs	r1, #4
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	621a      	str	r2, [r3, #32]
 8003fa2:	4bab      	ldr	r3, [pc, #684]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8003fa4:	6a1a      	ldr	r2, [r3, #32]
 8003fa6:	4baa      	ldr	r3, [pc, #680]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8003fa8:	2101      	movs	r1, #1
 8003faa:	430a      	orrs	r2, r1
 8003fac:	621a      	str	r2, [r3, #32]
 8003fae:	e00b      	b.n	8003fc8 <HAL_RCC_OscConfig+0x3a0>
 8003fb0:	4ba7      	ldr	r3, [pc, #668]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8003fb2:	6a1a      	ldr	r2, [r3, #32]
 8003fb4:	4ba6      	ldr	r3, [pc, #664]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	438a      	bics	r2, r1
 8003fba:	621a      	str	r2, [r3, #32]
 8003fbc:	4ba4      	ldr	r3, [pc, #656]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8003fbe:	6a1a      	ldr	r2, [r3, #32]
 8003fc0:	4ba3      	ldr	r3, [pc, #652]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	438a      	bics	r2, r1
 8003fc6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d014      	beq.n	8003ffa <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd0:	f7ff fb2e 	bl	8003630 <HAL_GetTick>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd8:	e009      	b.n	8003fee <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7ff fb29 	bl	8003630 <HAL_GetTick>
 8003fde:	0002      	movs	r2, r0
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	4a9b      	ldr	r2, [pc, #620]	; (8004254 <HAL_RCC_OscConfig+0x62c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e12b      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fee:	4b98      	ldr	r3, [pc, #608]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x3b2>
 8003ff8:	e013      	b.n	8004022 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffa:	f7ff fb19 	bl	8003630 <HAL_GetTick>
 8003ffe:	0003      	movs	r3, r0
 8004000:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004002:	e009      	b.n	8004018 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004004:	f7ff fb14 	bl	8003630 <HAL_GetTick>
 8004008:	0002      	movs	r2, r0
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	4a91      	ldr	r2, [pc, #580]	; (8004254 <HAL_RCC_OscConfig+0x62c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e116      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004018:	4b8d      	ldr	r3, [pc, #564]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	2202      	movs	r2, #2
 800401e:	4013      	ands	r3, r2
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004022:	231f      	movs	r3, #31
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d105      	bne.n	8004038 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402c:	4b88      	ldr	r3, [pc, #544]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	4b87      	ldr	r3, [pc, #540]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8004032:	4989      	ldr	r1, [pc, #548]	; (8004258 <HAL_RCC_OscConfig+0x630>)
 8004034:	400a      	ands	r2, r1
 8004036:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2210      	movs	r2, #16
 800403e:	4013      	ands	r3, r2
 8004040:	d063      	beq.n	800410a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d12a      	bne.n	80040a0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800404a:	4b81      	ldr	r3, [pc, #516]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 800404c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800404e:	4b80      	ldr	r3, [pc, #512]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8004050:	2104      	movs	r1, #4
 8004052:	430a      	orrs	r2, r1
 8004054:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004056:	4b7e      	ldr	r3, [pc, #504]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8004058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405a:	4b7d      	ldr	r3, [pc, #500]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 800405c:	2101      	movs	r1, #1
 800405e:	430a      	orrs	r2, r1
 8004060:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004062:	f7ff fae5 	bl	8003630 <HAL_GetTick>
 8004066:	0003      	movs	r3, r0
 8004068:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800406c:	f7ff fae0 	bl	8003630 <HAL_GetTick>
 8004070:	0002      	movs	r2, r0
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e0e3      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800407e:	4b74      	ldr	r3, [pc, #464]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8004080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004082:	2202      	movs	r2, #2
 8004084:	4013      	ands	r3, r2
 8004086:	d0f1      	beq.n	800406c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004088:	4b71      	ldr	r3, [pc, #452]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 800408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408c:	22f8      	movs	r2, #248	; 0xf8
 800408e:	4393      	bics	r3, r2
 8004090:	0019      	movs	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	00da      	lsls	r2, r3, #3
 8004098:	4b6d      	ldr	r3, [pc, #436]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 800409a:	430a      	orrs	r2, r1
 800409c:	635a      	str	r2, [r3, #52]	; 0x34
 800409e:	e034      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	3305      	adds	r3, #5
 80040a6:	d111      	bne.n	80040cc <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80040a8:	4b69      	ldr	r3, [pc, #420]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 80040aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ac:	4b68      	ldr	r3, [pc, #416]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 80040ae:	2104      	movs	r1, #4
 80040b0:	438a      	bics	r2, r1
 80040b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80040b4:	4b66      	ldr	r3, [pc, #408]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 80040b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b8:	22f8      	movs	r2, #248	; 0xf8
 80040ba:	4393      	bics	r3, r2
 80040bc:	0019      	movs	r1, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	00da      	lsls	r2, r3, #3
 80040c4:	4b62      	ldr	r3, [pc, #392]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 80040c6:	430a      	orrs	r2, r1
 80040c8:	635a      	str	r2, [r3, #52]	; 0x34
 80040ca:	e01e      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80040cc:	4b60      	ldr	r3, [pc, #384]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 80040ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040d0:	4b5f      	ldr	r3, [pc, #380]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 80040d2:	2104      	movs	r1, #4
 80040d4:	430a      	orrs	r2, r1
 80040d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80040d8:	4b5d      	ldr	r3, [pc, #372]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 80040da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040dc:	4b5c      	ldr	r3, [pc, #368]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 80040de:	2101      	movs	r1, #1
 80040e0:	438a      	bics	r2, r1
 80040e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e4:	f7ff faa4 	bl	8003630 <HAL_GetTick>
 80040e8:	0003      	movs	r3, r0
 80040ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80040ee:	f7ff fa9f 	bl	8003630 <HAL_GetTick>
 80040f2:	0002      	movs	r2, r0
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e0a2      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004100:	4b53      	ldr	r3, [pc, #332]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8004102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004104:	2202      	movs	r2, #2
 8004106:	4013      	ands	r3, r2
 8004108:	d1f1      	bne.n	80040ee <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d100      	bne.n	8004114 <HAL_RCC_OscConfig+0x4ec>
 8004112:	e097      	b.n	8004244 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004114:	4b4e      	ldr	r3, [pc, #312]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	220c      	movs	r2, #12
 800411a:	4013      	ands	r3, r2
 800411c:	2b08      	cmp	r3, #8
 800411e:	d100      	bne.n	8004122 <HAL_RCC_OscConfig+0x4fa>
 8004120:	e06b      	b.n	80041fa <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d14c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412a:	4b49      	ldr	r3, [pc, #292]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4b48      	ldr	r3, [pc, #288]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8004130:	494a      	ldr	r1, [pc, #296]	; (800425c <HAL_RCC_OscConfig+0x634>)
 8004132:	400a      	ands	r2, r1
 8004134:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004136:	f7ff fa7b 	bl	8003630 <HAL_GetTick>
 800413a:	0003      	movs	r3, r0
 800413c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004140:	f7ff fa76 	bl	8003630 <HAL_GetTick>
 8004144:	0002      	movs	r2, r0
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e079      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004152:	4b3f      	ldr	r3, [pc, #252]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	049b      	lsls	r3, r3, #18
 800415a:	4013      	ands	r3, r2
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800415e:	4b3c      	ldr	r3, [pc, #240]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	220f      	movs	r2, #15
 8004164:	4393      	bics	r3, r2
 8004166:	0019      	movs	r1, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	4b38      	ldr	r3, [pc, #224]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 800416e:	430a      	orrs	r2, r1
 8004170:	62da      	str	r2, [r3, #44]	; 0x2c
 8004172:	4b37      	ldr	r3, [pc, #220]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4a3a      	ldr	r2, [pc, #232]	; (8004260 <HAL_RCC_OscConfig+0x638>)
 8004178:	4013      	ands	r3, r2
 800417a:	0019      	movs	r1, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	431a      	orrs	r2, r3
 8004186:	4b32      	ldr	r3, [pc, #200]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800418c:	4b30      	ldr	r3, [pc, #192]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	4b2f      	ldr	r3, [pc, #188]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8004192:	2180      	movs	r1, #128	; 0x80
 8004194:	0449      	lsls	r1, r1, #17
 8004196:	430a      	orrs	r2, r1
 8004198:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419a:	f7ff fa49 	bl	8003630 <HAL_GetTick>
 800419e:	0003      	movs	r3, r0
 80041a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a4:	f7ff fa44 	bl	8003630 <HAL_GetTick>
 80041a8:	0002      	movs	r2, r0
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e047      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041b6:	4b26      	ldr	r3, [pc, #152]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	049b      	lsls	r3, r3, #18
 80041be:	4013      	ands	r3, r2
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x57c>
 80041c2:	e03f      	b.n	8004244 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c4:	4b22      	ldr	r3, [pc, #136]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b21      	ldr	r3, [pc, #132]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 80041ca:	4924      	ldr	r1, [pc, #144]	; (800425c <HAL_RCC_OscConfig+0x634>)
 80041cc:	400a      	ands	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7ff fa2e 	bl	8003630 <HAL_GetTick>
 80041d4:	0003      	movs	r3, r0
 80041d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041da:	f7ff fa29 	bl	8003630 <HAL_GetTick>
 80041de:	0002      	movs	r2, r0
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e02c      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ec:	4b18      	ldr	r3, [pc, #96]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	049b      	lsls	r3, r3, #18
 80041f4:	4013      	ands	r3, r2
 80041f6:	d1f0      	bne.n	80041da <HAL_RCC_OscConfig+0x5b2>
 80041f8:	e024      	b.n	8004244 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e01f      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800420c:	4b10      	ldr	r3, [pc, #64]	; (8004250 <HAL_RCC_OscConfig+0x628>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	23c0      	movs	r3, #192	; 0xc0
 8004216:	025b      	lsls	r3, r3, #9
 8004218:	401a      	ands	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	429a      	cmp	r2, r3
 8004220:	d10e      	bne.n	8004240 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	220f      	movs	r2, #15
 8004226:	401a      	ands	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800422c:	429a      	cmp	r2, r3
 800422e:	d107      	bne.n	8004240 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	23f0      	movs	r3, #240	; 0xf0
 8004234:	039b      	lsls	r3, r3, #14
 8004236:	401a      	ands	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	0018      	movs	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	b008      	add	sp, #32
 800424c:	bd80      	pop	{r7, pc}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	40021000 	.word	0x40021000
 8004254:	00001388 	.word	0x00001388
 8004258:	efffffff 	.word	0xefffffff
 800425c:	feffffff 	.word	0xfeffffff
 8004260:	ffc27fff 	.word	0xffc27fff

08004264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0b3      	b.n	80043e0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004278:	4b5b      	ldr	r3, [pc, #364]	; (80043e8 <HAL_RCC_ClockConfig+0x184>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2201      	movs	r2, #1
 800427e:	4013      	ands	r3, r2
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d911      	bls.n	80042aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	4b58      	ldr	r3, [pc, #352]	; (80043e8 <HAL_RCC_ClockConfig+0x184>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2201      	movs	r2, #1
 800428c:	4393      	bics	r3, r2
 800428e:	0019      	movs	r1, r3
 8004290:	4b55      	ldr	r3, [pc, #340]	; (80043e8 <HAL_RCC_ClockConfig+0x184>)
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004298:	4b53      	ldr	r3, [pc, #332]	; (80043e8 <HAL_RCC_ClockConfig+0x184>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2201      	movs	r2, #1
 800429e:	4013      	ands	r3, r2
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e09a      	b.n	80043e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2202      	movs	r2, #2
 80042b0:	4013      	ands	r3, r2
 80042b2:	d015      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2204      	movs	r2, #4
 80042ba:	4013      	ands	r3, r2
 80042bc:	d006      	beq.n	80042cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80042be:	4b4b      	ldr	r3, [pc, #300]	; (80043ec <HAL_RCC_ClockConfig+0x188>)
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	4b4a      	ldr	r3, [pc, #296]	; (80043ec <HAL_RCC_ClockConfig+0x188>)
 80042c4:	21e0      	movs	r1, #224	; 0xe0
 80042c6:	00c9      	lsls	r1, r1, #3
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042cc:	4b47      	ldr	r3, [pc, #284]	; (80043ec <HAL_RCC_ClockConfig+0x188>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	22f0      	movs	r2, #240	; 0xf0
 80042d2:	4393      	bics	r3, r2
 80042d4:	0019      	movs	r1, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	4b44      	ldr	r3, [pc, #272]	; (80043ec <HAL_RCC_ClockConfig+0x188>)
 80042dc:	430a      	orrs	r2, r1
 80042de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2201      	movs	r2, #1
 80042e6:	4013      	ands	r3, r2
 80042e8:	d040      	beq.n	800436c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	4b3e      	ldr	r3, [pc, #248]	; (80043ec <HAL_RCC_ClockConfig+0x188>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	029b      	lsls	r3, r3, #10
 80042fa:	4013      	ands	r3, r2
 80042fc:	d114      	bne.n	8004328 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e06e      	b.n	80043e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d107      	bne.n	800431a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430a:	4b38      	ldr	r3, [pc, #224]	; (80043ec <HAL_RCC_ClockConfig+0x188>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	2380      	movs	r3, #128	; 0x80
 8004310:	049b      	lsls	r3, r3, #18
 8004312:	4013      	ands	r3, r2
 8004314:	d108      	bne.n	8004328 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e062      	b.n	80043e0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431a:	4b34      	ldr	r3, [pc, #208]	; (80043ec <HAL_RCC_ClockConfig+0x188>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2202      	movs	r2, #2
 8004320:	4013      	ands	r3, r2
 8004322:	d101      	bne.n	8004328 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e05b      	b.n	80043e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004328:	4b30      	ldr	r3, [pc, #192]	; (80043ec <HAL_RCC_ClockConfig+0x188>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2203      	movs	r2, #3
 800432e:	4393      	bics	r3, r2
 8004330:	0019      	movs	r1, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	4b2d      	ldr	r3, [pc, #180]	; (80043ec <HAL_RCC_ClockConfig+0x188>)
 8004338:	430a      	orrs	r2, r1
 800433a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800433c:	f7ff f978 	bl	8003630 <HAL_GetTick>
 8004340:	0003      	movs	r3, r0
 8004342:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004344:	e009      	b.n	800435a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004346:	f7ff f973 	bl	8003630 <HAL_GetTick>
 800434a:	0002      	movs	r2, r0
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	4a27      	ldr	r2, [pc, #156]	; (80043f0 <HAL_RCC_ClockConfig+0x18c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e042      	b.n	80043e0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	4b24      	ldr	r3, [pc, #144]	; (80043ec <HAL_RCC_ClockConfig+0x188>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	220c      	movs	r2, #12
 8004360:	401a      	ands	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	429a      	cmp	r2, r3
 800436a:	d1ec      	bne.n	8004346 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800436c:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <HAL_RCC_ClockConfig+0x184>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2201      	movs	r2, #1
 8004372:	4013      	ands	r3, r2
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d211      	bcs.n	800439e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <HAL_RCC_ClockConfig+0x184>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2201      	movs	r2, #1
 8004380:	4393      	bics	r3, r2
 8004382:	0019      	movs	r1, r3
 8004384:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <HAL_RCC_ClockConfig+0x184>)
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438c:	4b16      	ldr	r3, [pc, #88]	; (80043e8 <HAL_RCC_ClockConfig+0x184>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2201      	movs	r2, #1
 8004392:	4013      	ands	r3, r2
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d001      	beq.n	800439e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e020      	b.n	80043e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2204      	movs	r2, #4
 80043a4:	4013      	ands	r3, r2
 80043a6:	d009      	beq.n	80043bc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80043a8:	4b10      	ldr	r3, [pc, #64]	; (80043ec <HAL_RCC_ClockConfig+0x188>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4a11      	ldr	r2, [pc, #68]	; (80043f4 <HAL_RCC_ClockConfig+0x190>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	0019      	movs	r1, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <HAL_RCC_ClockConfig+0x188>)
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043bc:	f000 f820 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 80043c0:	0001      	movs	r1, r0
 80043c2:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <HAL_RCC_ClockConfig+0x188>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	091b      	lsrs	r3, r3, #4
 80043c8:	220f      	movs	r2, #15
 80043ca:	4013      	ands	r3, r2
 80043cc:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <HAL_RCC_ClockConfig+0x194>)
 80043ce:	5cd3      	ldrb	r3, [r2, r3]
 80043d0:	000a      	movs	r2, r1
 80043d2:	40da      	lsrs	r2, r3
 80043d4:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_RCC_ClockConfig+0x198>)
 80043d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80043d8:	2000      	movs	r0, #0
 80043da:	f7ff f8e3 	bl	80035a4 <HAL_InitTick>
  
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	0018      	movs	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b004      	add	sp, #16
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40022000 	.word	0x40022000
 80043ec:	40021000 	.word	0x40021000
 80043f0:	00001388 	.word	0x00001388
 80043f4:	fffff8ff 	.word	0xfffff8ff
 80043f8:	080095fc 	.word	0x080095fc
 80043fc:	20000000 	.word	0x20000000

08004400 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800441a:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	220c      	movs	r2, #12
 8004424:	4013      	ands	r3, r2
 8004426:	2b04      	cmp	r3, #4
 8004428:	d002      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0x30>
 800442a:	2b08      	cmp	r3, #8
 800442c:	d003      	beq.n	8004436 <HAL_RCC_GetSysClockFreq+0x36>
 800442e:	e02e      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004430:	4b1c      	ldr	r3, [pc, #112]	; (80044a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004432:	613b      	str	r3, [r7, #16]
      break;
 8004434:	e02e      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	0c9b      	lsrs	r3, r3, #18
 800443a:	220f      	movs	r2, #15
 800443c:	4013      	ands	r3, r2
 800443e:	4a1a      	ldr	r2, [pc, #104]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004440:	5cd3      	ldrb	r3, [r2, r3]
 8004442:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004444:	4b16      	ldr	r3, [pc, #88]	; (80044a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	220f      	movs	r2, #15
 800444a:	4013      	ands	r3, r2
 800444c:	4a17      	ldr	r2, [pc, #92]	; (80044ac <HAL_RCC_GetSysClockFreq+0xac>)
 800444e:	5cd3      	ldrb	r3, [r2, r3]
 8004450:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	23c0      	movs	r3, #192	; 0xc0
 8004456:	025b      	lsls	r3, r3, #9
 8004458:	401a      	ands	r2, r3
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	025b      	lsls	r3, r3, #9
 800445e:	429a      	cmp	r2, r3
 8004460:	d109      	bne.n	8004476 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	480f      	ldr	r0, [pc, #60]	; (80044a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004466:	f7fb fe6b 	bl	8000140 <__udivsi3>
 800446a:	0003      	movs	r3, r0
 800446c:	001a      	movs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4353      	muls	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	e008      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	480a      	ldr	r0, [pc, #40]	; (80044a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800447a:	f7fb fe61 	bl	8000140 <__udivsi3>
 800447e:	0003      	movs	r3, r0
 8004480:	001a      	movs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4353      	muls	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	613b      	str	r3, [r7, #16]
      break;
 800448c:	e002      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004490:	613b      	str	r3, [r7, #16]
      break;
 8004492:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004494:	693b      	ldr	r3, [r7, #16]
}
 8004496:	0018      	movs	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	b006      	add	sp, #24
 800449c:	bd80      	pop	{r7, pc}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	40021000 	.word	0x40021000
 80044a4:	007a1200 	.word	0x007a1200
 80044a8:	08009614 	.word	0x08009614
 80044ac:	08009624 	.word	0x08009624

080044b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044b4:	4b02      	ldr	r3, [pc, #8]	; (80044c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80044b6:	681b      	ldr	r3, [r3, #0]
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	20000000 	.word	0x20000000

080044c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80044c8:	f7ff fff2 	bl	80044b0 <HAL_RCC_GetHCLKFreq>
 80044cc:	0001      	movs	r1, r0
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	2207      	movs	r2, #7
 80044d6:	4013      	ands	r3, r2
 80044d8:	4a04      	ldr	r2, [pc, #16]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80044da:	5cd3      	ldrb	r3, [r2, r3]
 80044dc:	40d9      	lsrs	r1, r3
 80044de:	000b      	movs	r3, r1
}    
 80044e0:	0018      	movs	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	40021000 	.word	0x40021000
 80044ec:	0800960c 	.word	0x0800960c

080044f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0a8      	b.n	8004654 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	2382      	movs	r3, #130	; 0x82
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	429a      	cmp	r2, r3
 8004514:	d009      	beq.n	800452a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	61da      	str	r2, [r3, #28]
 800451c:	e005      	b.n	800452a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	225d      	movs	r2, #93	; 0x5d
 8004534:	5c9b      	ldrb	r3, [r3, r2]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d107      	bne.n	800454c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	225c      	movs	r2, #92	; 0x5c
 8004540:	2100      	movs	r1, #0
 8004542:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	0018      	movs	r0, r3
 8004548:	f7fe fd50 	bl	8002fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	225d      	movs	r2, #93	; 0x5d
 8004550:	2102      	movs	r1, #2
 8004552:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2140      	movs	r1, #64	; 0x40
 8004560:	438a      	bics	r2, r1
 8004562:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	23e0      	movs	r3, #224	; 0xe0
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	429a      	cmp	r2, r3
 800456e:	d902      	bls.n	8004576 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e002      	b.n	800457c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	015b      	lsls	r3, r3, #5
 800457a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	23f0      	movs	r3, #240	; 0xf0
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	429a      	cmp	r2, r3
 8004586:	d008      	beq.n	800459a <HAL_SPI_Init+0xaa>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	23e0      	movs	r3, #224	; 0xe0
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	429a      	cmp	r2, r3
 8004592:	d002      	beq.n	800459a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	2382      	movs	r3, #130	; 0x82
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	401a      	ands	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6899      	ldr	r1, [r3, #8]
 80045a8:	2384      	movs	r3, #132	; 0x84
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	400b      	ands	r3, r1
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	2102      	movs	r1, #2
 80045b6:	400b      	ands	r3, r1
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	2101      	movs	r1, #1
 80045c0:	400b      	ands	r3, r1
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6999      	ldr	r1, [r3, #24]
 80045c8:	2380      	movs	r3, #128	; 0x80
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	400b      	ands	r3, r1
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	2138      	movs	r1, #56	; 0x38
 80045d6:	400b      	ands	r3, r1
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	2180      	movs	r1, #128	; 0x80
 80045e0:	400b      	ands	r3, r1
 80045e2:	431a      	orrs	r2, r3
 80045e4:	0011      	movs	r1, r2
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ea:	2380      	movs	r3, #128	; 0x80
 80045ec:	019b      	lsls	r3, r3, #6
 80045ee:	401a      	ands	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	0c1b      	lsrs	r3, r3, #16
 80045fe:	2204      	movs	r2, #4
 8004600:	401a      	ands	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2110      	movs	r1, #16
 8004608:	400b      	ands	r3, r1
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004610:	2108      	movs	r1, #8
 8004612:	400b      	ands	r3, r1
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68d9      	ldr	r1, [r3, #12]
 800461a:	23f0      	movs	r3, #240	; 0xf0
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	400b      	ands	r3, r1
 8004620:	431a      	orrs	r2, r3
 8004622:	0011      	movs	r1, r2
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	2380      	movs	r3, #128	; 0x80
 8004628:	015b      	lsls	r3, r3, #5
 800462a:	401a      	ands	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4907      	ldr	r1, [pc, #28]	; (800465c <HAL_SPI_Init+0x16c>)
 8004640:	400a      	ands	r2, r1
 8004642:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	225d      	movs	r2, #93	; 0x5d
 800464e:	2101      	movs	r1, #1
 8004650:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	0018      	movs	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	b004      	add	sp, #16
 800465a:	bd80      	pop	{r7, pc}
 800465c:	fffff7ff 	.word	0xfffff7ff

08004660 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	099b      	lsrs	r3, r3, #6
 800467c:	001a      	movs	r2, r3
 800467e:	2301      	movs	r3, #1
 8004680:	4013      	ands	r3, r2
 8004682:	d10f      	bne.n	80046a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2201      	movs	r2, #1
 8004688:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800468a:	d00b      	beq.n	80046a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	099b      	lsrs	r3, r3, #6
 8004690:	001a      	movs	r2, r3
 8004692:	2301      	movs	r3, #1
 8004694:	4013      	ands	r3, r2
 8004696:	d005      	beq.n	80046a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	0010      	movs	r0, r2
 80046a0:	4798      	blx	r3
    return;
 80046a2:	e0d5      	b.n	8004850 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	001a      	movs	r2, r3
 80046aa:	2301      	movs	r3, #1
 80046ac:	4013      	ands	r3, r2
 80046ae:	d00b      	beq.n	80046c8 <HAL_SPI_IRQHandler+0x68>
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	09db      	lsrs	r3, r3, #7
 80046b4:	001a      	movs	r2, r3
 80046b6:	2301      	movs	r3, #1
 80046b8:	4013      	ands	r3, r2
 80046ba:	d005      	beq.n	80046c8 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	0010      	movs	r0, r2
 80046c4:	4798      	blx	r3
    return;
 80046c6:	e0c3      	b.n	8004850 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	001a      	movs	r2, r3
 80046ce:	2301      	movs	r3, #1
 80046d0:	4013      	ands	r3, r2
 80046d2:	d10c      	bne.n	80046ee <HAL_SPI_IRQHandler+0x8e>
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	001a      	movs	r2, r3
 80046da:	2301      	movs	r3, #1
 80046dc:	4013      	ands	r3, r2
 80046de:	d106      	bne.n	80046ee <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	0a1b      	lsrs	r3, r3, #8
 80046e4:	001a      	movs	r2, r3
 80046e6:	2301      	movs	r3, #1
 80046e8:	4013      	ands	r3, r2
 80046ea:	d100      	bne.n	80046ee <HAL_SPI_IRQHandler+0x8e>
 80046ec:	e0b0      	b.n	8004850 <HAL_SPI_IRQHandler+0x1f0>
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	001a      	movs	r2, r3
 80046f4:	2301      	movs	r3, #1
 80046f6:	4013      	ands	r3, r2
 80046f8:	d100      	bne.n	80046fc <HAL_SPI_IRQHandler+0x9c>
 80046fa:	e0a9      	b.n	8004850 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	099b      	lsrs	r3, r3, #6
 8004700:	001a      	movs	r2, r3
 8004702:	2301      	movs	r3, #1
 8004704:	4013      	ands	r3, r2
 8004706:	d023      	beq.n	8004750 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	225d      	movs	r2, #93	; 0x5d
 800470c:	5c9b      	ldrb	r3, [r3, r2]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b03      	cmp	r3, #3
 8004712:	d011      	beq.n	8004738 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004718:	2204      	movs	r2, #4
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	e00b      	b.n	8004750 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004738:	2300      	movs	r3, #0
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	693b      	ldr	r3, [r7, #16]
        return;
 800474e:	e07f      	b.n	8004850 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	001a      	movs	r2, r3
 8004756:	2301      	movs	r3, #1
 8004758:	4013      	ands	r3, r2
 800475a:	d014      	beq.n	8004786 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004760:	2201      	movs	r2, #1
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2140      	movs	r1, #64	; 0x40
 8004780:	438a      	bics	r2, r1
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	0a1b      	lsrs	r3, r3, #8
 800478a:	001a      	movs	r2, r3
 800478c:	2301      	movs	r3, #1
 800478e:	4013      	ands	r3, r2
 8004790:	d00c      	beq.n	80047ac <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004796:	2208      	movs	r2, #8
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d04c      	beq.n	800484e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	21e0      	movs	r1, #224	; 0xe0
 80047c0:	438a      	bics	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	225d      	movs	r2, #93	; 0x5d
 80047c8:	2101      	movs	r1, #1
 80047ca:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	2202      	movs	r2, #2
 80047d0:	4013      	ands	r3, r2
 80047d2:	d103      	bne.n	80047dc <HAL_SPI_IRQHandler+0x17c>
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	2201      	movs	r2, #1
 80047d8:	4013      	ands	r3, r2
 80047da:	d032      	beq.n	8004842 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2103      	movs	r1, #3
 80047e8:	438a      	bics	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d010      	beq.n	8004816 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f8:	4a17      	ldr	r2, [pc, #92]	; (8004858 <HAL_SPI_IRQHandler+0x1f8>)
 80047fa:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	0018      	movs	r0, r3
 8004802:	f7ff f821 	bl	8003848 <HAL_DMA_Abort_IT>
 8004806:	1e03      	subs	r3, r0, #0
 8004808:	d005      	beq.n	8004816 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480e:	2240      	movs	r2, #64	; 0x40
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	2b00      	cmp	r3, #0
 800481c:	d016      	beq.n	800484c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004822:	4a0d      	ldr	r2, [pc, #52]	; (8004858 <HAL_SPI_IRQHandler+0x1f8>)
 8004824:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	0018      	movs	r0, r3
 800482c:	f7ff f80c 	bl	8003848 <HAL_DMA_Abort_IT>
 8004830:	1e03      	subs	r3, r0, #0
 8004832:	d00b      	beq.n	800484c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004838:	2240      	movs	r2, #64	; 0x40
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004840:	e004      	b.n	800484c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0018      	movs	r0, r3
 8004846:	f000 f809 	bl	800485c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800484a:	e000      	b.n	800484e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800484c:	46c0      	nop			; (mov r8, r8)
    return;
 800484e:	46c0      	nop			; (mov r8, r8)
  }
}
 8004850:	46bd      	mov	sp, r7
 8004852:	b008      	add	sp, #32
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	0800486d 	.word	0x0800486d

0800485c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004864:	46c0      	nop			; (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	b002      	add	sp, #8
 800486a:	bd80      	pop	{r7, pc}

0800486c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2246      	movs	r2, #70	; 0x46
 800487e:	2100      	movs	r1, #0
 8004880:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	0018      	movs	r0, r3
 800488c:	f7ff ffe6 	bl	800485c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004890:	46c0      	nop			; (mov r8, r8)
 8004892:	46bd      	mov	sp, r7
 8004894:	b004      	add	sp, #16
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e042      	b.n	8004930 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	223d      	movs	r2, #61	; 0x3d
 80048ae:	5c9b      	ldrb	r3, [r3, r2]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d107      	bne.n	80048c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	223c      	movs	r2, #60	; 0x3c
 80048ba:	2100      	movs	r1, #0
 80048bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7fe fc3b 	bl	800313c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	223d      	movs	r2, #61	; 0x3d
 80048ca:	2102      	movs	r1, #2
 80048cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	0019      	movs	r1, r3
 80048d8:	0010      	movs	r0, r2
 80048da:	f000 fd7b 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2246      	movs	r2, #70	; 0x46
 80048e2:	2101      	movs	r1, #1
 80048e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	223e      	movs	r2, #62	; 0x3e
 80048ea:	2101      	movs	r1, #1
 80048ec:	5499      	strb	r1, [r3, r2]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	223f      	movs	r2, #63	; 0x3f
 80048f2:	2101      	movs	r1, #1
 80048f4:	5499      	strb	r1, [r3, r2]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2240      	movs	r2, #64	; 0x40
 80048fa:	2101      	movs	r1, #1
 80048fc:	5499      	strb	r1, [r3, r2]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2241      	movs	r2, #65	; 0x41
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2242      	movs	r2, #66	; 0x42
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2243      	movs	r2, #67	; 0x43
 8004912:	2101      	movs	r1, #1
 8004914:	5499      	strb	r1, [r3, r2]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2244      	movs	r2, #68	; 0x44
 800491a:	2101      	movs	r1, #1
 800491c:	5499      	strb	r1, [r3, r2]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2245      	movs	r2, #69	; 0x45
 8004922:	2101      	movs	r1, #1
 8004924:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	223d      	movs	r2, #61	; 0x3d
 800492a:	2101      	movs	r1, #1
 800492c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	0018      	movs	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	b002      	add	sp, #8
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e042      	b.n	80049d0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	223d      	movs	r2, #61	; 0x3d
 800494e:	5c9b      	ldrb	r3, [r3, r2]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d107      	bne.n	8004966 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	223c      	movs	r2, #60	; 0x3c
 800495a:	2100      	movs	r1, #0
 800495c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	0018      	movs	r0, r3
 8004962:	f000 f839 	bl	80049d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	223d      	movs	r2, #61	; 0x3d
 800496a:	2102      	movs	r1, #2
 800496c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	0019      	movs	r1, r3
 8004978:	0010      	movs	r0, r2
 800497a:	f000 fd2b 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2246      	movs	r2, #70	; 0x46
 8004982:	2101      	movs	r1, #1
 8004984:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	223e      	movs	r2, #62	; 0x3e
 800498a:	2101      	movs	r1, #1
 800498c:	5499      	strb	r1, [r3, r2]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	223f      	movs	r2, #63	; 0x3f
 8004992:	2101      	movs	r1, #1
 8004994:	5499      	strb	r1, [r3, r2]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2240      	movs	r2, #64	; 0x40
 800499a:	2101      	movs	r1, #1
 800499c:	5499      	strb	r1, [r3, r2]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2241      	movs	r2, #65	; 0x41
 80049a2:	2101      	movs	r1, #1
 80049a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2242      	movs	r2, #66	; 0x42
 80049aa:	2101      	movs	r1, #1
 80049ac:	5499      	strb	r1, [r3, r2]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2243      	movs	r2, #67	; 0x43
 80049b2:	2101      	movs	r1, #1
 80049b4:	5499      	strb	r1, [r3, r2]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2244      	movs	r2, #68	; 0x44
 80049ba:	2101      	movs	r1, #1
 80049bc:	5499      	strb	r1, [r3, r2]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2245      	movs	r2, #69	; 0x45
 80049c2:	2101      	movs	r1, #1
 80049c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	223d      	movs	r2, #61	; 0x3d
 80049ca:	2101      	movs	r1, #1
 80049cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	0018      	movs	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b002      	add	sp, #8
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b002      	add	sp, #8
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d108      	bne.n	8004a0a <HAL_TIM_PWM_Start+0x22>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	223e      	movs	r2, #62	; 0x3e
 80049fc:	5c9b      	ldrb	r3, [r3, r2]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	1e5a      	subs	r2, r3, #1
 8004a04:	4193      	sbcs	r3, r2
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	e01f      	b.n	8004a4a <HAL_TIM_PWM_Start+0x62>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d108      	bne.n	8004a22 <HAL_TIM_PWM_Start+0x3a>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	223f      	movs	r2, #63	; 0x3f
 8004a14:	5c9b      	ldrb	r3, [r3, r2]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	1e5a      	subs	r2, r3, #1
 8004a1c:	4193      	sbcs	r3, r2
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	e013      	b.n	8004a4a <HAL_TIM_PWM_Start+0x62>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d108      	bne.n	8004a3a <HAL_TIM_PWM_Start+0x52>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2240      	movs	r2, #64	; 0x40
 8004a2c:	5c9b      	ldrb	r3, [r3, r2]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	1e5a      	subs	r2, r3, #1
 8004a34:	4193      	sbcs	r3, r2
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	e007      	b.n	8004a4a <HAL_TIM_PWM_Start+0x62>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2241      	movs	r2, #65	; 0x41
 8004a3e:	5c9b      	ldrb	r3, [r3, r2]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	1e5a      	subs	r2, r3, #1
 8004a46:	4193      	sbcs	r3, r2
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e06e      	b.n	8004b30 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_PWM_Start+0x7a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	223e      	movs	r2, #62	; 0x3e
 8004a5c:	2102      	movs	r1, #2
 8004a5e:	5499      	strb	r1, [r3, r2]
 8004a60:	e013      	b.n	8004a8a <HAL_TIM_PWM_Start+0xa2>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Start+0x8a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	223f      	movs	r2, #63	; 0x3f
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	5499      	strb	r1, [r3, r2]
 8004a70:	e00b      	b.n	8004a8a <HAL_TIM_PWM_Start+0xa2>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_PWM_Start+0x9a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2240      	movs	r2, #64	; 0x40
 8004a7c:	2102      	movs	r1, #2
 8004a7e:	5499      	strb	r1, [r3, r2]
 8004a80:	e003      	b.n	8004a8a <HAL_TIM_PWM_Start+0xa2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2241      	movs	r2, #65	; 0x41
 8004a86:	2102      	movs	r1, #2
 8004a88:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6839      	ldr	r1, [r7, #0]
 8004a90:	2201      	movs	r2, #1
 8004a92:	0018      	movs	r0, r3
 8004a94:	f001 f830 	bl	8005af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a26      	ldr	r2, [pc, #152]	; (8004b38 <HAL_TIM_PWM_Start+0x150>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_TIM_PWM_Start+0xd8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a25      	ldr	r2, [pc, #148]	; (8004b3c <HAL_TIM_PWM_Start+0x154>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_TIM_PWM_Start+0xd8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a23      	ldr	r2, [pc, #140]	; (8004b40 <HAL_TIM_PWM_Start+0x158>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIM_PWM_Start+0xd8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a22      	ldr	r2, [pc, #136]	; (8004b44 <HAL_TIM_PWM_Start+0x15c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_TIM_PWM_Start+0xdc>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_TIM_PWM_Start+0xde>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2180      	movs	r1, #128	; 0x80
 8004ad6:	0209      	lsls	r1, r1, #8
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <HAL_TIM_PWM_Start+0x150>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d009      	beq.n	8004afa <HAL_TIM_PWM_Start+0x112>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a17      	ldr	r2, [pc, #92]	; (8004b48 <HAL_TIM_PWM_Start+0x160>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d004      	beq.n	8004afa <HAL_TIM_PWM_Start+0x112>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a11      	ldr	r2, [pc, #68]	; (8004b3c <HAL_TIM_PWM_Start+0x154>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d111      	bne.n	8004b1e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2207      	movs	r2, #7
 8004b02:	4013      	ands	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b06      	cmp	r3, #6
 8004b0a:	d010      	beq.n	8004b2e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2101      	movs	r1, #1
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1c:	e007      	b.n	8004b2e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2101      	movs	r1, #1
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	0018      	movs	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b004      	add	sp, #16
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40014000 	.word	0x40014000
 8004b40:	40014400 	.word	0x40014400
 8004b44:	40014800 	.word	0x40014800
 8004b48:	40000400 	.word	0x40000400

08004b4c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e042      	b.n	8004be4 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	223d      	movs	r2, #61	; 0x3d
 8004b62:	5c9b      	ldrb	r3, [r3, r2]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d107      	bne.n	8004b7a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	223c      	movs	r2, #60	; 0x3c
 8004b6e:	2100      	movs	r1, #0
 8004b70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	0018      	movs	r0, r3
 8004b76:	f000 f839 	bl	8004bec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	223d      	movs	r2, #61	; 0x3d
 8004b7e:	2102      	movs	r1, #2
 8004b80:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	0019      	movs	r1, r3
 8004b8c:	0010      	movs	r0, r2
 8004b8e:	f000 fc21 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2246      	movs	r2, #70	; 0x46
 8004b96:	2101      	movs	r1, #1
 8004b98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	223e      	movs	r2, #62	; 0x3e
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	5499      	strb	r1, [r3, r2]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	223f      	movs	r2, #63	; 0x3f
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	5499      	strb	r1, [r3, r2]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2240      	movs	r2, #64	; 0x40
 8004bae:	2101      	movs	r1, #1
 8004bb0:	5499      	strb	r1, [r3, r2]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2241      	movs	r2, #65	; 0x41
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2242      	movs	r2, #66	; 0x42
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	5499      	strb	r1, [r3, r2]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2243      	movs	r2, #67	; 0x43
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	5499      	strb	r1, [r3, r2]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2244      	movs	r2, #68	; 0x44
 8004bce:	2101      	movs	r1, #1
 8004bd0:	5499      	strb	r1, [r3, r2]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2245      	movs	r2, #69	; 0x45
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	223d      	movs	r2, #61	; 0x3d
 8004bde:	2101      	movs	r1, #1
 8004be0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	0018      	movs	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b002      	add	sp, #8
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004bf4:	46c0      	nop			; (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b002      	add	sp, #8
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e090      	b.n	8004d32 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	223d      	movs	r2, #61	; 0x3d
 8004c14:	5c9b      	ldrb	r3, [r3, r2]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d107      	bne.n	8004c2c <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	223c      	movs	r2, #60	; 0x3c
 8004c20:	2100      	movs	r1, #0
 8004c22:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	0018      	movs	r0, r3
 8004c28:	f7fe fa36 	bl	8003098 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	223d      	movs	r2, #61	; 0x3d
 8004c30:	2102      	movs	r1, #2
 8004c32:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	493f      	ldr	r1, [pc, #252]	; (8004d3c <HAL_TIM_Encoder_Init+0x140>)
 8004c40:	400a      	ands	r2, r1
 8004c42:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	0019      	movs	r1, r3
 8004c4e:	0010      	movs	r0, r2
 8004c50:	f000 fbc0 	bl	80053d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4a31      	ldr	r2, [pc, #196]	; (8004d40 <HAL_TIM_Encoder_Init+0x144>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4a2c      	ldr	r2, [pc, #176]	; (8004d44 <HAL_TIM_Encoder_Init+0x148>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4a2b      	ldr	r2, [pc, #172]	; (8004d48 <HAL_TIM_Encoder_Init+0x14c>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	4313      	orrs	r3, r2
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	011a      	lsls	r2, r3, #4
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	031b      	lsls	r3, r3, #12
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2222      	movs	r2, #34	; 0x22
 8004cca:	4393      	bics	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2288      	movs	r2, #136	; 0x88
 8004cd2:	4393      	bics	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2246      	movs	r2, #70	; 0x46
 8004d04:	2101      	movs	r1, #1
 8004d06:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	223e      	movs	r2, #62	; 0x3e
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	223f      	movs	r2, #63	; 0x3f
 8004d14:	2101      	movs	r1, #1
 8004d16:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2242      	movs	r2, #66	; 0x42
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2243      	movs	r2, #67	; 0x43
 8004d24:	2101      	movs	r1, #1
 8004d26:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	223d      	movs	r2, #61	; 0x3d
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	0018      	movs	r0, r3
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b006      	add	sp, #24
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	ffffbff8 	.word	0xffffbff8
 8004d40:	fffffcfc 	.word	0xfffffcfc
 8004d44:	fffff3f3 	.word	0xfffff3f3
 8004d48:	ffff0f0f 	.word	0xffff0f0f

08004d4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d4c:	b590      	push	{r4, r7, lr}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d56:	200f      	movs	r0, #15
 8004d58:	183b      	adds	r3, r7, r0
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	213e      	movs	r1, #62	; 0x3e
 8004d5e:	5c52      	ldrb	r2, [r2, r1]
 8004d60:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d62:	230e      	movs	r3, #14
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	213f      	movs	r1, #63	; 0x3f
 8004d6a:	5c52      	ldrb	r2, [r2, r1]
 8004d6c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d6e:	240d      	movs	r4, #13
 8004d70:	193b      	adds	r3, r7, r4
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	2142      	movs	r1, #66	; 0x42
 8004d76:	5c52      	ldrb	r2, [r2, r1]
 8004d78:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d7a:	230c      	movs	r3, #12
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	2143      	movs	r1, #67	; 0x43
 8004d82:	5c52      	ldrb	r2, [r2, r1]
 8004d84:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d112      	bne.n	8004db2 <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d8c:	183b      	adds	r3, r7, r0
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d103      	bne.n	8004d9c <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d94:	193b      	adds	r3, r7, r4
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d001      	beq.n	8004da0 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e075      	b.n	8004e8c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	223e      	movs	r2, #62	; 0x3e
 8004da4:	2102      	movs	r1, #2
 8004da6:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2242      	movs	r2, #66	; 0x42
 8004dac:	2102      	movs	r1, #2
 8004dae:	5499      	strb	r1, [r3, r2]
 8004db0:	e03d      	b.n	8004e2e <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d114      	bne.n	8004de2 <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004db8:	230e      	movs	r3, #14
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d104      	bne.n	8004dcc <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dc2:	230c      	movs	r3, #12
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d001      	beq.n	8004dd0 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e05d      	b.n	8004e8c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	223f      	movs	r2, #63	; 0x3f
 8004dd4:	2102      	movs	r1, #2
 8004dd6:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2243      	movs	r2, #67	; 0x43
 8004ddc:	2102      	movs	r1, #2
 8004dde:	5499      	strb	r1, [r3, r2]
 8004de0:	e025      	b.n	8004e2e <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004de2:	230f      	movs	r3, #15
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d10e      	bne.n	8004e0a <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dec:	230e      	movs	r3, #14
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d109      	bne.n	8004e0a <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004df6:	230d      	movs	r3, #13
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d104      	bne.n	8004e0a <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e00:	230c      	movs	r3, #12
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d001      	beq.n	8004e0e <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e03e      	b.n	8004e8c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	223e      	movs	r2, #62	; 0x3e
 8004e12:	2102      	movs	r1, #2
 8004e14:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	223f      	movs	r2, #63	; 0x3f
 8004e1a:	2102      	movs	r1, #2
 8004e1c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2242      	movs	r2, #66	; 0x42
 8004e22:	2102      	movs	r1, #2
 8004e24:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2243      	movs	r2, #67	; 0x43
 8004e2a:	2102      	movs	r1, #2
 8004e2c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_TIM_Encoder_Start+0xf0>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d008      	beq.n	8004e4c <HAL_TIM_Encoder_Start+0x100>
 8004e3a:	e00f      	b.n	8004e5c <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2201      	movs	r2, #1
 8004e42:	2100      	movs	r1, #0
 8004e44:	0018      	movs	r0, r3
 8004e46:	f000 fe57 	bl	8005af8 <TIM_CCxChannelCmd>
      break;
 8004e4a:	e016      	b.n	8004e7a <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2201      	movs	r2, #1
 8004e52:	2104      	movs	r1, #4
 8004e54:	0018      	movs	r0, r3
 8004e56:	f000 fe4f 	bl	8005af8 <TIM_CCxChannelCmd>
      break;
 8004e5a:	e00e      	b.n	8004e7a <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2201      	movs	r2, #1
 8004e62:	2100      	movs	r1, #0
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 fe47 	bl	8005af8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	2104      	movs	r1, #4
 8004e72:	0018      	movs	r0, r3
 8004e74:	f000 fe40 	bl	8005af8 <TIM_CCxChannelCmd>
      break;
 8004e78:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2101      	movs	r1, #1
 8004e86:	430a      	orrs	r2, r1
 8004e88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b005      	add	sp, #20
 8004e92:	bd90      	pop	{r4, r7, pc}

08004e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d124      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d11d      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	4252      	negs	r2, r2
 8004ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	2203      	movs	r2, #3
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f000 fa64 	bl	80053a4 <HAL_TIM_IC_CaptureCallback>
 8004edc:	e007      	b.n	8004eee <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f000 fa57 	bl	8005394 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f000 fa63 	bl	80053b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2204      	movs	r2, #4
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d125      	bne.n	8004f4e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2204      	movs	r2, #4
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d11e      	bne.n	8004f4e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2205      	movs	r2, #5
 8004f16:	4252      	negs	r2, r2
 8004f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	23c0      	movs	r3, #192	; 0xc0
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	0018      	movs	r0, r3
 8004f32:	f000 fa37 	bl	80053a4 <HAL_TIM_IC_CaptureCallback>
 8004f36:	e007      	b.n	8004f48 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f000 fa2a 	bl	8005394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	0018      	movs	r0, r3
 8004f44:	f000 fa36 	bl	80053b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2208      	movs	r2, #8
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d124      	bne.n	8004fa6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	2208      	movs	r2, #8
 8004f64:	4013      	ands	r3, r2
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d11d      	bne.n	8004fa6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2209      	movs	r2, #9
 8004f70:	4252      	negs	r2, r2
 8004f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2204      	movs	r2, #4
 8004f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	2203      	movs	r2, #3
 8004f82:	4013      	ands	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f000 fa0b 	bl	80053a4 <HAL_TIM_IC_CaptureCallback>
 8004f8e:	e007      	b.n	8004fa0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	0018      	movs	r0, r3
 8004f94:	f000 f9fe 	bl	8005394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f000 fa0a 	bl	80053b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2210      	movs	r2, #16
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d125      	bne.n	8005000 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2210      	movs	r2, #16
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d11e      	bne.n	8005000 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2211      	movs	r2, #17
 8004fc8:	4252      	negs	r2, r2
 8004fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2208      	movs	r2, #8
 8004fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	23c0      	movs	r3, #192	; 0xc0
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d004      	beq.n	8004fea <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f000 f9de 	bl	80053a4 <HAL_TIM_IC_CaptureCallback>
 8004fe8:	e007      	b.n	8004ffa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	0018      	movs	r0, r3
 8004fee:	f000 f9d1 	bl	8005394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f000 f9dd 	bl	80053b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2201      	movs	r2, #1
 8005008:	4013      	ands	r3, r2
 800500a:	2b01      	cmp	r3, #1
 800500c:	d10f      	bne.n	800502e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	4013      	ands	r3, r2
 8005018:	2b01      	cmp	r3, #1
 800501a:	d108      	bne.n	800502e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2202      	movs	r2, #2
 8005022:	4252      	negs	r2, r2
 8005024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	0018      	movs	r0, r3
 800502a:	f7fd fe95 	bl	8002d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	2280      	movs	r2, #128	; 0x80
 8005036:	4013      	ands	r3, r2
 8005038:	2b80      	cmp	r3, #128	; 0x80
 800503a:	d10f      	bne.n	800505c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2280      	movs	r2, #128	; 0x80
 8005044:	4013      	ands	r3, r2
 8005046:	2b80      	cmp	r3, #128	; 0x80
 8005048:	d108      	bne.n	800505c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2281      	movs	r2, #129	; 0x81
 8005050:	4252      	negs	r2, r2
 8005052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	0018      	movs	r0, r3
 8005058:	f000 fdd2 	bl	8005c00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2240      	movs	r2, #64	; 0x40
 8005064:	4013      	ands	r3, r2
 8005066:	2b40      	cmp	r3, #64	; 0x40
 8005068:	d10f      	bne.n	800508a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2240      	movs	r2, #64	; 0x40
 8005072:	4013      	ands	r3, r2
 8005074:	2b40      	cmp	r3, #64	; 0x40
 8005076:	d108      	bne.n	800508a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2241      	movs	r2, #65	; 0x41
 800507e:	4252      	negs	r2, r2
 8005080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	0018      	movs	r0, r3
 8005086:	f000 f99d 	bl	80053c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	2220      	movs	r2, #32
 8005092:	4013      	ands	r3, r2
 8005094:	2b20      	cmp	r3, #32
 8005096:	d10f      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	2220      	movs	r2, #32
 80050a0:	4013      	ands	r3, r2
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	d108      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2221      	movs	r2, #33	; 0x21
 80050ac:	4252      	negs	r2, r2
 80050ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	0018      	movs	r0, r3
 80050b4:	f000 fd9c 	bl	8005bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050b8:	46c0      	nop			; (mov r8, r8)
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b002      	add	sp, #8
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050cc:	2317      	movs	r3, #23
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	223c      	movs	r2, #60	; 0x3c
 80050d8:	5c9b      	ldrb	r3, [r3, r2]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_TIM_IC_ConfigChannel+0x22>
 80050de:	2302      	movs	r3, #2
 80050e0:	e08c      	b.n	80051fc <HAL_TIM_IC_ConfigChannel+0x13c>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	223c      	movs	r2, #60	; 0x3c
 80050e6:	2101      	movs	r1, #1
 80050e8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d11b      	bne.n	8005128 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	6819      	ldr	r1, [r3, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f000 fbda 	bl	80058b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	210c      	movs	r1, #12
 8005110:	438a      	bics	r2, r1
 8005112:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6999      	ldr	r1, [r3, #24]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	619a      	str	r2, [r3, #24]
 8005126:	e062      	b.n	80051ee <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b04      	cmp	r3, #4
 800512c:	d11c      	bne.n	8005168 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6819      	ldr	r1, [r3, #0]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f000 fc13 	bl	8005968 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	492d      	ldr	r1, [pc, #180]	; (8005204 <HAL_TIM_IC_ConfigChannel+0x144>)
 800514e:	400a      	ands	r2, r1
 8005150:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6999      	ldr	r1, [r3, #24]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	021a      	lsls	r2, r3, #8
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	619a      	str	r2, [r3, #24]
 8005166:	e042      	b.n	80051ee <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b08      	cmp	r3, #8
 800516c:	d11b      	bne.n	80051a6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6819      	ldr	r1, [r3, #0]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f000 fc35 	bl	80059ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	210c      	movs	r1, #12
 800518e:	438a      	bics	r2, r1
 8005190:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69d9      	ldr	r1, [r3, #28]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	61da      	str	r2, [r3, #28]
 80051a4:	e023      	b.n	80051ee <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b0c      	cmp	r3, #12
 80051aa:	d11c      	bne.n	80051e6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6819      	ldr	r1, [r3, #0]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f000 fc56 	bl	8005a6c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	490e      	ldr	r1, [pc, #56]	; (8005204 <HAL_TIM_IC_ConfigChannel+0x144>)
 80051cc:	400a      	ands	r2, r1
 80051ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69d9      	ldr	r1, [r3, #28]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	021a      	lsls	r2, r3, #8
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	61da      	str	r2, [r3, #28]
 80051e4:	e003      	b.n	80051ee <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80051e6:	2317      	movs	r3, #23
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	2201      	movs	r2, #1
 80051ec:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	223c      	movs	r2, #60	; 0x3c
 80051f2:	2100      	movs	r1, #0
 80051f4:	5499      	strb	r1, [r3, r2]

  return status;
 80051f6:	2317      	movs	r3, #23
 80051f8:	18fb      	adds	r3, r7, r3
 80051fa:	781b      	ldrb	r3, [r3, #0]
}
 80051fc:	0018      	movs	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	b006      	add	sp, #24
 8005202:	bd80      	pop	{r7, pc}
 8005204:	fffff3ff 	.word	0xfffff3ff

08005208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005214:	2317      	movs	r3, #23
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	223c      	movs	r2, #60	; 0x3c
 8005220:	5c9b      	ldrb	r3, [r3, r2]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005226:	2302      	movs	r3, #2
 8005228:	e0ad      	b.n	8005386 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	223c      	movs	r2, #60	; 0x3c
 800522e:	2101      	movs	r1, #1
 8005230:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b0c      	cmp	r3, #12
 8005236:	d100      	bne.n	800523a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005238:	e076      	b.n	8005328 <HAL_TIM_PWM_ConfigChannel+0x120>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b0c      	cmp	r3, #12
 800523e:	d900      	bls.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005240:	e095      	b.n	800536e <HAL_TIM_PWM_ConfigChannel+0x166>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b08      	cmp	r3, #8
 8005246:	d04e      	beq.n	80052e6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b08      	cmp	r3, #8
 800524c:	d900      	bls.n	8005250 <HAL_TIM_PWM_ConfigChannel+0x48>
 800524e:	e08e      	b.n	800536e <HAL_TIM_PWM_ConfigChannel+0x166>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_TIM_PWM_ConfigChannel+0x56>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b04      	cmp	r3, #4
 800525a:	d021      	beq.n	80052a0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800525c:	e087      	b.n	800536e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	0011      	movs	r1, r2
 8005266:	0018      	movs	r0, r3
 8005268:	f000 f92a 	bl	80054c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2108      	movs	r1, #8
 8005278:	430a      	orrs	r2, r1
 800527a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2104      	movs	r1, #4
 8005288:	438a      	bics	r2, r1
 800528a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6999      	ldr	r1, [r3, #24]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	619a      	str	r2, [r3, #24]
      break;
 800529e:	e06b      	b.n	8005378 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	0011      	movs	r1, r2
 80052a8:	0018      	movs	r0, r3
 80052aa:	f000 f991 	bl	80055d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699a      	ldr	r2, [r3, #24]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2180      	movs	r1, #128	; 0x80
 80052ba:	0109      	lsls	r1, r1, #4
 80052bc:	430a      	orrs	r2, r1
 80052be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4931      	ldr	r1, [pc, #196]	; (8005390 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80052cc:	400a      	ands	r2, r1
 80052ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6999      	ldr	r1, [r3, #24]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	021a      	lsls	r2, r3, #8
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	619a      	str	r2, [r3, #24]
      break;
 80052e4:	e048      	b.n	8005378 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	0011      	movs	r1, r2
 80052ee:	0018      	movs	r0, r3
 80052f0:	f000 f9f2 	bl	80056d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2108      	movs	r1, #8
 8005300:	430a      	orrs	r2, r1
 8005302:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69da      	ldr	r2, [r3, #28]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2104      	movs	r1, #4
 8005310:	438a      	bics	r2, r1
 8005312:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	69d9      	ldr	r1, [r3, #28]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	61da      	str	r2, [r3, #28]
      break;
 8005326:	e027      	b.n	8005378 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	0011      	movs	r1, r2
 8005330:	0018      	movs	r0, r3
 8005332:	f000 fa57 	bl	80057e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2180      	movs	r1, #128	; 0x80
 8005342:	0109      	lsls	r1, r1, #4
 8005344:	430a      	orrs	r2, r1
 8005346:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69da      	ldr	r2, [r3, #28]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	490f      	ldr	r1, [pc, #60]	; (8005390 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005354:	400a      	ands	r2, r1
 8005356:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	69d9      	ldr	r1, [r3, #28]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	021a      	lsls	r2, r3, #8
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	61da      	str	r2, [r3, #28]
      break;
 800536c:	e004      	b.n	8005378 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800536e:	2317      	movs	r3, #23
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	2201      	movs	r2, #1
 8005374:	701a      	strb	r2, [r3, #0]
      break;
 8005376:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	223c      	movs	r2, #60	; 0x3c
 800537c:	2100      	movs	r1, #0
 800537e:	5499      	strb	r1, [r3, r2]

  return status;
 8005380:	2317      	movs	r3, #23
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	781b      	ldrb	r3, [r3, #0]
}
 8005386:	0018      	movs	r0, r3
 8005388:	46bd      	mov	sp, r7
 800538a:	b006      	add	sp, #24
 800538c:	bd80      	pop	{r7, pc}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	fffffbff 	.word	0xfffffbff

08005394 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800539c:	46c0      	nop			; (mov r8, r8)
 800539e:	46bd      	mov	sp, r7
 80053a0:	b002      	add	sp, #8
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053ac:	46c0      	nop			; (mov r8, r8)
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b002      	add	sp, #8
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053bc:	46c0      	nop			; (mov r8, r8)
 80053be:	46bd      	mov	sp, r7
 80053c0:	b002      	add	sp, #8
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053cc:	46c0      	nop			; (mov r8, r8)
 80053ce:	46bd      	mov	sp, r7
 80053d0:	b002      	add	sp, #8
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a2f      	ldr	r2, [pc, #188]	; (80054a4 <TIM_Base_SetConfig+0xd0>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_Base_SetConfig+0x20>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a2e      	ldr	r2, [pc, #184]	; (80054a8 <TIM_Base_SetConfig+0xd4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d108      	bne.n	8005406 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2270      	movs	r2, #112	; 0x70
 80053f8:	4393      	bics	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a26      	ldr	r2, [pc, #152]	; (80054a4 <TIM_Base_SetConfig+0xd0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <TIM_Base_SetConfig+0x62>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a25      	ldr	r2, [pc, #148]	; (80054a8 <TIM_Base_SetConfig+0xd4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00f      	beq.n	8005436 <TIM_Base_SetConfig+0x62>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a24      	ldr	r2, [pc, #144]	; (80054ac <TIM_Base_SetConfig+0xd8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00b      	beq.n	8005436 <TIM_Base_SetConfig+0x62>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a23      	ldr	r2, [pc, #140]	; (80054b0 <TIM_Base_SetConfig+0xdc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d007      	beq.n	8005436 <TIM_Base_SetConfig+0x62>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a22      	ldr	r2, [pc, #136]	; (80054b4 <TIM_Base_SetConfig+0xe0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d003      	beq.n	8005436 <TIM_Base_SetConfig+0x62>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a21      	ldr	r2, [pc, #132]	; (80054b8 <TIM_Base_SetConfig+0xe4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d108      	bne.n	8005448 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4a20      	ldr	r2, [pc, #128]	; (80054bc <TIM_Base_SetConfig+0xe8>)
 800543a:	4013      	ands	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2280      	movs	r2, #128	; 0x80
 800544c:	4393      	bics	r3, r2
 800544e:	001a      	movs	r2, r3
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a0c      	ldr	r2, [pc, #48]	; (80054a4 <TIM_Base_SetConfig+0xd0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00b      	beq.n	800548e <TIM_Base_SetConfig+0xba>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a0d      	ldr	r2, [pc, #52]	; (80054b0 <TIM_Base_SetConfig+0xdc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d007      	beq.n	800548e <TIM_Base_SetConfig+0xba>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a0c      	ldr	r2, [pc, #48]	; (80054b4 <TIM_Base_SetConfig+0xe0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_Base_SetConfig+0xba>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a0b      	ldr	r2, [pc, #44]	; (80054b8 <TIM_Base_SetConfig+0xe4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d103      	bne.n	8005496 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	615a      	str	r2, [r3, #20]
}
 800549c:	46c0      	nop			; (mov r8, r8)
 800549e:	46bd      	mov	sp, r7
 80054a0:	b004      	add	sp, #16
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40002000 	.word	0x40002000
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40014400 	.word	0x40014400
 80054b8:	40014800 	.word	0x40014800
 80054bc:	fffffcff 	.word	0xfffffcff

080054c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	2201      	movs	r2, #1
 80054d0:	4393      	bics	r3, r2
 80054d2:	001a      	movs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2270      	movs	r2, #112	; 0x70
 80054ee:	4393      	bics	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2203      	movs	r2, #3
 80054f6:	4393      	bics	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2202      	movs	r2, #2
 8005508:	4393      	bics	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a27      	ldr	r2, [pc, #156]	; (80055b8 <TIM_OC1_SetConfig+0xf8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00b      	beq.n	8005536 <TIM_OC1_SetConfig+0x76>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a26      	ldr	r2, [pc, #152]	; (80055bc <TIM_OC1_SetConfig+0xfc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d007      	beq.n	8005536 <TIM_OC1_SetConfig+0x76>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a25      	ldr	r2, [pc, #148]	; (80055c0 <TIM_OC1_SetConfig+0x100>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_OC1_SetConfig+0x76>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a24      	ldr	r2, [pc, #144]	; (80055c4 <TIM_OC1_SetConfig+0x104>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10c      	bne.n	8005550 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2208      	movs	r2, #8
 800553a:	4393      	bics	r3, r2
 800553c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2204      	movs	r2, #4
 800554c:	4393      	bics	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <TIM_OC1_SetConfig+0xf8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00b      	beq.n	8005570 <TIM_OC1_SetConfig+0xb0>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <TIM_OC1_SetConfig+0xfc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d007      	beq.n	8005570 <TIM_OC1_SetConfig+0xb0>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <TIM_OC1_SetConfig+0x100>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <TIM_OC1_SetConfig+0xb0>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <TIM_OC1_SetConfig+0x104>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d111      	bne.n	8005594 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <TIM_OC1_SetConfig+0x108>)
 8005574:	4013      	ands	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4a14      	ldr	r2, [pc, #80]	; (80055cc <TIM_OC1_SetConfig+0x10c>)
 800557c:	4013      	ands	r3, r2
 800557e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b006      	add	sp, #24
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800
 80055c8:	fffffeff 	.word	0xfffffeff
 80055cc:	fffffdff 	.word	0xfffffdff

080055d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	2210      	movs	r2, #16
 80055e0:	4393      	bics	r3, r2
 80055e2:	001a      	movs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a2e      	ldr	r2, [pc, #184]	; (80056b8 <TIM_OC2_SetConfig+0xe8>)
 80055fe:	4013      	ands	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4a2d      	ldr	r2, [pc, #180]	; (80056bc <TIM_OC2_SetConfig+0xec>)
 8005606:	4013      	ands	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2220      	movs	r2, #32
 800561a:	4393      	bics	r3, r2
 800561c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a24      	ldr	r2, [pc, #144]	; (80056c0 <TIM_OC2_SetConfig+0xf0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d10d      	bne.n	800564e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2280      	movs	r2, #128	; 0x80
 8005636:	4393      	bics	r3, r2
 8005638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2240      	movs	r2, #64	; 0x40
 800564a:	4393      	bics	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a1b      	ldr	r2, [pc, #108]	; (80056c0 <TIM_OC2_SetConfig+0xf0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00b      	beq.n	800566e <TIM_OC2_SetConfig+0x9e>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a1a      	ldr	r2, [pc, #104]	; (80056c4 <TIM_OC2_SetConfig+0xf4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d007      	beq.n	800566e <TIM_OC2_SetConfig+0x9e>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a19      	ldr	r2, [pc, #100]	; (80056c8 <TIM_OC2_SetConfig+0xf8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d003      	beq.n	800566e <TIM_OC2_SetConfig+0x9e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a18      	ldr	r2, [pc, #96]	; (80056cc <TIM_OC2_SetConfig+0xfc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d113      	bne.n	8005696 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4a17      	ldr	r2, [pc, #92]	; (80056d0 <TIM_OC2_SetConfig+0x100>)
 8005672:	4013      	ands	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4a16      	ldr	r2, [pc, #88]	; (80056d4 <TIM_OC2_SetConfig+0x104>)
 800567a:	4013      	ands	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4313      	orrs	r3, r2
 8005694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	621a      	str	r2, [r3, #32]
}
 80056b0:	46c0      	nop			; (mov r8, r8)
 80056b2:	46bd      	mov	sp, r7
 80056b4:	b006      	add	sp, #24
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	ffff8fff 	.word	0xffff8fff
 80056bc:	fffffcff 	.word	0xfffffcff
 80056c0:	40012c00 	.word	0x40012c00
 80056c4:	40014000 	.word	0x40014000
 80056c8:	40014400 	.word	0x40014400
 80056cc:	40014800 	.word	0x40014800
 80056d0:	fffffbff 	.word	0xfffffbff
 80056d4:	fffff7ff 	.word	0xfffff7ff

080056d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	4a35      	ldr	r2, [pc, #212]	; (80057bc <TIM_OC3_SetConfig+0xe4>)
 80056e8:	401a      	ands	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2270      	movs	r2, #112	; 0x70
 8005704:	4393      	bics	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2203      	movs	r2, #3
 800570c:	4393      	bics	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	4a28      	ldr	r2, [pc, #160]	; (80057c0 <TIM_OC3_SetConfig+0xe8>)
 800571e:	4013      	ands	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a24      	ldr	r2, [pc, #144]	; (80057c4 <TIM_OC3_SetConfig+0xec>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d10d      	bne.n	8005752 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	4a23      	ldr	r2, [pc, #140]	; (80057c8 <TIM_OC3_SetConfig+0xf0>)
 800573a:	4013      	ands	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <TIM_OC3_SetConfig+0xf4>)
 800574e:	4013      	ands	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1b      	ldr	r2, [pc, #108]	; (80057c4 <TIM_OC3_SetConfig+0xec>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_OC3_SetConfig+0x9a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1c      	ldr	r2, [pc, #112]	; (80057d0 <TIM_OC3_SetConfig+0xf8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_OC3_SetConfig+0x9a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1b      	ldr	r2, [pc, #108]	; (80057d4 <TIM_OC3_SetConfig+0xfc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_OC3_SetConfig+0x9a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1a      	ldr	r2, [pc, #104]	; (80057d8 <TIM_OC3_SetConfig+0x100>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d113      	bne.n	800579a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4a19      	ldr	r2, [pc, #100]	; (80057dc <TIM_OC3_SetConfig+0x104>)
 8005776:	4013      	ands	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4a18      	ldr	r2, [pc, #96]	; (80057e0 <TIM_OC3_SetConfig+0x108>)
 800577e:	4013      	ands	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	621a      	str	r2, [r3, #32]
}
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b006      	add	sp, #24
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	fffffeff 	.word	0xfffffeff
 80057c0:	fffffdff 	.word	0xfffffdff
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	fffff7ff 	.word	0xfffff7ff
 80057cc:	fffffbff 	.word	0xfffffbff
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800
 80057dc:	ffffefff 	.word	0xffffefff
 80057e0:	ffffdfff 	.word	0xffffdfff

080057e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	4a28      	ldr	r2, [pc, #160]	; (8005894 <TIM_OC4_SetConfig+0xb0>)
 80057f4:	401a      	ands	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4a22      	ldr	r2, [pc, #136]	; (8005898 <TIM_OC4_SetConfig+0xb4>)
 8005810:	4013      	ands	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4a21      	ldr	r2, [pc, #132]	; (800589c <TIM_OC4_SetConfig+0xb8>)
 8005818:	4013      	ands	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4313      	orrs	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <TIM_OC4_SetConfig+0xbc>)
 800582c:	4013      	ands	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	031b      	lsls	r3, r3, #12
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <TIM_OC4_SetConfig+0xc0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00b      	beq.n	800585c <TIM_OC4_SetConfig+0x78>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a18      	ldr	r2, [pc, #96]	; (80058a8 <TIM_OC4_SetConfig+0xc4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d007      	beq.n	800585c <TIM_OC4_SetConfig+0x78>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a17      	ldr	r2, [pc, #92]	; (80058ac <TIM_OC4_SetConfig+0xc8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d003      	beq.n	800585c <TIM_OC4_SetConfig+0x78>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <TIM_OC4_SetConfig+0xcc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d109      	bne.n	8005870 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <TIM_OC4_SetConfig+0xd0>)
 8005860:	4013      	ands	r3, r2
 8005862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	019b      	lsls	r3, r3, #6
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	46bd      	mov	sp, r7
 800588e:	b006      	add	sp, #24
 8005890:	bd80      	pop	{r7, pc}
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	ffffefff 	.word	0xffffefff
 8005898:	ffff8fff 	.word	0xffff8fff
 800589c:	fffffcff 	.word	0xfffffcff
 80058a0:	ffffdfff 	.word	0xffffdfff
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40014400 	.word	0x40014400
 80058b0:	40014800 	.word	0x40014800
 80058b4:	ffffbfff 	.word	0xffffbfff

080058b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	2201      	movs	r2, #1
 80058cc:	4393      	bics	r3, r2
 80058ce:	001a      	movs	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4a1e      	ldr	r2, [pc, #120]	; (800595c <TIM_TI1_SetConfig+0xa4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d007      	beq.n	80058f8 <TIM_TI1_SetConfig+0x40>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4a1d      	ldr	r2, [pc, #116]	; (8005960 <TIM_TI1_SetConfig+0xa8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_TI1_SetConfig+0x40>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a1c      	ldr	r2, [pc, #112]	; (8005964 <TIM_TI1_SetConfig+0xac>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d101      	bne.n	80058fc <TIM_TI1_SetConfig+0x44>
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <TIM_TI1_SetConfig+0x46>
 80058fc:	2300      	movs	r3, #0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2203      	movs	r2, #3
 8005906:	4393      	bics	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e003      	b.n	800591c <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2201      	movs	r2, #1
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	22f0      	movs	r2, #240	; 0xf0
 8005920:	4393      	bics	r3, r2
 8005922:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	22ff      	movs	r2, #255	; 0xff
 800592a:	4013      	ands	r3, r2
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	220a      	movs	r2, #10
 8005936:	4393      	bics	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	220a      	movs	r2, #10
 800593e:	4013      	ands	r3, r2
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	46bd      	mov	sp, r7
 8005956:	b006      	add	sp, #24
 8005958:	bd80      	pop	{r7, pc}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	40012c00 	.word	0x40012c00
 8005960:	40000400 	.word	0x40000400
 8005964:	40014000 	.word	0x40014000

08005968 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	2210      	movs	r2, #16
 800597c:	4393      	bics	r3, r2
 800597e:	001a      	movs	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	4a14      	ldr	r2, [pc, #80]	; (80059e4 <TIM_TI2_SetConfig+0x7c>)
 8005994:	4013      	ands	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	4a10      	ldr	r2, [pc, #64]	; (80059e8 <TIM_TI2_SetConfig+0x80>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	031b      	lsls	r3, r3, #12
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	22a0      	movs	r2, #160	; 0xa0
 80059bc:	4393      	bics	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	22a0      	movs	r2, #160	; 0xa0
 80059c6:	4013      	ands	r3, r2
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	46bd      	mov	sp, r7
 80059de:	b006      	add	sp, #24
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	fffffcff 	.word	0xfffffcff
 80059e8:	ffff0fff 	.word	0xffff0fff

080059ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	4a19      	ldr	r2, [pc, #100]	; (8005a64 <TIM_TI3_SetConfig+0x78>)
 8005a00:	401a      	ands	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2203      	movs	r2, #3
 8005a16:	4393      	bics	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	22f0      	movs	r2, #240	; 0xf0
 8005a26:	4393      	bics	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	22ff      	movs	r2, #255	; 0xff
 8005a30:	4013      	ands	r3, r2
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	4a0b      	ldr	r2, [pc, #44]	; (8005a68 <TIM_TI3_SetConfig+0x7c>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	021a      	lsls	r2, r3, #8
 8005a44:	23a0      	movs	r3, #160	; 0xa0
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	4013      	ands	r3, r2
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	621a      	str	r2, [r3, #32]
}
 8005a5c:	46c0      	nop			; (mov r8, r8)
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	b006      	add	sp, #24
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	fffffeff 	.word	0xfffffeff
 8005a68:	fffff5ff 	.word	0xfffff5ff

08005a6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	4a1a      	ldr	r2, [pc, #104]	; (8005ae8 <TIM_TI4_SetConfig+0x7c>)
 8005a80:	401a      	ands	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	4a15      	ldr	r2, [pc, #84]	; (8005aec <TIM_TI4_SetConfig+0x80>)
 8005a96:	4013      	ands	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4a12      	ldr	r2, [pc, #72]	; (8005af0 <TIM_TI4_SetConfig+0x84>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	031b      	lsls	r3, r3, #12
 8005ab0:	041b      	lsls	r3, r3, #16
 8005ab2:	0c1b      	lsrs	r3, r3, #16
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	4a0d      	ldr	r2, [pc, #52]	; (8005af4 <TIM_TI4_SetConfig+0x88>)
 8005abe:	4013      	ands	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	031a      	lsls	r2, r3, #12
 8005ac6:	23a0      	movs	r3, #160	; 0xa0
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	4013      	ands	r3, r2
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	621a      	str	r2, [r3, #32]
}
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b006      	add	sp, #24
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	ffffefff 	.word	0xffffefff
 8005aec:	fffffcff 	.word	0xfffffcff
 8005af0:	ffff0fff 	.word	0xffff0fff
 8005af4:	ffff5fff 	.word	0xffff5fff

08005af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	221f      	movs	r2, #31
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	409a      	lsls	r2, r3
 8005b0e:	0013      	movs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	43d2      	mvns	r2, r2
 8005b1a:	401a      	ands	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1a      	ldr	r2, [r3, #32]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	211f      	movs	r1, #31
 8005b28:	400b      	ands	r3, r1
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	4099      	lsls	r1, r3
 8005b2e:	000b      	movs	r3, r1
 8005b30:	431a      	orrs	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	b006      	add	sp, #24
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	223c      	movs	r2, #60	; 0x3c
 8005b4e:	5c9b      	ldrb	r3, [r3, r2]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e041      	b.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	223c      	movs	r2, #60	; 0x3c
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	223d      	movs	r2, #61	; 0x3d
 8005b64:	2102      	movs	r1, #2
 8005b66:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2270      	movs	r2, #112	; 0x70
 8005b7c:	4393      	bics	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d009      	beq.n	8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a11      	ldr	r2, [pc, #68]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a10      	ldr	r2, [pc, #64]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d10c      	bne.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2280      	movs	r2, #128	; 0x80
 8005bb4:	4393      	bics	r3, r2
 8005bb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	223d      	movs	r2, #61	; 0x3d
 8005bce:	2101      	movs	r1, #1
 8005bd0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	223c      	movs	r2, #60	; 0x3c
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	0018      	movs	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	b004      	add	sp, #16
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40000400 	.word	0x40000400
 8005bec:	40014000 	.word	0x40014000

08005bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bf8:	46c0      	nop			; (mov r8, r8)
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	b002      	add	sp, #8
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c08:	46c0      	nop			; (mov r8, r8)
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b002      	add	sp, #8
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e044      	b.n	8005cac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d107      	bne.n	8005c3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2278      	movs	r2, #120	; 0x78
 8005c2e:	2100      	movs	r1, #0
 8005c30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	0018      	movs	r0, r3
 8005c36:	f7fd fb2b 	bl	8003290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2224      	movs	r2, #36	; 0x24
 8005c3e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	438a      	bics	r2, r1
 8005c4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	0018      	movs	r0, r3
 8005c54:	f000 f8d0 	bl	8005df8 <UART_SetConfig>
 8005c58:	0003      	movs	r3, r0
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e024      	b.n	8005cac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	f000 fa1b 	bl	80060a8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	490d      	ldr	r1, [pc, #52]	; (8005cb4 <HAL_UART_Init+0xa4>)
 8005c7e:	400a      	ands	r2, r1
 8005c80:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2108      	movs	r1, #8
 8005c8e:	438a      	bics	r2, r1
 8005c90:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f000 fab3 	bl	8006210 <UART_CheckIdleState>
 8005caa:	0003      	movs	r3, r0
}
 8005cac:	0018      	movs	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b002      	add	sp, #8
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	fffff7ff 	.word	0xfffff7ff

08005cb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	; 0x28
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	603b      	str	r3, [r7, #0]
 8005cc4:	1dbb      	adds	r3, r7, #6
 8005cc6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d000      	beq.n	8005cd2 <HAL_UART_Transmit+0x1a>
 8005cd0:	e08d      	b.n	8005dee <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_UART_Transmit+0x28>
 8005cd8:	1dbb      	adds	r3, r7, #6
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e085      	b.n	8005df0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	2380      	movs	r3, #128	; 0x80
 8005cea:	015b      	lsls	r3, r3, #5
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d109      	bne.n	8005d04 <HAL_UART_Transmit+0x4c>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d105      	bne.n	8005d04 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d001      	beq.n	8005d04 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e075      	b.n	8005df0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2284      	movs	r2, #132	; 0x84
 8005d08:	2100      	movs	r1, #0
 8005d0a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2221      	movs	r2, #33	; 0x21
 8005d10:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d12:	f7fd fc8d 	bl	8003630 <HAL_GetTick>
 8005d16:	0003      	movs	r3, r0
 8005d18:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1dba      	adds	r2, r7, #6
 8005d1e:	2150      	movs	r1, #80	; 0x50
 8005d20:	8812      	ldrh	r2, [r2, #0]
 8005d22:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	1dba      	adds	r2, r7, #6
 8005d28:	2152      	movs	r1, #82	; 0x52
 8005d2a:	8812      	ldrh	r2, [r2, #0]
 8005d2c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	015b      	lsls	r3, r3, #5
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d108      	bne.n	8005d4c <HAL_UART_Transmit+0x94>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d104      	bne.n	8005d4c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	e003      	b.n	8005d54 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d54:	e030      	b.n	8005db8 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	0013      	movs	r3, r2
 8005d60:	2200      	movs	r2, #0
 8005d62:	2180      	movs	r1, #128	; 0x80
 8005d64:	f000 fafc 	bl	8006360 <UART_WaitOnFlagUntilTimeout>
 8005d68:	1e03      	subs	r3, r0, #0
 8005d6a:	d004      	beq.n	8005d76 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e03c      	b.n	8005df0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10b      	bne.n	8005d94 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	881a      	ldrh	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	05d2      	lsls	r2, r2, #23
 8005d86:	0dd2      	lsrs	r2, r2, #23
 8005d88:	b292      	uxth	r2, r2
 8005d8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	3302      	adds	r3, #2
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	e008      	b.n	8005da6 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	781a      	ldrb	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	b292      	uxth	r2, r2
 8005d9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	3301      	adds	r3, #1
 8005da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2252      	movs	r2, #82	; 0x52
 8005daa:	5a9b      	ldrh	r3, [r3, r2]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b299      	uxth	r1, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2252      	movs	r2, #82	; 0x52
 8005db6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2252      	movs	r2, #82	; 0x52
 8005dbc:	5a9b      	ldrh	r3, [r3, r2]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1c8      	bne.n	8005d56 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	0013      	movs	r3, r2
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2140      	movs	r1, #64	; 0x40
 8005dd2:	f000 fac5 	bl	8006360 <UART_WaitOnFlagUntilTimeout>
 8005dd6:	1e03      	subs	r3, r0, #0
 8005dd8:	d004      	beq.n	8005de4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e005      	b.n	8005df0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2220      	movs	r2, #32
 8005de8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	e000      	b.n	8005df0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8005dee:	2302      	movs	r3, #2
  }
}
 8005df0:	0018      	movs	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b008      	add	sp, #32
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e00:	231e      	movs	r3, #30
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	2200      	movs	r2, #0
 8005e06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	431a      	orrs	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a97      	ldr	r2, [pc, #604]	; (8006084 <UART_SetConfig+0x28c>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	0019      	movs	r1, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	4a92      	ldr	r2, [pc, #584]	; (8006088 <UART_SetConfig+0x290>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	0019      	movs	r1, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	4a89      	ldr	r2, [pc, #548]	; (800608c <UART_SetConfig+0x294>)
 8005e66:	4013      	ands	r3, r2
 8005e68:	0019      	movs	r1, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a85      	ldr	r2, [pc, #532]	; (8006090 <UART_SetConfig+0x298>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d127      	bne.n	8005ece <UART_SetConfig+0xd6>
 8005e7e:	4b85      	ldr	r3, [pc, #532]	; (8006094 <UART_SetConfig+0x29c>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	2203      	movs	r2, #3
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d00d      	beq.n	8005ea6 <UART_SetConfig+0xae>
 8005e8a:	d81b      	bhi.n	8005ec4 <UART_SetConfig+0xcc>
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d014      	beq.n	8005eba <UART_SetConfig+0xc2>
 8005e90:	d818      	bhi.n	8005ec4 <UART_SetConfig+0xcc>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <UART_SetConfig+0xa4>
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d00a      	beq.n	8005eb0 <UART_SetConfig+0xb8>
 8005e9a:	e013      	b.n	8005ec4 <UART_SetConfig+0xcc>
 8005e9c:	231f      	movs	r3, #31
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	e035      	b.n	8005f12 <UART_SetConfig+0x11a>
 8005ea6:	231f      	movs	r3, #31
 8005ea8:	18fb      	adds	r3, r7, r3
 8005eaa:	2202      	movs	r2, #2
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e030      	b.n	8005f12 <UART_SetConfig+0x11a>
 8005eb0:	231f      	movs	r3, #31
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	2204      	movs	r2, #4
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	e02b      	b.n	8005f12 <UART_SetConfig+0x11a>
 8005eba:	231f      	movs	r3, #31
 8005ebc:	18fb      	adds	r3, r7, r3
 8005ebe:	2208      	movs	r2, #8
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	e026      	b.n	8005f12 <UART_SetConfig+0x11a>
 8005ec4:	231f      	movs	r3, #31
 8005ec6:	18fb      	adds	r3, r7, r3
 8005ec8:	2210      	movs	r2, #16
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	e021      	b.n	8005f12 <UART_SetConfig+0x11a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a71      	ldr	r2, [pc, #452]	; (8006098 <UART_SetConfig+0x2a0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d104      	bne.n	8005ee2 <UART_SetConfig+0xea>
 8005ed8:	231f      	movs	r3, #31
 8005eda:	18fb      	adds	r3, r7, r3
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	e017      	b.n	8005f12 <UART_SetConfig+0x11a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a6d      	ldr	r2, [pc, #436]	; (800609c <UART_SetConfig+0x2a4>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d104      	bne.n	8005ef6 <UART_SetConfig+0xfe>
 8005eec:	231f      	movs	r3, #31
 8005eee:	18fb      	adds	r3, r7, r3
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	e00d      	b.n	8005f12 <UART_SetConfig+0x11a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a69      	ldr	r2, [pc, #420]	; (80060a0 <UART_SetConfig+0x2a8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d104      	bne.n	8005f0a <UART_SetConfig+0x112>
 8005f00:	231f      	movs	r3, #31
 8005f02:	18fb      	adds	r3, r7, r3
 8005f04:	2200      	movs	r2, #0
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	e003      	b.n	8005f12 <UART_SetConfig+0x11a>
 8005f0a:	231f      	movs	r3, #31
 8005f0c:	18fb      	adds	r3, r7, r3
 8005f0e:	2210      	movs	r2, #16
 8005f10:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69da      	ldr	r2, [r3, #28]
 8005f16:	2380      	movs	r3, #128	; 0x80
 8005f18:	021b      	lsls	r3, r3, #8
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d15c      	bne.n	8005fd8 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 8005f1e:	231f      	movs	r3, #31
 8005f20:	18fb      	adds	r3, r7, r3
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d015      	beq.n	8005f54 <UART_SetConfig+0x15c>
 8005f28:	dc18      	bgt.n	8005f5c <UART_SetConfig+0x164>
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d00d      	beq.n	8005f4a <UART_SetConfig+0x152>
 8005f2e:	dc15      	bgt.n	8005f5c <UART_SetConfig+0x164>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <UART_SetConfig+0x142>
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d005      	beq.n	8005f44 <UART_SetConfig+0x14c>
 8005f38:	e010      	b.n	8005f5c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f3a:	f7fe fac3 	bl	80044c4 <HAL_RCC_GetPCLK1Freq>
 8005f3e:	0003      	movs	r3, r0
 8005f40:	61bb      	str	r3, [r7, #24]
        break;
 8005f42:	e012      	b.n	8005f6a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f44:	4b57      	ldr	r3, [pc, #348]	; (80060a4 <UART_SetConfig+0x2ac>)
 8005f46:	61bb      	str	r3, [r7, #24]
        break;
 8005f48:	e00f      	b.n	8005f6a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f4a:	f7fe fa59 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 8005f4e:	0003      	movs	r3, r0
 8005f50:	61bb      	str	r3, [r7, #24]
        break;
 8005f52:	e00a      	b.n	8005f6a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f54:	2380      	movs	r3, #128	; 0x80
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	61bb      	str	r3, [r7, #24]
        break;
 8005f5a:	e006      	b.n	8005f6a <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f60:	231e      	movs	r3, #30
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	2201      	movs	r2, #1
 8005f66:	701a      	strb	r2, [r3, #0]
        break;
 8005f68:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d100      	bne.n	8005f72 <UART_SetConfig+0x17a>
 8005f70:	e07a      	b.n	8006068 <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	005a      	lsls	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	085b      	lsrs	r3, r3, #1
 8005f7c:	18d2      	adds	r2, r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	0019      	movs	r1, r3
 8005f84:	0010      	movs	r0, r2
 8005f86:	f7fa f8db 	bl	8000140 <__udivsi3>
 8005f8a:	0003      	movs	r3, r0
 8005f8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b0f      	cmp	r3, #15
 8005f92:	d91c      	bls.n	8005fce <UART_SetConfig+0x1d6>
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	2380      	movs	r3, #128	; 0x80
 8005f98:	025b      	lsls	r3, r3, #9
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d217      	bcs.n	8005fce <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	200e      	movs	r0, #14
 8005fa4:	183b      	adds	r3, r7, r0
 8005fa6:	210f      	movs	r1, #15
 8005fa8:	438a      	bics	r2, r1
 8005faa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	085b      	lsrs	r3, r3, #1
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2207      	movs	r2, #7
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	b299      	uxth	r1, r3
 8005fb8:	183b      	adds	r3, r7, r0
 8005fba:	183a      	adds	r2, r7, r0
 8005fbc:	8812      	ldrh	r2, [r2, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	183a      	adds	r2, r7, r0
 8005fc8:	8812      	ldrh	r2, [r2, #0]
 8005fca:	60da      	str	r2, [r3, #12]
 8005fcc:	e04c      	b.n	8006068 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8005fce:	231e      	movs	r3, #30
 8005fd0:	18fb      	adds	r3, r7, r3
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	e047      	b.n	8006068 <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fd8:	231f      	movs	r3, #31
 8005fda:	18fb      	adds	r3, r7, r3
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d015      	beq.n	800600e <UART_SetConfig+0x216>
 8005fe2:	dc18      	bgt.n	8006016 <UART_SetConfig+0x21e>
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	d00d      	beq.n	8006004 <UART_SetConfig+0x20c>
 8005fe8:	dc15      	bgt.n	8006016 <UART_SetConfig+0x21e>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <UART_SetConfig+0x1fc>
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d005      	beq.n	8005ffe <UART_SetConfig+0x206>
 8005ff2:	e010      	b.n	8006016 <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff4:	f7fe fa66 	bl	80044c4 <HAL_RCC_GetPCLK1Freq>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	61bb      	str	r3, [r7, #24]
        break;
 8005ffc:	e012      	b.n	8006024 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ffe:	4b29      	ldr	r3, [pc, #164]	; (80060a4 <UART_SetConfig+0x2ac>)
 8006000:	61bb      	str	r3, [r7, #24]
        break;
 8006002:	e00f      	b.n	8006024 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006004:	f7fe f9fc 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 8006008:	0003      	movs	r3, r0
 800600a:	61bb      	str	r3, [r7, #24]
        break;
 800600c:	e00a      	b.n	8006024 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800600e:	2380      	movs	r3, #128	; 0x80
 8006010:	021b      	lsls	r3, r3, #8
 8006012:	61bb      	str	r3, [r7, #24]
        break;
 8006014:	e006      	b.n	8006024 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800601a:	231e      	movs	r3, #30
 800601c:	18fb      	adds	r3, r7, r3
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
        break;
 8006022:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d01e      	beq.n	8006068 <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	085a      	lsrs	r2, r3, #1
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	18d2      	adds	r2, r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	0019      	movs	r1, r3
 800603a:	0010      	movs	r0, r2
 800603c:	f7fa f880 	bl	8000140 <__udivsi3>
 8006040:	0003      	movs	r3, r0
 8006042:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b0f      	cmp	r3, #15
 8006048:	d90a      	bls.n	8006060 <UART_SetConfig+0x268>
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	2380      	movs	r3, #128	; 0x80
 800604e:	025b      	lsls	r3, r3, #9
 8006050:	429a      	cmp	r2, r3
 8006052:	d205      	bcs.n	8006060 <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	b29a      	uxth	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60da      	str	r2, [r3, #12]
 800605e:	e003      	b.n	8006068 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8006060:	231e      	movs	r3, #30
 8006062:	18fb      	adds	r3, r7, r3
 8006064:	2201      	movs	r2, #1
 8006066:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006074:	231e      	movs	r3, #30
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	781b      	ldrb	r3, [r3, #0]
}
 800607a:	0018      	movs	r0, r3
 800607c:	46bd      	mov	sp, r7
 800607e:	b008      	add	sp, #32
 8006080:	bd80      	pop	{r7, pc}
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	efff69f3 	.word	0xefff69f3
 8006088:	ffffcfff 	.word	0xffffcfff
 800608c:	fffff4ff 	.word	0xfffff4ff
 8006090:	40013800 	.word	0x40013800
 8006094:	40021000 	.word	0x40021000
 8006098:	40004400 	.word	0x40004400
 800609c:	40004800 	.word	0x40004800
 80060a0:	40004c00 	.word	0x40004c00
 80060a4:	007a1200 	.word	0x007a1200

080060a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	2201      	movs	r2, #1
 80060b6:	4013      	ands	r3, r2
 80060b8:	d00b      	beq.n	80060d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	4a4a      	ldr	r2, [pc, #296]	; (80061ec <UART_AdvFeatureConfig+0x144>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	0019      	movs	r1, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	2202      	movs	r2, #2
 80060d8:	4013      	ands	r3, r2
 80060da:	d00b      	beq.n	80060f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	4a43      	ldr	r2, [pc, #268]	; (80061f0 <UART_AdvFeatureConfig+0x148>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	0019      	movs	r1, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	2204      	movs	r2, #4
 80060fa:	4013      	ands	r3, r2
 80060fc:	d00b      	beq.n	8006116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4a3b      	ldr	r2, [pc, #236]	; (80061f4 <UART_AdvFeatureConfig+0x14c>)
 8006106:	4013      	ands	r3, r2
 8006108:	0019      	movs	r1, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	2208      	movs	r2, #8
 800611c:	4013      	ands	r3, r2
 800611e:	d00b      	beq.n	8006138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	4a34      	ldr	r2, [pc, #208]	; (80061f8 <UART_AdvFeatureConfig+0x150>)
 8006128:	4013      	ands	r3, r2
 800612a:	0019      	movs	r1, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	2210      	movs	r2, #16
 800613e:	4013      	ands	r3, r2
 8006140:	d00b      	beq.n	800615a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	4a2c      	ldr	r2, [pc, #176]	; (80061fc <UART_AdvFeatureConfig+0x154>)
 800614a:	4013      	ands	r3, r2
 800614c:	0019      	movs	r1, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	2220      	movs	r2, #32
 8006160:	4013      	ands	r3, r2
 8006162:	d00b      	beq.n	800617c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	4a25      	ldr	r2, [pc, #148]	; (8006200 <UART_AdvFeatureConfig+0x158>)
 800616c:	4013      	ands	r3, r2
 800616e:	0019      	movs	r1, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	2240      	movs	r2, #64	; 0x40
 8006182:	4013      	ands	r3, r2
 8006184:	d01d      	beq.n	80061c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4a1d      	ldr	r2, [pc, #116]	; (8006204 <UART_AdvFeatureConfig+0x15c>)
 800618e:	4013      	ands	r3, r2
 8006190:	0019      	movs	r1, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061a2:	2380      	movs	r3, #128	; 0x80
 80061a4:	035b      	lsls	r3, r3, #13
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d10b      	bne.n	80061c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4a15      	ldr	r2, [pc, #84]	; (8006208 <UART_AdvFeatureConfig+0x160>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	0019      	movs	r1, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	2280      	movs	r2, #128	; 0x80
 80061c8:	4013      	ands	r3, r2
 80061ca:	d00b      	beq.n	80061e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	4a0e      	ldr	r2, [pc, #56]	; (800620c <UART_AdvFeatureConfig+0x164>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	0019      	movs	r1, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	605a      	str	r2, [r3, #4]
  }
}
 80061e4:	46c0      	nop			; (mov r8, r8)
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b002      	add	sp, #8
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	fffdffff 	.word	0xfffdffff
 80061f0:	fffeffff 	.word	0xfffeffff
 80061f4:	fffbffff 	.word	0xfffbffff
 80061f8:	ffff7fff 	.word	0xffff7fff
 80061fc:	ffffefff 	.word	0xffffefff
 8006200:	ffffdfff 	.word	0xffffdfff
 8006204:	ffefffff 	.word	0xffefffff
 8006208:	ff9fffff 	.word	0xff9fffff
 800620c:	fff7ffff 	.word	0xfff7ffff

08006210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b092      	sub	sp, #72	; 0x48
 8006214:	af02      	add	r7, sp, #8
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2284      	movs	r2, #132	; 0x84
 800621c:	2100      	movs	r1, #0
 800621e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006220:	f7fd fa06 	bl	8003630 <HAL_GetTick>
 8006224:	0003      	movs	r3, r0
 8006226:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2208      	movs	r2, #8
 8006230:	4013      	ands	r3, r2
 8006232:	2b08      	cmp	r3, #8
 8006234:	d12c      	bne.n	8006290 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006238:	2280      	movs	r2, #128	; 0x80
 800623a:	0391      	lsls	r1, r2, #14
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	4a46      	ldr	r2, [pc, #280]	; (8006358 <UART_CheckIdleState+0x148>)
 8006240:	9200      	str	r2, [sp, #0]
 8006242:	2200      	movs	r2, #0
 8006244:	f000 f88c 	bl	8006360 <UART_WaitOnFlagUntilTimeout>
 8006248:	1e03      	subs	r3, r0, #0
 800624a:	d021      	beq.n	8006290 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800624c:	f3ef 8310 	mrs	r3, PRIMASK
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006254:	63bb      	str	r3, [r7, #56]	; 0x38
 8006256:	2301      	movs	r3, #1
 8006258:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	f383 8810 	msr	PRIMASK, r3
}
 8006260:	46c0      	nop			; (mov r8, r8)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2180      	movs	r1, #128	; 0x80
 800626e:	438a      	bics	r2, r1
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	f383 8810 	msr	PRIMASK, r3
}
 800627c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2278      	movs	r2, #120	; 0x78
 8006288:	2100      	movs	r1, #0
 800628a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e05f      	b.n	8006350 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2204      	movs	r2, #4
 8006298:	4013      	ands	r3, r2
 800629a:	2b04      	cmp	r3, #4
 800629c:	d146      	bne.n	800632c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800629e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a0:	2280      	movs	r2, #128	; 0x80
 80062a2:	03d1      	lsls	r1, r2, #15
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	4a2c      	ldr	r2, [pc, #176]	; (8006358 <UART_CheckIdleState+0x148>)
 80062a8:	9200      	str	r2, [sp, #0]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f000 f858 	bl	8006360 <UART_WaitOnFlagUntilTimeout>
 80062b0:	1e03      	subs	r3, r0, #0
 80062b2:	d03b      	beq.n	800632c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062b4:	f3ef 8310 	mrs	r3, PRIMASK
 80062b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80062ba:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062bc:	637b      	str	r3, [r7, #52]	; 0x34
 80062be:	2301      	movs	r3, #1
 80062c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f383 8810 	msr	PRIMASK, r3
}
 80062c8:	46c0      	nop			; (mov r8, r8)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4921      	ldr	r1, [pc, #132]	; (800635c <UART_CheckIdleState+0x14c>)
 80062d6:	400a      	ands	r2, r1
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f383 8810 	msr	PRIMASK, r3
}
 80062e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062e6:	f3ef 8310 	mrs	r3, PRIMASK
 80062ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80062ec:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ee:	633b      	str	r3, [r7, #48]	; 0x30
 80062f0:	2301      	movs	r3, #1
 80062f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f383 8810 	msr	PRIMASK, r3
}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2101      	movs	r1, #1
 8006308:	438a      	bics	r2, r1
 800630a:	609a      	str	r2, [r3, #8]
 800630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	f383 8810 	msr	PRIMASK, r3
}
 8006316:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2280      	movs	r2, #128	; 0x80
 800631c:	2120      	movs	r1, #32
 800631e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2278      	movs	r2, #120	; 0x78
 8006324:	2100      	movs	r1, #0
 8006326:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e011      	b.n	8006350 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2280      	movs	r2, #128	; 0x80
 8006336:	2120      	movs	r1, #32
 8006338:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2278      	movs	r2, #120	; 0x78
 800634a:	2100      	movs	r1, #0
 800634c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	0018      	movs	r0, r3
 8006352:	46bd      	mov	sp, r7
 8006354:	b010      	add	sp, #64	; 0x40
 8006356:	bd80      	pop	{r7, pc}
 8006358:	01ffffff 	.word	0x01ffffff
 800635c:	fffffedf 	.word	0xfffffedf

08006360 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	1dfb      	adds	r3, r7, #7
 800636e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006370:	e04b      	b.n	800640a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	3301      	adds	r3, #1
 8006376:	d048      	beq.n	800640a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006378:	f7fd f95a 	bl	8003630 <HAL_GetTick>
 800637c:	0002      	movs	r2, r0
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	429a      	cmp	r2, r3
 8006386:	d302      	bcc.n	800638e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e04b      	b.n	800642a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2204      	movs	r2, #4
 800639a:	4013      	ands	r3, r2
 800639c:	d035      	beq.n	800640a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	2208      	movs	r2, #8
 80063a6:	4013      	ands	r3, r2
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d111      	bne.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2208      	movs	r2, #8
 80063b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	0018      	movs	r0, r3
 80063b8:	f000 f83c 	bl	8006434 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2284      	movs	r2, #132	; 0x84
 80063c0:	2108      	movs	r1, #8
 80063c2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2278      	movs	r2, #120	; 0x78
 80063c8:	2100      	movs	r1, #0
 80063ca:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e02c      	b.n	800642a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69da      	ldr	r2, [r3, #28]
 80063d6:	2380      	movs	r3, #128	; 0x80
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	401a      	ands	r2, r3
 80063dc:	2380      	movs	r3, #128	; 0x80
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d112      	bne.n	800640a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2280      	movs	r2, #128	; 0x80
 80063ea:	0112      	lsls	r2, r2, #4
 80063ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f000 f81f 	bl	8006434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2284      	movs	r2, #132	; 0x84
 80063fa:	2120      	movs	r1, #32
 80063fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2278      	movs	r2, #120	; 0x78
 8006402:	2100      	movs	r1, #0
 8006404:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e00f      	b.n	800642a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	4013      	ands	r3, r2
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	425a      	negs	r2, r3
 800641a:	4153      	adcs	r3, r2
 800641c:	b2db      	uxtb	r3, r3
 800641e:	001a      	movs	r2, r3
 8006420:	1dfb      	adds	r3, r7, #7
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d0a4      	beq.n	8006372 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	0018      	movs	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	b004      	add	sp, #16
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08e      	sub	sp, #56	; 0x38
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643c:	f3ef 8310 	mrs	r3, PRIMASK
 8006440:	617b      	str	r3, [r7, #20]
  return(result);
 8006442:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
 8006446:	2301      	movs	r3, #1
 8006448:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	f383 8810 	msr	PRIMASK, r3
}
 8006450:	46c0      	nop			; (mov r8, r8)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4926      	ldr	r1, [pc, #152]	; (80064f8 <UART_EndRxTransfer+0xc4>)
 800645e:	400a      	ands	r2, r1
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006464:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f383 8810 	msr	PRIMASK, r3
}
 800646c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800646e:	f3ef 8310 	mrs	r3, PRIMASK
 8006472:	623b      	str	r3, [r7, #32]
  return(result);
 8006474:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006476:	633b      	str	r3, [r7, #48]	; 0x30
 8006478:	2301      	movs	r3, #1
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	f383 8810 	msr	PRIMASK, r3
}
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2101      	movs	r1, #1
 8006490:	438a      	bics	r2, r1
 8006492:	609a      	str	r2, [r3, #8]
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	f383 8810 	msr	PRIMASK, r3
}
 800649e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d118      	bne.n	80064da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064a8:	f3ef 8310 	mrs	r3, PRIMASK
 80064ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80064ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064b2:	2301      	movs	r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f383 8810 	msr	PRIMASK, r3
}
 80064bc:	46c0      	nop			; (mov r8, r8)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2110      	movs	r1, #16
 80064ca:	438a      	bics	r2, r1
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f383 8810 	msr	PRIMASK, r3
}
 80064d8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2280      	movs	r2, #128	; 0x80
 80064de:	2120      	movs	r1, #32
 80064e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	46bd      	mov	sp, r7
 80064f2:	b00e      	add	sp, #56	; 0x38
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	fffffedf 	.word	0xfffffedf

080064fc <__errno>:
 80064fc:	4b01      	ldr	r3, [pc, #4]	; (8006504 <__errno+0x8>)
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	4770      	bx	lr
 8006502:	46c0      	nop			; (mov r8, r8)
 8006504:	2000000c 	.word	0x2000000c

08006508 <__libc_init_array>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	2600      	movs	r6, #0
 800650c:	4d0c      	ldr	r5, [pc, #48]	; (8006540 <__libc_init_array+0x38>)
 800650e:	4c0d      	ldr	r4, [pc, #52]	; (8006544 <__libc_init_array+0x3c>)
 8006510:	1b64      	subs	r4, r4, r5
 8006512:	10a4      	asrs	r4, r4, #2
 8006514:	42a6      	cmp	r6, r4
 8006516:	d109      	bne.n	800652c <__libc_init_array+0x24>
 8006518:	2600      	movs	r6, #0
 800651a:	f002 ffbb 	bl	8009494 <_init>
 800651e:	4d0a      	ldr	r5, [pc, #40]	; (8006548 <__libc_init_array+0x40>)
 8006520:	4c0a      	ldr	r4, [pc, #40]	; (800654c <__libc_init_array+0x44>)
 8006522:	1b64      	subs	r4, r4, r5
 8006524:	10a4      	asrs	r4, r4, #2
 8006526:	42a6      	cmp	r6, r4
 8006528:	d105      	bne.n	8006536 <__libc_init_array+0x2e>
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	00b3      	lsls	r3, r6, #2
 800652e:	58eb      	ldr	r3, [r5, r3]
 8006530:	4798      	blx	r3
 8006532:	3601      	adds	r6, #1
 8006534:	e7ee      	b.n	8006514 <__libc_init_array+0xc>
 8006536:	00b3      	lsls	r3, r6, #2
 8006538:	58eb      	ldr	r3, [r5, r3]
 800653a:	4798      	blx	r3
 800653c:	3601      	adds	r6, #1
 800653e:	e7f2      	b.n	8006526 <__libc_init_array+0x1e>
 8006540:	08009a0c 	.word	0x08009a0c
 8006544:	08009a0c 	.word	0x08009a0c
 8006548:	08009a0c 	.word	0x08009a0c
 800654c:	08009a10 	.word	0x08009a10

08006550 <memset>:
 8006550:	0003      	movs	r3, r0
 8006552:	1882      	adds	r2, r0, r2
 8006554:	4293      	cmp	r3, r2
 8006556:	d100      	bne.n	800655a <memset+0xa>
 8006558:	4770      	bx	lr
 800655a:	7019      	strb	r1, [r3, #0]
 800655c:	3301      	adds	r3, #1
 800655e:	e7f9      	b.n	8006554 <memset+0x4>

08006560 <__cvt>:
 8006560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006562:	001e      	movs	r6, r3
 8006564:	2300      	movs	r3, #0
 8006566:	0014      	movs	r4, r2
 8006568:	b08b      	sub	sp, #44	; 0x2c
 800656a:	429e      	cmp	r6, r3
 800656c:	da04      	bge.n	8006578 <__cvt+0x18>
 800656e:	2180      	movs	r1, #128	; 0x80
 8006570:	0609      	lsls	r1, r1, #24
 8006572:	1873      	adds	r3, r6, r1
 8006574:	001e      	movs	r6, r3
 8006576:	232d      	movs	r3, #45	; 0x2d
 8006578:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800657a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800657c:	7013      	strb	r3, [r2, #0]
 800657e:	2320      	movs	r3, #32
 8006580:	2203      	movs	r2, #3
 8006582:	439f      	bics	r7, r3
 8006584:	2f46      	cmp	r7, #70	; 0x46
 8006586:	d007      	beq.n	8006598 <__cvt+0x38>
 8006588:	003b      	movs	r3, r7
 800658a:	3b45      	subs	r3, #69	; 0x45
 800658c:	4259      	negs	r1, r3
 800658e:	414b      	adcs	r3, r1
 8006590:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006592:	3a01      	subs	r2, #1
 8006594:	18cb      	adds	r3, r1, r3
 8006596:	9310      	str	r3, [sp, #64]	; 0x40
 8006598:	ab09      	add	r3, sp, #36	; 0x24
 800659a:	9304      	str	r3, [sp, #16]
 800659c:	ab08      	add	r3, sp, #32
 800659e:	9303      	str	r3, [sp, #12]
 80065a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065a2:	9200      	str	r2, [sp, #0]
 80065a4:	9302      	str	r3, [sp, #8]
 80065a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065a8:	0022      	movs	r2, r4
 80065aa:	9301      	str	r3, [sp, #4]
 80065ac:	0033      	movs	r3, r6
 80065ae:	f000 fcf1 	bl	8006f94 <_dtoa_r>
 80065b2:	0005      	movs	r5, r0
 80065b4:	2f47      	cmp	r7, #71	; 0x47
 80065b6:	d102      	bne.n	80065be <__cvt+0x5e>
 80065b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065ba:	07db      	lsls	r3, r3, #31
 80065bc:	d528      	bpl.n	8006610 <__cvt+0xb0>
 80065be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065c0:	18eb      	adds	r3, r5, r3
 80065c2:	9307      	str	r3, [sp, #28]
 80065c4:	2f46      	cmp	r7, #70	; 0x46
 80065c6:	d114      	bne.n	80065f2 <__cvt+0x92>
 80065c8:	782b      	ldrb	r3, [r5, #0]
 80065ca:	2b30      	cmp	r3, #48	; 0x30
 80065cc:	d10c      	bne.n	80065e8 <__cvt+0x88>
 80065ce:	2200      	movs	r2, #0
 80065d0:	2300      	movs	r3, #0
 80065d2:	0020      	movs	r0, r4
 80065d4:	0031      	movs	r1, r6
 80065d6:	f7f9 ff39 	bl	800044c <__aeabi_dcmpeq>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d104      	bne.n	80065e8 <__cvt+0x88>
 80065de:	2301      	movs	r3, #1
 80065e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065e2:	1a9b      	subs	r3, r3, r2
 80065e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065ea:	9a07      	ldr	r2, [sp, #28]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	18d3      	adds	r3, r2, r3
 80065f0:	9307      	str	r3, [sp, #28]
 80065f2:	2200      	movs	r2, #0
 80065f4:	2300      	movs	r3, #0
 80065f6:	0020      	movs	r0, r4
 80065f8:	0031      	movs	r1, r6
 80065fa:	f7f9 ff27 	bl	800044c <__aeabi_dcmpeq>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d001      	beq.n	8006606 <__cvt+0xa6>
 8006602:	9b07      	ldr	r3, [sp, #28]
 8006604:	9309      	str	r3, [sp, #36]	; 0x24
 8006606:	2230      	movs	r2, #48	; 0x30
 8006608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800660a:	9907      	ldr	r1, [sp, #28]
 800660c:	428b      	cmp	r3, r1
 800660e:	d306      	bcc.n	800661e <__cvt+0xbe>
 8006610:	0028      	movs	r0, r5
 8006612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006614:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006616:	1b5b      	subs	r3, r3, r5
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	b00b      	add	sp, #44	; 0x2c
 800661c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800661e:	1c59      	adds	r1, r3, #1
 8006620:	9109      	str	r1, [sp, #36]	; 0x24
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	e7f0      	b.n	8006608 <__cvt+0xa8>

08006626 <__exponent>:
 8006626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006628:	1c83      	adds	r3, r0, #2
 800662a:	b087      	sub	sp, #28
 800662c:	9303      	str	r3, [sp, #12]
 800662e:	0005      	movs	r5, r0
 8006630:	000c      	movs	r4, r1
 8006632:	232b      	movs	r3, #43	; 0x2b
 8006634:	7002      	strb	r2, [r0, #0]
 8006636:	2900      	cmp	r1, #0
 8006638:	da01      	bge.n	800663e <__exponent+0x18>
 800663a:	424c      	negs	r4, r1
 800663c:	3302      	adds	r3, #2
 800663e:	706b      	strb	r3, [r5, #1]
 8006640:	2c09      	cmp	r4, #9
 8006642:	dd31      	ble.n	80066a8 <__exponent+0x82>
 8006644:	270a      	movs	r7, #10
 8006646:	ab04      	add	r3, sp, #16
 8006648:	1dde      	adds	r6, r3, #7
 800664a:	0020      	movs	r0, r4
 800664c:	0039      	movs	r1, r7
 800664e:	9601      	str	r6, [sp, #4]
 8006650:	f7f9 fee6 	bl	8000420 <__aeabi_idivmod>
 8006654:	3e01      	subs	r6, #1
 8006656:	3130      	adds	r1, #48	; 0x30
 8006658:	0020      	movs	r0, r4
 800665a:	7031      	strb	r1, [r6, #0]
 800665c:	0039      	movs	r1, r7
 800665e:	9402      	str	r4, [sp, #8]
 8006660:	f7f9 fdf8 	bl	8000254 <__divsi3>
 8006664:	9b02      	ldr	r3, [sp, #8]
 8006666:	0004      	movs	r4, r0
 8006668:	2b63      	cmp	r3, #99	; 0x63
 800666a:	dcee      	bgt.n	800664a <__exponent+0x24>
 800666c:	9b01      	ldr	r3, [sp, #4]
 800666e:	3430      	adds	r4, #48	; 0x30
 8006670:	1e9a      	subs	r2, r3, #2
 8006672:	0013      	movs	r3, r2
 8006674:	9903      	ldr	r1, [sp, #12]
 8006676:	7014      	strb	r4, [r2, #0]
 8006678:	a804      	add	r0, sp, #16
 800667a:	3007      	adds	r0, #7
 800667c:	4298      	cmp	r0, r3
 800667e:	d80e      	bhi.n	800669e <__exponent+0x78>
 8006680:	ab04      	add	r3, sp, #16
 8006682:	3307      	adds	r3, #7
 8006684:	2000      	movs	r0, #0
 8006686:	429a      	cmp	r2, r3
 8006688:	d804      	bhi.n	8006694 <__exponent+0x6e>
 800668a:	ab04      	add	r3, sp, #16
 800668c:	3009      	adds	r0, #9
 800668e:	18c0      	adds	r0, r0, r3
 8006690:	9b01      	ldr	r3, [sp, #4]
 8006692:	1ac0      	subs	r0, r0, r3
 8006694:	9b03      	ldr	r3, [sp, #12]
 8006696:	1818      	adds	r0, r3, r0
 8006698:	1b40      	subs	r0, r0, r5
 800669a:	b007      	add	sp, #28
 800669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800669e:	7818      	ldrb	r0, [r3, #0]
 80066a0:	3301      	adds	r3, #1
 80066a2:	7008      	strb	r0, [r1, #0]
 80066a4:	3101      	adds	r1, #1
 80066a6:	e7e7      	b.n	8006678 <__exponent+0x52>
 80066a8:	2330      	movs	r3, #48	; 0x30
 80066aa:	18e4      	adds	r4, r4, r3
 80066ac:	70ab      	strb	r3, [r5, #2]
 80066ae:	1d28      	adds	r0, r5, #4
 80066b0:	70ec      	strb	r4, [r5, #3]
 80066b2:	e7f1      	b.n	8006698 <__exponent+0x72>

080066b4 <_printf_float>:
 80066b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066b6:	b095      	sub	sp, #84	; 0x54
 80066b8:	000c      	movs	r4, r1
 80066ba:	9209      	str	r2, [sp, #36]	; 0x24
 80066bc:	001e      	movs	r6, r3
 80066be:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80066c0:	0007      	movs	r7, r0
 80066c2:	f001 fa81 	bl	8007bc8 <_localeconv_r>
 80066c6:	6803      	ldr	r3, [r0, #0]
 80066c8:	0018      	movs	r0, r3
 80066ca:	930c      	str	r3, [sp, #48]	; 0x30
 80066cc:	f7f9 fd1c 	bl	8000108 <strlen>
 80066d0:	2300      	movs	r3, #0
 80066d2:	9312      	str	r3, [sp, #72]	; 0x48
 80066d4:	7e23      	ldrb	r3, [r4, #24]
 80066d6:	2207      	movs	r2, #7
 80066d8:	930a      	str	r3, [sp, #40]	; 0x28
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	900e      	str	r0, [sp, #56]	; 0x38
 80066de:	930d      	str	r3, [sp, #52]	; 0x34
 80066e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80066e2:	682b      	ldr	r3, [r5, #0]
 80066e4:	05c9      	lsls	r1, r1, #23
 80066e6:	d547      	bpl.n	8006778 <_printf_float+0xc4>
 80066e8:	189b      	adds	r3, r3, r2
 80066ea:	4393      	bics	r3, r2
 80066ec:	001a      	movs	r2, r3
 80066ee:	3208      	adds	r2, #8
 80066f0:	602a      	str	r2, [r5, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	64a2      	str	r2, [r4, #72]	; 0x48
 80066f8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80066fa:	2201      	movs	r2, #1
 80066fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80066fe:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006700:	930b      	str	r3, [sp, #44]	; 0x2c
 8006702:	006b      	lsls	r3, r5, #1
 8006704:	085b      	lsrs	r3, r3, #1
 8006706:	930f      	str	r3, [sp, #60]	; 0x3c
 8006708:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800670a:	4ba7      	ldr	r3, [pc, #668]	; (80069a8 <_printf_float+0x2f4>)
 800670c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800670e:	4252      	negs	r2, r2
 8006710:	f7fb fe92 	bl	8002438 <__aeabi_dcmpun>
 8006714:	2800      	cmp	r0, #0
 8006716:	d131      	bne.n	800677c <_printf_float+0xc8>
 8006718:	2201      	movs	r2, #1
 800671a:	4ba3      	ldr	r3, [pc, #652]	; (80069a8 <_printf_float+0x2f4>)
 800671c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800671e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006720:	4252      	negs	r2, r2
 8006722:	f7f9 fea3 	bl	800046c <__aeabi_dcmple>
 8006726:	2800      	cmp	r0, #0
 8006728:	d128      	bne.n	800677c <_printf_float+0xc8>
 800672a:	2200      	movs	r2, #0
 800672c:	2300      	movs	r3, #0
 800672e:	0029      	movs	r1, r5
 8006730:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006732:	f7f9 fe91 	bl	8000458 <__aeabi_dcmplt>
 8006736:	2800      	cmp	r0, #0
 8006738:	d003      	beq.n	8006742 <_printf_float+0x8e>
 800673a:	0023      	movs	r3, r4
 800673c:	222d      	movs	r2, #45	; 0x2d
 800673e:	3343      	adds	r3, #67	; 0x43
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006744:	4d99      	ldr	r5, [pc, #612]	; (80069ac <_printf_float+0x2f8>)
 8006746:	2b47      	cmp	r3, #71	; 0x47
 8006748:	d900      	bls.n	800674c <_printf_float+0x98>
 800674a:	4d99      	ldr	r5, [pc, #612]	; (80069b0 <_printf_float+0x2fc>)
 800674c:	2303      	movs	r3, #3
 800674e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006750:	6123      	str	r3, [r4, #16]
 8006752:	3301      	adds	r3, #1
 8006754:	439a      	bics	r2, r3
 8006756:	2300      	movs	r3, #0
 8006758:	6022      	str	r2, [r4, #0]
 800675a:	930b      	str	r3, [sp, #44]	; 0x2c
 800675c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675e:	0021      	movs	r1, r4
 8006760:	0038      	movs	r0, r7
 8006762:	9600      	str	r6, [sp, #0]
 8006764:	aa13      	add	r2, sp, #76	; 0x4c
 8006766:	f000 f9e7 	bl	8006b38 <_printf_common>
 800676a:	1c43      	adds	r3, r0, #1
 800676c:	d000      	beq.n	8006770 <_printf_float+0xbc>
 800676e:	e0a2      	b.n	80068b6 <_printf_float+0x202>
 8006770:	2001      	movs	r0, #1
 8006772:	4240      	negs	r0, r0
 8006774:	b015      	add	sp, #84	; 0x54
 8006776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006778:	3307      	adds	r3, #7
 800677a:	e7b6      	b.n	80066ea <_printf_float+0x36>
 800677c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800677e:	002b      	movs	r3, r5
 8006780:	0010      	movs	r0, r2
 8006782:	0029      	movs	r1, r5
 8006784:	f7fb fe58 	bl	8002438 <__aeabi_dcmpun>
 8006788:	2800      	cmp	r0, #0
 800678a:	d00b      	beq.n	80067a4 <_printf_float+0xf0>
 800678c:	2d00      	cmp	r5, #0
 800678e:	da03      	bge.n	8006798 <_printf_float+0xe4>
 8006790:	0023      	movs	r3, r4
 8006792:	222d      	movs	r2, #45	; 0x2d
 8006794:	3343      	adds	r3, #67	; 0x43
 8006796:	701a      	strb	r2, [r3, #0]
 8006798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800679a:	4d86      	ldr	r5, [pc, #536]	; (80069b4 <_printf_float+0x300>)
 800679c:	2b47      	cmp	r3, #71	; 0x47
 800679e:	d9d5      	bls.n	800674c <_printf_float+0x98>
 80067a0:	4d85      	ldr	r5, [pc, #532]	; (80069b8 <_printf_float+0x304>)
 80067a2:	e7d3      	b.n	800674c <_printf_float+0x98>
 80067a4:	2220      	movs	r2, #32
 80067a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067a8:	6863      	ldr	r3, [r4, #4]
 80067aa:	4391      	bics	r1, r2
 80067ac:	910f      	str	r1, [sp, #60]	; 0x3c
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	d149      	bne.n	8006846 <_printf_float+0x192>
 80067b2:	3307      	adds	r3, #7
 80067b4:	6063      	str	r3, [r4, #4]
 80067b6:	2380      	movs	r3, #128	; 0x80
 80067b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	4313      	orrs	r3, r2
 80067be:	2200      	movs	r2, #0
 80067c0:	9206      	str	r2, [sp, #24]
 80067c2:	aa12      	add	r2, sp, #72	; 0x48
 80067c4:	9205      	str	r2, [sp, #20]
 80067c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067c8:	a908      	add	r1, sp, #32
 80067ca:	9204      	str	r2, [sp, #16]
 80067cc:	aa11      	add	r2, sp, #68	; 0x44
 80067ce:	9203      	str	r2, [sp, #12]
 80067d0:	2223      	movs	r2, #35	; 0x23
 80067d2:	6023      	str	r3, [r4, #0]
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	6863      	ldr	r3, [r4, #4]
 80067d8:	1852      	adds	r2, r2, r1
 80067da:	9202      	str	r2, [sp, #8]
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	0038      	movs	r0, r7
 80067e0:	002b      	movs	r3, r5
 80067e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067e4:	f7ff febc 	bl	8006560 <__cvt>
 80067e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067ea:	0005      	movs	r5, r0
 80067ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80067ee:	2b47      	cmp	r3, #71	; 0x47
 80067f0:	d108      	bne.n	8006804 <_printf_float+0x150>
 80067f2:	1ccb      	adds	r3, r1, #3
 80067f4:	db02      	blt.n	80067fc <_printf_float+0x148>
 80067f6:	6863      	ldr	r3, [r4, #4]
 80067f8:	4299      	cmp	r1, r3
 80067fa:	dd48      	ble.n	800688e <_printf_float+0x1da>
 80067fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067fe:	3b02      	subs	r3, #2
 8006800:	b2db      	uxtb	r3, r3
 8006802:	930a      	str	r3, [sp, #40]	; 0x28
 8006804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006806:	2b65      	cmp	r3, #101	; 0x65
 8006808:	d824      	bhi.n	8006854 <_printf_float+0x1a0>
 800680a:	0020      	movs	r0, r4
 800680c:	001a      	movs	r2, r3
 800680e:	3901      	subs	r1, #1
 8006810:	3050      	adds	r0, #80	; 0x50
 8006812:	9111      	str	r1, [sp, #68]	; 0x44
 8006814:	f7ff ff07 	bl	8006626 <__exponent>
 8006818:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800681a:	900b      	str	r0, [sp, #44]	; 0x2c
 800681c:	1813      	adds	r3, r2, r0
 800681e:	6123      	str	r3, [r4, #16]
 8006820:	2a01      	cmp	r2, #1
 8006822:	dc02      	bgt.n	800682a <_printf_float+0x176>
 8006824:	6822      	ldr	r2, [r4, #0]
 8006826:	07d2      	lsls	r2, r2, #31
 8006828:	d501      	bpl.n	800682e <_printf_float+0x17a>
 800682a:	3301      	adds	r3, #1
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	2323      	movs	r3, #35	; 0x23
 8006830:	aa08      	add	r2, sp, #32
 8006832:	189b      	adds	r3, r3, r2
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d100      	bne.n	800683c <_printf_float+0x188>
 800683a:	e78f      	b.n	800675c <_printf_float+0xa8>
 800683c:	0023      	movs	r3, r4
 800683e:	222d      	movs	r2, #45	; 0x2d
 8006840:	3343      	adds	r3, #67	; 0x43
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	e78a      	b.n	800675c <_printf_float+0xa8>
 8006846:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006848:	2a47      	cmp	r2, #71	; 0x47
 800684a:	d1b4      	bne.n	80067b6 <_printf_float+0x102>
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1b2      	bne.n	80067b6 <_printf_float+0x102>
 8006850:	3301      	adds	r3, #1
 8006852:	e7af      	b.n	80067b4 <_printf_float+0x100>
 8006854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006856:	2b66      	cmp	r3, #102	; 0x66
 8006858:	d11b      	bne.n	8006892 <_printf_float+0x1de>
 800685a:	6863      	ldr	r3, [r4, #4]
 800685c:	2900      	cmp	r1, #0
 800685e:	dd0d      	ble.n	800687c <_printf_float+0x1c8>
 8006860:	6121      	str	r1, [r4, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d102      	bne.n	800686c <_printf_float+0x1b8>
 8006866:	6822      	ldr	r2, [r4, #0]
 8006868:	07d2      	lsls	r2, r2, #31
 800686a:	d502      	bpl.n	8006872 <_printf_float+0x1be>
 800686c:	3301      	adds	r3, #1
 800686e:	1859      	adds	r1, r3, r1
 8006870:	6121      	str	r1, [r4, #16]
 8006872:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006874:	65a3      	str	r3, [r4, #88]	; 0x58
 8006876:	2300      	movs	r3, #0
 8006878:	930b      	str	r3, [sp, #44]	; 0x2c
 800687a:	e7d8      	b.n	800682e <_printf_float+0x17a>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d103      	bne.n	8006888 <_printf_float+0x1d4>
 8006880:	2201      	movs	r2, #1
 8006882:	6821      	ldr	r1, [r4, #0]
 8006884:	4211      	tst	r1, r2
 8006886:	d000      	beq.n	800688a <_printf_float+0x1d6>
 8006888:	1c9a      	adds	r2, r3, #2
 800688a:	6122      	str	r2, [r4, #16]
 800688c:	e7f1      	b.n	8006872 <_printf_float+0x1be>
 800688e:	2367      	movs	r3, #103	; 0x67
 8006890:	930a      	str	r3, [sp, #40]	; 0x28
 8006892:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006896:	4293      	cmp	r3, r2
 8006898:	db06      	blt.n	80068a8 <_printf_float+0x1f4>
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	6123      	str	r3, [r4, #16]
 800689e:	07d2      	lsls	r2, r2, #31
 80068a0:	d5e7      	bpl.n	8006872 <_printf_float+0x1be>
 80068a2:	3301      	adds	r3, #1
 80068a4:	6123      	str	r3, [r4, #16]
 80068a6:	e7e4      	b.n	8006872 <_printf_float+0x1be>
 80068a8:	2101      	movs	r1, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dc01      	bgt.n	80068b2 <_printf_float+0x1fe>
 80068ae:	1849      	adds	r1, r1, r1
 80068b0:	1ac9      	subs	r1, r1, r3
 80068b2:	1852      	adds	r2, r2, r1
 80068b4:	e7e9      	b.n	800688a <_printf_float+0x1d6>
 80068b6:	6822      	ldr	r2, [r4, #0]
 80068b8:	0553      	lsls	r3, r2, #21
 80068ba:	d407      	bmi.n	80068cc <_printf_float+0x218>
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	002a      	movs	r2, r5
 80068c0:	0038      	movs	r0, r7
 80068c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068c4:	47b0      	blx	r6
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	d128      	bne.n	800691c <_printf_float+0x268>
 80068ca:	e751      	b.n	8006770 <_printf_float+0xbc>
 80068cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ce:	2b65      	cmp	r3, #101	; 0x65
 80068d0:	d800      	bhi.n	80068d4 <_printf_float+0x220>
 80068d2:	e0e1      	b.n	8006a98 <_printf_float+0x3e4>
 80068d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80068d6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80068d8:	2200      	movs	r2, #0
 80068da:	2300      	movs	r3, #0
 80068dc:	f7f9 fdb6 	bl	800044c <__aeabi_dcmpeq>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d031      	beq.n	8006948 <_printf_float+0x294>
 80068e4:	2301      	movs	r3, #1
 80068e6:	0038      	movs	r0, r7
 80068e8:	4a34      	ldr	r2, [pc, #208]	; (80069bc <_printf_float+0x308>)
 80068ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ec:	47b0      	blx	r6
 80068ee:	1c43      	adds	r3, r0, #1
 80068f0:	d100      	bne.n	80068f4 <_printf_float+0x240>
 80068f2:	e73d      	b.n	8006770 <_printf_float+0xbc>
 80068f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068f8:	4293      	cmp	r3, r2
 80068fa:	db02      	blt.n	8006902 <_printf_float+0x24e>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	07db      	lsls	r3, r3, #31
 8006900:	d50c      	bpl.n	800691c <_printf_float+0x268>
 8006902:	0038      	movs	r0, r7
 8006904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006908:	9909      	ldr	r1, [sp, #36]	; 0x24
 800690a:	47b0      	blx	r6
 800690c:	2500      	movs	r5, #0
 800690e:	1c43      	adds	r3, r0, #1
 8006910:	d100      	bne.n	8006914 <_printf_float+0x260>
 8006912:	e72d      	b.n	8006770 <_printf_float+0xbc>
 8006914:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006916:	3b01      	subs	r3, #1
 8006918:	42ab      	cmp	r3, r5
 800691a:	dc0a      	bgt.n	8006932 <_printf_float+0x27e>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	079b      	lsls	r3, r3, #30
 8006920:	d500      	bpl.n	8006924 <_printf_float+0x270>
 8006922:	e106      	b.n	8006b32 <_printf_float+0x47e>
 8006924:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006926:	68e0      	ldr	r0, [r4, #12]
 8006928:	4298      	cmp	r0, r3
 800692a:	db00      	blt.n	800692e <_printf_float+0x27a>
 800692c:	e722      	b.n	8006774 <_printf_float+0xc0>
 800692e:	0018      	movs	r0, r3
 8006930:	e720      	b.n	8006774 <_printf_float+0xc0>
 8006932:	0022      	movs	r2, r4
 8006934:	2301      	movs	r3, #1
 8006936:	0038      	movs	r0, r7
 8006938:	9909      	ldr	r1, [sp, #36]	; 0x24
 800693a:	321a      	adds	r2, #26
 800693c:	47b0      	blx	r6
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d100      	bne.n	8006944 <_printf_float+0x290>
 8006942:	e715      	b.n	8006770 <_printf_float+0xbc>
 8006944:	3501      	adds	r5, #1
 8006946:	e7e5      	b.n	8006914 <_printf_float+0x260>
 8006948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800694a:	2b00      	cmp	r3, #0
 800694c:	dc38      	bgt.n	80069c0 <_printf_float+0x30c>
 800694e:	2301      	movs	r3, #1
 8006950:	0038      	movs	r0, r7
 8006952:	4a1a      	ldr	r2, [pc, #104]	; (80069bc <_printf_float+0x308>)
 8006954:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006956:	47b0      	blx	r6
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d100      	bne.n	800695e <_printf_float+0x2aa>
 800695c:	e708      	b.n	8006770 <_printf_float+0xbc>
 800695e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006960:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006962:	4313      	orrs	r3, r2
 8006964:	d102      	bne.n	800696c <_printf_float+0x2b8>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	07db      	lsls	r3, r3, #31
 800696a:	d5d7      	bpl.n	800691c <_printf_float+0x268>
 800696c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800696e:	0038      	movs	r0, r7
 8006970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006972:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006974:	47b0      	blx	r6
 8006976:	1c43      	adds	r3, r0, #1
 8006978:	d100      	bne.n	800697c <_printf_float+0x2c8>
 800697a:	e6f9      	b.n	8006770 <_printf_float+0xbc>
 800697c:	2300      	movs	r3, #0
 800697e:	930a      	str	r3, [sp, #40]	; 0x28
 8006980:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006984:	425b      	negs	r3, r3
 8006986:	4293      	cmp	r3, r2
 8006988:	dc01      	bgt.n	800698e <_printf_float+0x2da>
 800698a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800698c:	e797      	b.n	80068be <_printf_float+0x20a>
 800698e:	0022      	movs	r2, r4
 8006990:	2301      	movs	r3, #1
 8006992:	0038      	movs	r0, r7
 8006994:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006996:	321a      	adds	r2, #26
 8006998:	47b0      	blx	r6
 800699a:	1c43      	adds	r3, r0, #1
 800699c:	d100      	bne.n	80069a0 <_printf_float+0x2ec>
 800699e:	e6e7      	b.n	8006770 <_printf_float+0xbc>
 80069a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a2:	3301      	adds	r3, #1
 80069a4:	e7eb      	b.n	800697e <_printf_float+0x2ca>
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	7fefffff 	.word	0x7fefffff
 80069ac:	08009638 	.word	0x08009638
 80069b0:	0800963c 	.word	0x0800963c
 80069b4:	08009640 	.word	0x08009640
 80069b8:	08009644 	.word	0x08009644
 80069bc:	08009648 	.word	0x08009648
 80069c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069c4:	920a      	str	r2, [sp, #40]	; 0x28
 80069c6:	429a      	cmp	r2, r3
 80069c8:	dd00      	ble.n	80069cc <_printf_float+0x318>
 80069ca:	930a      	str	r3, [sp, #40]	; 0x28
 80069cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	dc3c      	bgt.n	8006a4c <_printf_float+0x398>
 80069d2:	2300      	movs	r3, #0
 80069d4:	930d      	str	r3, [sp, #52]	; 0x34
 80069d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d8:	43db      	mvns	r3, r3
 80069da:	17db      	asrs	r3, r3, #31
 80069dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80069de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80069e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e6:	4013      	ands	r3, r2
 80069e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069ee:	4293      	cmp	r3, r2
 80069f0:	dc34      	bgt.n	8006a5c <_printf_float+0x3a8>
 80069f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069f6:	4293      	cmp	r3, r2
 80069f8:	db3d      	blt.n	8006a76 <_printf_float+0x3c2>
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	07db      	lsls	r3, r3, #31
 80069fe:	d43a      	bmi.n	8006a76 <_printf_float+0x3c2>
 8006a00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	1a52      	subs	r2, r2, r1
 8006a0a:	920a      	str	r2, [sp, #40]	; 0x28
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	dd00      	ble.n	8006a12 <_printf_float+0x35e>
 8006a10:	930a      	str	r3, [sp, #40]	; 0x28
 8006a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dc36      	bgt.n	8006a86 <_printf_float+0x3d2>
 8006a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a1a:	2500      	movs	r5, #0
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	17db      	asrs	r3, r3, #31
 8006a20:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a28:	1a9b      	subs	r3, r3, r2
 8006a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a2c:	400a      	ands	r2, r1
 8006a2e:	1a9b      	subs	r3, r3, r2
 8006a30:	42ab      	cmp	r3, r5
 8006a32:	dc00      	bgt.n	8006a36 <_printf_float+0x382>
 8006a34:	e772      	b.n	800691c <_printf_float+0x268>
 8006a36:	0022      	movs	r2, r4
 8006a38:	2301      	movs	r3, #1
 8006a3a:	0038      	movs	r0, r7
 8006a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a3e:	321a      	adds	r2, #26
 8006a40:	47b0      	blx	r6
 8006a42:	1c43      	adds	r3, r0, #1
 8006a44:	d100      	bne.n	8006a48 <_printf_float+0x394>
 8006a46:	e693      	b.n	8006770 <_printf_float+0xbc>
 8006a48:	3501      	adds	r5, #1
 8006a4a:	e7ea      	b.n	8006a22 <_printf_float+0x36e>
 8006a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4e:	002a      	movs	r2, r5
 8006a50:	0038      	movs	r0, r7
 8006a52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a54:	47b0      	blx	r6
 8006a56:	1c43      	adds	r3, r0, #1
 8006a58:	d1bb      	bne.n	80069d2 <_printf_float+0x31e>
 8006a5a:	e689      	b.n	8006770 <_printf_float+0xbc>
 8006a5c:	0022      	movs	r2, r4
 8006a5e:	2301      	movs	r3, #1
 8006a60:	0038      	movs	r0, r7
 8006a62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a64:	321a      	adds	r2, #26
 8006a66:	47b0      	blx	r6
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d100      	bne.n	8006a6e <_printf_float+0x3ba>
 8006a6c:	e680      	b.n	8006770 <_printf_float+0xbc>
 8006a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a70:	3301      	adds	r3, #1
 8006a72:	930d      	str	r3, [sp, #52]	; 0x34
 8006a74:	e7b3      	b.n	80069de <_printf_float+0x32a>
 8006a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a78:	0038      	movs	r0, r7
 8006a7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a7e:	47b0      	blx	r6
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d1bd      	bne.n	8006a00 <_printf_float+0x34c>
 8006a84:	e674      	b.n	8006770 <_printf_float+0xbc>
 8006a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a88:	0038      	movs	r0, r7
 8006a8a:	18ea      	adds	r2, r5, r3
 8006a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a90:	47b0      	blx	r6
 8006a92:	1c43      	adds	r3, r0, #1
 8006a94:	d1c0      	bne.n	8006a18 <_printf_float+0x364>
 8006a96:	e66b      	b.n	8006770 <_printf_float+0xbc>
 8006a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	dc02      	bgt.n	8006aa4 <_printf_float+0x3f0>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	421a      	tst	r2, r3
 8006aa2:	d034      	beq.n	8006b0e <_printf_float+0x45a>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	002a      	movs	r2, r5
 8006aa8:	0038      	movs	r0, r7
 8006aaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aac:	47b0      	blx	r6
 8006aae:	1c43      	adds	r3, r0, #1
 8006ab0:	d100      	bne.n	8006ab4 <_printf_float+0x400>
 8006ab2:	e65d      	b.n	8006770 <_printf_float+0xbc>
 8006ab4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ab6:	0038      	movs	r0, r7
 8006ab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006abc:	47b0      	blx	r6
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	d100      	bne.n	8006ac4 <_printf_float+0x410>
 8006ac2:	e655      	b.n	8006770 <_printf_float+0xbc>
 8006ac4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006ac6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2300      	movs	r3, #0
 8006acc:	f7f9 fcbe 	bl	800044c <__aeabi_dcmpeq>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d11a      	bne.n	8006b0a <_printf_float+0x456>
 8006ad4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ad6:	1c6a      	adds	r2, r5, #1
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	0038      	movs	r0, r7
 8006adc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ade:	47b0      	blx	r6
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d10e      	bne.n	8006b02 <_printf_float+0x44e>
 8006ae4:	e644      	b.n	8006770 <_printf_float+0xbc>
 8006ae6:	0022      	movs	r2, r4
 8006ae8:	2301      	movs	r3, #1
 8006aea:	0038      	movs	r0, r7
 8006aec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aee:	321a      	adds	r2, #26
 8006af0:	47b0      	blx	r6
 8006af2:	1c43      	adds	r3, r0, #1
 8006af4:	d100      	bne.n	8006af8 <_printf_float+0x444>
 8006af6:	e63b      	b.n	8006770 <_printf_float+0xbc>
 8006af8:	3501      	adds	r5, #1
 8006afa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006afc:	3b01      	subs	r3, #1
 8006afe:	42ab      	cmp	r3, r5
 8006b00:	dcf1      	bgt.n	8006ae6 <_printf_float+0x432>
 8006b02:	0022      	movs	r2, r4
 8006b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b06:	3250      	adds	r2, #80	; 0x50
 8006b08:	e6da      	b.n	80068c0 <_printf_float+0x20c>
 8006b0a:	2500      	movs	r5, #0
 8006b0c:	e7f5      	b.n	8006afa <_printf_float+0x446>
 8006b0e:	002a      	movs	r2, r5
 8006b10:	e7e3      	b.n	8006ada <_printf_float+0x426>
 8006b12:	0022      	movs	r2, r4
 8006b14:	2301      	movs	r3, #1
 8006b16:	0038      	movs	r0, r7
 8006b18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b1a:	3219      	adds	r2, #25
 8006b1c:	47b0      	blx	r6
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	d100      	bne.n	8006b24 <_printf_float+0x470>
 8006b22:	e625      	b.n	8006770 <_printf_float+0xbc>
 8006b24:	3501      	adds	r5, #1
 8006b26:	68e3      	ldr	r3, [r4, #12]
 8006b28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b2a:	1a9b      	subs	r3, r3, r2
 8006b2c:	42ab      	cmp	r3, r5
 8006b2e:	dcf0      	bgt.n	8006b12 <_printf_float+0x45e>
 8006b30:	e6f8      	b.n	8006924 <_printf_float+0x270>
 8006b32:	2500      	movs	r5, #0
 8006b34:	e7f7      	b.n	8006b26 <_printf_float+0x472>
 8006b36:	46c0      	nop			; (mov r8, r8)

08006b38 <_printf_common>:
 8006b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b3a:	0015      	movs	r5, r2
 8006b3c:	9301      	str	r3, [sp, #4]
 8006b3e:	688a      	ldr	r2, [r1, #8]
 8006b40:	690b      	ldr	r3, [r1, #16]
 8006b42:	000c      	movs	r4, r1
 8006b44:	9000      	str	r0, [sp, #0]
 8006b46:	4293      	cmp	r3, r2
 8006b48:	da00      	bge.n	8006b4c <_printf_common+0x14>
 8006b4a:	0013      	movs	r3, r2
 8006b4c:	0022      	movs	r2, r4
 8006b4e:	602b      	str	r3, [r5, #0]
 8006b50:	3243      	adds	r2, #67	; 0x43
 8006b52:	7812      	ldrb	r2, [r2, #0]
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	d001      	beq.n	8006b5c <_printf_common+0x24>
 8006b58:	3301      	adds	r3, #1
 8006b5a:	602b      	str	r3, [r5, #0]
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	069b      	lsls	r3, r3, #26
 8006b60:	d502      	bpl.n	8006b68 <_printf_common+0x30>
 8006b62:	682b      	ldr	r3, [r5, #0]
 8006b64:	3302      	adds	r3, #2
 8006b66:	602b      	str	r3, [r5, #0]
 8006b68:	6822      	ldr	r2, [r4, #0]
 8006b6a:	2306      	movs	r3, #6
 8006b6c:	0017      	movs	r7, r2
 8006b6e:	401f      	ands	r7, r3
 8006b70:	421a      	tst	r2, r3
 8006b72:	d027      	beq.n	8006bc4 <_printf_common+0x8c>
 8006b74:	0023      	movs	r3, r4
 8006b76:	3343      	adds	r3, #67	; 0x43
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	1e5a      	subs	r2, r3, #1
 8006b7c:	4193      	sbcs	r3, r2
 8006b7e:	6822      	ldr	r2, [r4, #0]
 8006b80:	0692      	lsls	r2, r2, #26
 8006b82:	d430      	bmi.n	8006be6 <_printf_common+0xae>
 8006b84:	0022      	movs	r2, r4
 8006b86:	9901      	ldr	r1, [sp, #4]
 8006b88:	9800      	ldr	r0, [sp, #0]
 8006b8a:	9e08      	ldr	r6, [sp, #32]
 8006b8c:	3243      	adds	r2, #67	; 0x43
 8006b8e:	47b0      	blx	r6
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d025      	beq.n	8006be0 <_printf_common+0xa8>
 8006b94:	2306      	movs	r3, #6
 8006b96:	6820      	ldr	r0, [r4, #0]
 8006b98:	682a      	ldr	r2, [r5, #0]
 8006b9a:	68e1      	ldr	r1, [r4, #12]
 8006b9c:	2500      	movs	r5, #0
 8006b9e:	4003      	ands	r3, r0
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d103      	bne.n	8006bac <_printf_common+0x74>
 8006ba4:	1a8d      	subs	r5, r1, r2
 8006ba6:	43eb      	mvns	r3, r5
 8006ba8:	17db      	asrs	r3, r3, #31
 8006baa:	401d      	ands	r5, r3
 8006bac:	68a3      	ldr	r3, [r4, #8]
 8006bae:	6922      	ldr	r2, [r4, #16]
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	dd01      	ble.n	8006bb8 <_printf_common+0x80>
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	18ed      	adds	r5, r5, r3
 8006bb8:	2700      	movs	r7, #0
 8006bba:	42bd      	cmp	r5, r7
 8006bbc:	d120      	bne.n	8006c00 <_printf_common+0xc8>
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	e010      	b.n	8006be4 <_printf_common+0xac>
 8006bc2:	3701      	adds	r7, #1
 8006bc4:	68e3      	ldr	r3, [r4, #12]
 8006bc6:	682a      	ldr	r2, [r5, #0]
 8006bc8:	1a9b      	subs	r3, r3, r2
 8006bca:	42bb      	cmp	r3, r7
 8006bcc:	ddd2      	ble.n	8006b74 <_printf_common+0x3c>
 8006bce:	0022      	movs	r2, r4
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	9901      	ldr	r1, [sp, #4]
 8006bd4:	9800      	ldr	r0, [sp, #0]
 8006bd6:	9e08      	ldr	r6, [sp, #32]
 8006bd8:	3219      	adds	r2, #25
 8006bda:	47b0      	blx	r6
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d1f0      	bne.n	8006bc2 <_printf_common+0x8a>
 8006be0:	2001      	movs	r0, #1
 8006be2:	4240      	negs	r0, r0
 8006be4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006be6:	2030      	movs	r0, #48	; 0x30
 8006be8:	18e1      	adds	r1, r4, r3
 8006bea:	3143      	adds	r1, #67	; 0x43
 8006bec:	7008      	strb	r0, [r1, #0]
 8006bee:	0021      	movs	r1, r4
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	3145      	adds	r1, #69	; 0x45
 8006bf4:	7809      	ldrb	r1, [r1, #0]
 8006bf6:	18a2      	adds	r2, r4, r2
 8006bf8:	3243      	adds	r2, #67	; 0x43
 8006bfa:	3302      	adds	r3, #2
 8006bfc:	7011      	strb	r1, [r2, #0]
 8006bfe:	e7c1      	b.n	8006b84 <_printf_common+0x4c>
 8006c00:	0022      	movs	r2, r4
 8006c02:	2301      	movs	r3, #1
 8006c04:	9901      	ldr	r1, [sp, #4]
 8006c06:	9800      	ldr	r0, [sp, #0]
 8006c08:	9e08      	ldr	r6, [sp, #32]
 8006c0a:	321a      	adds	r2, #26
 8006c0c:	47b0      	blx	r6
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	d0e6      	beq.n	8006be0 <_printf_common+0xa8>
 8006c12:	3701      	adds	r7, #1
 8006c14:	e7d1      	b.n	8006bba <_printf_common+0x82>
	...

08006c18 <_printf_i>:
 8006c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c1a:	b08b      	sub	sp, #44	; 0x2c
 8006c1c:	9206      	str	r2, [sp, #24]
 8006c1e:	000a      	movs	r2, r1
 8006c20:	3243      	adds	r2, #67	; 0x43
 8006c22:	9307      	str	r3, [sp, #28]
 8006c24:	9005      	str	r0, [sp, #20]
 8006c26:	9204      	str	r2, [sp, #16]
 8006c28:	7e0a      	ldrb	r2, [r1, #24]
 8006c2a:	000c      	movs	r4, r1
 8006c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c2e:	2a78      	cmp	r2, #120	; 0x78
 8006c30:	d807      	bhi.n	8006c42 <_printf_i+0x2a>
 8006c32:	2a62      	cmp	r2, #98	; 0x62
 8006c34:	d809      	bhi.n	8006c4a <_printf_i+0x32>
 8006c36:	2a00      	cmp	r2, #0
 8006c38:	d100      	bne.n	8006c3c <_printf_i+0x24>
 8006c3a:	e0c1      	b.n	8006dc0 <_printf_i+0x1a8>
 8006c3c:	2a58      	cmp	r2, #88	; 0x58
 8006c3e:	d100      	bne.n	8006c42 <_printf_i+0x2a>
 8006c40:	e08c      	b.n	8006d5c <_printf_i+0x144>
 8006c42:	0026      	movs	r6, r4
 8006c44:	3642      	adds	r6, #66	; 0x42
 8006c46:	7032      	strb	r2, [r6, #0]
 8006c48:	e022      	b.n	8006c90 <_printf_i+0x78>
 8006c4a:	0010      	movs	r0, r2
 8006c4c:	3863      	subs	r0, #99	; 0x63
 8006c4e:	2815      	cmp	r0, #21
 8006c50:	d8f7      	bhi.n	8006c42 <_printf_i+0x2a>
 8006c52:	f7f9 fa6b 	bl	800012c <__gnu_thumb1_case_shi>
 8006c56:	0016      	.short	0x0016
 8006c58:	fff6001f 	.word	0xfff6001f
 8006c5c:	fff6fff6 	.word	0xfff6fff6
 8006c60:	001ffff6 	.word	0x001ffff6
 8006c64:	fff6fff6 	.word	0xfff6fff6
 8006c68:	fff6fff6 	.word	0xfff6fff6
 8006c6c:	003600a8 	.word	0x003600a8
 8006c70:	fff6009a 	.word	0xfff6009a
 8006c74:	00b9fff6 	.word	0x00b9fff6
 8006c78:	0036fff6 	.word	0x0036fff6
 8006c7c:	fff6fff6 	.word	0xfff6fff6
 8006c80:	009e      	.short	0x009e
 8006c82:	0026      	movs	r6, r4
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	3642      	adds	r6, #66	; 0x42
 8006c88:	1d11      	adds	r1, r2, #4
 8006c8a:	6019      	str	r1, [r3, #0]
 8006c8c:	6813      	ldr	r3, [r2, #0]
 8006c8e:	7033      	strb	r3, [r6, #0]
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0a7      	b.n	8006de4 <_printf_i+0x1cc>
 8006c94:	6808      	ldr	r0, [r1, #0]
 8006c96:	6819      	ldr	r1, [r3, #0]
 8006c98:	1d0a      	adds	r2, r1, #4
 8006c9a:	0605      	lsls	r5, r0, #24
 8006c9c:	d50b      	bpl.n	8006cb6 <_printf_i+0x9e>
 8006c9e:	680d      	ldr	r5, [r1, #0]
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	2d00      	cmp	r5, #0
 8006ca4:	da03      	bge.n	8006cae <_printf_i+0x96>
 8006ca6:	232d      	movs	r3, #45	; 0x2d
 8006ca8:	9a04      	ldr	r2, [sp, #16]
 8006caa:	426d      	negs	r5, r5
 8006cac:	7013      	strb	r3, [r2, #0]
 8006cae:	4b61      	ldr	r3, [pc, #388]	; (8006e34 <_printf_i+0x21c>)
 8006cb0:	270a      	movs	r7, #10
 8006cb2:	9303      	str	r3, [sp, #12]
 8006cb4:	e01b      	b.n	8006cee <_printf_i+0xd6>
 8006cb6:	680d      	ldr	r5, [r1, #0]
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	0641      	lsls	r1, r0, #25
 8006cbc:	d5f1      	bpl.n	8006ca2 <_printf_i+0x8a>
 8006cbe:	b22d      	sxth	r5, r5
 8006cc0:	e7ef      	b.n	8006ca2 <_printf_i+0x8a>
 8006cc2:	680d      	ldr	r5, [r1, #0]
 8006cc4:	6819      	ldr	r1, [r3, #0]
 8006cc6:	1d08      	adds	r0, r1, #4
 8006cc8:	6018      	str	r0, [r3, #0]
 8006cca:	062e      	lsls	r6, r5, #24
 8006ccc:	d501      	bpl.n	8006cd2 <_printf_i+0xba>
 8006cce:	680d      	ldr	r5, [r1, #0]
 8006cd0:	e003      	b.n	8006cda <_printf_i+0xc2>
 8006cd2:	066d      	lsls	r5, r5, #25
 8006cd4:	d5fb      	bpl.n	8006cce <_printf_i+0xb6>
 8006cd6:	680d      	ldr	r5, [r1, #0]
 8006cd8:	b2ad      	uxth	r5, r5
 8006cda:	4b56      	ldr	r3, [pc, #344]	; (8006e34 <_printf_i+0x21c>)
 8006cdc:	2708      	movs	r7, #8
 8006cde:	9303      	str	r3, [sp, #12]
 8006ce0:	2a6f      	cmp	r2, #111	; 0x6f
 8006ce2:	d000      	beq.n	8006ce6 <_printf_i+0xce>
 8006ce4:	3702      	adds	r7, #2
 8006ce6:	0023      	movs	r3, r4
 8006ce8:	2200      	movs	r2, #0
 8006cea:	3343      	adds	r3, #67	; 0x43
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	6863      	ldr	r3, [r4, #4]
 8006cf0:	60a3      	str	r3, [r4, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	db03      	blt.n	8006cfe <_printf_i+0xe6>
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	6821      	ldr	r1, [r4, #0]
 8006cfa:	4391      	bics	r1, r2
 8006cfc:	6021      	str	r1, [r4, #0]
 8006cfe:	2d00      	cmp	r5, #0
 8006d00:	d102      	bne.n	8006d08 <_printf_i+0xf0>
 8006d02:	9e04      	ldr	r6, [sp, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00c      	beq.n	8006d22 <_printf_i+0x10a>
 8006d08:	9e04      	ldr	r6, [sp, #16]
 8006d0a:	0028      	movs	r0, r5
 8006d0c:	0039      	movs	r1, r7
 8006d0e:	f7f9 fa9d 	bl	800024c <__aeabi_uidivmod>
 8006d12:	9b03      	ldr	r3, [sp, #12]
 8006d14:	3e01      	subs	r6, #1
 8006d16:	5c5b      	ldrb	r3, [r3, r1]
 8006d18:	7033      	strb	r3, [r6, #0]
 8006d1a:	002b      	movs	r3, r5
 8006d1c:	0005      	movs	r5, r0
 8006d1e:	429f      	cmp	r7, r3
 8006d20:	d9f3      	bls.n	8006d0a <_printf_i+0xf2>
 8006d22:	2f08      	cmp	r7, #8
 8006d24:	d109      	bne.n	8006d3a <_printf_i+0x122>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	07db      	lsls	r3, r3, #31
 8006d2a:	d506      	bpl.n	8006d3a <_printf_i+0x122>
 8006d2c:	6863      	ldr	r3, [r4, #4]
 8006d2e:	6922      	ldr	r2, [r4, #16]
 8006d30:	4293      	cmp	r3, r2
 8006d32:	dc02      	bgt.n	8006d3a <_printf_i+0x122>
 8006d34:	2330      	movs	r3, #48	; 0x30
 8006d36:	3e01      	subs	r6, #1
 8006d38:	7033      	strb	r3, [r6, #0]
 8006d3a:	9b04      	ldr	r3, [sp, #16]
 8006d3c:	1b9b      	subs	r3, r3, r6
 8006d3e:	6123      	str	r3, [r4, #16]
 8006d40:	9b07      	ldr	r3, [sp, #28]
 8006d42:	0021      	movs	r1, r4
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	9805      	ldr	r0, [sp, #20]
 8006d48:	9b06      	ldr	r3, [sp, #24]
 8006d4a:	aa09      	add	r2, sp, #36	; 0x24
 8006d4c:	f7ff fef4 	bl	8006b38 <_printf_common>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	d14c      	bne.n	8006dee <_printf_i+0x1d6>
 8006d54:	2001      	movs	r0, #1
 8006d56:	4240      	negs	r0, r0
 8006d58:	b00b      	add	sp, #44	; 0x2c
 8006d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d5c:	3145      	adds	r1, #69	; 0x45
 8006d5e:	700a      	strb	r2, [r1, #0]
 8006d60:	4a34      	ldr	r2, [pc, #208]	; (8006e34 <_printf_i+0x21c>)
 8006d62:	9203      	str	r2, [sp, #12]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	6821      	ldr	r1, [r4, #0]
 8006d68:	ca20      	ldmia	r2!, {r5}
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	0608      	lsls	r0, r1, #24
 8006d6e:	d516      	bpl.n	8006d9e <_printf_i+0x186>
 8006d70:	07cb      	lsls	r3, r1, #31
 8006d72:	d502      	bpl.n	8006d7a <_printf_i+0x162>
 8006d74:	2320      	movs	r3, #32
 8006d76:	4319      	orrs	r1, r3
 8006d78:	6021      	str	r1, [r4, #0]
 8006d7a:	2710      	movs	r7, #16
 8006d7c:	2d00      	cmp	r5, #0
 8006d7e:	d1b2      	bne.n	8006ce6 <_printf_i+0xce>
 8006d80:	2320      	movs	r3, #32
 8006d82:	6822      	ldr	r2, [r4, #0]
 8006d84:	439a      	bics	r2, r3
 8006d86:	6022      	str	r2, [r4, #0]
 8006d88:	e7ad      	b.n	8006ce6 <_printf_i+0xce>
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	6809      	ldr	r1, [r1, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	6022      	str	r2, [r4, #0]
 8006d92:	0022      	movs	r2, r4
 8006d94:	2178      	movs	r1, #120	; 0x78
 8006d96:	3245      	adds	r2, #69	; 0x45
 8006d98:	7011      	strb	r1, [r2, #0]
 8006d9a:	4a27      	ldr	r2, [pc, #156]	; (8006e38 <_printf_i+0x220>)
 8006d9c:	e7e1      	b.n	8006d62 <_printf_i+0x14a>
 8006d9e:	0648      	lsls	r0, r1, #25
 8006da0:	d5e6      	bpl.n	8006d70 <_printf_i+0x158>
 8006da2:	b2ad      	uxth	r5, r5
 8006da4:	e7e4      	b.n	8006d70 <_printf_i+0x158>
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	680d      	ldr	r5, [r1, #0]
 8006daa:	1d10      	adds	r0, r2, #4
 8006dac:	6949      	ldr	r1, [r1, #20]
 8006dae:	6018      	str	r0, [r3, #0]
 8006db0:	6813      	ldr	r3, [r2, #0]
 8006db2:	062e      	lsls	r6, r5, #24
 8006db4:	d501      	bpl.n	8006dba <_printf_i+0x1a2>
 8006db6:	6019      	str	r1, [r3, #0]
 8006db8:	e002      	b.n	8006dc0 <_printf_i+0x1a8>
 8006dba:	066d      	lsls	r5, r5, #25
 8006dbc:	d5fb      	bpl.n	8006db6 <_printf_i+0x19e>
 8006dbe:	8019      	strh	r1, [r3, #0]
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	9e04      	ldr	r6, [sp, #16]
 8006dc4:	6123      	str	r3, [r4, #16]
 8006dc6:	e7bb      	b.n	8006d40 <_printf_i+0x128>
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	1d11      	adds	r1, r2, #4
 8006dcc:	6019      	str	r1, [r3, #0]
 8006dce:	6816      	ldr	r6, [r2, #0]
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	0030      	movs	r0, r6
 8006dd4:	6862      	ldr	r2, [r4, #4]
 8006dd6:	f000 ff05 	bl	8007be4 <memchr>
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	d001      	beq.n	8006de2 <_printf_i+0x1ca>
 8006dde:	1b80      	subs	r0, r0, r6
 8006de0:	6060      	str	r0, [r4, #4]
 8006de2:	6863      	ldr	r3, [r4, #4]
 8006de4:	6123      	str	r3, [r4, #16]
 8006de6:	2300      	movs	r3, #0
 8006de8:	9a04      	ldr	r2, [sp, #16]
 8006dea:	7013      	strb	r3, [r2, #0]
 8006dec:	e7a8      	b.n	8006d40 <_printf_i+0x128>
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	0032      	movs	r2, r6
 8006df2:	9906      	ldr	r1, [sp, #24]
 8006df4:	9805      	ldr	r0, [sp, #20]
 8006df6:	9d07      	ldr	r5, [sp, #28]
 8006df8:	47a8      	blx	r5
 8006dfa:	1c43      	adds	r3, r0, #1
 8006dfc:	d0aa      	beq.n	8006d54 <_printf_i+0x13c>
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	079b      	lsls	r3, r3, #30
 8006e02:	d415      	bmi.n	8006e30 <_printf_i+0x218>
 8006e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e06:	68e0      	ldr	r0, [r4, #12]
 8006e08:	4298      	cmp	r0, r3
 8006e0a:	daa5      	bge.n	8006d58 <_printf_i+0x140>
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	e7a3      	b.n	8006d58 <_printf_i+0x140>
 8006e10:	0022      	movs	r2, r4
 8006e12:	2301      	movs	r3, #1
 8006e14:	9906      	ldr	r1, [sp, #24]
 8006e16:	9805      	ldr	r0, [sp, #20]
 8006e18:	9e07      	ldr	r6, [sp, #28]
 8006e1a:	3219      	adds	r2, #25
 8006e1c:	47b0      	blx	r6
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	d098      	beq.n	8006d54 <_printf_i+0x13c>
 8006e22:	3501      	adds	r5, #1
 8006e24:	68e3      	ldr	r3, [r4, #12]
 8006e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e28:	1a9b      	subs	r3, r3, r2
 8006e2a:	42ab      	cmp	r3, r5
 8006e2c:	dcf0      	bgt.n	8006e10 <_printf_i+0x1f8>
 8006e2e:	e7e9      	b.n	8006e04 <_printf_i+0x1ec>
 8006e30:	2500      	movs	r5, #0
 8006e32:	e7f7      	b.n	8006e24 <_printf_i+0x20c>
 8006e34:	0800964a 	.word	0x0800964a
 8006e38:	0800965b 	.word	0x0800965b

08006e3c <siprintf>:
 8006e3c:	b40e      	push	{r1, r2, r3}
 8006e3e:	b500      	push	{lr}
 8006e40:	490b      	ldr	r1, [pc, #44]	; (8006e70 <siprintf+0x34>)
 8006e42:	b09c      	sub	sp, #112	; 0x70
 8006e44:	ab1d      	add	r3, sp, #116	; 0x74
 8006e46:	9002      	str	r0, [sp, #8]
 8006e48:	9006      	str	r0, [sp, #24]
 8006e4a:	9107      	str	r1, [sp, #28]
 8006e4c:	9104      	str	r1, [sp, #16]
 8006e4e:	4809      	ldr	r0, [pc, #36]	; (8006e74 <siprintf+0x38>)
 8006e50:	4909      	ldr	r1, [pc, #36]	; (8006e78 <siprintf+0x3c>)
 8006e52:	cb04      	ldmia	r3!, {r2}
 8006e54:	9105      	str	r1, [sp, #20]
 8006e56:	6800      	ldr	r0, [r0, #0]
 8006e58:	a902      	add	r1, sp, #8
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	f001 fbe2 	bl	8008624 <_svfiprintf_r>
 8006e60:	2300      	movs	r3, #0
 8006e62:	9a02      	ldr	r2, [sp, #8]
 8006e64:	7013      	strb	r3, [r2, #0]
 8006e66:	b01c      	add	sp, #112	; 0x70
 8006e68:	bc08      	pop	{r3}
 8006e6a:	b003      	add	sp, #12
 8006e6c:	4718      	bx	r3
 8006e6e:	46c0      	nop			; (mov r8, r8)
 8006e70:	7fffffff 	.word	0x7fffffff
 8006e74:	2000000c 	.word	0x2000000c
 8006e78:	ffff0208 	.word	0xffff0208

08006e7c <quorem>:
 8006e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e7e:	0006      	movs	r6, r0
 8006e80:	690b      	ldr	r3, [r1, #16]
 8006e82:	6932      	ldr	r2, [r6, #16]
 8006e84:	b087      	sub	sp, #28
 8006e86:	2000      	movs	r0, #0
 8006e88:	9103      	str	r1, [sp, #12]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	db65      	blt.n	8006f5a <quorem+0xde>
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	009c      	lsls	r4, r3, #2
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	000b      	movs	r3, r1
 8006e96:	3314      	adds	r3, #20
 8006e98:	9305      	str	r3, [sp, #20]
 8006e9a:	191b      	adds	r3, r3, r4
 8006e9c:	9304      	str	r3, [sp, #16]
 8006e9e:	0033      	movs	r3, r6
 8006ea0:	3314      	adds	r3, #20
 8006ea2:	9302      	str	r3, [sp, #8]
 8006ea4:	191c      	adds	r4, r3, r4
 8006ea6:	9b04      	ldr	r3, [sp, #16]
 8006ea8:	6827      	ldr	r7, [r4, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	0038      	movs	r0, r7
 8006eae:	1c5d      	adds	r5, r3, #1
 8006eb0:	0029      	movs	r1, r5
 8006eb2:	9301      	str	r3, [sp, #4]
 8006eb4:	f7f9 f944 	bl	8000140 <__udivsi3>
 8006eb8:	9001      	str	r0, [sp, #4]
 8006eba:	42af      	cmp	r7, r5
 8006ebc:	d324      	bcc.n	8006f08 <quorem+0x8c>
 8006ebe:	2500      	movs	r5, #0
 8006ec0:	46ac      	mov	ip, r5
 8006ec2:	9802      	ldr	r0, [sp, #8]
 8006ec4:	9f05      	ldr	r7, [sp, #20]
 8006ec6:	cf08      	ldmia	r7!, {r3}
 8006ec8:	9a01      	ldr	r2, [sp, #4]
 8006eca:	b299      	uxth	r1, r3
 8006ecc:	4351      	muls	r1, r2
 8006ece:	0c1b      	lsrs	r3, r3, #16
 8006ed0:	4353      	muls	r3, r2
 8006ed2:	1949      	adds	r1, r1, r5
 8006ed4:	0c0a      	lsrs	r2, r1, #16
 8006ed6:	189b      	adds	r3, r3, r2
 8006ed8:	6802      	ldr	r2, [r0, #0]
 8006eda:	b289      	uxth	r1, r1
 8006edc:	b292      	uxth	r2, r2
 8006ede:	4462      	add	r2, ip
 8006ee0:	1a52      	subs	r2, r2, r1
 8006ee2:	6801      	ldr	r1, [r0, #0]
 8006ee4:	0c1d      	lsrs	r5, r3, #16
 8006ee6:	0c09      	lsrs	r1, r1, #16
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	1acb      	subs	r3, r1, r3
 8006eec:	1411      	asrs	r1, r2, #16
 8006eee:	185b      	adds	r3, r3, r1
 8006ef0:	1419      	asrs	r1, r3, #16
 8006ef2:	b292      	uxth	r2, r2
 8006ef4:	041b      	lsls	r3, r3, #16
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	9b04      	ldr	r3, [sp, #16]
 8006efa:	468c      	mov	ip, r1
 8006efc:	c004      	stmia	r0!, {r2}
 8006efe:	42bb      	cmp	r3, r7
 8006f00:	d2e1      	bcs.n	8006ec6 <quorem+0x4a>
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d030      	beq.n	8006f6a <quorem+0xee>
 8006f08:	0030      	movs	r0, r6
 8006f0a:	9903      	ldr	r1, [sp, #12]
 8006f0c:	f001 f902 	bl	8008114 <__mcmp>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	db21      	blt.n	8006f58 <quorem+0xdc>
 8006f14:	0030      	movs	r0, r6
 8006f16:	2400      	movs	r4, #0
 8006f18:	9b01      	ldr	r3, [sp, #4]
 8006f1a:	9903      	ldr	r1, [sp, #12]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	9301      	str	r3, [sp, #4]
 8006f20:	3014      	adds	r0, #20
 8006f22:	3114      	adds	r1, #20
 8006f24:	6803      	ldr	r3, [r0, #0]
 8006f26:	c920      	ldmia	r1!, {r5}
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	1914      	adds	r4, r2, r4
 8006f2c:	b2aa      	uxth	r2, r5
 8006f2e:	1aa2      	subs	r2, r4, r2
 8006f30:	0c1b      	lsrs	r3, r3, #16
 8006f32:	0c2d      	lsrs	r5, r5, #16
 8006f34:	1414      	asrs	r4, r2, #16
 8006f36:	1b5b      	subs	r3, r3, r5
 8006f38:	191b      	adds	r3, r3, r4
 8006f3a:	141c      	asrs	r4, r3, #16
 8006f3c:	b292      	uxth	r2, r2
 8006f3e:	041b      	lsls	r3, r3, #16
 8006f40:	4313      	orrs	r3, r2
 8006f42:	c008      	stmia	r0!, {r3}
 8006f44:	9b04      	ldr	r3, [sp, #16]
 8006f46:	428b      	cmp	r3, r1
 8006f48:	d2ec      	bcs.n	8006f24 <quorem+0xa8>
 8006f4a:	9b00      	ldr	r3, [sp, #0]
 8006f4c:	9a02      	ldr	r2, [sp, #8]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	18d3      	adds	r3, r2, r3
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	2a00      	cmp	r2, #0
 8006f56:	d015      	beq.n	8006f84 <quorem+0x108>
 8006f58:	9801      	ldr	r0, [sp, #4]
 8006f5a:	b007      	add	sp, #28
 8006f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d106      	bne.n	8006f72 <quorem+0xf6>
 8006f64:	9b00      	ldr	r3, [sp, #0]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	9b02      	ldr	r3, [sp, #8]
 8006f6c:	3c04      	subs	r4, #4
 8006f6e:	42a3      	cmp	r3, r4
 8006f70:	d3f5      	bcc.n	8006f5e <quorem+0xe2>
 8006f72:	9b00      	ldr	r3, [sp, #0]
 8006f74:	6133      	str	r3, [r6, #16]
 8006f76:	e7c7      	b.n	8006f08 <quorem+0x8c>
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	2a00      	cmp	r2, #0
 8006f7c:	d106      	bne.n	8006f8c <quorem+0x110>
 8006f7e:	9a00      	ldr	r2, [sp, #0]
 8006f80:	3a01      	subs	r2, #1
 8006f82:	9200      	str	r2, [sp, #0]
 8006f84:	9a02      	ldr	r2, [sp, #8]
 8006f86:	3b04      	subs	r3, #4
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d3f5      	bcc.n	8006f78 <quorem+0xfc>
 8006f8c:	9b00      	ldr	r3, [sp, #0]
 8006f8e:	6133      	str	r3, [r6, #16]
 8006f90:	e7e2      	b.n	8006f58 <quorem+0xdc>
	...

08006f94 <_dtoa_r>:
 8006f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f96:	b09d      	sub	sp, #116	; 0x74
 8006f98:	9202      	str	r2, [sp, #8]
 8006f9a:	9303      	str	r3, [sp, #12]
 8006f9c:	9b02      	ldr	r3, [sp, #8]
 8006f9e:	9c03      	ldr	r4, [sp, #12]
 8006fa0:	9308      	str	r3, [sp, #32]
 8006fa2:	9409      	str	r4, [sp, #36]	; 0x24
 8006fa4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006fa6:	0007      	movs	r7, r0
 8006fa8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8006faa:	2c00      	cmp	r4, #0
 8006fac:	d10e      	bne.n	8006fcc <_dtoa_r+0x38>
 8006fae:	2010      	movs	r0, #16
 8006fb0:	f000 fe0e 	bl	8007bd0 <malloc>
 8006fb4:	1e02      	subs	r2, r0, #0
 8006fb6:	6278      	str	r0, [r7, #36]	; 0x24
 8006fb8:	d104      	bne.n	8006fc4 <_dtoa_r+0x30>
 8006fba:	21ea      	movs	r1, #234	; 0xea
 8006fbc:	4bc7      	ldr	r3, [pc, #796]	; (80072dc <_dtoa_r+0x348>)
 8006fbe:	48c8      	ldr	r0, [pc, #800]	; (80072e0 <_dtoa_r+0x34c>)
 8006fc0:	f001 fc42 	bl	8008848 <__assert_func>
 8006fc4:	6044      	str	r4, [r0, #4]
 8006fc6:	6084      	str	r4, [r0, #8]
 8006fc8:	6004      	str	r4, [r0, #0]
 8006fca:	60c4      	str	r4, [r0, #12]
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	6819      	ldr	r1, [r3, #0]
 8006fd0:	2900      	cmp	r1, #0
 8006fd2:	d00a      	beq.n	8006fea <_dtoa_r+0x56>
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	4093      	lsls	r3, r2
 8006fda:	604a      	str	r2, [r1, #4]
 8006fdc:	608b      	str	r3, [r1, #8]
 8006fde:	0038      	movs	r0, r7
 8006fe0:	f000 fe58 	bl	8007c94 <_Bfree>
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	9b03      	ldr	r3, [sp, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	da20      	bge.n	8007032 <_dtoa_r+0x9e>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	602b      	str	r3, [r5, #0]
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	085b      	lsrs	r3, r3, #1
 8006ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8006ffc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006ffe:	4bb9      	ldr	r3, [pc, #740]	; (80072e4 <_dtoa_r+0x350>)
 8007000:	4ab8      	ldr	r2, [pc, #736]	; (80072e4 <_dtoa_r+0x350>)
 8007002:	402b      	ands	r3, r5
 8007004:	4293      	cmp	r3, r2
 8007006:	d117      	bne.n	8007038 <_dtoa_r+0xa4>
 8007008:	4bb7      	ldr	r3, [pc, #732]	; (80072e8 <_dtoa_r+0x354>)
 800700a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800700c:	0328      	lsls	r0, r5, #12
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	9b02      	ldr	r3, [sp, #8]
 8007012:	0b00      	lsrs	r0, r0, #12
 8007014:	4318      	orrs	r0, r3
 8007016:	d101      	bne.n	800701c <_dtoa_r+0x88>
 8007018:	f000 fdbf 	bl	8007b9a <_dtoa_r+0xc06>
 800701c:	48b3      	ldr	r0, [pc, #716]	; (80072ec <_dtoa_r+0x358>)
 800701e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007020:	9006      	str	r0, [sp, #24]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <_dtoa_r+0x98>
 8007026:	4bb2      	ldr	r3, [pc, #712]	; (80072f0 <_dtoa_r+0x35c>)
 8007028:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	9806      	ldr	r0, [sp, #24]
 800702e:	b01d      	add	sp, #116	; 0x74
 8007030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007032:	2300      	movs	r3, #0
 8007034:	602b      	str	r3, [r5, #0]
 8007036:	e7e1      	b.n	8006ffc <_dtoa_r+0x68>
 8007038:	9b08      	ldr	r3, [sp, #32]
 800703a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800703c:	9312      	str	r3, [sp, #72]	; 0x48
 800703e:	9413      	str	r4, [sp, #76]	; 0x4c
 8007040:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007042:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007044:	2200      	movs	r2, #0
 8007046:	2300      	movs	r3, #0
 8007048:	f7f9 fa00 	bl	800044c <__aeabi_dcmpeq>
 800704c:	1e04      	subs	r4, r0, #0
 800704e:	d009      	beq.n	8007064 <_dtoa_r+0xd0>
 8007050:	2301      	movs	r3, #1
 8007052:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	4ba7      	ldr	r3, [pc, #668]	; (80072f4 <_dtoa_r+0x360>)
 8007058:	9306      	str	r3, [sp, #24]
 800705a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800705c:	2b00      	cmp	r3, #0
 800705e:	d0e5      	beq.n	800702c <_dtoa_r+0x98>
 8007060:	4ba5      	ldr	r3, [pc, #660]	; (80072f8 <_dtoa_r+0x364>)
 8007062:	e7e1      	b.n	8007028 <_dtoa_r+0x94>
 8007064:	ab1a      	add	r3, sp, #104	; 0x68
 8007066:	9301      	str	r3, [sp, #4]
 8007068:	ab1b      	add	r3, sp, #108	; 0x6c
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	0038      	movs	r0, r7
 800706e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007072:	f001 f903 	bl	800827c <__d2b>
 8007076:	006e      	lsls	r6, r5, #1
 8007078:	9005      	str	r0, [sp, #20]
 800707a:	0d76      	lsrs	r6, r6, #21
 800707c:	d100      	bne.n	8007080 <_dtoa_r+0xec>
 800707e:	e07c      	b.n	800717a <_dtoa_r+0x1e6>
 8007080:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007082:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007084:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007086:	4a9d      	ldr	r2, [pc, #628]	; (80072fc <_dtoa_r+0x368>)
 8007088:	031b      	lsls	r3, r3, #12
 800708a:	0b1b      	lsrs	r3, r3, #12
 800708c:	431a      	orrs	r2, r3
 800708e:	0011      	movs	r1, r2
 8007090:	4b9b      	ldr	r3, [pc, #620]	; (8007300 <_dtoa_r+0x36c>)
 8007092:	9418      	str	r4, [sp, #96]	; 0x60
 8007094:	18f6      	adds	r6, r6, r3
 8007096:	2200      	movs	r2, #0
 8007098:	4b9a      	ldr	r3, [pc, #616]	; (8007304 <_dtoa_r+0x370>)
 800709a:	f7fa fe3b 	bl	8001d14 <__aeabi_dsub>
 800709e:	4a9a      	ldr	r2, [pc, #616]	; (8007308 <_dtoa_r+0x374>)
 80070a0:	4b9a      	ldr	r3, [pc, #616]	; (800730c <_dtoa_r+0x378>)
 80070a2:	f7fa fbcb 	bl	800183c <__aeabi_dmul>
 80070a6:	4a9a      	ldr	r2, [pc, #616]	; (8007310 <_dtoa_r+0x37c>)
 80070a8:	4b9a      	ldr	r3, [pc, #616]	; (8007314 <_dtoa_r+0x380>)
 80070aa:	f7f9 fc89 	bl	80009c0 <__aeabi_dadd>
 80070ae:	0004      	movs	r4, r0
 80070b0:	0030      	movs	r0, r6
 80070b2:	000d      	movs	r5, r1
 80070b4:	f7fb fa14 	bl	80024e0 <__aeabi_i2d>
 80070b8:	4a97      	ldr	r2, [pc, #604]	; (8007318 <_dtoa_r+0x384>)
 80070ba:	4b98      	ldr	r3, [pc, #608]	; (800731c <_dtoa_r+0x388>)
 80070bc:	f7fa fbbe 	bl	800183c <__aeabi_dmul>
 80070c0:	0002      	movs	r2, r0
 80070c2:	000b      	movs	r3, r1
 80070c4:	0020      	movs	r0, r4
 80070c6:	0029      	movs	r1, r5
 80070c8:	f7f9 fc7a 	bl	80009c0 <__aeabi_dadd>
 80070cc:	0004      	movs	r4, r0
 80070ce:	000d      	movs	r5, r1
 80070d0:	f7fb f9d0 	bl	8002474 <__aeabi_d2iz>
 80070d4:	2200      	movs	r2, #0
 80070d6:	9002      	str	r0, [sp, #8]
 80070d8:	2300      	movs	r3, #0
 80070da:	0020      	movs	r0, r4
 80070dc:	0029      	movs	r1, r5
 80070de:	f7f9 f9bb 	bl	8000458 <__aeabi_dcmplt>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d00b      	beq.n	80070fe <_dtoa_r+0x16a>
 80070e6:	9802      	ldr	r0, [sp, #8]
 80070e8:	f7fb f9fa 	bl	80024e0 <__aeabi_i2d>
 80070ec:	002b      	movs	r3, r5
 80070ee:	0022      	movs	r2, r4
 80070f0:	f7f9 f9ac 	bl	800044c <__aeabi_dcmpeq>
 80070f4:	4243      	negs	r3, r0
 80070f6:	4158      	adcs	r0, r3
 80070f8:	9b02      	ldr	r3, [sp, #8]
 80070fa:	1a1b      	subs	r3, r3, r0
 80070fc:	9302      	str	r3, [sp, #8]
 80070fe:	2301      	movs	r3, #1
 8007100:	9316      	str	r3, [sp, #88]	; 0x58
 8007102:	9b02      	ldr	r3, [sp, #8]
 8007104:	2b16      	cmp	r3, #22
 8007106:	d80f      	bhi.n	8007128 <_dtoa_r+0x194>
 8007108:	9812      	ldr	r0, [sp, #72]	; 0x48
 800710a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800710c:	00da      	lsls	r2, r3, #3
 800710e:	4b84      	ldr	r3, [pc, #528]	; (8007320 <_dtoa_r+0x38c>)
 8007110:	189b      	adds	r3, r3, r2
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f7f9 f99f 	bl	8000458 <__aeabi_dcmplt>
 800711a:	2800      	cmp	r0, #0
 800711c:	d049      	beq.n	80071b2 <_dtoa_r+0x21e>
 800711e:	9b02      	ldr	r3, [sp, #8]
 8007120:	3b01      	subs	r3, #1
 8007122:	9302      	str	r3, [sp, #8]
 8007124:	2300      	movs	r3, #0
 8007126:	9316      	str	r3, [sp, #88]	; 0x58
 8007128:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800712a:	1b9e      	subs	r6, r3, r6
 800712c:	2300      	movs	r3, #0
 800712e:	930a      	str	r3, [sp, #40]	; 0x28
 8007130:	0033      	movs	r3, r6
 8007132:	3b01      	subs	r3, #1
 8007134:	930d      	str	r3, [sp, #52]	; 0x34
 8007136:	d504      	bpl.n	8007142 <_dtoa_r+0x1ae>
 8007138:	2301      	movs	r3, #1
 800713a:	1b9b      	subs	r3, r3, r6
 800713c:	930a      	str	r3, [sp, #40]	; 0x28
 800713e:	2300      	movs	r3, #0
 8007140:	930d      	str	r3, [sp, #52]	; 0x34
 8007142:	9b02      	ldr	r3, [sp, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	db36      	blt.n	80071b6 <_dtoa_r+0x222>
 8007148:	9a02      	ldr	r2, [sp, #8]
 800714a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800714c:	4694      	mov	ip, r2
 800714e:	4463      	add	r3, ip
 8007150:	930d      	str	r3, [sp, #52]	; 0x34
 8007152:	2300      	movs	r3, #0
 8007154:	9215      	str	r2, [sp, #84]	; 0x54
 8007156:	930e      	str	r3, [sp, #56]	; 0x38
 8007158:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800715a:	2401      	movs	r4, #1
 800715c:	2b09      	cmp	r3, #9
 800715e:	d864      	bhi.n	800722a <_dtoa_r+0x296>
 8007160:	2b05      	cmp	r3, #5
 8007162:	dd02      	ble.n	800716a <_dtoa_r+0x1d6>
 8007164:	2400      	movs	r4, #0
 8007166:	3b04      	subs	r3, #4
 8007168:	9322      	str	r3, [sp, #136]	; 0x88
 800716a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800716c:	1e98      	subs	r0, r3, #2
 800716e:	2803      	cmp	r0, #3
 8007170:	d864      	bhi.n	800723c <_dtoa_r+0x2a8>
 8007172:	f7f8 ffd1 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007176:	3829      	.short	0x3829
 8007178:	5836      	.short	0x5836
 800717a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800717c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800717e:	189e      	adds	r6, r3, r2
 8007180:	4b68      	ldr	r3, [pc, #416]	; (8007324 <_dtoa_r+0x390>)
 8007182:	18f2      	adds	r2, r6, r3
 8007184:	2a20      	cmp	r2, #32
 8007186:	dd0f      	ble.n	80071a8 <_dtoa_r+0x214>
 8007188:	2340      	movs	r3, #64	; 0x40
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	409d      	lsls	r5, r3
 800718e:	4b66      	ldr	r3, [pc, #408]	; (8007328 <_dtoa_r+0x394>)
 8007190:	9802      	ldr	r0, [sp, #8]
 8007192:	18f3      	adds	r3, r6, r3
 8007194:	40d8      	lsrs	r0, r3
 8007196:	4328      	orrs	r0, r5
 8007198:	f7fb f9d2 	bl	8002540 <__aeabi_ui2d>
 800719c:	2301      	movs	r3, #1
 800719e:	4c63      	ldr	r4, [pc, #396]	; (800732c <_dtoa_r+0x398>)
 80071a0:	3e01      	subs	r6, #1
 80071a2:	1909      	adds	r1, r1, r4
 80071a4:	9318      	str	r3, [sp, #96]	; 0x60
 80071a6:	e776      	b.n	8007096 <_dtoa_r+0x102>
 80071a8:	2320      	movs	r3, #32
 80071aa:	9802      	ldr	r0, [sp, #8]
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	4098      	lsls	r0, r3
 80071b0:	e7f2      	b.n	8007198 <_dtoa_r+0x204>
 80071b2:	9016      	str	r0, [sp, #88]	; 0x58
 80071b4:	e7b8      	b.n	8007128 <_dtoa_r+0x194>
 80071b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071b8:	9a02      	ldr	r2, [sp, #8]
 80071ba:	1a9b      	subs	r3, r3, r2
 80071bc:	930a      	str	r3, [sp, #40]	; 0x28
 80071be:	4253      	negs	r3, r2
 80071c0:	930e      	str	r3, [sp, #56]	; 0x38
 80071c2:	2300      	movs	r3, #0
 80071c4:	9315      	str	r3, [sp, #84]	; 0x54
 80071c6:	e7c7      	b.n	8007158 <_dtoa_r+0x1c4>
 80071c8:	2300      	movs	r3, #0
 80071ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80071cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071ce:	930c      	str	r3, [sp, #48]	; 0x30
 80071d0:	9307      	str	r3, [sp, #28]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	dc13      	bgt.n	80071fe <_dtoa_r+0x26a>
 80071d6:	2301      	movs	r3, #1
 80071d8:	001a      	movs	r2, r3
 80071da:	930c      	str	r3, [sp, #48]	; 0x30
 80071dc:	9307      	str	r3, [sp, #28]
 80071de:	9223      	str	r2, [sp, #140]	; 0x8c
 80071e0:	e00d      	b.n	80071fe <_dtoa_r+0x26a>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e7f1      	b.n	80071ca <_dtoa_r+0x236>
 80071e6:	2300      	movs	r3, #0
 80071e8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80071ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80071ec:	4694      	mov	ip, r2
 80071ee:	9b02      	ldr	r3, [sp, #8]
 80071f0:	4463      	add	r3, ip
 80071f2:	930c      	str	r3, [sp, #48]	; 0x30
 80071f4:	3301      	adds	r3, #1
 80071f6:	9307      	str	r3, [sp, #28]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	dc00      	bgt.n	80071fe <_dtoa_r+0x26a>
 80071fc:	2301      	movs	r3, #1
 80071fe:	2200      	movs	r2, #0
 8007200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007202:	6042      	str	r2, [r0, #4]
 8007204:	3204      	adds	r2, #4
 8007206:	0015      	movs	r5, r2
 8007208:	3514      	adds	r5, #20
 800720a:	6841      	ldr	r1, [r0, #4]
 800720c:	429d      	cmp	r5, r3
 800720e:	d919      	bls.n	8007244 <_dtoa_r+0x2b0>
 8007210:	0038      	movs	r0, r7
 8007212:	f000 fcfb 	bl	8007c0c <_Balloc>
 8007216:	9006      	str	r0, [sp, #24]
 8007218:	2800      	cmp	r0, #0
 800721a:	d117      	bne.n	800724c <_dtoa_r+0x2b8>
 800721c:	21d5      	movs	r1, #213	; 0xd5
 800721e:	0002      	movs	r2, r0
 8007220:	4b43      	ldr	r3, [pc, #268]	; (8007330 <_dtoa_r+0x39c>)
 8007222:	0049      	lsls	r1, r1, #1
 8007224:	e6cb      	b.n	8006fbe <_dtoa_r+0x2a>
 8007226:	2301      	movs	r3, #1
 8007228:	e7de      	b.n	80071e8 <_dtoa_r+0x254>
 800722a:	2300      	movs	r3, #0
 800722c:	940f      	str	r4, [sp, #60]	; 0x3c
 800722e:	9322      	str	r3, [sp, #136]	; 0x88
 8007230:	3b01      	subs	r3, #1
 8007232:	930c      	str	r3, [sp, #48]	; 0x30
 8007234:	9307      	str	r3, [sp, #28]
 8007236:	2200      	movs	r2, #0
 8007238:	3313      	adds	r3, #19
 800723a:	e7d0      	b.n	80071de <_dtoa_r+0x24a>
 800723c:	2301      	movs	r3, #1
 800723e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007240:	3b02      	subs	r3, #2
 8007242:	e7f6      	b.n	8007232 <_dtoa_r+0x29e>
 8007244:	3101      	adds	r1, #1
 8007246:	6041      	str	r1, [r0, #4]
 8007248:	0052      	lsls	r2, r2, #1
 800724a:	e7dc      	b.n	8007206 <_dtoa_r+0x272>
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	9a06      	ldr	r2, [sp, #24]
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	9b07      	ldr	r3, [sp, #28]
 8007254:	2b0e      	cmp	r3, #14
 8007256:	d900      	bls.n	800725a <_dtoa_r+0x2c6>
 8007258:	e0eb      	b.n	8007432 <_dtoa_r+0x49e>
 800725a:	2c00      	cmp	r4, #0
 800725c:	d100      	bne.n	8007260 <_dtoa_r+0x2cc>
 800725e:	e0e8      	b.n	8007432 <_dtoa_r+0x49e>
 8007260:	9b02      	ldr	r3, [sp, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	dd68      	ble.n	8007338 <_dtoa_r+0x3a4>
 8007266:	001a      	movs	r2, r3
 8007268:	210f      	movs	r1, #15
 800726a:	4b2d      	ldr	r3, [pc, #180]	; (8007320 <_dtoa_r+0x38c>)
 800726c:	400a      	ands	r2, r1
 800726e:	00d2      	lsls	r2, r2, #3
 8007270:	189b      	adds	r3, r3, r2
 8007272:	681d      	ldr	r5, [r3, #0]
 8007274:	685e      	ldr	r6, [r3, #4]
 8007276:	9b02      	ldr	r3, [sp, #8]
 8007278:	111c      	asrs	r4, r3, #4
 800727a:	2302      	movs	r3, #2
 800727c:	9310      	str	r3, [sp, #64]	; 0x40
 800727e:	9b02      	ldr	r3, [sp, #8]
 8007280:	05db      	lsls	r3, r3, #23
 8007282:	d50b      	bpl.n	800729c <_dtoa_r+0x308>
 8007284:	4b2b      	ldr	r3, [pc, #172]	; (8007334 <_dtoa_r+0x3a0>)
 8007286:	400c      	ands	r4, r1
 8007288:	6a1a      	ldr	r2, [r3, #32]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800728e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007290:	f7f9 fed2 	bl	8001038 <__aeabi_ddiv>
 8007294:	2303      	movs	r3, #3
 8007296:	9008      	str	r0, [sp, #32]
 8007298:	9109      	str	r1, [sp, #36]	; 0x24
 800729a:	9310      	str	r3, [sp, #64]	; 0x40
 800729c:	4b25      	ldr	r3, [pc, #148]	; (8007334 <_dtoa_r+0x3a0>)
 800729e:	9314      	str	r3, [sp, #80]	; 0x50
 80072a0:	2c00      	cmp	r4, #0
 80072a2:	d108      	bne.n	80072b6 <_dtoa_r+0x322>
 80072a4:	9808      	ldr	r0, [sp, #32]
 80072a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072a8:	002a      	movs	r2, r5
 80072aa:	0033      	movs	r3, r6
 80072ac:	f7f9 fec4 	bl	8001038 <__aeabi_ddiv>
 80072b0:	9008      	str	r0, [sp, #32]
 80072b2:	9109      	str	r1, [sp, #36]	; 0x24
 80072b4:	e05c      	b.n	8007370 <_dtoa_r+0x3dc>
 80072b6:	2301      	movs	r3, #1
 80072b8:	421c      	tst	r4, r3
 80072ba:	d00b      	beq.n	80072d4 <_dtoa_r+0x340>
 80072bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072be:	0028      	movs	r0, r5
 80072c0:	3301      	adds	r3, #1
 80072c2:	9310      	str	r3, [sp, #64]	; 0x40
 80072c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072c6:	0031      	movs	r1, r6
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f7fa fab6 	bl	800183c <__aeabi_dmul>
 80072d0:	0005      	movs	r5, r0
 80072d2:	000e      	movs	r6, r1
 80072d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072d6:	1064      	asrs	r4, r4, #1
 80072d8:	3308      	adds	r3, #8
 80072da:	e7e0      	b.n	800729e <_dtoa_r+0x30a>
 80072dc:	08009679 	.word	0x08009679
 80072e0:	08009690 	.word	0x08009690
 80072e4:	7ff00000 	.word	0x7ff00000
 80072e8:	0000270f 	.word	0x0000270f
 80072ec:	08009675 	.word	0x08009675
 80072f0:	08009678 	.word	0x08009678
 80072f4:	08009648 	.word	0x08009648
 80072f8:	08009649 	.word	0x08009649
 80072fc:	3ff00000 	.word	0x3ff00000
 8007300:	fffffc01 	.word	0xfffffc01
 8007304:	3ff80000 	.word	0x3ff80000
 8007308:	636f4361 	.word	0x636f4361
 800730c:	3fd287a7 	.word	0x3fd287a7
 8007310:	8b60c8b3 	.word	0x8b60c8b3
 8007314:	3fc68a28 	.word	0x3fc68a28
 8007318:	509f79fb 	.word	0x509f79fb
 800731c:	3fd34413 	.word	0x3fd34413
 8007320:	08009780 	.word	0x08009780
 8007324:	00000432 	.word	0x00000432
 8007328:	00000412 	.word	0x00000412
 800732c:	fe100000 	.word	0xfe100000
 8007330:	080096eb 	.word	0x080096eb
 8007334:	08009758 	.word	0x08009758
 8007338:	2302      	movs	r3, #2
 800733a:	9310      	str	r3, [sp, #64]	; 0x40
 800733c:	9b02      	ldr	r3, [sp, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d016      	beq.n	8007370 <_dtoa_r+0x3dc>
 8007342:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007344:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007346:	425c      	negs	r4, r3
 8007348:	230f      	movs	r3, #15
 800734a:	4ab6      	ldr	r2, [pc, #728]	; (8007624 <_dtoa_r+0x690>)
 800734c:	4023      	ands	r3, r4
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	18d3      	adds	r3, r2, r3
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f7fa fa71 	bl	800183c <__aeabi_dmul>
 800735a:	2601      	movs	r6, #1
 800735c:	2300      	movs	r3, #0
 800735e:	9008      	str	r0, [sp, #32]
 8007360:	9109      	str	r1, [sp, #36]	; 0x24
 8007362:	4db1      	ldr	r5, [pc, #708]	; (8007628 <_dtoa_r+0x694>)
 8007364:	1124      	asrs	r4, r4, #4
 8007366:	2c00      	cmp	r4, #0
 8007368:	d000      	beq.n	800736c <_dtoa_r+0x3d8>
 800736a:	e094      	b.n	8007496 <_dtoa_r+0x502>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d19f      	bne.n	80072b0 <_dtoa_r+0x31c>
 8007370:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007372:	2b00      	cmp	r3, #0
 8007374:	d100      	bne.n	8007378 <_dtoa_r+0x3e4>
 8007376:	e09b      	b.n	80074b0 <_dtoa_r+0x51c>
 8007378:	9c08      	ldr	r4, [sp, #32]
 800737a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800737c:	2200      	movs	r2, #0
 800737e:	0020      	movs	r0, r4
 8007380:	0029      	movs	r1, r5
 8007382:	4baa      	ldr	r3, [pc, #680]	; (800762c <_dtoa_r+0x698>)
 8007384:	f7f9 f868 	bl	8000458 <__aeabi_dcmplt>
 8007388:	2800      	cmp	r0, #0
 800738a:	d100      	bne.n	800738e <_dtoa_r+0x3fa>
 800738c:	e090      	b.n	80074b0 <_dtoa_r+0x51c>
 800738e:	9b07      	ldr	r3, [sp, #28]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d100      	bne.n	8007396 <_dtoa_r+0x402>
 8007394:	e08c      	b.n	80074b0 <_dtoa_r+0x51c>
 8007396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007398:	2b00      	cmp	r3, #0
 800739a:	dd46      	ble.n	800742a <_dtoa_r+0x496>
 800739c:	9b02      	ldr	r3, [sp, #8]
 800739e:	2200      	movs	r2, #0
 80073a0:	0020      	movs	r0, r4
 80073a2:	0029      	movs	r1, r5
 80073a4:	1e5e      	subs	r6, r3, #1
 80073a6:	4ba2      	ldr	r3, [pc, #648]	; (8007630 <_dtoa_r+0x69c>)
 80073a8:	f7fa fa48 	bl	800183c <__aeabi_dmul>
 80073ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073ae:	9008      	str	r0, [sp, #32]
 80073b0:	9109      	str	r1, [sp, #36]	; 0x24
 80073b2:	3301      	adds	r3, #1
 80073b4:	9310      	str	r3, [sp, #64]	; 0x40
 80073b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80073ba:	9c08      	ldr	r4, [sp, #32]
 80073bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80073be:	9314      	str	r3, [sp, #80]	; 0x50
 80073c0:	f7fb f88e 	bl	80024e0 <__aeabi_i2d>
 80073c4:	0022      	movs	r2, r4
 80073c6:	002b      	movs	r3, r5
 80073c8:	f7fa fa38 	bl	800183c <__aeabi_dmul>
 80073cc:	2200      	movs	r2, #0
 80073ce:	4b99      	ldr	r3, [pc, #612]	; (8007634 <_dtoa_r+0x6a0>)
 80073d0:	f7f9 faf6 	bl	80009c0 <__aeabi_dadd>
 80073d4:	9010      	str	r0, [sp, #64]	; 0x40
 80073d6:	9111      	str	r1, [sp, #68]	; 0x44
 80073d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80073da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073dc:	9208      	str	r2, [sp, #32]
 80073de:	9309      	str	r3, [sp, #36]	; 0x24
 80073e0:	4a95      	ldr	r2, [pc, #596]	; (8007638 <_dtoa_r+0x6a4>)
 80073e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073e4:	4694      	mov	ip, r2
 80073e6:	4463      	add	r3, ip
 80073e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80073ea:	9309      	str	r3, [sp, #36]	; 0x24
 80073ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d161      	bne.n	80074b6 <_dtoa_r+0x522>
 80073f2:	2200      	movs	r2, #0
 80073f4:	0020      	movs	r0, r4
 80073f6:	0029      	movs	r1, r5
 80073f8:	4b90      	ldr	r3, [pc, #576]	; (800763c <_dtoa_r+0x6a8>)
 80073fa:	f7fa fc8b 	bl	8001d14 <__aeabi_dsub>
 80073fe:	9a08      	ldr	r2, [sp, #32]
 8007400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007402:	0004      	movs	r4, r0
 8007404:	000d      	movs	r5, r1
 8007406:	f7f9 f83b 	bl	8000480 <__aeabi_dcmpgt>
 800740a:	2800      	cmp	r0, #0
 800740c:	d000      	beq.n	8007410 <_dtoa_r+0x47c>
 800740e:	e2af      	b.n	8007970 <_dtoa_r+0x9dc>
 8007410:	488b      	ldr	r0, [pc, #556]	; (8007640 <_dtoa_r+0x6ac>)
 8007412:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007414:	4684      	mov	ip, r0
 8007416:	4461      	add	r1, ip
 8007418:	000b      	movs	r3, r1
 800741a:	0020      	movs	r0, r4
 800741c:	0029      	movs	r1, r5
 800741e:	9a08      	ldr	r2, [sp, #32]
 8007420:	f7f9 f81a 	bl	8000458 <__aeabi_dcmplt>
 8007424:	2800      	cmp	r0, #0
 8007426:	d000      	beq.n	800742a <_dtoa_r+0x496>
 8007428:	e29f      	b.n	800796a <_dtoa_r+0x9d6>
 800742a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800742c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800742e:	9308      	str	r3, [sp, #32]
 8007430:	9409      	str	r4, [sp, #36]	; 0x24
 8007432:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007434:	2b00      	cmp	r3, #0
 8007436:	da00      	bge.n	800743a <_dtoa_r+0x4a6>
 8007438:	e172      	b.n	8007720 <_dtoa_r+0x78c>
 800743a:	9a02      	ldr	r2, [sp, #8]
 800743c:	2a0e      	cmp	r2, #14
 800743e:	dd00      	ble.n	8007442 <_dtoa_r+0x4ae>
 8007440:	e16e      	b.n	8007720 <_dtoa_r+0x78c>
 8007442:	4b78      	ldr	r3, [pc, #480]	; (8007624 <_dtoa_r+0x690>)
 8007444:	00d2      	lsls	r2, r2, #3
 8007446:	189b      	adds	r3, r3, r2
 8007448:	685c      	ldr	r4, [r3, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	930a      	str	r3, [sp, #40]	; 0x28
 800744e:	940b      	str	r4, [sp, #44]	; 0x2c
 8007450:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007452:	2b00      	cmp	r3, #0
 8007454:	db00      	blt.n	8007458 <_dtoa_r+0x4c4>
 8007456:	e0f7      	b.n	8007648 <_dtoa_r+0x6b4>
 8007458:	9b07      	ldr	r3, [sp, #28]
 800745a:	2b00      	cmp	r3, #0
 800745c:	dd00      	ble.n	8007460 <_dtoa_r+0x4cc>
 800745e:	e0f3      	b.n	8007648 <_dtoa_r+0x6b4>
 8007460:	d000      	beq.n	8007464 <_dtoa_r+0x4d0>
 8007462:	e282      	b.n	800796a <_dtoa_r+0x9d6>
 8007464:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007466:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007468:	2200      	movs	r2, #0
 800746a:	4b74      	ldr	r3, [pc, #464]	; (800763c <_dtoa_r+0x6a8>)
 800746c:	f7fa f9e6 	bl	800183c <__aeabi_dmul>
 8007470:	9a08      	ldr	r2, [sp, #32]
 8007472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007474:	f7f9 f80e 	bl	8000494 <__aeabi_dcmpge>
 8007478:	9e07      	ldr	r6, [sp, #28]
 800747a:	0035      	movs	r5, r6
 800747c:	2800      	cmp	r0, #0
 800747e:	d000      	beq.n	8007482 <_dtoa_r+0x4ee>
 8007480:	e259      	b.n	8007936 <_dtoa_r+0x9a2>
 8007482:	9b06      	ldr	r3, [sp, #24]
 8007484:	9a06      	ldr	r2, [sp, #24]
 8007486:	3301      	adds	r3, #1
 8007488:	9308      	str	r3, [sp, #32]
 800748a:	2331      	movs	r3, #49	; 0x31
 800748c:	7013      	strb	r3, [r2, #0]
 800748e:	9b02      	ldr	r3, [sp, #8]
 8007490:	3301      	adds	r3, #1
 8007492:	9302      	str	r3, [sp, #8]
 8007494:	e254      	b.n	8007940 <_dtoa_r+0x9ac>
 8007496:	4234      	tst	r4, r6
 8007498:	d007      	beq.n	80074aa <_dtoa_r+0x516>
 800749a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800749c:	3301      	adds	r3, #1
 800749e:	9310      	str	r3, [sp, #64]	; 0x40
 80074a0:	682a      	ldr	r2, [r5, #0]
 80074a2:	686b      	ldr	r3, [r5, #4]
 80074a4:	f7fa f9ca 	bl	800183c <__aeabi_dmul>
 80074a8:	0033      	movs	r3, r6
 80074aa:	1064      	asrs	r4, r4, #1
 80074ac:	3508      	adds	r5, #8
 80074ae:	e75a      	b.n	8007366 <_dtoa_r+0x3d2>
 80074b0:	9e02      	ldr	r6, [sp, #8]
 80074b2:	9b07      	ldr	r3, [sp, #28]
 80074b4:	e780      	b.n	80073b8 <_dtoa_r+0x424>
 80074b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80074ba:	1e5a      	subs	r2, r3, #1
 80074bc:	4b59      	ldr	r3, [pc, #356]	; (8007624 <_dtoa_r+0x690>)
 80074be:	00d2      	lsls	r2, r2, #3
 80074c0:	189b      	adds	r3, r3, r2
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2900      	cmp	r1, #0
 80074c8:	d051      	beq.n	800756e <_dtoa_r+0x5da>
 80074ca:	2000      	movs	r0, #0
 80074cc:	495d      	ldr	r1, [pc, #372]	; (8007644 <_dtoa_r+0x6b0>)
 80074ce:	f7f9 fdb3 	bl	8001038 <__aeabi_ddiv>
 80074d2:	9a08      	ldr	r2, [sp, #32]
 80074d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d6:	f7fa fc1d 	bl	8001d14 <__aeabi_dsub>
 80074da:	9a06      	ldr	r2, [sp, #24]
 80074dc:	9b06      	ldr	r3, [sp, #24]
 80074de:	4694      	mov	ip, r2
 80074e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80074e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074e4:	9010      	str	r0, [sp, #64]	; 0x40
 80074e6:	9111      	str	r1, [sp, #68]	; 0x44
 80074e8:	4463      	add	r3, ip
 80074ea:	9319      	str	r3, [sp, #100]	; 0x64
 80074ec:	0029      	movs	r1, r5
 80074ee:	0020      	movs	r0, r4
 80074f0:	f7fa ffc0 	bl	8002474 <__aeabi_d2iz>
 80074f4:	9014      	str	r0, [sp, #80]	; 0x50
 80074f6:	f7fa fff3 	bl	80024e0 <__aeabi_i2d>
 80074fa:	0002      	movs	r2, r0
 80074fc:	000b      	movs	r3, r1
 80074fe:	0020      	movs	r0, r4
 8007500:	0029      	movs	r1, r5
 8007502:	f7fa fc07 	bl	8001d14 <__aeabi_dsub>
 8007506:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007508:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800750a:	3301      	adds	r3, #1
 800750c:	9308      	str	r3, [sp, #32]
 800750e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007510:	0004      	movs	r4, r0
 8007512:	3330      	adds	r3, #48	; 0x30
 8007514:	7013      	strb	r3, [r2, #0]
 8007516:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007518:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800751a:	000d      	movs	r5, r1
 800751c:	f7f8 ff9c 	bl	8000458 <__aeabi_dcmplt>
 8007520:	2800      	cmp	r0, #0
 8007522:	d175      	bne.n	8007610 <_dtoa_r+0x67c>
 8007524:	0022      	movs	r2, r4
 8007526:	002b      	movs	r3, r5
 8007528:	2000      	movs	r0, #0
 800752a:	4940      	ldr	r1, [pc, #256]	; (800762c <_dtoa_r+0x698>)
 800752c:	f7fa fbf2 	bl	8001d14 <__aeabi_dsub>
 8007530:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007532:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007534:	f7f8 ff90 	bl	8000458 <__aeabi_dcmplt>
 8007538:	2800      	cmp	r0, #0
 800753a:	d000      	beq.n	800753e <_dtoa_r+0x5aa>
 800753c:	e0d2      	b.n	80076e4 <_dtoa_r+0x750>
 800753e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007540:	9a08      	ldr	r2, [sp, #32]
 8007542:	4293      	cmp	r3, r2
 8007544:	d100      	bne.n	8007548 <_dtoa_r+0x5b4>
 8007546:	e770      	b.n	800742a <_dtoa_r+0x496>
 8007548:	9810      	ldr	r0, [sp, #64]	; 0x40
 800754a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800754c:	2200      	movs	r2, #0
 800754e:	4b38      	ldr	r3, [pc, #224]	; (8007630 <_dtoa_r+0x69c>)
 8007550:	f7fa f974 	bl	800183c <__aeabi_dmul>
 8007554:	4b36      	ldr	r3, [pc, #216]	; (8007630 <_dtoa_r+0x69c>)
 8007556:	9010      	str	r0, [sp, #64]	; 0x40
 8007558:	9111      	str	r1, [sp, #68]	; 0x44
 800755a:	2200      	movs	r2, #0
 800755c:	0020      	movs	r0, r4
 800755e:	0029      	movs	r1, r5
 8007560:	f7fa f96c 	bl	800183c <__aeabi_dmul>
 8007564:	9b08      	ldr	r3, [sp, #32]
 8007566:	0004      	movs	r4, r0
 8007568:	000d      	movs	r5, r1
 800756a:	9317      	str	r3, [sp, #92]	; 0x5c
 800756c:	e7be      	b.n	80074ec <_dtoa_r+0x558>
 800756e:	9808      	ldr	r0, [sp, #32]
 8007570:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007572:	f7fa f963 	bl	800183c <__aeabi_dmul>
 8007576:	9a06      	ldr	r2, [sp, #24]
 8007578:	9b06      	ldr	r3, [sp, #24]
 800757a:	4694      	mov	ip, r2
 800757c:	9308      	str	r3, [sp, #32]
 800757e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007580:	9010      	str	r0, [sp, #64]	; 0x40
 8007582:	9111      	str	r1, [sp, #68]	; 0x44
 8007584:	4463      	add	r3, ip
 8007586:	9319      	str	r3, [sp, #100]	; 0x64
 8007588:	0029      	movs	r1, r5
 800758a:	0020      	movs	r0, r4
 800758c:	f7fa ff72 	bl	8002474 <__aeabi_d2iz>
 8007590:	9017      	str	r0, [sp, #92]	; 0x5c
 8007592:	f7fa ffa5 	bl	80024e0 <__aeabi_i2d>
 8007596:	0002      	movs	r2, r0
 8007598:	000b      	movs	r3, r1
 800759a:	0020      	movs	r0, r4
 800759c:	0029      	movs	r1, r5
 800759e:	f7fa fbb9 	bl	8001d14 <__aeabi_dsub>
 80075a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075a4:	9a08      	ldr	r2, [sp, #32]
 80075a6:	3330      	adds	r3, #48	; 0x30
 80075a8:	7013      	strb	r3, [r2, #0]
 80075aa:	0013      	movs	r3, r2
 80075ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075ae:	3301      	adds	r3, #1
 80075b0:	0004      	movs	r4, r0
 80075b2:	000d      	movs	r5, r1
 80075b4:	9308      	str	r3, [sp, #32]
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d12c      	bne.n	8007614 <_dtoa_r+0x680>
 80075ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80075bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80075be:	9a06      	ldr	r2, [sp, #24]
 80075c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075c2:	4694      	mov	ip, r2
 80075c4:	4463      	add	r3, ip
 80075c6:	2200      	movs	r2, #0
 80075c8:	9308      	str	r3, [sp, #32]
 80075ca:	4b1e      	ldr	r3, [pc, #120]	; (8007644 <_dtoa_r+0x6b0>)
 80075cc:	f7f9 f9f8 	bl	80009c0 <__aeabi_dadd>
 80075d0:	0002      	movs	r2, r0
 80075d2:	000b      	movs	r3, r1
 80075d4:	0020      	movs	r0, r4
 80075d6:	0029      	movs	r1, r5
 80075d8:	f7f8 ff52 	bl	8000480 <__aeabi_dcmpgt>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d000      	beq.n	80075e2 <_dtoa_r+0x64e>
 80075e0:	e080      	b.n	80076e4 <_dtoa_r+0x750>
 80075e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075e6:	2000      	movs	r0, #0
 80075e8:	4916      	ldr	r1, [pc, #88]	; (8007644 <_dtoa_r+0x6b0>)
 80075ea:	f7fa fb93 	bl	8001d14 <__aeabi_dsub>
 80075ee:	0002      	movs	r2, r0
 80075f0:	000b      	movs	r3, r1
 80075f2:	0020      	movs	r0, r4
 80075f4:	0029      	movs	r1, r5
 80075f6:	f7f8 ff2f 	bl	8000458 <__aeabi_dcmplt>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d100      	bne.n	8007600 <_dtoa_r+0x66c>
 80075fe:	e714      	b.n	800742a <_dtoa_r+0x496>
 8007600:	9b08      	ldr	r3, [sp, #32]
 8007602:	001a      	movs	r2, r3
 8007604:	3a01      	subs	r2, #1
 8007606:	9208      	str	r2, [sp, #32]
 8007608:	7812      	ldrb	r2, [r2, #0]
 800760a:	2a30      	cmp	r2, #48	; 0x30
 800760c:	d0f8      	beq.n	8007600 <_dtoa_r+0x66c>
 800760e:	9308      	str	r3, [sp, #32]
 8007610:	9602      	str	r6, [sp, #8]
 8007612:	e055      	b.n	80076c0 <_dtoa_r+0x72c>
 8007614:	2200      	movs	r2, #0
 8007616:	4b06      	ldr	r3, [pc, #24]	; (8007630 <_dtoa_r+0x69c>)
 8007618:	f7fa f910 	bl	800183c <__aeabi_dmul>
 800761c:	0004      	movs	r4, r0
 800761e:	000d      	movs	r5, r1
 8007620:	e7b2      	b.n	8007588 <_dtoa_r+0x5f4>
 8007622:	46c0      	nop			; (mov r8, r8)
 8007624:	08009780 	.word	0x08009780
 8007628:	08009758 	.word	0x08009758
 800762c:	3ff00000 	.word	0x3ff00000
 8007630:	40240000 	.word	0x40240000
 8007634:	401c0000 	.word	0x401c0000
 8007638:	fcc00000 	.word	0xfcc00000
 800763c:	40140000 	.word	0x40140000
 8007640:	7cc00000 	.word	0x7cc00000
 8007644:	3fe00000 	.word	0x3fe00000
 8007648:	9b07      	ldr	r3, [sp, #28]
 800764a:	9e06      	ldr	r6, [sp, #24]
 800764c:	3b01      	subs	r3, #1
 800764e:	199b      	adds	r3, r3, r6
 8007650:	930c      	str	r3, [sp, #48]	; 0x30
 8007652:	9c08      	ldr	r4, [sp, #32]
 8007654:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800765a:	0020      	movs	r0, r4
 800765c:	0029      	movs	r1, r5
 800765e:	f7f9 fceb 	bl	8001038 <__aeabi_ddiv>
 8007662:	f7fa ff07 	bl	8002474 <__aeabi_d2iz>
 8007666:	9007      	str	r0, [sp, #28]
 8007668:	f7fa ff3a 	bl	80024e0 <__aeabi_i2d>
 800766c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800766e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007670:	f7fa f8e4 	bl	800183c <__aeabi_dmul>
 8007674:	0002      	movs	r2, r0
 8007676:	000b      	movs	r3, r1
 8007678:	0020      	movs	r0, r4
 800767a:	0029      	movs	r1, r5
 800767c:	f7fa fb4a 	bl	8001d14 <__aeabi_dsub>
 8007680:	0033      	movs	r3, r6
 8007682:	9a07      	ldr	r2, [sp, #28]
 8007684:	3601      	adds	r6, #1
 8007686:	3230      	adds	r2, #48	; 0x30
 8007688:	701a      	strb	r2, [r3, #0]
 800768a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800768c:	9608      	str	r6, [sp, #32]
 800768e:	429a      	cmp	r2, r3
 8007690:	d139      	bne.n	8007706 <_dtoa_r+0x772>
 8007692:	0002      	movs	r2, r0
 8007694:	000b      	movs	r3, r1
 8007696:	f7f9 f993 	bl	80009c0 <__aeabi_dadd>
 800769a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800769c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800769e:	0004      	movs	r4, r0
 80076a0:	000d      	movs	r5, r1
 80076a2:	f7f8 feed 	bl	8000480 <__aeabi_dcmpgt>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d11b      	bne.n	80076e2 <_dtoa_r+0x74e>
 80076aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ae:	0020      	movs	r0, r4
 80076b0:	0029      	movs	r1, r5
 80076b2:	f7f8 fecb 	bl	800044c <__aeabi_dcmpeq>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d002      	beq.n	80076c0 <_dtoa_r+0x72c>
 80076ba:	9b07      	ldr	r3, [sp, #28]
 80076bc:	07db      	lsls	r3, r3, #31
 80076be:	d410      	bmi.n	80076e2 <_dtoa_r+0x74e>
 80076c0:	0038      	movs	r0, r7
 80076c2:	9905      	ldr	r1, [sp, #20]
 80076c4:	f000 fae6 	bl	8007c94 <_Bfree>
 80076c8:	2300      	movs	r3, #0
 80076ca:	9a08      	ldr	r2, [sp, #32]
 80076cc:	9802      	ldr	r0, [sp, #8]
 80076ce:	7013      	strb	r3, [r2, #0]
 80076d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80076d2:	3001      	adds	r0, #1
 80076d4:	6018      	str	r0, [r3, #0]
 80076d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d100      	bne.n	80076de <_dtoa_r+0x74a>
 80076dc:	e4a6      	b.n	800702c <_dtoa_r+0x98>
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	e4a4      	b.n	800702c <_dtoa_r+0x98>
 80076e2:	9e02      	ldr	r6, [sp, #8]
 80076e4:	9b08      	ldr	r3, [sp, #32]
 80076e6:	9308      	str	r3, [sp, #32]
 80076e8:	3b01      	subs	r3, #1
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	2a39      	cmp	r2, #57	; 0x39
 80076ee:	d106      	bne.n	80076fe <_dtoa_r+0x76a>
 80076f0:	9a06      	ldr	r2, [sp, #24]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d1f7      	bne.n	80076e6 <_dtoa_r+0x752>
 80076f6:	2230      	movs	r2, #48	; 0x30
 80076f8:	9906      	ldr	r1, [sp, #24]
 80076fa:	3601      	adds	r6, #1
 80076fc:	700a      	strb	r2, [r1, #0]
 80076fe:	781a      	ldrb	r2, [r3, #0]
 8007700:	3201      	adds	r2, #1
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	e784      	b.n	8007610 <_dtoa_r+0x67c>
 8007706:	2200      	movs	r2, #0
 8007708:	4baa      	ldr	r3, [pc, #680]	; (80079b4 <_dtoa_r+0xa20>)
 800770a:	f7fa f897 	bl	800183c <__aeabi_dmul>
 800770e:	2200      	movs	r2, #0
 8007710:	2300      	movs	r3, #0
 8007712:	0004      	movs	r4, r0
 8007714:	000d      	movs	r5, r1
 8007716:	f7f8 fe99 	bl	800044c <__aeabi_dcmpeq>
 800771a:	2800      	cmp	r0, #0
 800771c:	d09b      	beq.n	8007656 <_dtoa_r+0x6c2>
 800771e:	e7cf      	b.n	80076c0 <_dtoa_r+0x72c>
 8007720:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007722:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007724:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007726:	2d00      	cmp	r5, #0
 8007728:	d012      	beq.n	8007750 <_dtoa_r+0x7bc>
 800772a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800772c:	2a01      	cmp	r2, #1
 800772e:	dc66      	bgt.n	80077fe <_dtoa_r+0x86a>
 8007730:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007732:	2a00      	cmp	r2, #0
 8007734:	d05d      	beq.n	80077f2 <_dtoa_r+0x85e>
 8007736:	4aa0      	ldr	r2, [pc, #640]	; (80079b8 <_dtoa_r+0xa24>)
 8007738:	189b      	adds	r3, r3, r2
 800773a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800773c:	2101      	movs	r1, #1
 800773e:	18d2      	adds	r2, r2, r3
 8007740:	920a      	str	r2, [sp, #40]	; 0x28
 8007742:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007744:	0038      	movs	r0, r7
 8007746:	18d3      	adds	r3, r2, r3
 8007748:	930d      	str	r3, [sp, #52]	; 0x34
 800774a:	f000 fb53 	bl	8007df4 <__i2b>
 800774e:	0005      	movs	r5, r0
 8007750:	2c00      	cmp	r4, #0
 8007752:	dd0e      	ble.n	8007772 <_dtoa_r+0x7de>
 8007754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007756:	2b00      	cmp	r3, #0
 8007758:	dd0b      	ble.n	8007772 <_dtoa_r+0x7de>
 800775a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800775c:	0023      	movs	r3, r4
 800775e:	4294      	cmp	r4, r2
 8007760:	dd00      	ble.n	8007764 <_dtoa_r+0x7d0>
 8007762:	0013      	movs	r3, r2
 8007764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007766:	1ae4      	subs	r4, r4, r3
 8007768:	1ad2      	subs	r2, r2, r3
 800776a:	920a      	str	r2, [sp, #40]	; 0x28
 800776c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	930d      	str	r3, [sp, #52]	; 0x34
 8007772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007774:	2b00      	cmp	r3, #0
 8007776:	d01f      	beq.n	80077b8 <_dtoa_r+0x824>
 8007778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800777a:	2b00      	cmp	r3, #0
 800777c:	d054      	beq.n	8007828 <_dtoa_r+0x894>
 800777e:	2e00      	cmp	r6, #0
 8007780:	dd11      	ble.n	80077a6 <_dtoa_r+0x812>
 8007782:	0029      	movs	r1, r5
 8007784:	0032      	movs	r2, r6
 8007786:	0038      	movs	r0, r7
 8007788:	f000 fbfa 	bl	8007f80 <__pow5mult>
 800778c:	9a05      	ldr	r2, [sp, #20]
 800778e:	0001      	movs	r1, r0
 8007790:	0005      	movs	r5, r0
 8007792:	0038      	movs	r0, r7
 8007794:	f000 fb44 	bl	8007e20 <__multiply>
 8007798:	9905      	ldr	r1, [sp, #20]
 800779a:	9014      	str	r0, [sp, #80]	; 0x50
 800779c:	0038      	movs	r0, r7
 800779e:	f000 fa79 	bl	8007c94 <_Bfree>
 80077a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077a4:	9305      	str	r3, [sp, #20]
 80077a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077a8:	1b9a      	subs	r2, r3, r6
 80077aa:	42b3      	cmp	r3, r6
 80077ac:	d004      	beq.n	80077b8 <_dtoa_r+0x824>
 80077ae:	0038      	movs	r0, r7
 80077b0:	9905      	ldr	r1, [sp, #20]
 80077b2:	f000 fbe5 	bl	8007f80 <__pow5mult>
 80077b6:	9005      	str	r0, [sp, #20]
 80077b8:	2101      	movs	r1, #1
 80077ba:	0038      	movs	r0, r7
 80077bc:	f000 fb1a 	bl	8007df4 <__i2b>
 80077c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077c2:	0006      	movs	r6, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	dd31      	ble.n	800782c <_dtoa_r+0x898>
 80077c8:	001a      	movs	r2, r3
 80077ca:	0001      	movs	r1, r0
 80077cc:	0038      	movs	r0, r7
 80077ce:	f000 fbd7 	bl	8007f80 <__pow5mult>
 80077d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077d4:	0006      	movs	r6, r0
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	dd2d      	ble.n	8007836 <_dtoa_r+0x8a2>
 80077da:	2300      	movs	r3, #0
 80077dc:	930e      	str	r3, [sp, #56]	; 0x38
 80077de:	6933      	ldr	r3, [r6, #16]
 80077e0:	3303      	adds	r3, #3
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	18f3      	adds	r3, r6, r3
 80077e6:	6858      	ldr	r0, [r3, #4]
 80077e8:	f000 fabc 	bl	8007d64 <__hi0bits>
 80077ec:	2320      	movs	r3, #32
 80077ee:	1a18      	subs	r0, r3, r0
 80077f0:	e039      	b.n	8007866 <_dtoa_r+0x8d2>
 80077f2:	2336      	movs	r3, #54	; 0x36
 80077f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077f6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80077f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077fa:	1a9b      	subs	r3, r3, r2
 80077fc:	e79d      	b.n	800773a <_dtoa_r+0x7a6>
 80077fe:	9b07      	ldr	r3, [sp, #28]
 8007800:	1e5e      	subs	r6, r3, #1
 8007802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007804:	42b3      	cmp	r3, r6
 8007806:	db07      	blt.n	8007818 <_dtoa_r+0x884>
 8007808:	1b9e      	subs	r6, r3, r6
 800780a:	9b07      	ldr	r3, [sp, #28]
 800780c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800780e:	2b00      	cmp	r3, #0
 8007810:	da93      	bge.n	800773a <_dtoa_r+0x7a6>
 8007812:	1ae4      	subs	r4, r4, r3
 8007814:	2300      	movs	r3, #0
 8007816:	e790      	b.n	800773a <_dtoa_r+0x7a6>
 8007818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800781a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800781c:	1af3      	subs	r3, r6, r3
 800781e:	18d3      	adds	r3, r2, r3
 8007820:	960e      	str	r6, [sp, #56]	; 0x38
 8007822:	9315      	str	r3, [sp, #84]	; 0x54
 8007824:	2600      	movs	r6, #0
 8007826:	e7f0      	b.n	800780a <_dtoa_r+0x876>
 8007828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800782a:	e7c0      	b.n	80077ae <_dtoa_r+0x81a>
 800782c:	2300      	movs	r3, #0
 800782e:	930e      	str	r3, [sp, #56]	; 0x38
 8007830:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007832:	2b01      	cmp	r3, #1
 8007834:	dc13      	bgt.n	800785e <_dtoa_r+0x8ca>
 8007836:	2300      	movs	r3, #0
 8007838:	930e      	str	r3, [sp, #56]	; 0x38
 800783a:	9b08      	ldr	r3, [sp, #32]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10e      	bne.n	800785e <_dtoa_r+0x8ca>
 8007840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007842:	031b      	lsls	r3, r3, #12
 8007844:	d10b      	bne.n	800785e <_dtoa_r+0x8ca>
 8007846:	4b5d      	ldr	r3, [pc, #372]	; (80079bc <_dtoa_r+0xa28>)
 8007848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800784a:	4213      	tst	r3, r2
 800784c:	d007      	beq.n	800785e <_dtoa_r+0x8ca>
 800784e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007850:	3301      	adds	r3, #1
 8007852:	930a      	str	r3, [sp, #40]	; 0x28
 8007854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007856:	3301      	adds	r3, #1
 8007858:	930d      	str	r3, [sp, #52]	; 0x34
 800785a:	2301      	movs	r3, #1
 800785c:	930e      	str	r3, [sp, #56]	; 0x38
 800785e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007860:	2001      	movs	r0, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1bb      	bne.n	80077de <_dtoa_r+0x84a>
 8007866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007868:	221f      	movs	r2, #31
 800786a:	1818      	adds	r0, r3, r0
 800786c:	0003      	movs	r3, r0
 800786e:	4013      	ands	r3, r2
 8007870:	4210      	tst	r0, r2
 8007872:	d046      	beq.n	8007902 <_dtoa_r+0x96e>
 8007874:	3201      	adds	r2, #1
 8007876:	1ad2      	subs	r2, r2, r3
 8007878:	2a04      	cmp	r2, #4
 800787a:	dd3f      	ble.n	80078fc <_dtoa_r+0x968>
 800787c:	221c      	movs	r2, #28
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007882:	18e4      	adds	r4, r4, r3
 8007884:	18d2      	adds	r2, r2, r3
 8007886:	920a      	str	r2, [sp, #40]	; 0x28
 8007888:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800788a:	18d3      	adds	r3, r2, r3
 800788c:	930d      	str	r3, [sp, #52]	; 0x34
 800788e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007890:	2b00      	cmp	r3, #0
 8007892:	dd05      	ble.n	80078a0 <_dtoa_r+0x90c>
 8007894:	001a      	movs	r2, r3
 8007896:	0038      	movs	r0, r7
 8007898:	9905      	ldr	r1, [sp, #20]
 800789a:	f000 fbcd 	bl	8008038 <__lshift>
 800789e:	9005      	str	r0, [sp, #20]
 80078a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	dd05      	ble.n	80078b2 <_dtoa_r+0x91e>
 80078a6:	0031      	movs	r1, r6
 80078a8:	001a      	movs	r2, r3
 80078aa:	0038      	movs	r0, r7
 80078ac:	f000 fbc4 	bl	8008038 <__lshift>
 80078b0:	0006      	movs	r6, r0
 80078b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d026      	beq.n	8007906 <_dtoa_r+0x972>
 80078b8:	0031      	movs	r1, r6
 80078ba:	9805      	ldr	r0, [sp, #20]
 80078bc:	f000 fc2a 	bl	8008114 <__mcmp>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	da20      	bge.n	8007906 <_dtoa_r+0x972>
 80078c4:	9b02      	ldr	r3, [sp, #8]
 80078c6:	220a      	movs	r2, #10
 80078c8:	3b01      	subs	r3, #1
 80078ca:	9302      	str	r3, [sp, #8]
 80078cc:	0038      	movs	r0, r7
 80078ce:	2300      	movs	r3, #0
 80078d0:	9905      	ldr	r1, [sp, #20]
 80078d2:	f000 fa03 	bl	8007cdc <__multadd>
 80078d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078d8:	9005      	str	r0, [sp, #20]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d100      	bne.n	80078e0 <_dtoa_r+0x94c>
 80078de:	e166      	b.n	8007bae <_dtoa_r+0xc1a>
 80078e0:	2300      	movs	r3, #0
 80078e2:	0029      	movs	r1, r5
 80078e4:	220a      	movs	r2, #10
 80078e6:	0038      	movs	r0, r7
 80078e8:	f000 f9f8 	bl	8007cdc <__multadd>
 80078ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078ee:	0005      	movs	r5, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	dc47      	bgt.n	8007984 <_dtoa_r+0x9f0>
 80078f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	dc0d      	bgt.n	8007916 <_dtoa_r+0x982>
 80078fa:	e043      	b.n	8007984 <_dtoa_r+0x9f0>
 80078fc:	2a04      	cmp	r2, #4
 80078fe:	d0c6      	beq.n	800788e <_dtoa_r+0x8fa>
 8007900:	0013      	movs	r3, r2
 8007902:	331c      	adds	r3, #28
 8007904:	e7bc      	b.n	8007880 <_dtoa_r+0x8ec>
 8007906:	9b07      	ldr	r3, [sp, #28]
 8007908:	2b00      	cmp	r3, #0
 800790a:	dc35      	bgt.n	8007978 <_dtoa_r+0x9e4>
 800790c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800790e:	2b02      	cmp	r3, #2
 8007910:	dd32      	ble.n	8007978 <_dtoa_r+0x9e4>
 8007912:	9b07      	ldr	r3, [sp, #28]
 8007914:	930c      	str	r3, [sp, #48]	; 0x30
 8007916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10c      	bne.n	8007936 <_dtoa_r+0x9a2>
 800791c:	0031      	movs	r1, r6
 800791e:	2205      	movs	r2, #5
 8007920:	0038      	movs	r0, r7
 8007922:	f000 f9db 	bl	8007cdc <__multadd>
 8007926:	0006      	movs	r6, r0
 8007928:	0001      	movs	r1, r0
 800792a:	9805      	ldr	r0, [sp, #20]
 800792c:	f000 fbf2 	bl	8008114 <__mcmp>
 8007930:	2800      	cmp	r0, #0
 8007932:	dd00      	ble.n	8007936 <_dtoa_r+0x9a2>
 8007934:	e5a5      	b.n	8007482 <_dtoa_r+0x4ee>
 8007936:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007938:	43db      	mvns	r3, r3
 800793a:	9302      	str	r3, [sp, #8]
 800793c:	9b06      	ldr	r3, [sp, #24]
 800793e:	9308      	str	r3, [sp, #32]
 8007940:	2400      	movs	r4, #0
 8007942:	0031      	movs	r1, r6
 8007944:	0038      	movs	r0, r7
 8007946:	f000 f9a5 	bl	8007c94 <_Bfree>
 800794a:	2d00      	cmp	r5, #0
 800794c:	d100      	bne.n	8007950 <_dtoa_r+0x9bc>
 800794e:	e6b7      	b.n	80076c0 <_dtoa_r+0x72c>
 8007950:	2c00      	cmp	r4, #0
 8007952:	d005      	beq.n	8007960 <_dtoa_r+0x9cc>
 8007954:	42ac      	cmp	r4, r5
 8007956:	d003      	beq.n	8007960 <_dtoa_r+0x9cc>
 8007958:	0021      	movs	r1, r4
 800795a:	0038      	movs	r0, r7
 800795c:	f000 f99a 	bl	8007c94 <_Bfree>
 8007960:	0029      	movs	r1, r5
 8007962:	0038      	movs	r0, r7
 8007964:	f000 f996 	bl	8007c94 <_Bfree>
 8007968:	e6aa      	b.n	80076c0 <_dtoa_r+0x72c>
 800796a:	2600      	movs	r6, #0
 800796c:	0035      	movs	r5, r6
 800796e:	e7e2      	b.n	8007936 <_dtoa_r+0x9a2>
 8007970:	9602      	str	r6, [sp, #8]
 8007972:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007974:	0035      	movs	r5, r6
 8007976:	e584      	b.n	8007482 <_dtoa_r+0x4ee>
 8007978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d100      	bne.n	8007980 <_dtoa_r+0x9ec>
 800797e:	e0ce      	b.n	8007b1e <_dtoa_r+0xb8a>
 8007980:	9b07      	ldr	r3, [sp, #28]
 8007982:	930c      	str	r3, [sp, #48]	; 0x30
 8007984:	2c00      	cmp	r4, #0
 8007986:	dd05      	ble.n	8007994 <_dtoa_r+0xa00>
 8007988:	0029      	movs	r1, r5
 800798a:	0022      	movs	r2, r4
 800798c:	0038      	movs	r0, r7
 800798e:	f000 fb53 	bl	8008038 <__lshift>
 8007992:	0005      	movs	r5, r0
 8007994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007996:	0028      	movs	r0, r5
 8007998:	2b00      	cmp	r3, #0
 800799a:	d022      	beq.n	80079e2 <_dtoa_r+0xa4e>
 800799c:	0038      	movs	r0, r7
 800799e:	6869      	ldr	r1, [r5, #4]
 80079a0:	f000 f934 	bl	8007c0c <_Balloc>
 80079a4:	1e04      	subs	r4, r0, #0
 80079a6:	d10f      	bne.n	80079c8 <_dtoa_r+0xa34>
 80079a8:	0002      	movs	r2, r0
 80079aa:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <_dtoa_r+0xa2c>)
 80079ac:	4905      	ldr	r1, [pc, #20]	; (80079c4 <_dtoa_r+0xa30>)
 80079ae:	f7ff fb06 	bl	8006fbe <_dtoa_r+0x2a>
 80079b2:	46c0      	nop			; (mov r8, r8)
 80079b4:	40240000 	.word	0x40240000
 80079b8:	00000433 	.word	0x00000433
 80079bc:	7ff00000 	.word	0x7ff00000
 80079c0:	080096eb 	.word	0x080096eb
 80079c4:	000002ea 	.word	0x000002ea
 80079c8:	0029      	movs	r1, r5
 80079ca:	692b      	ldr	r3, [r5, #16]
 80079cc:	310c      	adds	r1, #12
 80079ce:	1c9a      	adds	r2, r3, #2
 80079d0:	0092      	lsls	r2, r2, #2
 80079d2:	300c      	adds	r0, #12
 80079d4:	f000 f911 	bl	8007bfa <memcpy>
 80079d8:	2201      	movs	r2, #1
 80079da:	0021      	movs	r1, r4
 80079dc:	0038      	movs	r0, r7
 80079de:	f000 fb2b 	bl	8008038 <__lshift>
 80079e2:	9b06      	ldr	r3, [sp, #24]
 80079e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079e6:	930a      	str	r3, [sp, #40]	; 0x28
 80079e8:	3b01      	subs	r3, #1
 80079ea:	189b      	adds	r3, r3, r2
 80079ec:	2201      	movs	r2, #1
 80079ee:	002c      	movs	r4, r5
 80079f0:	0005      	movs	r5, r0
 80079f2:	9314      	str	r3, [sp, #80]	; 0x50
 80079f4:	9b08      	ldr	r3, [sp, #32]
 80079f6:	4013      	ands	r3, r2
 80079f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80079fa:	0031      	movs	r1, r6
 80079fc:	9805      	ldr	r0, [sp, #20]
 80079fe:	f7ff fa3d 	bl	8006e7c <quorem>
 8007a02:	0003      	movs	r3, r0
 8007a04:	0021      	movs	r1, r4
 8007a06:	3330      	adds	r3, #48	; 0x30
 8007a08:	900d      	str	r0, [sp, #52]	; 0x34
 8007a0a:	9805      	ldr	r0, [sp, #20]
 8007a0c:	9307      	str	r3, [sp, #28]
 8007a0e:	f000 fb81 	bl	8008114 <__mcmp>
 8007a12:	002a      	movs	r2, r5
 8007a14:	900e      	str	r0, [sp, #56]	; 0x38
 8007a16:	0031      	movs	r1, r6
 8007a18:	0038      	movs	r0, r7
 8007a1a:	f000 fb97 	bl	800814c <__mdiff>
 8007a1e:	68c3      	ldr	r3, [r0, #12]
 8007a20:	9008      	str	r0, [sp, #32]
 8007a22:	9310      	str	r3, [sp, #64]	; 0x40
 8007a24:	2301      	movs	r3, #1
 8007a26:	930c      	str	r3, [sp, #48]	; 0x30
 8007a28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d104      	bne.n	8007a38 <_dtoa_r+0xaa4>
 8007a2e:	0001      	movs	r1, r0
 8007a30:	9805      	ldr	r0, [sp, #20]
 8007a32:	f000 fb6f 	bl	8008114 <__mcmp>
 8007a36:	900c      	str	r0, [sp, #48]	; 0x30
 8007a38:	0038      	movs	r0, r7
 8007a3a:	9908      	ldr	r1, [sp, #32]
 8007a3c:	f000 f92a 	bl	8007c94 <_Bfree>
 8007a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a44:	3301      	adds	r3, #1
 8007a46:	9308      	str	r3, [sp, #32]
 8007a48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	d10c      	bne.n	8007a6c <_dtoa_r+0xad8>
 8007a52:	9b07      	ldr	r3, [sp, #28]
 8007a54:	2b39      	cmp	r3, #57	; 0x39
 8007a56:	d026      	beq.n	8007aa6 <_dtoa_r+0xb12>
 8007a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	dd02      	ble.n	8007a64 <_dtoa_r+0xad0>
 8007a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a60:	3331      	adds	r3, #49	; 0x31
 8007a62:	9307      	str	r3, [sp, #28]
 8007a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a66:	9a07      	ldr	r2, [sp, #28]
 8007a68:	701a      	strb	r2, [r3, #0]
 8007a6a:	e76a      	b.n	8007942 <_dtoa_r+0x9ae>
 8007a6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	db04      	blt.n	8007a7c <_dtoa_r+0xae8>
 8007a72:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a74:	4313      	orrs	r3, r2
 8007a76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	d11f      	bne.n	8007abc <_dtoa_r+0xb28>
 8007a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	ddf0      	ble.n	8007a64 <_dtoa_r+0xad0>
 8007a82:	9905      	ldr	r1, [sp, #20]
 8007a84:	2201      	movs	r2, #1
 8007a86:	0038      	movs	r0, r7
 8007a88:	f000 fad6 	bl	8008038 <__lshift>
 8007a8c:	0031      	movs	r1, r6
 8007a8e:	9005      	str	r0, [sp, #20]
 8007a90:	f000 fb40 	bl	8008114 <__mcmp>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	dc03      	bgt.n	8007aa0 <_dtoa_r+0xb0c>
 8007a98:	d1e4      	bne.n	8007a64 <_dtoa_r+0xad0>
 8007a9a:	9b07      	ldr	r3, [sp, #28]
 8007a9c:	07db      	lsls	r3, r3, #31
 8007a9e:	d5e1      	bpl.n	8007a64 <_dtoa_r+0xad0>
 8007aa0:	9b07      	ldr	r3, [sp, #28]
 8007aa2:	2b39      	cmp	r3, #57	; 0x39
 8007aa4:	d1db      	bne.n	8007a5e <_dtoa_r+0xaca>
 8007aa6:	2339      	movs	r3, #57	; 0x39
 8007aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aaa:	7013      	strb	r3, [r2, #0]
 8007aac:	9b08      	ldr	r3, [sp, #32]
 8007aae:	9308      	str	r3, [sp, #32]
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	781a      	ldrb	r2, [r3, #0]
 8007ab4:	2a39      	cmp	r2, #57	; 0x39
 8007ab6:	d068      	beq.n	8007b8a <_dtoa_r+0xbf6>
 8007ab8:	3201      	adds	r2, #1
 8007aba:	e7d5      	b.n	8007a68 <_dtoa_r+0xad4>
 8007abc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	dd07      	ble.n	8007ad2 <_dtoa_r+0xb3e>
 8007ac2:	9b07      	ldr	r3, [sp, #28]
 8007ac4:	2b39      	cmp	r3, #57	; 0x39
 8007ac6:	d0ee      	beq.n	8007aa6 <_dtoa_r+0xb12>
 8007ac8:	9b07      	ldr	r3, [sp, #28]
 8007aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007acc:	3301      	adds	r3, #1
 8007ace:	7013      	strb	r3, [r2, #0]
 8007ad0:	e737      	b.n	8007942 <_dtoa_r+0x9ae>
 8007ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad4:	9a07      	ldr	r2, [sp, #28]
 8007ad6:	701a      	strb	r2, [r3, #0]
 8007ad8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ada:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d03e      	beq.n	8007b5e <_dtoa_r+0xbca>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	220a      	movs	r2, #10
 8007ae4:	9905      	ldr	r1, [sp, #20]
 8007ae6:	0038      	movs	r0, r7
 8007ae8:	f000 f8f8 	bl	8007cdc <__multadd>
 8007aec:	2300      	movs	r3, #0
 8007aee:	9005      	str	r0, [sp, #20]
 8007af0:	220a      	movs	r2, #10
 8007af2:	0021      	movs	r1, r4
 8007af4:	0038      	movs	r0, r7
 8007af6:	42ac      	cmp	r4, r5
 8007af8:	d106      	bne.n	8007b08 <_dtoa_r+0xb74>
 8007afa:	f000 f8ef 	bl	8007cdc <__multadd>
 8007afe:	0004      	movs	r4, r0
 8007b00:	0005      	movs	r5, r0
 8007b02:	9b08      	ldr	r3, [sp, #32]
 8007b04:	930a      	str	r3, [sp, #40]	; 0x28
 8007b06:	e778      	b.n	80079fa <_dtoa_r+0xa66>
 8007b08:	f000 f8e8 	bl	8007cdc <__multadd>
 8007b0c:	0029      	movs	r1, r5
 8007b0e:	0004      	movs	r4, r0
 8007b10:	2300      	movs	r3, #0
 8007b12:	220a      	movs	r2, #10
 8007b14:	0038      	movs	r0, r7
 8007b16:	f000 f8e1 	bl	8007cdc <__multadd>
 8007b1a:	0005      	movs	r5, r0
 8007b1c:	e7f1      	b.n	8007b02 <_dtoa_r+0xb6e>
 8007b1e:	9b07      	ldr	r3, [sp, #28]
 8007b20:	930c      	str	r3, [sp, #48]	; 0x30
 8007b22:	2400      	movs	r4, #0
 8007b24:	0031      	movs	r1, r6
 8007b26:	9805      	ldr	r0, [sp, #20]
 8007b28:	f7ff f9a8 	bl	8006e7c <quorem>
 8007b2c:	9b06      	ldr	r3, [sp, #24]
 8007b2e:	3030      	adds	r0, #48	; 0x30
 8007b30:	5518      	strb	r0, [r3, r4]
 8007b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b34:	3401      	adds	r4, #1
 8007b36:	9007      	str	r0, [sp, #28]
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	dd07      	ble.n	8007b4c <_dtoa_r+0xbb8>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	220a      	movs	r2, #10
 8007b40:	0038      	movs	r0, r7
 8007b42:	9905      	ldr	r1, [sp, #20]
 8007b44:	f000 f8ca 	bl	8007cdc <__multadd>
 8007b48:	9005      	str	r0, [sp, #20]
 8007b4a:	e7eb      	b.n	8007b24 <_dtoa_r+0xb90>
 8007b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b4e:	2001      	movs	r0, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	dd00      	ble.n	8007b56 <_dtoa_r+0xbc2>
 8007b54:	0018      	movs	r0, r3
 8007b56:	2400      	movs	r4, #0
 8007b58:	9b06      	ldr	r3, [sp, #24]
 8007b5a:	181b      	adds	r3, r3, r0
 8007b5c:	9308      	str	r3, [sp, #32]
 8007b5e:	9905      	ldr	r1, [sp, #20]
 8007b60:	2201      	movs	r2, #1
 8007b62:	0038      	movs	r0, r7
 8007b64:	f000 fa68 	bl	8008038 <__lshift>
 8007b68:	0031      	movs	r1, r6
 8007b6a:	9005      	str	r0, [sp, #20]
 8007b6c:	f000 fad2 	bl	8008114 <__mcmp>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	dc9b      	bgt.n	8007aac <_dtoa_r+0xb18>
 8007b74:	d102      	bne.n	8007b7c <_dtoa_r+0xbe8>
 8007b76:	9b07      	ldr	r3, [sp, #28]
 8007b78:	07db      	lsls	r3, r3, #31
 8007b7a:	d497      	bmi.n	8007aac <_dtoa_r+0xb18>
 8007b7c:	9b08      	ldr	r3, [sp, #32]
 8007b7e:	9308      	str	r3, [sp, #32]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	781a      	ldrb	r2, [r3, #0]
 8007b84:	2a30      	cmp	r2, #48	; 0x30
 8007b86:	d0fa      	beq.n	8007b7e <_dtoa_r+0xbea>
 8007b88:	e6db      	b.n	8007942 <_dtoa_r+0x9ae>
 8007b8a:	9a06      	ldr	r2, [sp, #24]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d18e      	bne.n	8007aae <_dtoa_r+0xb1a>
 8007b90:	9b02      	ldr	r3, [sp, #8]
 8007b92:	3301      	adds	r3, #1
 8007b94:	9302      	str	r3, [sp, #8]
 8007b96:	2331      	movs	r3, #49	; 0x31
 8007b98:	e799      	b.n	8007ace <_dtoa_r+0xb3a>
 8007b9a:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <_dtoa_r+0xc2c>)
 8007b9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007b9e:	9306      	str	r3, [sp, #24]
 8007ba0:	4b08      	ldr	r3, [pc, #32]	; (8007bc4 <_dtoa_r+0xc30>)
 8007ba2:	2a00      	cmp	r2, #0
 8007ba4:	d001      	beq.n	8007baa <_dtoa_r+0xc16>
 8007ba6:	f7ff fa3f 	bl	8007028 <_dtoa_r+0x94>
 8007baa:	f7ff fa3f 	bl	800702c <_dtoa_r+0x98>
 8007bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	dcb6      	bgt.n	8007b22 <_dtoa_r+0xb8e>
 8007bb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	dd00      	ble.n	8007bbc <_dtoa_r+0xc28>
 8007bba:	e6ac      	b.n	8007916 <_dtoa_r+0x982>
 8007bbc:	e7b1      	b.n	8007b22 <_dtoa_r+0xb8e>
 8007bbe:	46c0      	nop			; (mov r8, r8)
 8007bc0:	0800966c 	.word	0x0800966c
 8007bc4:	08009674 	.word	0x08009674

08007bc8 <_localeconv_r>:
 8007bc8:	4800      	ldr	r0, [pc, #0]	; (8007bcc <_localeconv_r+0x4>)
 8007bca:	4770      	bx	lr
 8007bcc:	20000160 	.word	0x20000160

08007bd0 <malloc>:
 8007bd0:	b510      	push	{r4, lr}
 8007bd2:	4b03      	ldr	r3, [pc, #12]	; (8007be0 <malloc+0x10>)
 8007bd4:	0001      	movs	r1, r0
 8007bd6:	6818      	ldr	r0, [r3, #0]
 8007bd8:	f000 fc4c 	bl	8008474 <_malloc_r>
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	46c0      	nop			; (mov r8, r8)
 8007be0:	2000000c 	.word	0x2000000c

08007be4 <memchr>:
 8007be4:	b2c9      	uxtb	r1, r1
 8007be6:	1882      	adds	r2, r0, r2
 8007be8:	4290      	cmp	r0, r2
 8007bea:	d101      	bne.n	8007bf0 <memchr+0xc>
 8007bec:	2000      	movs	r0, #0
 8007bee:	4770      	bx	lr
 8007bf0:	7803      	ldrb	r3, [r0, #0]
 8007bf2:	428b      	cmp	r3, r1
 8007bf4:	d0fb      	beq.n	8007bee <memchr+0xa>
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	e7f6      	b.n	8007be8 <memchr+0x4>

08007bfa <memcpy>:
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d100      	bne.n	8007c04 <memcpy+0xa>
 8007c02:	bd10      	pop	{r4, pc}
 8007c04:	5ccc      	ldrb	r4, [r1, r3]
 8007c06:	54c4      	strb	r4, [r0, r3]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	e7f8      	b.n	8007bfe <memcpy+0x4>

08007c0c <_Balloc>:
 8007c0c:	b570      	push	{r4, r5, r6, lr}
 8007c0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c10:	0006      	movs	r6, r0
 8007c12:	000c      	movs	r4, r1
 8007c14:	2d00      	cmp	r5, #0
 8007c16:	d10e      	bne.n	8007c36 <_Balloc+0x2a>
 8007c18:	2010      	movs	r0, #16
 8007c1a:	f7ff ffd9 	bl	8007bd0 <malloc>
 8007c1e:	1e02      	subs	r2, r0, #0
 8007c20:	6270      	str	r0, [r6, #36]	; 0x24
 8007c22:	d104      	bne.n	8007c2e <_Balloc+0x22>
 8007c24:	2166      	movs	r1, #102	; 0x66
 8007c26:	4b19      	ldr	r3, [pc, #100]	; (8007c8c <_Balloc+0x80>)
 8007c28:	4819      	ldr	r0, [pc, #100]	; (8007c90 <_Balloc+0x84>)
 8007c2a:	f000 fe0d 	bl	8008848 <__assert_func>
 8007c2e:	6045      	str	r5, [r0, #4]
 8007c30:	6085      	str	r5, [r0, #8]
 8007c32:	6005      	str	r5, [r0, #0]
 8007c34:	60c5      	str	r5, [r0, #12]
 8007c36:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007c38:	68eb      	ldr	r3, [r5, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d013      	beq.n	8007c66 <_Balloc+0x5a>
 8007c3e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007c40:	00a2      	lsls	r2, r4, #2
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	189b      	adds	r3, r3, r2
 8007c46:	6818      	ldr	r0, [r3, #0]
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d118      	bne.n	8007c7e <_Balloc+0x72>
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	000d      	movs	r5, r1
 8007c50:	40a5      	lsls	r5, r4
 8007c52:	1d6a      	adds	r2, r5, #5
 8007c54:	0030      	movs	r0, r6
 8007c56:	0092      	lsls	r2, r2, #2
 8007c58:	f000 fb74 	bl	8008344 <_calloc_r>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d00c      	beq.n	8007c7a <_Balloc+0x6e>
 8007c60:	6044      	str	r4, [r0, #4]
 8007c62:	6085      	str	r5, [r0, #8]
 8007c64:	e00d      	b.n	8007c82 <_Balloc+0x76>
 8007c66:	2221      	movs	r2, #33	; 0x21
 8007c68:	2104      	movs	r1, #4
 8007c6a:	0030      	movs	r0, r6
 8007c6c:	f000 fb6a 	bl	8008344 <_calloc_r>
 8007c70:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007c72:	60e8      	str	r0, [r5, #12]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e1      	bne.n	8007c3e <_Balloc+0x32>
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	bd70      	pop	{r4, r5, r6, pc}
 8007c7e:	6802      	ldr	r2, [r0, #0]
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	2300      	movs	r3, #0
 8007c84:	6103      	str	r3, [r0, #16]
 8007c86:	60c3      	str	r3, [r0, #12]
 8007c88:	e7f8      	b.n	8007c7c <_Balloc+0x70>
 8007c8a:	46c0      	nop			; (mov r8, r8)
 8007c8c:	08009679 	.word	0x08009679
 8007c90:	080096fc 	.word	0x080096fc

08007c94 <_Bfree>:
 8007c94:	b570      	push	{r4, r5, r6, lr}
 8007c96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c98:	0005      	movs	r5, r0
 8007c9a:	000c      	movs	r4, r1
 8007c9c:	2e00      	cmp	r6, #0
 8007c9e:	d10e      	bne.n	8007cbe <_Bfree+0x2a>
 8007ca0:	2010      	movs	r0, #16
 8007ca2:	f7ff ff95 	bl	8007bd0 <malloc>
 8007ca6:	1e02      	subs	r2, r0, #0
 8007ca8:	6268      	str	r0, [r5, #36]	; 0x24
 8007caa:	d104      	bne.n	8007cb6 <_Bfree+0x22>
 8007cac:	218a      	movs	r1, #138	; 0x8a
 8007cae:	4b09      	ldr	r3, [pc, #36]	; (8007cd4 <_Bfree+0x40>)
 8007cb0:	4809      	ldr	r0, [pc, #36]	; (8007cd8 <_Bfree+0x44>)
 8007cb2:	f000 fdc9 	bl	8008848 <__assert_func>
 8007cb6:	6046      	str	r6, [r0, #4]
 8007cb8:	6086      	str	r6, [r0, #8]
 8007cba:	6006      	str	r6, [r0, #0]
 8007cbc:	60c6      	str	r6, [r0, #12]
 8007cbe:	2c00      	cmp	r4, #0
 8007cc0:	d007      	beq.n	8007cd2 <_Bfree+0x3e>
 8007cc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cc4:	6862      	ldr	r2, [r4, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	0092      	lsls	r2, r2, #2
 8007cca:	189b      	adds	r3, r3, r2
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	6022      	str	r2, [r4, #0]
 8007cd0:	601c      	str	r4, [r3, #0]
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	08009679 	.word	0x08009679
 8007cd8:	080096fc 	.word	0x080096fc

08007cdc <__multadd>:
 8007cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cde:	000e      	movs	r6, r1
 8007ce0:	9001      	str	r0, [sp, #4]
 8007ce2:	000c      	movs	r4, r1
 8007ce4:	001d      	movs	r5, r3
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	690f      	ldr	r7, [r1, #16]
 8007cea:	3614      	adds	r6, #20
 8007cec:	6833      	ldr	r3, [r6, #0]
 8007cee:	3001      	adds	r0, #1
 8007cf0:	b299      	uxth	r1, r3
 8007cf2:	4351      	muls	r1, r2
 8007cf4:	0c1b      	lsrs	r3, r3, #16
 8007cf6:	4353      	muls	r3, r2
 8007cf8:	1949      	adds	r1, r1, r5
 8007cfa:	0c0d      	lsrs	r5, r1, #16
 8007cfc:	195b      	adds	r3, r3, r5
 8007cfe:	0c1d      	lsrs	r5, r3, #16
 8007d00:	b289      	uxth	r1, r1
 8007d02:	041b      	lsls	r3, r3, #16
 8007d04:	185b      	adds	r3, r3, r1
 8007d06:	c608      	stmia	r6!, {r3}
 8007d08:	4287      	cmp	r7, r0
 8007d0a:	dcef      	bgt.n	8007cec <__multadd+0x10>
 8007d0c:	2d00      	cmp	r5, #0
 8007d0e:	d022      	beq.n	8007d56 <__multadd+0x7a>
 8007d10:	68a3      	ldr	r3, [r4, #8]
 8007d12:	42bb      	cmp	r3, r7
 8007d14:	dc19      	bgt.n	8007d4a <__multadd+0x6e>
 8007d16:	6863      	ldr	r3, [r4, #4]
 8007d18:	9801      	ldr	r0, [sp, #4]
 8007d1a:	1c59      	adds	r1, r3, #1
 8007d1c:	f7ff ff76 	bl	8007c0c <_Balloc>
 8007d20:	1e06      	subs	r6, r0, #0
 8007d22:	d105      	bne.n	8007d30 <__multadd+0x54>
 8007d24:	0002      	movs	r2, r0
 8007d26:	21b5      	movs	r1, #181	; 0xb5
 8007d28:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <__multadd+0x80>)
 8007d2a:	480d      	ldr	r0, [pc, #52]	; (8007d60 <__multadd+0x84>)
 8007d2c:	f000 fd8c 	bl	8008848 <__assert_func>
 8007d30:	0021      	movs	r1, r4
 8007d32:	6923      	ldr	r3, [r4, #16]
 8007d34:	310c      	adds	r1, #12
 8007d36:	1c9a      	adds	r2, r3, #2
 8007d38:	0092      	lsls	r2, r2, #2
 8007d3a:	300c      	adds	r0, #12
 8007d3c:	f7ff ff5d 	bl	8007bfa <memcpy>
 8007d40:	0021      	movs	r1, r4
 8007d42:	9801      	ldr	r0, [sp, #4]
 8007d44:	f7ff ffa6 	bl	8007c94 <_Bfree>
 8007d48:	0034      	movs	r4, r6
 8007d4a:	1d3b      	adds	r3, r7, #4
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	18e3      	adds	r3, r4, r3
 8007d50:	605d      	str	r5, [r3, #4]
 8007d52:	1c7b      	adds	r3, r7, #1
 8007d54:	6123      	str	r3, [r4, #16]
 8007d56:	0020      	movs	r0, r4
 8007d58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d5a:	46c0      	nop			; (mov r8, r8)
 8007d5c:	080096eb 	.word	0x080096eb
 8007d60:	080096fc 	.word	0x080096fc

08007d64 <__hi0bits>:
 8007d64:	0003      	movs	r3, r0
 8007d66:	0c02      	lsrs	r2, r0, #16
 8007d68:	2000      	movs	r0, #0
 8007d6a:	4282      	cmp	r2, r0
 8007d6c:	d101      	bne.n	8007d72 <__hi0bits+0xe>
 8007d6e:	041b      	lsls	r3, r3, #16
 8007d70:	3010      	adds	r0, #16
 8007d72:	0e1a      	lsrs	r2, r3, #24
 8007d74:	d101      	bne.n	8007d7a <__hi0bits+0x16>
 8007d76:	3008      	adds	r0, #8
 8007d78:	021b      	lsls	r3, r3, #8
 8007d7a:	0f1a      	lsrs	r2, r3, #28
 8007d7c:	d101      	bne.n	8007d82 <__hi0bits+0x1e>
 8007d7e:	3004      	adds	r0, #4
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	0f9a      	lsrs	r2, r3, #30
 8007d84:	d101      	bne.n	8007d8a <__hi0bits+0x26>
 8007d86:	3002      	adds	r0, #2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	db03      	blt.n	8007d96 <__hi0bits+0x32>
 8007d8e:	3001      	adds	r0, #1
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	d400      	bmi.n	8007d96 <__hi0bits+0x32>
 8007d94:	2020      	movs	r0, #32
 8007d96:	4770      	bx	lr

08007d98 <__lo0bits>:
 8007d98:	6803      	ldr	r3, [r0, #0]
 8007d9a:	0002      	movs	r2, r0
 8007d9c:	2107      	movs	r1, #7
 8007d9e:	0018      	movs	r0, r3
 8007da0:	4008      	ands	r0, r1
 8007da2:	420b      	tst	r3, r1
 8007da4:	d00d      	beq.n	8007dc2 <__lo0bits+0x2a>
 8007da6:	3906      	subs	r1, #6
 8007da8:	2000      	movs	r0, #0
 8007daa:	420b      	tst	r3, r1
 8007dac:	d105      	bne.n	8007dba <__lo0bits+0x22>
 8007dae:	3002      	adds	r0, #2
 8007db0:	4203      	tst	r3, r0
 8007db2:	d003      	beq.n	8007dbc <__lo0bits+0x24>
 8007db4:	40cb      	lsrs	r3, r1
 8007db6:	0008      	movs	r0, r1
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	4770      	bx	lr
 8007dbc:	089b      	lsrs	r3, r3, #2
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	e7fb      	b.n	8007dba <__lo0bits+0x22>
 8007dc2:	b299      	uxth	r1, r3
 8007dc4:	2900      	cmp	r1, #0
 8007dc6:	d101      	bne.n	8007dcc <__lo0bits+0x34>
 8007dc8:	2010      	movs	r0, #16
 8007dca:	0c1b      	lsrs	r3, r3, #16
 8007dcc:	b2d9      	uxtb	r1, r3
 8007dce:	2900      	cmp	r1, #0
 8007dd0:	d101      	bne.n	8007dd6 <__lo0bits+0x3e>
 8007dd2:	3008      	adds	r0, #8
 8007dd4:	0a1b      	lsrs	r3, r3, #8
 8007dd6:	0719      	lsls	r1, r3, #28
 8007dd8:	d101      	bne.n	8007dde <__lo0bits+0x46>
 8007dda:	3004      	adds	r0, #4
 8007ddc:	091b      	lsrs	r3, r3, #4
 8007dde:	0799      	lsls	r1, r3, #30
 8007de0:	d101      	bne.n	8007de6 <__lo0bits+0x4e>
 8007de2:	3002      	adds	r0, #2
 8007de4:	089b      	lsrs	r3, r3, #2
 8007de6:	07d9      	lsls	r1, r3, #31
 8007de8:	d4e9      	bmi.n	8007dbe <__lo0bits+0x26>
 8007dea:	3001      	adds	r0, #1
 8007dec:	085b      	lsrs	r3, r3, #1
 8007dee:	d1e6      	bne.n	8007dbe <__lo0bits+0x26>
 8007df0:	2020      	movs	r0, #32
 8007df2:	e7e2      	b.n	8007dba <__lo0bits+0x22>

08007df4 <__i2b>:
 8007df4:	b510      	push	{r4, lr}
 8007df6:	000c      	movs	r4, r1
 8007df8:	2101      	movs	r1, #1
 8007dfa:	f7ff ff07 	bl	8007c0c <_Balloc>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d106      	bne.n	8007e10 <__i2b+0x1c>
 8007e02:	21a0      	movs	r1, #160	; 0xa0
 8007e04:	0002      	movs	r2, r0
 8007e06:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <__i2b+0x24>)
 8007e08:	4804      	ldr	r0, [pc, #16]	; (8007e1c <__i2b+0x28>)
 8007e0a:	0049      	lsls	r1, r1, #1
 8007e0c:	f000 fd1c 	bl	8008848 <__assert_func>
 8007e10:	2301      	movs	r3, #1
 8007e12:	6144      	str	r4, [r0, #20]
 8007e14:	6103      	str	r3, [r0, #16]
 8007e16:	bd10      	pop	{r4, pc}
 8007e18:	080096eb 	.word	0x080096eb
 8007e1c:	080096fc 	.word	0x080096fc

08007e20 <__multiply>:
 8007e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e22:	690b      	ldr	r3, [r1, #16]
 8007e24:	0014      	movs	r4, r2
 8007e26:	6912      	ldr	r2, [r2, #16]
 8007e28:	000d      	movs	r5, r1
 8007e2a:	b089      	sub	sp, #36	; 0x24
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	da01      	bge.n	8007e34 <__multiply+0x14>
 8007e30:	0025      	movs	r5, r4
 8007e32:	000c      	movs	r4, r1
 8007e34:	692f      	ldr	r7, [r5, #16]
 8007e36:	6926      	ldr	r6, [r4, #16]
 8007e38:	6869      	ldr	r1, [r5, #4]
 8007e3a:	19bb      	adds	r3, r7, r6
 8007e3c:	9302      	str	r3, [sp, #8]
 8007e3e:	68ab      	ldr	r3, [r5, #8]
 8007e40:	19ba      	adds	r2, r7, r6
 8007e42:	4293      	cmp	r3, r2
 8007e44:	da00      	bge.n	8007e48 <__multiply+0x28>
 8007e46:	3101      	adds	r1, #1
 8007e48:	f7ff fee0 	bl	8007c0c <_Balloc>
 8007e4c:	9001      	str	r0, [sp, #4]
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d106      	bne.n	8007e60 <__multiply+0x40>
 8007e52:	215e      	movs	r1, #94	; 0x5e
 8007e54:	0002      	movs	r2, r0
 8007e56:	4b48      	ldr	r3, [pc, #288]	; (8007f78 <__multiply+0x158>)
 8007e58:	4848      	ldr	r0, [pc, #288]	; (8007f7c <__multiply+0x15c>)
 8007e5a:	31ff      	adds	r1, #255	; 0xff
 8007e5c:	f000 fcf4 	bl	8008848 <__assert_func>
 8007e60:	9b01      	ldr	r3, [sp, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	3314      	adds	r3, #20
 8007e66:	469c      	mov	ip, r3
 8007e68:	19bb      	adds	r3, r7, r6
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4463      	add	r3, ip
 8007e6e:	9303      	str	r3, [sp, #12]
 8007e70:	4663      	mov	r3, ip
 8007e72:	9903      	ldr	r1, [sp, #12]
 8007e74:	428b      	cmp	r3, r1
 8007e76:	d32c      	bcc.n	8007ed2 <__multiply+0xb2>
 8007e78:	002b      	movs	r3, r5
 8007e7a:	0022      	movs	r2, r4
 8007e7c:	3314      	adds	r3, #20
 8007e7e:	00bf      	lsls	r7, r7, #2
 8007e80:	3214      	adds	r2, #20
 8007e82:	9306      	str	r3, [sp, #24]
 8007e84:	00b6      	lsls	r6, r6, #2
 8007e86:	19db      	adds	r3, r3, r7
 8007e88:	9304      	str	r3, [sp, #16]
 8007e8a:	1993      	adds	r3, r2, r6
 8007e8c:	9307      	str	r3, [sp, #28]
 8007e8e:	2304      	movs	r3, #4
 8007e90:	9305      	str	r3, [sp, #20]
 8007e92:	002b      	movs	r3, r5
 8007e94:	9904      	ldr	r1, [sp, #16]
 8007e96:	3315      	adds	r3, #21
 8007e98:	9200      	str	r2, [sp, #0]
 8007e9a:	4299      	cmp	r1, r3
 8007e9c:	d305      	bcc.n	8007eaa <__multiply+0x8a>
 8007e9e:	1b4b      	subs	r3, r1, r5
 8007ea0:	3b15      	subs	r3, #21
 8007ea2:	089b      	lsrs	r3, r3, #2
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	9305      	str	r3, [sp, #20]
 8007eaa:	9b07      	ldr	r3, [sp, #28]
 8007eac:	9a00      	ldr	r2, [sp, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d311      	bcc.n	8007ed6 <__multiply+0xb6>
 8007eb2:	9b02      	ldr	r3, [sp, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	dd06      	ble.n	8007ec6 <__multiply+0xa6>
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	3b04      	subs	r3, #4
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d053      	beq.n	8007f6e <__multiply+0x14e>
 8007ec6:	9b01      	ldr	r3, [sp, #4]
 8007ec8:	9a02      	ldr	r2, [sp, #8]
 8007eca:	0018      	movs	r0, r3
 8007ecc:	611a      	str	r2, [r3, #16]
 8007ece:	b009      	add	sp, #36	; 0x24
 8007ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed2:	c304      	stmia	r3!, {r2}
 8007ed4:	e7cd      	b.n	8007e72 <__multiply+0x52>
 8007ed6:	9b00      	ldr	r3, [sp, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	b298      	uxth	r0, r3
 8007edc:	2800      	cmp	r0, #0
 8007ede:	d01b      	beq.n	8007f18 <__multiply+0xf8>
 8007ee0:	4667      	mov	r7, ip
 8007ee2:	2400      	movs	r4, #0
 8007ee4:	9e06      	ldr	r6, [sp, #24]
 8007ee6:	ce02      	ldmia	r6!, {r1}
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	b28b      	uxth	r3, r1
 8007eec:	4343      	muls	r3, r0
 8007eee:	b292      	uxth	r2, r2
 8007ef0:	189b      	adds	r3, r3, r2
 8007ef2:	191b      	adds	r3, r3, r4
 8007ef4:	0c0c      	lsrs	r4, r1, #16
 8007ef6:	4344      	muls	r4, r0
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	0c11      	lsrs	r1, r2, #16
 8007efc:	1861      	adds	r1, r4, r1
 8007efe:	0c1c      	lsrs	r4, r3, #16
 8007f00:	1909      	adds	r1, r1, r4
 8007f02:	0c0c      	lsrs	r4, r1, #16
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	0409      	lsls	r1, r1, #16
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	c708      	stmia	r7!, {r3}
 8007f0c:	9b04      	ldr	r3, [sp, #16]
 8007f0e:	42b3      	cmp	r3, r6
 8007f10:	d8e9      	bhi.n	8007ee6 <__multiply+0xc6>
 8007f12:	4663      	mov	r3, ip
 8007f14:	9a05      	ldr	r2, [sp, #20]
 8007f16:	509c      	str	r4, [r3, r2]
 8007f18:	9b00      	ldr	r3, [sp, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	0c1e      	lsrs	r6, r3, #16
 8007f1e:	d020      	beq.n	8007f62 <__multiply+0x142>
 8007f20:	4663      	mov	r3, ip
 8007f22:	002c      	movs	r4, r5
 8007f24:	4660      	mov	r0, ip
 8007f26:	2700      	movs	r7, #0
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3414      	adds	r4, #20
 8007f2c:	6822      	ldr	r2, [r4, #0]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	b291      	uxth	r1, r2
 8007f32:	4371      	muls	r1, r6
 8007f34:	6802      	ldr	r2, [r0, #0]
 8007f36:	0c12      	lsrs	r2, r2, #16
 8007f38:	1889      	adds	r1, r1, r2
 8007f3a:	19cf      	adds	r7, r1, r7
 8007f3c:	0439      	lsls	r1, r7, #16
 8007f3e:	430b      	orrs	r3, r1
 8007f40:	6003      	str	r3, [r0, #0]
 8007f42:	cc02      	ldmia	r4!, {r1}
 8007f44:	6843      	ldr	r3, [r0, #4]
 8007f46:	0c09      	lsrs	r1, r1, #16
 8007f48:	4371      	muls	r1, r6
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	0c3f      	lsrs	r7, r7, #16
 8007f4e:	18cb      	adds	r3, r1, r3
 8007f50:	9a04      	ldr	r2, [sp, #16]
 8007f52:	19db      	adds	r3, r3, r7
 8007f54:	0c1f      	lsrs	r7, r3, #16
 8007f56:	3004      	adds	r0, #4
 8007f58:	42a2      	cmp	r2, r4
 8007f5a:	d8e7      	bhi.n	8007f2c <__multiply+0x10c>
 8007f5c:	4662      	mov	r2, ip
 8007f5e:	9905      	ldr	r1, [sp, #20]
 8007f60:	5053      	str	r3, [r2, r1]
 8007f62:	9b00      	ldr	r3, [sp, #0]
 8007f64:	3304      	adds	r3, #4
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	2304      	movs	r3, #4
 8007f6a:	449c      	add	ip, r3
 8007f6c:	e79d      	b.n	8007eaa <__multiply+0x8a>
 8007f6e:	9b02      	ldr	r3, [sp, #8]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	9302      	str	r3, [sp, #8]
 8007f74:	e79d      	b.n	8007eb2 <__multiply+0x92>
 8007f76:	46c0      	nop			; (mov r8, r8)
 8007f78:	080096eb 	.word	0x080096eb
 8007f7c:	080096fc 	.word	0x080096fc

08007f80 <__pow5mult>:
 8007f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f82:	2303      	movs	r3, #3
 8007f84:	0015      	movs	r5, r2
 8007f86:	0007      	movs	r7, r0
 8007f88:	000e      	movs	r6, r1
 8007f8a:	401a      	ands	r2, r3
 8007f8c:	421d      	tst	r5, r3
 8007f8e:	d008      	beq.n	8007fa2 <__pow5mult+0x22>
 8007f90:	4925      	ldr	r1, [pc, #148]	; (8008028 <__pow5mult+0xa8>)
 8007f92:	3a01      	subs	r2, #1
 8007f94:	0092      	lsls	r2, r2, #2
 8007f96:	5852      	ldr	r2, [r2, r1]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	0031      	movs	r1, r6
 8007f9c:	f7ff fe9e 	bl	8007cdc <__multadd>
 8007fa0:	0006      	movs	r6, r0
 8007fa2:	10ad      	asrs	r5, r5, #2
 8007fa4:	d03d      	beq.n	8008022 <__pow5mult+0xa2>
 8007fa6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007fa8:	2c00      	cmp	r4, #0
 8007faa:	d10f      	bne.n	8007fcc <__pow5mult+0x4c>
 8007fac:	2010      	movs	r0, #16
 8007fae:	f7ff fe0f 	bl	8007bd0 <malloc>
 8007fb2:	1e02      	subs	r2, r0, #0
 8007fb4:	6278      	str	r0, [r7, #36]	; 0x24
 8007fb6:	d105      	bne.n	8007fc4 <__pow5mult+0x44>
 8007fb8:	21d7      	movs	r1, #215	; 0xd7
 8007fba:	4b1c      	ldr	r3, [pc, #112]	; (800802c <__pow5mult+0xac>)
 8007fbc:	481c      	ldr	r0, [pc, #112]	; (8008030 <__pow5mult+0xb0>)
 8007fbe:	0049      	lsls	r1, r1, #1
 8007fc0:	f000 fc42 	bl	8008848 <__assert_func>
 8007fc4:	6044      	str	r4, [r0, #4]
 8007fc6:	6084      	str	r4, [r0, #8]
 8007fc8:	6004      	str	r4, [r0, #0]
 8007fca:	60c4      	str	r4, [r0, #12]
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	689c      	ldr	r4, [r3, #8]
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	2c00      	cmp	r4, #0
 8007fd4:	d108      	bne.n	8007fe8 <__pow5mult+0x68>
 8007fd6:	0038      	movs	r0, r7
 8007fd8:	4916      	ldr	r1, [pc, #88]	; (8008034 <__pow5mult+0xb4>)
 8007fda:	f7ff ff0b 	bl	8007df4 <__i2b>
 8007fde:	9b01      	ldr	r3, [sp, #4]
 8007fe0:	0004      	movs	r4, r0
 8007fe2:	6098      	str	r0, [r3, #8]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	6003      	str	r3, [r0, #0]
 8007fe8:	2301      	movs	r3, #1
 8007fea:	421d      	tst	r5, r3
 8007fec:	d00a      	beq.n	8008004 <__pow5mult+0x84>
 8007fee:	0031      	movs	r1, r6
 8007ff0:	0022      	movs	r2, r4
 8007ff2:	0038      	movs	r0, r7
 8007ff4:	f7ff ff14 	bl	8007e20 <__multiply>
 8007ff8:	0031      	movs	r1, r6
 8007ffa:	9001      	str	r0, [sp, #4]
 8007ffc:	0038      	movs	r0, r7
 8007ffe:	f7ff fe49 	bl	8007c94 <_Bfree>
 8008002:	9e01      	ldr	r6, [sp, #4]
 8008004:	106d      	asrs	r5, r5, #1
 8008006:	d00c      	beq.n	8008022 <__pow5mult+0xa2>
 8008008:	6820      	ldr	r0, [r4, #0]
 800800a:	2800      	cmp	r0, #0
 800800c:	d107      	bne.n	800801e <__pow5mult+0x9e>
 800800e:	0022      	movs	r2, r4
 8008010:	0021      	movs	r1, r4
 8008012:	0038      	movs	r0, r7
 8008014:	f7ff ff04 	bl	8007e20 <__multiply>
 8008018:	2300      	movs	r3, #0
 800801a:	6020      	str	r0, [r4, #0]
 800801c:	6003      	str	r3, [r0, #0]
 800801e:	0004      	movs	r4, r0
 8008020:	e7e2      	b.n	8007fe8 <__pow5mult+0x68>
 8008022:	0030      	movs	r0, r6
 8008024:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008026:	46c0      	nop			; (mov r8, r8)
 8008028:	08009848 	.word	0x08009848
 800802c:	08009679 	.word	0x08009679
 8008030:	080096fc 	.word	0x080096fc
 8008034:	00000271 	.word	0x00000271

08008038 <__lshift>:
 8008038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800803a:	000c      	movs	r4, r1
 800803c:	0017      	movs	r7, r2
 800803e:	6923      	ldr	r3, [r4, #16]
 8008040:	1155      	asrs	r5, r2, #5
 8008042:	b087      	sub	sp, #28
 8008044:	18eb      	adds	r3, r5, r3
 8008046:	9302      	str	r3, [sp, #8]
 8008048:	3301      	adds	r3, #1
 800804a:	9301      	str	r3, [sp, #4]
 800804c:	6849      	ldr	r1, [r1, #4]
 800804e:	68a3      	ldr	r3, [r4, #8]
 8008050:	9004      	str	r0, [sp, #16]
 8008052:	9a01      	ldr	r2, [sp, #4]
 8008054:	4293      	cmp	r3, r2
 8008056:	db10      	blt.n	800807a <__lshift+0x42>
 8008058:	9804      	ldr	r0, [sp, #16]
 800805a:	f7ff fdd7 	bl	8007c0c <_Balloc>
 800805e:	2300      	movs	r3, #0
 8008060:	0002      	movs	r2, r0
 8008062:	0006      	movs	r6, r0
 8008064:	0019      	movs	r1, r3
 8008066:	3214      	adds	r2, #20
 8008068:	4298      	cmp	r0, r3
 800806a:	d10c      	bne.n	8008086 <__lshift+0x4e>
 800806c:	21da      	movs	r1, #218	; 0xda
 800806e:	0002      	movs	r2, r0
 8008070:	4b26      	ldr	r3, [pc, #152]	; (800810c <__lshift+0xd4>)
 8008072:	4827      	ldr	r0, [pc, #156]	; (8008110 <__lshift+0xd8>)
 8008074:	31ff      	adds	r1, #255	; 0xff
 8008076:	f000 fbe7 	bl	8008848 <__assert_func>
 800807a:	3101      	adds	r1, #1
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	e7e8      	b.n	8008052 <__lshift+0x1a>
 8008080:	0098      	lsls	r0, r3, #2
 8008082:	5011      	str	r1, [r2, r0]
 8008084:	3301      	adds	r3, #1
 8008086:	42ab      	cmp	r3, r5
 8008088:	dbfa      	blt.n	8008080 <__lshift+0x48>
 800808a:	43eb      	mvns	r3, r5
 800808c:	17db      	asrs	r3, r3, #31
 800808e:	401d      	ands	r5, r3
 8008090:	211f      	movs	r1, #31
 8008092:	0023      	movs	r3, r4
 8008094:	0038      	movs	r0, r7
 8008096:	00ad      	lsls	r5, r5, #2
 8008098:	1955      	adds	r5, r2, r5
 800809a:	6922      	ldr	r2, [r4, #16]
 800809c:	3314      	adds	r3, #20
 800809e:	0092      	lsls	r2, r2, #2
 80080a0:	4008      	ands	r0, r1
 80080a2:	4684      	mov	ip, r0
 80080a4:	189a      	adds	r2, r3, r2
 80080a6:	420f      	tst	r7, r1
 80080a8:	d02a      	beq.n	8008100 <__lshift+0xc8>
 80080aa:	3101      	adds	r1, #1
 80080ac:	1a09      	subs	r1, r1, r0
 80080ae:	9105      	str	r1, [sp, #20]
 80080b0:	2100      	movs	r1, #0
 80080b2:	9503      	str	r5, [sp, #12]
 80080b4:	4667      	mov	r7, ip
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	40b8      	lsls	r0, r7
 80080ba:	4301      	orrs	r1, r0
 80080bc:	9803      	ldr	r0, [sp, #12]
 80080be:	c002      	stmia	r0!, {r1}
 80080c0:	cb02      	ldmia	r3!, {r1}
 80080c2:	9003      	str	r0, [sp, #12]
 80080c4:	9805      	ldr	r0, [sp, #20]
 80080c6:	40c1      	lsrs	r1, r0
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d8f3      	bhi.n	80080b4 <__lshift+0x7c>
 80080cc:	0020      	movs	r0, r4
 80080ce:	3015      	adds	r0, #21
 80080d0:	2304      	movs	r3, #4
 80080d2:	4282      	cmp	r2, r0
 80080d4:	d304      	bcc.n	80080e0 <__lshift+0xa8>
 80080d6:	1b13      	subs	r3, r2, r4
 80080d8:	3b15      	subs	r3, #21
 80080da:	089b      	lsrs	r3, r3, #2
 80080dc:	3301      	adds	r3, #1
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	50e9      	str	r1, [r5, r3]
 80080e2:	2900      	cmp	r1, #0
 80080e4:	d002      	beq.n	80080ec <__lshift+0xb4>
 80080e6:	9b02      	ldr	r3, [sp, #8]
 80080e8:	3302      	adds	r3, #2
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	9b01      	ldr	r3, [sp, #4]
 80080ee:	9804      	ldr	r0, [sp, #16]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	0021      	movs	r1, r4
 80080f4:	6133      	str	r3, [r6, #16]
 80080f6:	f7ff fdcd 	bl	8007c94 <_Bfree>
 80080fa:	0030      	movs	r0, r6
 80080fc:	b007      	add	sp, #28
 80080fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008100:	cb02      	ldmia	r3!, {r1}
 8008102:	c502      	stmia	r5!, {r1}
 8008104:	429a      	cmp	r2, r3
 8008106:	d8fb      	bhi.n	8008100 <__lshift+0xc8>
 8008108:	e7f0      	b.n	80080ec <__lshift+0xb4>
 800810a:	46c0      	nop			; (mov r8, r8)
 800810c:	080096eb 	.word	0x080096eb
 8008110:	080096fc 	.word	0x080096fc

08008114 <__mcmp>:
 8008114:	6902      	ldr	r2, [r0, #16]
 8008116:	690b      	ldr	r3, [r1, #16]
 8008118:	b530      	push	{r4, r5, lr}
 800811a:	0004      	movs	r4, r0
 800811c:	1ad0      	subs	r0, r2, r3
 800811e:	429a      	cmp	r2, r3
 8008120:	d10d      	bne.n	800813e <__mcmp+0x2a>
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	3414      	adds	r4, #20
 8008126:	3114      	adds	r1, #20
 8008128:	18e2      	adds	r2, r4, r3
 800812a:	18c9      	adds	r1, r1, r3
 800812c:	3a04      	subs	r2, #4
 800812e:	3904      	subs	r1, #4
 8008130:	6815      	ldr	r5, [r2, #0]
 8008132:	680b      	ldr	r3, [r1, #0]
 8008134:	429d      	cmp	r5, r3
 8008136:	d003      	beq.n	8008140 <__mcmp+0x2c>
 8008138:	2001      	movs	r0, #1
 800813a:	429d      	cmp	r5, r3
 800813c:	d303      	bcc.n	8008146 <__mcmp+0x32>
 800813e:	bd30      	pop	{r4, r5, pc}
 8008140:	4294      	cmp	r4, r2
 8008142:	d3f3      	bcc.n	800812c <__mcmp+0x18>
 8008144:	e7fb      	b.n	800813e <__mcmp+0x2a>
 8008146:	4240      	negs	r0, r0
 8008148:	e7f9      	b.n	800813e <__mcmp+0x2a>
	...

0800814c <__mdiff>:
 800814c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800814e:	000e      	movs	r6, r1
 8008150:	0007      	movs	r7, r0
 8008152:	0011      	movs	r1, r2
 8008154:	0030      	movs	r0, r6
 8008156:	b087      	sub	sp, #28
 8008158:	0014      	movs	r4, r2
 800815a:	f7ff ffdb 	bl	8008114 <__mcmp>
 800815e:	1e05      	subs	r5, r0, #0
 8008160:	d110      	bne.n	8008184 <__mdiff+0x38>
 8008162:	0001      	movs	r1, r0
 8008164:	0038      	movs	r0, r7
 8008166:	f7ff fd51 	bl	8007c0c <_Balloc>
 800816a:	1e02      	subs	r2, r0, #0
 800816c:	d104      	bne.n	8008178 <__mdiff+0x2c>
 800816e:	4b40      	ldr	r3, [pc, #256]	; (8008270 <__mdiff+0x124>)
 8008170:	4940      	ldr	r1, [pc, #256]	; (8008274 <__mdiff+0x128>)
 8008172:	4841      	ldr	r0, [pc, #260]	; (8008278 <__mdiff+0x12c>)
 8008174:	f000 fb68 	bl	8008848 <__assert_func>
 8008178:	2301      	movs	r3, #1
 800817a:	6145      	str	r5, [r0, #20]
 800817c:	6103      	str	r3, [r0, #16]
 800817e:	0010      	movs	r0, r2
 8008180:	b007      	add	sp, #28
 8008182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008184:	2301      	movs	r3, #1
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	2800      	cmp	r0, #0
 800818a:	db04      	blt.n	8008196 <__mdiff+0x4a>
 800818c:	0023      	movs	r3, r4
 800818e:	0034      	movs	r4, r6
 8008190:	001e      	movs	r6, r3
 8008192:	2300      	movs	r3, #0
 8008194:	9301      	str	r3, [sp, #4]
 8008196:	0038      	movs	r0, r7
 8008198:	6861      	ldr	r1, [r4, #4]
 800819a:	f7ff fd37 	bl	8007c0c <_Balloc>
 800819e:	1e02      	subs	r2, r0, #0
 80081a0:	d103      	bne.n	80081aa <__mdiff+0x5e>
 80081a2:	2190      	movs	r1, #144	; 0x90
 80081a4:	4b32      	ldr	r3, [pc, #200]	; (8008270 <__mdiff+0x124>)
 80081a6:	0089      	lsls	r1, r1, #2
 80081a8:	e7e3      	b.n	8008172 <__mdiff+0x26>
 80081aa:	9b01      	ldr	r3, [sp, #4]
 80081ac:	2700      	movs	r7, #0
 80081ae:	60c3      	str	r3, [r0, #12]
 80081b0:	6920      	ldr	r0, [r4, #16]
 80081b2:	3414      	adds	r4, #20
 80081b4:	9401      	str	r4, [sp, #4]
 80081b6:	9b01      	ldr	r3, [sp, #4]
 80081b8:	0084      	lsls	r4, r0, #2
 80081ba:	191b      	adds	r3, r3, r4
 80081bc:	0034      	movs	r4, r6
 80081be:	9302      	str	r3, [sp, #8]
 80081c0:	6933      	ldr	r3, [r6, #16]
 80081c2:	3414      	adds	r4, #20
 80081c4:	0099      	lsls	r1, r3, #2
 80081c6:	1863      	adds	r3, r4, r1
 80081c8:	9303      	str	r3, [sp, #12]
 80081ca:	0013      	movs	r3, r2
 80081cc:	3314      	adds	r3, #20
 80081ce:	469c      	mov	ip, r3
 80081d0:	9305      	str	r3, [sp, #20]
 80081d2:	9b01      	ldr	r3, [sp, #4]
 80081d4:	9304      	str	r3, [sp, #16]
 80081d6:	9b04      	ldr	r3, [sp, #16]
 80081d8:	cc02      	ldmia	r4!, {r1}
 80081da:	cb20      	ldmia	r3!, {r5}
 80081dc:	9304      	str	r3, [sp, #16]
 80081de:	b2ab      	uxth	r3, r5
 80081e0:	19df      	adds	r7, r3, r7
 80081e2:	b28b      	uxth	r3, r1
 80081e4:	1afb      	subs	r3, r7, r3
 80081e6:	0c09      	lsrs	r1, r1, #16
 80081e8:	0c2d      	lsrs	r5, r5, #16
 80081ea:	1a6d      	subs	r5, r5, r1
 80081ec:	1419      	asrs	r1, r3, #16
 80081ee:	186d      	adds	r5, r5, r1
 80081f0:	4661      	mov	r1, ip
 80081f2:	142f      	asrs	r7, r5, #16
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	042d      	lsls	r5, r5, #16
 80081f8:	432b      	orrs	r3, r5
 80081fa:	c108      	stmia	r1!, {r3}
 80081fc:	9b03      	ldr	r3, [sp, #12]
 80081fe:	468c      	mov	ip, r1
 8008200:	42a3      	cmp	r3, r4
 8008202:	d8e8      	bhi.n	80081d6 <__mdiff+0x8a>
 8008204:	0031      	movs	r1, r6
 8008206:	9c03      	ldr	r4, [sp, #12]
 8008208:	3115      	adds	r1, #21
 800820a:	2304      	movs	r3, #4
 800820c:	428c      	cmp	r4, r1
 800820e:	d304      	bcc.n	800821a <__mdiff+0xce>
 8008210:	1ba3      	subs	r3, r4, r6
 8008212:	3b15      	subs	r3, #21
 8008214:	089b      	lsrs	r3, r3, #2
 8008216:	3301      	adds	r3, #1
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	9901      	ldr	r1, [sp, #4]
 800821c:	18cc      	adds	r4, r1, r3
 800821e:	9905      	ldr	r1, [sp, #20]
 8008220:	0026      	movs	r6, r4
 8008222:	18cb      	adds	r3, r1, r3
 8008224:	469c      	mov	ip, r3
 8008226:	9902      	ldr	r1, [sp, #8]
 8008228:	428e      	cmp	r6, r1
 800822a:	d310      	bcc.n	800824e <__mdiff+0x102>
 800822c:	9e02      	ldr	r6, [sp, #8]
 800822e:	1ee1      	subs	r1, r4, #3
 8008230:	2500      	movs	r5, #0
 8008232:	428e      	cmp	r6, r1
 8008234:	d304      	bcc.n	8008240 <__mdiff+0xf4>
 8008236:	0031      	movs	r1, r6
 8008238:	3103      	adds	r1, #3
 800823a:	1b0c      	subs	r4, r1, r4
 800823c:	08a4      	lsrs	r4, r4, #2
 800823e:	00a5      	lsls	r5, r4, #2
 8008240:	195b      	adds	r3, r3, r5
 8008242:	3b04      	subs	r3, #4
 8008244:	6819      	ldr	r1, [r3, #0]
 8008246:	2900      	cmp	r1, #0
 8008248:	d00f      	beq.n	800826a <__mdiff+0x11e>
 800824a:	6110      	str	r0, [r2, #16]
 800824c:	e797      	b.n	800817e <__mdiff+0x32>
 800824e:	ce02      	ldmia	r6!, {r1}
 8008250:	b28d      	uxth	r5, r1
 8008252:	19ed      	adds	r5, r5, r7
 8008254:	0c0f      	lsrs	r7, r1, #16
 8008256:	1429      	asrs	r1, r5, #16
 8008258:	1879      	adds	r1, r7, r1
 800825a:	140f      	asrs	r7, r1, #16
 800825c:	b2ad      	uxth	r5, r5
 800825e:	0409      	lsls	r1, r1, #16
 8008260:	430d      	orrs	r5, r1
 8008262:	4661      	mov	r1, ip
 8008264:	c120      	stmia	r1!, {r5}
 8008266:	468c      	mov	ip, r1
 8008268:	e7dd      	b.n	8008226 <__mdiff+0xda>
 800826a:	3801      	subs	r0, #1
 800826c:	e7e9      	b.n	8008242 <__mdiff+0xf6>
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	080096eb 	.word	0x080096eb
 8008274:	00000232 	.word	0x00000232
 8008278:	080096fc 	.word	0x080096fc

0800827c <__d2b>:
 800827c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800827e:	2101      	movs	r1, #1
 8008280:	0014      	movs	r4, r2
 8008282:	001e      	movs	r6, r3
 8008284:	9f08      	ldr	r7, [sp, #32]
 8008286:	f7ff fcc1 	bl	8007c0c <_Balloc>
 800828a:	1e05      	subs	r5, r0, #0
 800828c:	d105      	bne.n	800829a <__d2b+0x1e>
 800828e:	0002      	movs	r2, r0
 8008290:	4b26      	ldr	r3, [pc, #152]	; (800832c <__d2b+0xb0>)
 8008292:	4927      	ldr	r1, [pc, #156]	; (8008330 <__d2b+0xb4>)
 8008294:	4827      	ldr	r0, [pc, #156]	; (8008334 <__d2b+0xb8>)
 8008296:	f000 fad7 	bl	8008848 <__assert_func>
 800829a:	0333      	lsls	r3, r6, #12
 800829c:	0076      	lsls	r6, r6, #1
 800829e:	0b1b      	lsrs	r3, r3, #12
 80082a0:	0d76      	lsrs	r6, r6, #21
 80082a2:	d124      	bne.n	80082ee <__d2b+0x72>
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	2c00      	cmp	r4, #0
 80082a8:	d027      	beq.n	80082fa <__d2b+0x7e>
 80082aa:	4668      	mov	r0, sp
 80082ac:	9400      	str	r4, [sp, #0]
 80082ae:	f7ff fd73 	bl	8007d98 <__lo0bits>
 80082b2:	9c00      	ldr	r4, [sp, #0]
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d01e      	beq.n	80082f6 <__d2b+0x7a>
 80082b8:	9b01      	ldr	r3, [sp, #4]
 80082ba:	2120      	movs	r1, #32
 80082bc:	001a      	movs	r2, r3
 80082be:	1a09      	subs	r1, r1, r0
 80082c0:	408a      	lsls	r2, r1
 80082c2:	40c3      	lsrs	r3, r0
 80082c4:	4322      	orrs	r2, r4
 80082c6:	616a      	str	r2, [r5, #20]
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	9c01      	ldr	r4, [sp, #4]
 80082cc:	61ac      	str	r4, [r5, #24]
 80082ce:	1e63      	subs	r3, r4, #1
 80082d0:	419c      	sbcs	r4, r3
 80082d2:	3401      	adds	r4, #1
 80082d4:	612c      	str	r4, [r5, #16]
 80082d6:	2e00      	cmp	r6, #0
 80082d8:	d018      	beq.n	800830c <__d2b+0x90>
 80082da:	4b17      	ldr	r3, [pc, #92]	; (8008338 <__d2b+0xbc>)
 80082dc:	18f6      	adds	r6, r6, r3
 80082de:	2335      	movs	r3, #53	; 0x35
 80082e0:	1836      	adds	r6, r6, r0
 80082e2:	1a18      	subs	r0, r3, r0
 80082e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082e6:	603e      	str	r6, [r7, #0]
 80082e8:	6018      	str	r0, [r3, #0]
 80082ea:	0028      	movs	r0, r5
 80082ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082ee:	2280      	movs	r2, #128	; 0x80
 80082f0:	0352      	lsls	r2, r2, #13
 80082f2:	4313      	orrs	r3, r2
 80082f4:	e7d6      	b.n	80082a4 <__d2b+0x28>
 80082f6:	616c      	str	r4, [r5, #20]
 80082f8:	e7e7      	b.n	80082ca <__d2b+0x4e>
 80082fa:	a801      	add	r0, sp, #4
 80082fc:	f7ff fd4c 	bl	8007d98 <__lo0bits>
 8008300:	2401      	movs	r4, #1
 8008302:	9b01      	ldr	r3, [sp, #4]
 8008304:	612c      	str	r4, [r5, #16]
 8008306:	616b      	str	r3, [r5, #20]
 8008308:	3020      	adds	r0, #32
 800830a:	e7e4      	b.n	80082d6 <__d2b+0x5a>
 800830c:	4b0b      	ldr	r3, [pc, #44]	; (800833c <__d2b+0xc0>)
 800830e:	18c0      	adds	r0, r0, r3
 8008310:	4b0b      	ldr	r3, [pc, #44]	; (8008340 <__d2b+0xc4>)
 8008312:	6038      	str	r0, [r7, #0]
 8008314:	18e3      	adds	r3, r4, r3
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	18eb      	adds	r3, r5, r3
 800831a:	6958      	ldr	r0, [r3, #20]
 800831c:	f7ff fd22 	bl	8007d64 <__hi0bits>
 8008320:	0164      	lsls	r4, r4, #5
 8008322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008324:	1a24      	subs	r4, r4, r0
 8008326:	601c      	str	r4, [r3, #0]
 8008328:	e7df      	b.n	80082ea <__d2b+0x6e>
 800832a:	46c0      	nop			; (mov r8, r8)
 800832c:	080096eb 	.word	0x080096eb
 8008330:	0000030a 	.word	0x0000030a
 8008334:	080096fc 	.word	0x080096fc
 8008338:	fffffbcd 	.word	0xfffffbcd
 800833c:	fffffbce 	.word	0xfffffbce
 8008340:	3fffffff 	.word	0x3fffffff

08008344 <_calloc_r>:
 8008344:	b570      	push	{r4, r5, r6, lr}
 8008346:	0c13      	lsrs	r3, r2, #16
 8008348:	0c0d      	lsrs	r5, r1, #16
 800834a:	d11e      	bne.n	800838a <_calloc_r+0x46>
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10c      	bne.n	800836a <_calloc_r+0x26>
 8008350:	b289      	uxth	r1, r1
 8008352:	b294      	uxth	r4, r2
 8008354:	434c      	muls	r4, r1
 8008356:	0021      	movs	r1, r4
 8008358:	f000 f88c 	bl	8008474 <_malloc_r>
 800835c:	1e05      	subs	r5, r0, #0
 800835e:	d01b      	beq.n	8008398 <_calloc_r+0x54>
 8008360:	0022      	movs	r2, r4
 8008362:	2100      	movs	r1, #0
 8008364:	f7fe f8f4 	bl	8006550 <memset>
 8008368:	e016      	b.n	8008398 <_calloc_r+0x54>
 800836a:	1c1d      	adds	r5, r3, #0
 800836c:	1c0b      	adds	r3, r1, #0
 800836e:	b292      	uxth	r2, r2
 8008370:	b289      	uxth	r1, r1
 8008372:	b29c      	uxth	r4, r3
 8008374:	4351      	muls	r1, r2
 8008376:	b2ab      	uxth	r3, r5
 8008378:	4363      	muls	r3, r4
 800837a:	0c0c      	lsrs	r4, r1, #16
 800837c:	191c      	adds	r4, r3, r4
 800837e:	0c22      	lsrs	r2, r4, #16
 8008380:	d107      	bne.n	8008392 <_calloc_r+0x4e>
 8008382:	0424      	lsls	r4, r4, #16
 8008384:	b289      	uxth	r1, r1
 8008386:	430c      	orrs	r4, r1
 8008388:	e7e5      	b.n	8008356 <_calloc_r+0x12>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <_calloc_r+0x4e>
 800838e:	1c13      	adds	r3, r2, #0
 8008390:	e7ed      	b.n	800836e <_calloc_r+0x2a>
 8008392:	230c      	movs	r3, #12
 8008394:	2500      	movs	r5, #0
 8008396:	6003      	str	r3, [r0, #0]
 8008398:	0028      	movs	r0, r5
 800839a:	bd70      	pop	{r4, r5, r6, pc}

0800839c <_free_r>:
 800839c:	b570      	push	{r4, r5, r6, lr}
 800839e:	0005      	movs	r5, r0
 80083a0:	2900      	cmp	r1, #0
 80083a2:	d010      	beq.n	80083c6 <_free_r+0x2a>
 80083a4:	1f0c      	subs	r4, r1, #4
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	da00      	bge.n	80083ae <_free_r+0x12>
 80083ac:	18e4      	adds	r4, r4, r3
 80083ae:	0028      	movs	r0, r5
 80083b0:	f000 fa9e 	bl	80088f0 <__malloc_lock>
 80083b4:	4a1d      	ldr	r2, [pc, #116]	; (800842c <_free_r+0x90>)
 80083b6:	6813      	ldr	r3, [r2, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d105      	bne.n	80083c8 <_free_r+0x2c>
 80083bc:	6063      	str	r3, [r4, #4]
 80083be:	6014      	str	r4, [r2, #0]
 80083c0:	0028      	movs	r0, r5
 80083c2:	f000 fa9d 	bl	8008900 <__malloc_unlock>
 80083c6:	bd70      	pop	{r4, r5, r6, pc}
 80083c8:	42a3      	cmp	r3, r4
 80083ca:	d908      	bls.n	80083de <_free_r+0x42>
 80083cc:	6821      	ldr	r1, [r4, #0]
 80083ce:	1860      	adds	r0, r4, r1
 80083d0:	4283      	cmp	r3, r0
 80083d2:	d1f3      	bne.n	80083bc <_free_r+0x20>
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	1841      	adds	r1, r0, r1
 80083da:	6021      	str	r1, [r4, #0]
 80083dc:	e7ee      	b.n	80083bc <_free_r+0x20>
 80083de:	001a      	movs	r2, r3
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <_free_r+0x4e>
 80083e6:	42a3      	cmp	r3, r4
 80083e8:	d9f9      	bls.n	80083de <_free_r+0x42>
 80083ea:	6811      	ldr	r1, [r2, #0]
 80083ec:	1850      	adds	r0, r2, r1
 80083ee:	42a0      	cmp	r0, r4
 80083f0:	d10b      	bne.n	800840a <_free_r+0x6e>
 80083f2:	6820      	ldr	r0, [r4, #0]
 80083f4:	1809      	adds	r1, r1, r0
 80083f6:	1850      	adds	r0, r2, r1
 80083f8:	6011      	str	r1, [r2, #0]
 80083fa:	4283      	cmp	r3, r0
 80083fc:	d1e0      	bne.n	80083c0 <_free_r+0x24>
 80083fe:	6818      	ldr	r0, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	1841      	adds	r1, r0, r1
 8008404:	6011      	str	r1, [r2, #0]
 8008406:	6053      	str	r3, [r2, #4]
 8008408:	e7da      	b.n	80083c0 <_free_r+0x24>
 800840a:	42a0      	cmp	r0, r4
 800840c:	d902      	bls.n	8008414 <_free_r+0x78>
 800840e:	230c      	movs	r3, #12
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	e7d5      	b.n	80083c0 <_free_r+0x24>
 8008414:	6821      	ldr	r1, [r4, #0]
 8008416:	1860      	adds	r0, r4, r1
 8008418:	4283      	cmp	r3, r0
 800841a:	d103      	bne.n	8008424 <_free_r+0x88>
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	1841      	adds	r1, r0, r1
 8008422:	6021      	str	r1, [r4, #0]
 8008424:	6063      	str	r3, [r4, #4]
 8008426:	6054      	str	r4, [r2, #4]
 8008428:	e7ca      	b.n	80083c0 <_free_r+0x24>
 800842a:	46c0      	nop			; (mov r8, r8)
 800842c:	200004e4 	.word	0x200004e4

08008430 <sbrk_aligned>:
 8008430:	b570      	push	{r4, r5, r6, lr}
 8008432:	4e0f      	ldr	r6, [pc, #60]	; (8008470 <sbrk_aligned+0x40>)
 8008434:	000d      	movs	r5, r1
 8008436:	6831      	ldr	r1, [r6, #0]
 8008438:	0004      	movs	r4, r0
 800843a:	2900      	cmp	r1, #0
 800843c:	d102      	bne.n	8008444 <sbrk_aligned+0x14>
 800843e:	f000 f9f1 	bl	8008824 <_sbrk_r>
 8008442:	6030      	str	r0, [r6, #0]
 8008444:	0029      	movs	r1, r5
 8008446:	0020      	movs	r0, r4
 8008448:	f000 f9ec 	bl	8008824 <_sbrk_r>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d00a      	beq.n	8008466 <sbrk_aligned+0x36>
 8008450:	2303      	movs	r3, #3
 8008452:	1cc5      	adds	r5, r0, #3
 8008454:	439d      	bics	r5, r3
 8008456:	42a8      	cmp	r0, r5
 8008458:	d007      	beq.n	800846a <sbrk_aligned+0x3a>
 800845a:	1a29      	subs	r1, r5, r0
 800845c:	0020      	movs	r0, r4
 800845e:	f000 f9e1 	bl	8008824 <_sbrk_r>
 8008462:	1c43      	adds	r3, r0, #1
 8008464:	d101      	bne.n	800846a <sbrk_aligned+0x3a>
 8008466:	2501      	movs	r5, #1
 8008468:	426d      	negs	r5, r5
 800846a:	0028      	movs	r0, r5
 800846c:	bd70      	pop	{r4, r5, r6, pc}
 800846e:	46c0      	nop			; (mov r8, r8)
 8008470:	200004e8 	.word	0x200004e8

08008474 <_malloc_r>:
 8008474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008476:	2203      	movs	r2, #3
 8008478:	1ccb      	adds	r3, r1, #3
 800847a:	4393      	bics	r3, r2
 800847c:	3308      	adds	r3, #8
 800847e:	0006      	movs	r6, r0
 8008480:	001f      	movs	r7, r3
 8008482:	2b0c      	cmp	r3, #12
 8008484:	d232      	bcs.n	80084ec <_malloc_r+0x78>
 8008486:	270c      	movs	r7, #12
 8008488:	42b9      	cmp	r1, r7
 800848a:	d831      	bhi.n	80084f0 <_malloc_r+0x7c>
 800848c:	0030      	movs	r0, r6
 800848e:	f000 fa2f 	bl	80088f0 <__malloc_lock>
 8008492:	4d32      	ldr	r5, [pc, #200]	; (800855c <_malloc_r+0xe8>)
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	001c      	movs	r4, r3
 8008498:	2c00      	cmp	r4, #0
 800849a:	d12e      	bne.n	80084fa <_malloc_r+0x86>
 800849c:	0039      	movs	r1, r7
 800849e:	0030      	movs	r0, r6
 80084a0:	f7ff ffc6 	bl	8008430 <sbrk_aligned>
 80084a4:	0004      	movs	r4, r0
 80084a6:	1c43      	adds	r3, r0, #1
 80084a8:	d11e      	bne.n	80084e8 <_malloc_r+0x74>
 80084aa:	682c      	ldr	r4, [r5, #0]
 80084ac:	0025      	movs	r5, r4
 80084ae:	2d00      	cmp	r5, #0
 80084b0:	d14a      	bne.n	8008548 <_malloc_r+0xd4>
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	0029      	movs	r1, r5
 80084b6:	18e3      	adds	r3, r4, r3
 80084b8:	0030      	movs	r0, r6
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	f000 f9b2 	bl	8008824 <_sbrk_r>
 80084c0:	9b01      	ldr	r3, [sp, #4]
 80084c2:	4283      	cmp	r3, r0
 80084c4:	d143      	bne.n	800854e <_malloc_r+0xda>
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	3703      	adds	r7, #3
 80084ca:	1aff      	subs	r7, r7, r3
 80084cc:	2303      	movs	r3, #3
 80084ce:	439f      	bics	r7, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	2f0c      	cmp	r7, #12
 80084d4:	d200      	bcs.n	80084d8 <_malloc_r+0x64>
 80084d6:	270c      	movs	r7, #12
 80084d8:	0039      	movs	r1, r7
 80084da:	0030      	movs	r0, r6
 80084dc:	f7ff ffa8 	bl	8008430 <sbrk_aligned>
 80084e0:	1c43      	adds	r3, r0, #1
 80084e2:	d034      	beq.n	800854e <_malloc_r+0xda>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	19df      	adds	r7, r3, r7
 80084e8:	6027      	str	r7, [r4, #0]
 80084ea:	e013      	b.n	8008514 <_malloc_r+0xa0>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	dacb      	bge.n	8008488 <_malloc_r+0x14>
 80084f0:	230c      	movs	r3, #12
 80084f2:	2500      	movs	r5, #0
 80084f4:	6033      	str	r3, [r6, #0]
 80084f6:	0028      	movs	r0, r5
 80084f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80084fa:	6822      	ldr	r2, [r4, #0]
 80084fc:	1bd1      	subs	r1, r2, r7
 80084fe:	d420      	bmi.n	8008542 <_malloc_r+0xce>
 8008500:	290b      	cmp	r1, #11
 8008502:	d917      	bls.n	8008534 <_malloc_r+0xc0>
 8008504:	19e2      	adds	r2, r4, r7
 8008506:	6027      	str	r7, [r4, #0]
 8008508:	42a3      	cmp	r3, r4
 800850a:	d111      	bne.n	8008530 <_malloc_r+0xbc>
 800850c:	602a      	str	r2, [r5, #0]
 800850e:	6863      	ldr	r3, [r4, #4]
 8008510:	6011      	str	r1, [r2, #0]
 8008512:	6053      	str	r3, [r2, #4]
 8008514:	0030      	movs	r0, r6
 8008516:	0025      	movs	r5, r4
 8008518:	f000 f9f2 	bl	8008900 <__malloc_unlock>
 800851c:	2207      	movs	r2, #7
 800851e:	350b      	adds	r5, #11
 8008520:	1d23      	adds	r3, r4, #4
 8008522:	4395      	bics	r5, r2
 8008524:	1aea      	subs	r2, r5, r3
 8008526:	429d      	cmp	r5, r3
 8008528:	d0e5      	beq.n	80084f6 <_malloc_r+0x82>
 800852a:	1b5b      	subs	r3, r3, r5
 800852c:	50a3      	str	r3, [r4, r2]
 800852e:	e7e2      	b.n	80084f6 <_malloc_r+0x82>
 8008530:	605a      	str	r2, [r3, #4]
 8008532:	e7ec      	b.n	800850e <_malloc_r+0x9a>
 8008534:	6862      	ldr	r2, [r4, #4]
 8008536:	42a3      	cmp	r3, r4
 8008538:	d101      	bne.n	800853e <_malloc_r+0xca>
 800853a:	602a      	str	r2, [r5, #0]
 800853c:	e7ea      	b.n	8008514 <_malloc_r+0xa0>
 800853e:	605a      	str	r2, [r3, #4]
 8008540:	e7e8      	b.n	8008514 <_malloc_r+0xa0>
 8008542:	0023      	movs	r3, r4
 8008544:	6864      	ldr	r4, [r4, #4]
 8008546:	e7a7      	b.n	8008498 <_malloc_r+0x24>
 8008548:	002c      	movs	r4, r5
 800854a:	686d      	ldr	r5, [r5, #4]
 800854c:	e7af      	b.n	80084ae <_malloc_r+0x3a>
 800854e:	230c      	movs	r3, #12
 8008550:	0030      	movs	r0, r6
 8008552:	6033      	str	r3, [r6, #0]
 8008554:	f000 f9d4 	bl	8008900 <__malloc_unlock>
 8008558:	e7cd      	b.n	80084f6 <_malloc_r+0x82>
 800855a:	46c0      	nop			; (mov r8, r8)
 800855c:	200004e4 	.word	0x200004e4

08008560 <__ssputs_r>:
 8008560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008562:	688e      	ldr	r6, [r1, #8]
 8008564:	b085      	sub	sp, #20
 8008566:	0007      	movs	r7, r0
 8008568:	000c      	movs	r4, r1
 800856a:	9203      	str	r2, [sp, #12]
 800856c:	9301      	str	r3, [sp, #4]
 800856e:	429e      	cmp	r6, r3
 8008570:	d83c      	bhi.n	80085ec <__ssputs_r+0x8c>
 8008572:	2390      	movs	r3, #144	; 0x90
 8008574:	898a      	ldrh	r2, [r1, #12]
 8008576:	00db      	lsls	r3, r3, #3
 8008578:	421a      	tst	r2, r3
 800857a:	d034      	beq.n	80085e6 <__ssputs_r+0x86>
 800857c:	6909      	ldr	r1, [r1, #16]
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	6960      	ldr	r0, [r4, #20]
 8008582:	1a5b      	subs	r3, r3, r1
 8008584:	9302      	str	r3, [sp, #8]
 8008586:	2303      	movs	r3, #3
 8008588:	4343      	muls	r3, r0
 800858a:	0fdd      	lsrs	r5, r3, #31
 800858c:	18ed      	adds	r5, r5, r3
 800858e:	9b01      	ldr	r3, [sp, #4]
 8008590:	9802      	ldr	r0, [sp, #8]
 8008592:	3301      	adds	r3, #1
 8008594:	181b      	adds	r3, r3, r0
 8008596:	106d      	asrs	r5, r5, #1
 8008598:	42ab      	cmp	r3, r5
 800859a:	d900      	bls.n	800859e <__ssputs_r+0x3e>
 800859c:	001d      	movs	r5, r3
 800859e:	0553      	lsls	r3, r2, #21
 80085a0:	d532      	bpl.n	8008608 <__ssputs_r+0xa8>
 80085a2:	0029      	movs	r1, r5
 80085a4:	0038      	movs	r0, r7
 80085a6:	f7ff ff65 	bl	8008474 <_malloc_r>
 80085aa:	1e06      	subs	r6, r0, #0
 80085ac:	d109      	bne.n	80085c2 <__ssputs_r+0x62>
 80085ae:	230c      	movs	r3, #12
 80085b0:	603b      	str	r3, [r7, #0]
 80085b2:	2340      	movs	r3, #64	; 0x40
 80085b4:	2001      	movs	r0, #1
 80085b6:	89a2      	ldrh	r2, [r4, #12]
 80085b8:	4240      	negs	r0, r0
 80085ba:	4313      	orrs	r3, r2
 80085bc:	81a3      	strh	r3, [r4, #12]
 80085be:	b005      	add	sp, #20
 80085c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085c2:	9a02      	ldr	r2, [sp, #8]
 80085c4:	6921      	ldr	r1, [r4, #16]
 80085c6:	f7ff fb18 	bl	8007bfa <memcpy>
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	4a14      	ldr	r2, [pc, #80]	; (8008620 <__ssputs_r+0xc0>)
 80085ce:	401a      	ands	r2, r3
 80085d0:	2380      	movs	r3, #128	; 0x80
 80085d2:	4313      	orrs	r3, r2
 80085d4:	81a3      	strh	r3, [r4, #12]
 80085d6:	9b02      	ldr	r3, [sp, #8]
 80085d8:	6126      	str	r6, [r4, #16]
 80085da:	18f6      	adds	r6, r6, r3
 80085dc:	6026      	str	r6, [r4, #0]
 80085de:	6165      	str	r5, [r4, #20]
 80085e0:	9e01      	ldr	r6, [sp, #4]
 80085e2:	1aed      	subs	r5, r5, r3
 80085e4:	60a5      	str	r5, [r4, #8]
 80085e6:	9b01      	ldr	r3, [sp, #4]
 80085e8:	429e      	cmp	r6, r3
 80085ea:	d900      	bls.n	80085ee <__ssputs_r+0x8e>
 80085ec:	9e01      	ldr	r6, [sp, #4]
 80085ee:	0032      	movs	r2, r6
 80085f0:	9903      	ldr	r1, [sp, #12]
 80085f2:	6820      	ldr	r0, [r4, #0]
 80085f4:	f000 f968 	bl	80088c8 <memmove>
 80085f8:	68a3      	ldr	r3, [r4, #8]
 80085fa:	2000      	movs	r0, #0
 80085fc:	1b9b      	subs	r3, r3, r6
 80085fe:	60a3      	str	r3, [r4, #8]
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	199e      	adds	r6, r3, r6
 8008604:	6026      	str	r6, [r4, #0]
 8008606:	e7da      	b.n	80085be <__ssputs_r+0x5e>
 8008608:	002a      	movs	r2, r5
 800860a:	0038      	movs	r0, r7
 800860c:	f000 f980 	bl	8008910 <_realloc_r>
 8008610:	1e06      	subs	r6, r0, #0
 8008612:	d1e0      	bne.n	80085d6 <__ssputs_r+0x76>
 8008614:	0038      	movs	r0, r7
 8008616:	6921      	ldr	r1, [r4, #16]
 8008618:	f7ff fec0 	bl	800839c <_free_r>
 800861c:	e7c7      	b.n	80085ae <__ssputs_r+0x4e>
 800861e:	46c0      	nop			; (mov r8, r8)
 8008620:	fffffb7f 	.word	0xfffffb7f

08008624 <_svfiprintf_r>:
 8008624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008626:	b0a1      	sub	sp, #132	; 0x84
 8008628:	9003      	str	r0, [sp, #12]
 800862a:	001d      	movs	r5, r3
 800862c:	898b      	ldrh	r3, [r1, #12]
 800862e:	000f      	movs	r7, r1
 8008630:	0016      	movs	r6, r2
 8008632:	061b      	lsls	r3, r3, #24
 8008634:	d511      	bpl.n	800865a <_svfiprintf_r+0x36>
 8008636:	690b      	ldr	r3, [r1, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10e      	bne.n	800865a <_svfiprintf_r+0x36>
 800863c:	2140      	movs	r1, #64	; 0x40
 800863e:	f7ff ff19 	bl	8008474 <_malloc_r>
 8008642:	6038      	str	r0, [r7, #0]
 8008644:	6138      	str	r0, [r7, #16]
 8008646:	2800      	cmp	r0, #0
 8008648:	d105      	bne.n	8008656 <_svfiprintf_r+0x32>
 800864a:	230c      	movs	r3, #12
 800864c:	9a03      	ldr	r2, [sp, #12]
 800864e:	3801      	subs	r0, #1
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	b021      	add	sp, #132	; 0x84
 8008654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008656:	2340      	movs	r3, #64	; 0x40
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	2300      	movs	r3, #0
 800865c:	ac08      	add	r4, sp, #32
 800865e:	6163      	str	r3, [r4, #20]
 8008660:	3320      	adds	r3, #32
 8008662:	7663      	strb	r3, [r4, #25]
 8008664:	3310      	adds	r3, #16
 8008666:	76a3      	strb	r3, [r4, #26]
 8008668:	9507      	str	r5, [sp, #28]
 800866a:	0035      	movs	r5, r6
 800866c:	782b      	ldrb	r3, [r5, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <_svfiprintf_r+0x52>
 8008672:	2b25      	cmp	r3, #37	; 0x25
 8008674:	d147      	bne.n	8008706 <_svfiprintf_r+0xe2>
 8008676:	1bab      	subs	r3, r5, r6
 8008678:	9305      	str	r3, [sp, #20]
 800867a:	42b5      	cmp	r5, r6
 800867c:	d00c      	beq.n	8008698 <_svfiprintf_r+0x74>
 800867e:	0032      	movs	r2, r6
 8008680:	0039      	movs	r1, r7
 8008682:	9803      	ldr	r0, [sp, #12]
 8008684:	f7ff ff6c 	bl	8008560 <__ssputs_r>
 8008688:	1c43      	adds	r3, r0, #1
 800868a:	d100      	bne.n	800868e <_svfiprintf_r+0x6a>
 800868c:	e0ae      	b.n	80087ec <_svfiprintf_r+0x1c8>
 800868e:	6962      	ldr	r2, [r4, #20]
 8008690:	9b05      	ldr	r3, [sp, #20]
 8008692:	4694      	mov	ip, r2
 8008694:	4463      	add	r3, ip
 8008696:	6163      	str	r3, [r4, #20]
 8008698:	782b      	ldrb	r3, [r5, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d100      	bne.n	80086a0 <_svfiprintf_r+0x7c>
 800869e:	e0a5      	b.n	80087ec <_svfiprintf_r+0x1c8>
 80086a0:	2201      	movs	r2, #1
 80086a2:	2300      	movs	r3, #0
 80086a4:	4252      	negs	r2, r2
 80086a6:	6062      	str	r2, [r4, #4]
 80086a8:	a904      	add	r1, sp, #16
 80086aa:	3254      	adds	r2, #84	; 0x54
 80086ac:	1852      	adds	r2, r2, r1
 80086ae:	1c6e      	adds	r6, r5, #1
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	60e3      	str	r3, [r4, #12]
 80086b4:	60a3      	str	r3, [r4, #8]
 80086b6:	7013      	strb	r3, [r2, #0]
 80086b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80086ba:	2205      	movs	r2, #5
 80086bc:	7831      	ldrb	r1, [r6, #0]
 80086be:	4854      	ldr	r0, [pc, #336]	; (8008810 <_svfiprintf_r+0x1ec>)
 80086c0:	f7ff fa90 	bl	8007be4 <memchr>
 80086c4:	1c75      	adds	r5, r6, #1
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d11f      	bne.n	800870a <_svfiprintf_r+0xe6>
 80086ca:	6822      	ldr	r2, [r4, #0]
 80086cc:	06d3      	lsls	r3, r2, #27
 80086ce:	d504      	bpl.n	80086da <_svfiprintf_r+0xb6>
 80086d0:	2353      	movs	r3, #83	; 0x53
 80086d2:	a904      	add	r1, sp, #16
 80086d4:	185b      	adds	r3, r3, r1
 80086d6:	2120      	movs	r1, #32
 80086d8:	7019      	strb	r1, [r3, #0]
 80086da:	0713      	lsls	r3, r2, #28
 80086dc:	d504      	bpl.n	80086e8 <_svfiprintf_r+0xc4>
 80086de:	2353      	movs	r3, #83	; 0x53
 80086e0:	a904      	add	r1, sp, #16
 80086e2:	185b      	adds	r3, r3, r1
 80086e4:	212b      	movs	r1, #43	; 0x2b
 80086e6:	7019      	strb	r1, [r3, #0]
 80086e8:	7833      	ldrb	r3, [r6, #0]
 80086ea:	2b2a      	cmp	r3, #42	; 0x2a
 80086ec:	d016      	beq.n	800871c <_svfiprintf_r+0xf8>
 80086ee:	0035      	movs	r5, r6
 80086f0:	2100      	movs	r1, #0
 80086f2:	200a      	movs	r0, #10
 80086f4:	68e3      	ldr	r3, [r4, #12]
 80086f6:	782a      	ldrb	r2, [r5, #0]
 80086f8:	1c6e      	adds	r6, r5, #1
 80086fa:	3a30      	subs	r2, #48	; 0x30
 80086fc:	2a09      	cmp	r2, #9
 80086fe:	d94e      	bls.n	800879e <_svfiprintf_r+0x17a>
 8008700:	2900      	cmp	r1, #0
 8008702:	d111      	bne.n	8008728 <_svfiprintf_r+0x104>
 8008704:	e017      	b.n	8008736 <_svfiprintf_r+0x112>
 8008706:	3501      	adds	r5, #1
 8008708:	e7b0      	b.n	800866c <_svfiprintf_r+0x48>
 800870a:	4b41      	ldr	r3, [pc, #260]	; (8008810 <_svfiprintf_r+0x1ec>)
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	1ac0      	subs	r0, r0, r3
 8008710:	2301      	movs	r3, #1
 8008712:	4083      	lsls	r3, r0
 8008714:	4313      	orrs	r3, r2
 8008716:	002e      	movs	r6, r5
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	e7ce      	b.n	80086ba <_svfiprintf_r+0x96>
 800871c:	9b07      	ldr	r3, [sp, #28]
 800871e:	1d19      	adds	r1, r3, #4
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	9107      	str	r1, [sp, #28]
 8008724:	2b00      	cmp	r3, #0
 8008726:	db01      	blt.n	800872c <_svfiprintf_r+0x108>
 8008728:	930b      	str	r3, [sp, #44]	; 0x2c
 800872a:	e004      	b.n	8008736 <_svfiprintf_r+0x112>
 800872c:	425b      	negs	r3, r3
 800872e:	60e3      	str	r3, [r4, #12]
 8008730:	2302      	movs	r3, #2
 8008732:	4313      	orrs	r3, r2
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	782b      	ldrb	r3, [r5, #0]
 8008738:	2b2e      	cmp	r3, #46	; 0x2e
 800873a:	d10a      	bne.n	8008752 <_svfiprintf_r+0x12e>
 800873c:	786b      	ldrb	r3, [r5, #1]
 800873e:	2b2a      	cmp	r3, #42	; 0x2a
 8008740:	d135      	bne.n	80087ae <_svfiprintf_r+0x18a>
 8008742:	9b07      	ldr	r3, [sp, #28]
 8008744:	3502      	adds	r5, #2
 8008746:	1d1a      	adds	r2, r3, #4
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	9207      	str	r2, [sp, #28]
 800874c:	2b00      	cmp	r3, #0
 800874e:	db2b      	blt.n	80087a8 <_svfiprintf_r+0x184>
 8008750:	9309      	str	r3, [sp, #36]	; 0x24
 8008752:	4e30      	ldr	r6, [pc, #192]	; (8008814 <_svfiprintf_r+0x1f0>)
 8008754:	2203      	movs	r2, #3
 8008756:	0030      	movs	r0, r6
 8008758:	7829      	ldrb	r1, [r5, #0]
 800875a:	f7ff fa43 	bl	8007be4 <memchr>
 800875e:	2800      	cmp	r0, #0
 8008760:	d006      	beq.n	8008770 <_svfiprintf_r+0x14c>
 8008762:	2340      	movs	r3, #64	; 0x40
 8008764:	1b80      	subs	r0, r0, r6
 8008766:	4083      	lsls	r3, r0
 8008768:	6822      	ldr	r2, [r4, #0]
 800876a:	3501      	adds	r5, #1
 800876c:	4313      	orrs	r3, r2
 800876e:	6023      	str	r3, [r4, #0]
 8008770:	7829      	ldrb	r1, [r5, #0]
 8008772:	2206      	movs	r2, #6
 8008774:	4828      	ldr	r0, [pc, #160]	; (8008818 <_svfiprintf_r+0x1f4>)
 8008776:	1c6e      	adds	r6, r5, #1
 8008778:	7621      	strb	r1, [r4, #24]
 800877a:	f7ff fa33 	bl	8007be4 <memchr>
 800877e:	2800      	cmp	r0, #0
 8008780:	d03c      	beq.n	80087fc <_svfiprintf_r+0x1d8>
 8008782:	4b26      	ldr	r3, [pc, #152]	; (800881c <_svfiprintf_r+0x1f8>)
 8008784:	2b00      	cmp	r3, #0
 8008786:	d125      	bne.n	80087d4 <_svfiprintf_r+0x1b0>
 8008788:	2207      	movs	r2, #7
 800878a:	9b07      	ldr	r3, [sp, #28]
 800878c:	3307      	adds	r3, #7
 800878e:	4393      	bics	r3, r2
 8008790:	3308      	adds	r3, #8
 8008792:	9307      	str	r3, [sp, #28]
 8008794:	6963      	ldr	r3, [r4, #20]
 8008796:	9a04      	ldr	r2, [sp, #16]
 8008798:	189b      	adds	r3, r3, r2
 800879a:	6163      	str	r3, [r4, #20]
 800879c:	e765      	b.n	800866a <_svfiprintf_r+0x46>
 800879e:	4343      	muls	r3, r0
 80087a0:	0035      	movs	r5, r6
 80087a2:	2101      	movs	r1, #1
 80087a4:	189b      	adds	r3, r3, r2
 80087a6:	e7a6      	b.n	80086f6 <_svfiprintf_r+0xd2>
 80087a8:	2301      	movs	r3, #1
 80087aa:	425b      	negs	r3, r3
 80087ac:	e7d0      	b.n	8008750 <_svfiprintf_r+0x12c>
 80087ae:	2300      	movs	r3, #0
 80087b0:	200a      	movs	r0, #10
 80087b2:	001a      	movs	r2, r3
 80087b4:	3501      	adds	r5, #1
 80087b6:	6063      	str	r3, [r4, #4]
 80087b8:	7829      	ldrb	r1, [r5, #0]
 80087ba:	1c6e      	adds	r6, r5, #1
 80087bc:	3930      	subs	r1, #48	; 0x30
 80087be:	2909      	cmp	r1, #9
 80087c0:	d903      	bls.n	80087ca <_svfiprintf_r+0x1a6>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0c5      	beq.n	8008752 <_svfiprintf_r+0x12e>
 80087c6:	9209      	str	r2, [sp, #36]	; 0x24
 80087c8:	e7c3      	b.n	8008752 <_svfiprintf_r+0x12e>
 80087ca:	4342      	muls	r2, r0
 80087cc:	0035      	movs	r5, r6
 80087ce:	2301      	movs	r3, #1
 80087d0:	1852      	adds	r2, r2, r1
 80087d2:	e7f1      	b.n	80087b8 <_svfiprintf_r+0x194>
 80087d4:	ab07      	add	r3, sp, #28
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	003a      	movs	r2, r7
 80087da:	0021      	movs	r1, r4
 80087dc:	4b10      	ldr	r3, [pc, #64]	; (8008820 <_svfiprintf_r+0x1fc>)
 80087de:	9803      	ldr	r0, [sp, #12]
 80087e0:	f7fd ff68 	bl	80066b4 <_printf_float>
 80087e4:	9004      	str	r0, [sp, #16]
 80087e6:	9b04      	ldr	r3, [sp, #16]
 80087e8:	3301      	adds	r3, #1
 80087ea:	d1d3      	bne.n	8008794 <_svfiprintf_r+0x170>
 80087ec:	89bb      	ldrh	r3, [r7, #12]
 80087ee:	980d      	ldr	r0, [sp, #52]	; 0x34
 80087f0:	065b      	lsls	r3, r3, #25
 80087f2:	d400      	bmi.n	80087f6 <_svfiprintf_r+0x1d2>
 80087f4:	e72d      	b.n	8008652 <_svfiprintf_r+0x2e>
 80087f6:	2001      	movs	r0, #1
 80087f8:	4240      	negs	r0, r0
 80087fa:	e72a      	b.n	8008652 <_svfiprintf_r+0x2e>
 80087fc:	ab07      	add	r3, sp, #28
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	003a      	movs	r2, r7
 8008802:	0021      	movs	r1, r4
 8008804:	4b06      	ldr	r3, [pc, #24]	; (8008820 <_svfiprintf_r+0x1fc>)
 8008806:	9803      	ldr	r0, [sp, #12]
 8008808:	f7fe fa06 	bl	8006c18 <_printf_i>
 800880c:	e7ea      	b.n	80087e4 <_svfiprintf_r+0x1c0>
 800880e:	46c0      	nop			; (mov r8, r8)
 8008810:	08009854 	.word	0x08009854
 8008814:	0800985a 	.word	0x0800985a
 8008818:	0800985e 	.word	0x0800985e
 800881c:	080066b5 	.word	0x080066b5
 8008820:	08008561 	.word	0x08008561

08008824 <_sbrk_r>:
 8008824:	2300      	movs	r3, #0
 8008826:	b570      	push	{r4, r5, r6, lr}
 8008828:	4d06      	ldr	r5, [pc, #24]	; (8008844 <_sbrk_r+0x20>)
 800882a:	0004      	movs	r4, r0
 800882c:	0008      	movs	r0, r1
 800882e:	602b      	str	r3, [r5, #0]
 8008830:	f7fa fe3e 	bl	80034b0 <_sbrk>
 8008834:	1c43      	adds	r3, r0, #1
 8008836:	d103      	bne.n	8008840 <_sbrk_r+0x1c>
 8008838:	682b      	ldr	r3, [r5, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d000      	beq.n	8008840 <_sbrk_r+0x1c>
 800883e:	6023      	str	r3, [r4, #0]
 8008840:	bd70      	pop	{r4, r5, r6, pc}
 8008842:	46c0      	nop			; (mov r8, r8)
 8008844:	200004ec 	.word	0x200004ec

08008848 <__assert_func>:
 8008848:	b530      	push	{r4, r5, lr}
 800884a:	0014      	movs	r4, r2
 800884c:	001a      	movs	r2, r3
 800884e:	4b09      	ldr	r3, [pc, #36]	; (8008874 <__assert_func+0x2c>)
 8008850:	0005      	movs	r5, r0
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	b085      	sub	sp, #20
 8008856:	68d8      	ldr	r0, [r3, #12]
 8008858:	4b07      	ldr	r3, [pc, #28]	; (8008878 <__assert_func+0x30>)
 800885a:	2c00      	cmp	r4, #0
 800885c:	d101      	bne.n	8008862 <__assert_func+0x1a>
 800885e:	4b07      	ldr	r3, [pc, #28]	; (800887c <__assert_func+0x34>)
 8008860:	001c      	movs	r4, r3
 8008862:	9301      	str	r3, [sp, #4]
 8008864:	9100      	str	r1, [sp, #0]
 8008866:	002b      	movs	r3, r5
 8008868:	4905      	ldr	r1, [pc, #20]	; (8008880 <__assert_func+0x38>)
 800886a:	9402      	str	r4, [sp, #8]
 800886c:	f000 f80a 	bl	8008884 <fiprintf>
 8008870:	f000 faba 	bl	8008de8 <abort>
 8008874:	2000000c 	.word	0x2000000c
 8008878:	08009865 	.word	0x08009865
 800887c:	080098a0 	.word	0x080098a0
 8008880:	08009872 	.word	0x08009872

08008884 <fiprintf>:
 8008884:	b40e      	push	{r1, r2, r3}
 8008886:	b503      	push	{r0, r1, lr}
 8008888:	0001      	movs	r1, r0
 800888a:	ab03      	add	r3, sp, #12
 800888c:	4804      	ldr	r0, [pc, #16]	; (80088a0 <fiprintf+0x1c>)
 800888e:	cb04      	ldmia	r3!, {r2}
 8008890:	6800      	ldr	r0, [r0, #0]
 8008892:	9301      	str	r3, [sp, #4]
 8008894:	f000 f892 	bl	80089bc <_vfiprintf_r>
 8008898:	b002      	add	sp, #8
 800889a:	bc08      	pop	{r3}
 800889c:	b003      	add	sp, #12
 800889e:	4718      	bx	r3
 80088a0:	2000000c 	.word	0x2000000c

080088a4 <__ascii_mbtowc>:
 80088a4:	b082      	sub	sp, #8
 80088a6:	2900      	cmp	r1, #0
 80088a8:	d100      	bne.n	80088ac <__ascii_mbtowc+0x8>
 80088aa:	a901      	add	r1, sp, #4
 80088ac:	1e10      	subs	r0, r2, #0
 80088ae:	d006      	beq.n	80088be <__ascii_mbtowc+0x1a>
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d006      	beq.n	80088c2 <__ascii_mbtowc+0x1e>
 80088b4:	7813      	ldrb	r3, [r2, #0]
 80088b6:	600b      	str	r3, [r1, #0]
 80088b8:	7810      	ldrb	r0, [r2, #0]
 80088ba:	1e43      	subs	r3, r0, #1
 80088bc:	4198      	sbcs	r0, r3
 80088be:	b002      	add	sp, #8
 80088c0:	4770      	bx	lr
 80088c2:	2002      	movs	r0, #2
 80088c4:	4240      	negs	r0, r0
 80088c6:	e7fa      	b.n	80088be <__ascii_mbtowc+0x1a>

080088c8 <memmove>:
 80088c8:	b510      	push	{r4, lr}
 80088ca:	4288      	cmp	r0, r1
 80088cc:	d902      	bls.n	80088d4 <memmove+0xc>
 80088ce:	188b      	adds	r3, r1, r2
 80088d0:	4298      	cmp	r0, r3
 80088d2:	d303      	bcc.n	80088dc <memmove+0x14>
 80088d4:	2300      	movs	r3, #0
 80088d6:	e007      	b.n	80088e8 <memmove+0x20>
 80088d8:	5c8b      	ldrb	r3, [r1, r2]
 80088da:	5483      	strb	r3, [r0, r2]
 80088dc:	3a01      	subs	r2, #1
 80088de:	d2fb      	bcs.n	80088d8 <memmove+0x10>
 80088e0:	bd10      	pop	{r4, pc}
 80088e2:	5ccc      	ldrb	r4, [r1, r3]
 80088e4:	54c4      	strb	r4, [r0, r3]
 80088e6:	3301      	adds	r3, #1
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d1fa      	bne.n	80088e2 <memmove+0x1a>
 80088ec:	e7f8      	b.n	80088e0 <memmove+0x18>
	...

080088f0 <__malloc_lock>:
 80088f0:	b510      	push	{r4, lr}
 80088f2:	4802      	ldr	r0, [pc, #8]	; (80088fc <__malloc_lock+0xc>)
 80088f4:	f000 fc4f 	bl	8009196 <__retarget_lock_acquire_recursive>
 80088f8:	bd10      	pop	{r4, pc}
 80088fa:	46c0      	nop			; (mov r8, r8)
 80088fc:	200004f0 	.word	0x200004f0

08008900 <__malloc_unlock>:
 8008900:	b510      	push	{r4, lr}
 8008902:	4802      	ldr	r0, [pc, #8]	; (800890c <__malloc_unlock+0xc>)
 8008904:	f000 fc48 	bl	8009198 <__retarget_lock_release_recursive>
 8008908:	bd10      	pop	{r4, pc}
 800890a:	46c0      	nop			; (mov r8, r8)
 800890c:	200004f0 	.word	0x200004f0

08008910 <_realloc_r>:
 8008910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008912:	0007      	movs	r7, r0
 8008914:	000e      	movs	r6, r1
 8008916:	0014      	movs	r4, r2
 8008918:	2900      	cmp	r1, #0
 800891a:	d105      	bne.n	8008928 <_realloc_r+0x18>
 800891c:	0011      	movs	r1, r2
 800891e:	f7ff fda9 	bl	8008474 <_malloc_r>
 8008922:	0005      	movs	r5, r0
 8008924:	0028      	movs	r0, r5
 8008926:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008928:	2a00      	cmp	r2, #0
 800892a:	d103      	bne.n	8008934 <_realloc_r+0x24>
 800892c:	f7ff fd36 	bl	800839c <_free_r>
 8008930:	0025      	movs	r5, r4
 8008932:	e7f7      	b.n	8008924 <_realloc_r+0x14>
 8008934:	f000 fc9e 	bl	8009274 <_malloc_usable_size_r>
 8008938:	9001      	str	r0, [sp, #4]
 800893a:	4284      	cmp	r4, r0
 800893c:	d803      	bhi.n	8008946 <_realloc_r+0x36>
 800893e:	0035      	movs	r5, r6
 8008940:	0843      	lsrs	r3, r0, #1
 8008942:	42a3      	cmp	r3, r4
 8008944:	d3ee      	bcc.n	8008924 <_realloc_r+0x14>
 8008946:	0021      	movs	r1, r4
 8008948:	0038      	movs	r0, r7
 800894a:	f7ff fd93 	bl	8008474 <_malloc_r>
 800894e:	1e05      	subs	r5, r0, #0
 8008950:	d0e8      	beq.n	8008924 <_realloc_r+0x14>
 8008952:	9b01      	ldr	r3, [sp, #4]
 8008954:	0022      	movs	r2, r4
 8008956:	429c      	cmp	r4, r3
 8008958:	d900      	bls.n	800895c <_realloc_r+0x4c>
 800895a:	001a      	movs	r2, r3
 800895c:	0031      	movs	r1, r6
 800895e:	0028      	movs	r0, r5
 8008960:	f7ff f94b 	bl	8007bfa <memcpy>
 8008964:	0031      	movs	r1, r6
 8008966:	0038      	movs	r0, r7
 8008968:	f7ff fd18 	bl	800839c <_free_r>
 800896c:	e7da      	b.n	8008924 <_realloc_r+0x14>

0800896e <__sfputc_r>:
 800896e:	6893      	ldr	r3, [r2, #8]
 8008970:	b510      	push	{r4, lr}
 8008972:	3b01      	subs	r3, #1
 8008974:	6093      	str	r3, [r2, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	da04      	bge.n	8008984 <__sfputc_r+0x16>
 800897a:	6994      	ldr	r4, [r2, #24]
 800897c:	42a3      	cmp	r3, r4
 800897e:	db07      	blt.n	8008990 <__sfputc_r+0x22>
 8008980:	290a      	cmp	r1, #10
 8008982:	d005      	beq.n	8008990 <__sfputc_r+0x22>
 8008984:	6813      	ldr	r3, [r2, #0]
 8008986:	1c58      	adds	r0, r3, #1
 8008988:	6010      	str	r0, [r2, #0]
 800898a:	7019      	strb	r1, [r3, #0]
 800898c:	0008      	movs	r0, r1
 800898e:	bd10      	pop	{r4, pc}
 8008990:	f000 f94e 	bl	8008c30 <__swbuf_r>
 8008994:	0001      	movs	r1, r0
 8008996:	e7f9      	b.n	800898c <__sfputc_r+0x1e>

08008998 <__sfputs_r>:
 8008998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899a:	0006      	movs	r6, r0
 800899c:	000f      	movs	r7, r1
 800899e:	0014      	movs	r4, r2
 80089a0:	18d5      	adds	r5, r2, r3
 80089a2:	42ac      	cmp	r4, r5
 80089a4:	d101      	bne.n	80089aa <__sfputs_r+0x12>
 80089a6:	2000      	movs	r0, #0
 80089a8:	e007      	b.n	80089ba <__sfputs_r+0x22>
 80089aa:	7821      	ldrb	r1, [r4, #0]
 80089ac:	003a      	movs	r2, r7
 80089ae:	0030      	movs	r0, r6
 80089b0:	f7ff ffdd 	bl	800896e <__sfputc_r>
 80089b4:	3401      	adds	r4, #1
 80089b6:	1c43      	adds	r3, r0, #1
 80089b8:	d1f3      	bne.n	80089a2 <__sfputs_r+0xa>
 80089ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089bc <_vfiprintf_r>:
 80089bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089be:	b0a1      	sub	sp, #132	; 0x84
 80089c0:	0006      	movs	r6, r0
 80089c2:	000c      	movs	r4, r1
 80089c4:	001f      	movs	r7, r3
 80089c6:	9203      	str	r2, [sp, #12]
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d004      	beq.n	80089d6 <_vfiprintf_r+0x1a>
 80089cc:	6983      	ldr	r3, [r0, #24]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d101      	bne.n	80089d6 <_vfiprintf_r+0x1a>
 80089d2:	f000 fb3f 	bl	8009054 <__sinit>
 80089d6:	4b8e      	ldr	r3, [pc, #568]	; (8008c10 <_vfiprintf_r+0x254>)
 80089d8:	429c      	cmp	r4, r3
 80089da:	d11c      	bne.n	8008a16 <_vfiprintf_r+0x5a>
 80089dc:	6874      	ldr	r4, [r6, #4]
 80089de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089e0:	07db      	lsls	r3, r3, #31
 80089e2:	d405      	bmi.n	80089f0 <_vfiprintf_r+0x34>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	059b      	lsls	r3, r3, #22
 80089e8:	d402      	bmi.n	80089f0 <_vfiprintf_r+0x34>
 80089ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ec:	f000 fbd3 	bl	8009196 <__retarget_lock_acquire_recursive>
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	071b      	lsls	r3, r3, #28
 80089f4:	d502      	bpl.n	80089fc <_vfiprintf_r+0x40>
 80089f6:	6923      	ldr	r3, [r4, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d11d      	bne.n	8008a38 <_vfiprintf_r+0x7c>
 80089fc:	0021      	movs	r1, r4
 80089fe:	0030      	movs	r0, r6
 8008a00:	f000 f97a 	bl	8008cf8 <__swsetup_r>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	d017      	beq.n	8008a38 <_vfiprintf_r+0x7c>
 8008a08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a0a:	07db      	lsls	r3, r3, #31
 8008a0c:	d50d      	bpl.n	8008a2a <_vfiprintf_r+0x6e>
 8008a0e:	2001      	movs	r0, #1
 8008a10:	4240      	negs	r0, r0
 8008a12:	b021      	add	sp, #132	; 0x84
 8008a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a16:	4b7f      	ldr	r3, [pc, #508]	; (8008c14 <_vfiprintf_r+0x258>)
 8008a18:	429c      	cmp	r4, r3
 8008a1a:	d101      	bne.n	8008a20 <_vfiprintf_r+0x64>
 8008a1c:	68b4      	ldr	r4, [r6, #8]
 8008a1e:	e7de      	b.n	80089de <_vfiprintf_r+0x22>
 8008a20:	4b7d      	ldr	r3, [pc, #500]	; (8008c18 <_vfiprintf_r+0x25c>)
 8008a22:	429c      	cmp	r4, r3
 8008a24:	d1db      	bne.n	80089de <_vfiprintf_r+0x22>
 8008a26:	68f4      	ldr	r4, [r6, #12]
 8008a28:	e7d9      	b.n	80089de <_vfiprintf_r+0x22>
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	059b      	lsls	r3, r3, #22
 8008a2e:	d4ee      	bmi.n	8008a0e <_vfiprintf_r+0x52>
 8008a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a32:	f000 fbb1 	bl	8009198 <__retarget_lock_release_recursive>
 8008a36:	e7ea      	b.n	8008a0e <_vfiprintf_r+0x52>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	ad08      	add	r5, sp, #32
 8008a3c:	616b      	str	r3, [r5, #20]
 8008a3e:	3320      	adds	r3, #32
 8008a40:	766b      	strb	r3, [r5, #25]
 8008a42:	3310      	adds	r3, #16
 8008a44:	76ab      	strb	r3, [r5, #26]
 8008a46:	9707      	str	r7, [sp, #28]
 8008a48:	9f03      	ldr	r7, [sp, #12]
 8008a4a:	783b      	ldrb	r3, [r7, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <_vfiprintf_r+0x98>
 8008a50:	2b25      	cmp	r3, #37	; 0x25
 8008a52:	d14e      	bne.n	8008af2 <_vfiprintf_r+0x136>
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	1afb      	subs	r3, r7, r3
 8008a58:	9305      	str	r3, [sp, #20]
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	429f      	cmp	r7, r3
 8008a5e:	d00d      	beq.n	8008a7c <_vfiprintf_r+0xc0>
 8008a60:	9b05      	ldr	r3, [sp, #20]
 8008a62:	0021      	movs	r1, r4
 8008a64:	0030      	movs	r0, r6
 8008a66:	9a03      	ldr	r2, [sp, #12]
 8008a68:	f7ff ff96 	bl	8008998 <__sfputs_r>
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d100      	bne.n	8008a72 <_vfiprintf_r+0xb6>
 8008a70:	e0b5      	b.n	8008bde <_vfiprintf_r+0x222>
 8008a72:	696a      	ldr	r2, [r5, #20]
 8008a74:	9b05      	ldr	r3, [sp, #20]
 8008a76:	4694      	mov	ip, r2
 8008a78:	4463      	add	r3, ip
 8008a7a:	616b      	str	r3, [r5, #20]
 8008a7c:	783b      	ldrb	r3, [r7, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d100      	bne.n	8008a84 <_vfiprintf_r+0xc8>
 8008a82:	e0ac      	b.n	8008bde <_vfiprintf_r+0x222>
 8008a84:	2201      	movs	r2, #1
 8008a86:	1c7b      	adds	r3, r7, #1
 8008a88:	9303      	str	r3, [sp, #12]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	4252      	negs	r2, r2
 8008a8e:	606a      	str	r2, [r5, #4]
 8008a90:	a904      	add	r1, sp, #16
 8008a92:	3254      	adds	r2, #84	; 0x54
 8008a94:	1852      	adds	r2, r2, r1
 8008a96:	602b      	str	r3, [r5, #0]
 8008a98:	60eb      	str	r3, [r5, #12]
 8008a9a:	60ab      	str	r3, [r5, #8]
 8008a9c:	7013      	strb	r3, [r2, #0]
 8008a9e:	65ab      	str	r3, [r5, #88]	; 0x58
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	2205      	movs	r2, #5
 8008aa4:	7819      	ldrb	r1, [r3, #0]
 8008aa6:	485d      	ldr	r0, [pc, #372]	; (8008c1c <_vfiprintf_r+0x260>)
 8008aa8:	f7ff f89c 	bl	8007be4 <memchr>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	1c5f      	adds	r7, r3, #1
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d120      	bne.n	8008af6 <_vfiprintf_r+0x13a>
 8008ab4:	682a      	ldr	r2, [r5, #0]
 8008ab6:	06d3      	lsls	r3, r2, #27
 8008ab8:	d504      	bpl.n	8008ac4 <_vfiprintf_r+0x108>
 8008aba:	2353      	movs	r3, #83	; 0x53
 8008abc:	a904      	add	r1, sp, #16
 8008abe:	185b      	adds	r3, r3, r1
 8008ac0:	2120      	movs	r1, #32
 8008ac2:	7019      	strb	r1, [r3, #0]
 8008ac4:	0713      	lsls	r3, r2, #28
 8008ac6:	d504      	bpl.n	8008ad2 <_vfiprintf_r+0x116>
 8008ac8:	2353      	movs	r3, #83	; 0x53
 8008aca:	a904      	add	r1, sp, #16
 8008acc:	185b      	adds	r3, r3, r1
 8008ace:	212b      	movs	r1, #43	; 0x2b
 8008ad0:	7019      	strb	r1, [r3, #0]
 8008ad2:	9b03      	ldr	r3, [sp, #12]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad8:	d016      	beq.n	8008b08 <_vfiprintf_r+0x14c>
 8008ada:	2100      	movs	r1, #0
 8008adc:	68eb      	ldr	r3, [r5, #12]
 8008ade:	9f03      	ldr	r7, [sp, #12]
 8008ae0:	783a      	ldrb	r2, [r7, #0]
 8008ae2:	1c78      	adds	r0, r7, #1
 8008ae4:	3a30      	subs	r2, #48	; 0x30
 8008ae6:	4684      	mov	ip, r0
 8008ae8:	2a09      	cmp	r2, #9
 8008aea:	d94f      	bls.n	8008b8c <_vfiprintf_r+0x1d0>
 8008aec:	2900      	cmp	r1, #0
 8008aee:	d111      	bne.n	8008b14 <_vfiprintf_r+0x158>
 8008af0:	e017      	b.n	8008b22 <_vfiprintf_r+0x166>
 8008af2:	3701      	adds	r7, #1
 8008af4:	e7a9      	b.n	8008a4a <_vfiprintf_r+0x8e>
 8008af6:	4b49      	ldr	r3, [pc, #292]	; (8008c1c <_vfiprintf_r+0x260>)
 8008af8:	682a      	ldr	r2, [r5, #0]
 8008afa:	1ac0      	subs	r0, r0, r3
 8008afc:	2301      	movs	r3, #1
 8008afe:	4083      	lsls	r3, r0
 8008b00:	4313      	orrs	r3, r2
 8008b02:	602b      	str	r3, [r5, #0]
 8008b04:	9703      	str	r7, [sp, #12]
 8008b06:	e7cb      	b.n	8008aa0 <_vfiprintf_r+0xe4>
 8008b08:	9b07      	ldr	r3, [sp, #28]
 8008b0a:	1d19      	adds	r1, r3, #4
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	9107      	str	r1, [sp, #28]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	db01      	blt.n	8008b18 <_vfiprintf_r+0x15c>
 8008b14:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b16:	e004      	b.n	8008b22 <_vfiprintf_r+0x166>
 8008b18:	425b      	negs	r3, r3
 8008b1a:	60eb      	str	r3, [r5, #12]
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	602b      	str	r3, [r5, #0]
 8008b22:	783b      	ldrb	r3, [r7, #0]
 8008b24:	2b2e      	cmp	r3, #46	; 0x2e
 8008b26:	d10a      	bne.n	8008b3e <_vfiprintf_r+0x182>
 8008b28:	787b      	ldrb	r3, [r7, #1]
 8008b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b2c:	d137      	bne.n	8008b9e <_vfiprintf_r+0x1e2>
 8008b2e:	9b07      	ldr	r3, [sp, #28]
 8008b30:	3702      	adds	r7, #2
 8008b32:	1d1a      	adds	r2, r3, #4
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	9207      	str	r2, [sp, #28]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	db2d      	blt.n	8008b98 <_vfiprintf_r+0x1dc>
 8008b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3e:	2203      	movs	r2, #3
 8008b40:	7839      	ldrb	r1, [r7, #0]
 8008b42:	4837      	ldr	r0, [pc, #220]	; (8008c20 <_vfiprintf_r+0x264>)
 8008b44:	f7ff f84e 	bl	8007be4 <memchr>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d007      	beq.n	8008b5c <_vfiprintf_r+0x1a0>
 8008b4c:	4b34      	ldr	r3, [pc, #208]	; (8008c20 <_vfiprintf_r+0x264>)
 8008b4e:	682a      	ldr	r2, [r5, #0]
 8008b50:	1ac0      	subs	r0, r0, r3
 8008b52:	2340      	movs	r3, #64	; 0x40
 8008b54:	4083      	lsls	r3, r0
 8008b56:	4313      	orrs	r3, r2
 8008b58:	3701      	adds	r7, #1
 8008b5a:	602b      	str	r3, [r5, #0]
 8008b5c:	7839      	ldrb	r1, [r7, #0]
 8008b5e:	1c7b      	adds	r3, r7, #1
 8008b60:	2206      	movs	r2, #6
 8008b62:	4830      	ldr	r0, [pc, #192]	; (8008c24 <_vfiprintf_r+0x268>)
 8008b64:	9303      	str	r3, [sp, #12]
 8008b66:	7629      	strb	r1, [r5, #24]
 8008b68:	f7ff f83c 	bl	8007be4 <memchr>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d045      	beq.n	8008bfc <_vfiprintf_r+0x240>
 8008b70:	4b2d      	ldr	r3, [pc, #180]	; (8008c28 <_vfiprintf_r+0x26c>)
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d127      	bne.n	8008bc6 <_vfiprintf_r+0x20a>
 8008b76:	2207      	movs	r2, #7
 8008b78:	9b07      	ldr	r3, [sp, #28]
 8008b7a:	3307      	adds	r3, #7
 8008b7c:	4393      	bics	r3, r2
 8008b7e:	3308      	adds	r3, #8
 8008b80:	9307      	str	r3, [sp, #28]
 8008b82:	696b      	ldr	r3, [r5, #20]
 8008b84:	9a04      	ldr	r2, [sp, #16]
 8008b86:	189b      	adds	r3, r3, r2
 8008b88:	616b      	str	r3, [r5, #20]
 8008b8a:	e75d      	b.n	8008a48 <_vfiprintf_r+0x8c>
 8008b8c:	210a      	movs	r1, #10
 8008b8e:	434b      	muls	r3, r1
 8008b90:	4667      	mov	r7, ip
 8008b92:	189b      	adds	r3, r3, r2
 8008b94:	3909      	subs	r1, #9
 8008b96:	e7a3      	b.n	8008ae0 <_vfiprintf_r+0x124>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	425b      	negs	r3, r3
 8008b9c:	e7ce      	b.n	8008b3c <_vfiprintf_r+0x180>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	001a      	movs	r2, r3
 8008ba2:	3701      	adds	r7, #1
 8008ba4:	606b      	str	r3, [r5, #4]
 8008ba6:	7839      	ldrb	r1, [r7, #0]
 8008ba8:	1c78      	adds	r0, r7, #1
 8008baa:	3930      	subs	r1, #48	; 0x30
 8008bac:	4684      	mov	ip, r0
 8008bae:	2909      	cmp	r1, #9
 8008bb0:	d903      	bls.n	8008bba <_vfiprintf_r+0x1fe>
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0c3      	beq.n	8008b3e <_vfiprintf_r+0x182>
 8008bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8008bb8:	e7c1      	b.n	8008b3e <_vfiprintf_r+0x182>
 8008bba:	230a      	movs	r3, #10
 8008bbc:	435a      	muls	r2, r3
 8008bbe:	4667      	mov	r7, ip
 8008bc0:	1852      	adds	r2, r2, r1
 8008bc2:	3b09      	subs	r3, #9
 8008bc4:	e7ef      	b.n	8008ba6 <_vfiprintf_r+0x1ea>
 8008bc6:	ab07      	add	r3, sp, #28
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	0022      	movs	r2, r4
 8008bcc:	0029      	movs	r1, r5
 8008bce:	0030      	movs	r0, r6
 8008bd0:	4b16      	ldr	r3, [pc, #88]	; (8008c2c <_vfiprintf_r+0x270>)
 8008bd2:	f7fd fd6f 	bl	80066b4 <_printf_float>
 8008bd6:	9004      	str	r0, [sp, #16]
 8008bd8:	9b04      	ldr	r3, [sp, #16]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	d1d1      	bne.n	8008b82 <_vfiprintf_r+0x1c6>
 8008bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008be0:	07db      	lsls	r3, r3, #31
 8008be2:	d405      	bmi.n	8008bf0 <_vfiprintf_r+0x234>
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	059b      	lsls	r3, r3, #22
 8008be8:	d402      	bmi.n	8008bf0 <_vfiprintf_r+0x234>
 8008bea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bec:	f000 fad4 	bl	8009198 <__retarget_lock_release_recursive>
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	065b      	lsls	r3, r3, #25
 8008bf4:	d500      	bpl.n	8008bf8 <_vfiprintf_r+0x23c>
 8008bf6:	e70a      	b.n	8008a0e <_vfiprintf_r+0x52>
 8008bf8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008bfa:	e70a      	b.n	8008a12 <_vfiprintf_r+0x56>
 8008bfc:	ab07      	add	r3, sp, #28
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	0022      	movs	r2, r4
 8008c02:	0029      	movs	r1, r5
 8008c04:	0030      	movs	r0, r6
 8008c06:	4b09      	ldr	r3, [pc, #36]	; (8008c2c <_vfiprintf_r+0x270>)
 8008c08:	f7fe f806 	bl	8006c18 <_printf_i>
 8008c0c:	e7e3      	b.n	8008bd6 <_vfiprintf_r+0x21a>
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	080099cc 	.word	0x080099cc
 8008c14:	080099ec 	.word	0x080099ec
 8008c18:	080099ac 	.word	0x080099ac
 8008c1c:	08009854 	.word	0x08009854
 8008c20:	0800985a 	.word	0x0800985a
 8008c24:	0800985e 	.word	0x0800985e
 8008c28:	080066b5 	.word	0x080066b5
 8008c2c:	08008999 	.word	0x08008999

08008c30 <__swbuf_r>:
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	0005      	movs	r5, r0
 8008c34:	000e      	movs	r6, r1
 8008c36:	0014      	movs	r4, r2
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d004      	beq.n	8008c46 <__swbuf_r+0x16>
 8008c3c:	6983      	ldr	r3, [r0, #24]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <__swbuf_r+0x16>
 8008c42:	f000 fa07 	bl	8009054 <__sinit>
 8008c46:	4b22      	ldr	r3, [pc, #136]	; (8008cd0 <__swbuf_r+0xa0>)
 8008c48:	429c      	cmp	r4, r3
 8008c4a:	d12e      	bne.n	8008caa <__swbuf_r+0x7a>
 8008c4c:	686c      	ldr	r4, [r5, #4]
 8008c4e:	69a3      	ldr	r3, [r4, #24]
 8008c50:	60a3      	str	r3, [r4, #8]
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	071b      	lsls	r3, r3, #28
 8008c56:	d532      	bpl.n	8008cbe <__swbuf_r+0x8e>
 8008c58:	6923      	ldr	r3, [r4, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d02f      	beq.n	8008cbe <__swbuf_r+0x8e>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	6922      	ldr	r2, [r4, #16]
 8008c62:	b2f7      	uxtb	r7, r6
 8008c64:	1a98      	subs	r0, r3, r2
 8008c66:	6963      	ldr	r3, [r4, #20]
 8008c68:	b2f6      	uxtb	r6, r6
 8008c6a:	4283      	cmp	r3, r0
 8008c6c:	dc05      	bgt.n	8008c7a <__swbuf_r+0x4a>
 8008c6e:	0021      	movs	r1, r4
 8008c70:	0028      	movs	r0, r5
 8008c72:	f000 f94d 	bl	8008f10 <_fflush_r>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d127      	bne.n	8008cca <__swbuf_r+0x9a>
 8008c7a:	68a3      	ldr	r3, [r4, #8]
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	60a3      	str	r3, [r4, #8]
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	6022      	str	r2, [r4, #0]
 8008c88:	701f      	strb	r7, [r3, #0]
 8008c8a:	6963      	ldr	r3, [r4, #20]
 8008c8c:	4283      	cmp	r3, r0
 8008c8e:	d004      	beq.n	8008c9a <__swbuf_r+0x6a>
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	07db      	lsls	r3, r3, #31
 8008c94:	d507      	bpl.n	8008ca6 <__swbuf_r+0x76>
 8008c96:	2e0a      	cmp	r6, #10
 8008c98:	d105      	bne.n	8008ca6 <__swbuf_r+0x76>
 8008c9a:	0021      	movs	r1, r4
 8008c9c:	0028      	movs	r0, r5
 8008c9e:	f000 f937 	bl	8008f10 <_fflush_r>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	d111      	bne.n	8008cca <__swbuf_r+0x9a>
 8008ca6:	0030      	movs	r0, r6
 8008ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008caa:	4b0a      	ldr	r3, [pc, #40]	; (8008cd4 <__swbuf_r+0xa4>)
 8008cac:	429c      	cmp	r4, r3
 8008cae:	d101      	bne.n	8008cb4 <__swbuf_r+0x84>
 8008cb0:	68ac      	ldr	r4, [r5, #8]
 8008cb2:	e7cc      	b.n	8008c4e <__swbuf_r+0x1e>
 8008cb4:	4b08      	ldr	r3, [pc, #32]	; (8008cd8 <__swbuf_r+0xa8>)
 8008cb6:	429c      	cmp	r4, r3
 8008cb8:	d1c9      	bne.n	8008c4e <__swbuf_r+0x1e>
 8008cba:	68ec      	ldr	r4, [r5, #12]
 8008cbc:	e7c7      	b.n	8008c4e <__swbuf_r+0x1e>
 8008cbe:	0021      	movs	r1, r4
 8008cc0:	0028      	movs	r0, r5
 8008cc2:	f000 f819 	bl	8008cf8 <__swsetup_r>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d0c9      	beq.n	8008c5e <__swbuf_r+0x2e>
 8008cca:	2601      	movs	r6, #1
 8008ccc:	4276      	negs	r6, r6
 8008cce:	e7ea      	b.n	8008ca6 <__swbuf_r+0x76>
 8008cd0:	080099cc 	.word	0x080099cc
 8008cd4:	080099ec 	.word	0x080099ec
 8008cd8:	080099ac 	.word	0x080099ac

08008cdc <__ascii_wctomb>:
 8008cdc:	0003      	movs	r3, r0
 8008cde:	1e08      	subs	r0, r1, #0
 8008ce0:	d005      	beq.n	8008cee <__ascii_wctomb+0x12>
 8008ce2:	2aff      	cmp	r2, #255	; 0xff
 8008ce4:	d904      	bls.n	8008cf0 <__ascii_wctomb+0x14>
 8008ce6:	228a      	movs	r2, #138	; 0x8a
 8008ce8:	2001      	movs	r0, #1
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	4240      	negs	r0, r0
 8008cee:	4770      	bx	lr
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	700a      	strb	r2, [r1, #0]
 8008cf4:	e7fb      	b.n	8008cee <__ascii_wctomb+0x12>
	...

08008cf8 <__swsetup_r>:
 8008cf8:	4b37      	ldr	r3, [pc, #220]	; (8008dd8 <__swsetup_r+0xe0>)
 8008cfa:	b570      	push	{r4, r5, r6, lr}
 8008cfc:	681d      	ldr	r5, [r3, #0]
 8008cfe:	0006      	movs	r6, r0
 8008d00:	000c      	movs	r4, r1
 8008d02:	2d00      	cmp	r5, #0
 8008d04:	d005      	beq.n	8008d12 <__swsetup_r+0x1a>
 8008d06:	69ab      	ldr	r3, [r5, #24]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d102      	bne.n	8008d12 <__swsetup_r+0x1a>
 8008d0c:	0028      	movs	r0, r5
 8008d0e:	f000 f9a1 	bl	8009054 <__sinit>
 8008d12:	4b32      	ldr	r3, [pc, #200]	; (8008ddc <__swsetup_r+0xe4>)
 8008d14:	429c      	cmp	r4, r3
 8008d16:	d10f      	bne.n	8008d38 <__swsetup_r+0x40>
 8008d18:	686c      	ldr	r4, [r5, #4]
 8008d1a:	230c      	movs	r3, #12
 8008d1c:	5ee2      	ldrsh	r2, [r4, r3]
 8008d1e:	b293      	uxth	r3, r2
 8008d20:	0711      	lsls	r1, r2, #28
 8008d22:	d42d      	bmi.n	8008d80 <__swsetup_r+0x88>
 8008d24:	06d9      	lsls	r1, r3, #27
 8008d26:	d411      	bmi.n	8008d4c <__swsetup_r+0x54>
 8008d28:	2309      	movs	r3, #9
 8008d2a:	2001      	movs	r0, #1
 8008d2c:	6033      	str	r3, [r6, #0]
 8008d2e:	3337      	adds	r3, #55	; 0x37
 8008d30:	4313      	orrs	r3, r2
 8008d32:	81a3      	strh	r3, [r4, #12]
 8008d34:	4240      	negs	r0, r0
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	4b29      	ldr	r3, [pc, #164]	; (8008de0 <__swsetup_r+0xe8>)
 8008d3a:	429c      	cmp	r4, r3
 8008d3c:	d101      	bne.n	8008d42 <__swsetup_r+0x4a>
 8008d3e:	68ac      	ldr	r4, [r5, #8]
 8008d40:	e7eb      	b.n	8008d1a <__swsetup_r+0x22>
 8008d42:	4b28      	ldr	r3, [pc, #160]	; (8008de4 <__swsetup_r+0xec>)
 8008d44:	429c      	cmp	r4, r3
 8008d46:	d1e8      	bne.n	8008d1a <__swsetup_r+0x22>
 8008d48:	68ec      	ldr	r4, [r5, #12]
 8008d4a:	e7e6      	b.n	8008d1a <__swsetup_r+0x22>
 8008d4c:	075b      	lsls	r3, r3, #29
 8008d4e:	d513      	bpl.n	8008d78 <__swsetup_r+0x80>
 8008d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d52:	2900      	cmp	r1, #0
 8008d54:	d008      	beq.n	8008d68 <__swsetup_r+0x70>
 8008d56:	0023      	movs	r3, r4
 8008d58:	3344      	adds	r3, #68	; 0x44
 8008d5a:	4299      	cmp	r1, r3
 8008d5c:	d002      	beq.n	8008d64 <__swsetup_r+0x6c>
 8008d5e:	0030      	movs	r0, r6
 8008d60:	f7ff fb1c 	bl	800839c <_free_r>
 8008d64:	2300      	movs	r3, #0
 8008d66:	6363      	str	r3, [r4, #52]	; 0x34
 8008d68:	2224      	movs	r2, #36	; 0x24
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	4393      	bics	r3, r2
 8008d6e:	81a3      	strh	r3, [r4, #12]
 8008d70:	2300      	movs	r3, #0
 8008d72:	6063      	str	r3, [r4, #4]
 8008d74:	6923      	ldr	r3, [r4, #16]
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	2308      	movs	r3, #8
 8008d7a:	89a2      	ldrh	r2, [r4, #12]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10b      	bne.n	8008d9e <__swsetup_r+0xa6>
 8008d86:	21a0      	movs	r1, #160	; 0xa0
 8008d88:	2280      	movs	r2, #128	; 0x80
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	0089      	lsls	r1, r1, #2
 8008d8e:	0092      	lsls	r2, r2, #2
 8008d90:	400b      	ands	r3, r1
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d003      	beq.n	8008d9e <__swsetup_r+0xa6>
 8008d96:	0021      	movs	r1, r4
 8008d98:	0030      	movs	r0, r6
 8008d9a:	f000 fa27 	bl	80091ec <__smakebuf_r>
 8008d9e:	220c      	movs	r2, #12
 8008da0:	5ea3      	ldrsh	r3, [r4, r2]
 8008da2:	2001      	movs	r0, #1
 8008da4:	001a      	movs	r2, r3
 8008da6:	b299      	uxth	r1, r3
 8008da8:	4002      	ands	r2, r0
 8008daa:	4203      	tst	r3, r0
 8008dac:	d00f      	beq.n	8008dce <__swsetup_r+0xd6>
 8008dae:	2200      	movs	r2, #0
 8008db0:	60a2      	str	r2, [r4, #8]
 8008db2:	6962      	ldr	r2, [r4, #20]
 8008db4:	4252      	negs	r2, r2
 8008db6:	61a2      	str	r2, [r4, #24]
 8008db8:	2000      	movs	r0, #0
 8008dba:	6922      	ldr	r2, [r4, #16]
 8008dbc:	4282      	cmp	r2, r0
 8008dbe:	d1ba      	bne.n	8008d36 <__swsetup_r+0x3e>
 8008dc0:	060a      	lsls	r2, r1, #24
 8008dc2:	d5b8      	bpl.n	8008d36 <__swsetup_r+0x3e>
 8008dc4:	2240      	movs	r2, #64	; 0x40
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	81a3      	strh	r3, [r4, #12]
 8008dca:	3801      	subs	r0, #1
 8008dcc:	e7b3      	b.n	8008d36 <__swsetup_r+0x3e>
 8008dce:	0788      	lsls	r0, r1, #30
 8008dd0:	d400      	bmi.n	8008dd4 <__swsetup_r+0xdc>
 8008dd2:	6962      	ldr	r2, [r4, #20]
 8008dd4:	60a2      	str	r2, [r4, #8]
 8008dd6:	e7ef      	b.n	8008db8 <__swsetup_r+0xc0>
 8008dd8:	2000000c 	.word	0x2000000c
 8008ddc:	080099cc 	.word	0x080099cc
 8008de0:	080099ec 	.word	0x080099ec
 8008de4:	080099ac 	.word	0x080099ac

08008de8 <abort>:
 8008de8:	2006      	movs	r0, #6
 8008dea:	b510      	push	{r4, lr}
 8008dec:	f000 fa74 	bl	80092d8 <raise>
 8008df0:	2001      	movs	r0, #1
 8008df2:	f7fa faeb 	bl	80033cc <_exit>
	...

08008df8 <__sflush_r>:
 8008df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dfa:	898b      	ldrh	r3, [r1, #12]
 8008dfc:	0005      	movs	r5, r0
 8008dfe:	000c      	movs	r4, r1
 8008e00:	071a      	lsls	r2, r3, #28
 8008e02:	d45f      	bmi.n	8008ec4 <__sflush_r+0xcc>
 8008e04:	684a      	ldr	r2, [r1, #4]
 8008e06:	2a00      	cmp	r2, #0
 8008e08:	dc04      	bgt.n	8008e14 <__sflush_r+0x1c>
 8008e0a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008e0c:	2a00      	cmp	r2, #0
 8008e0e:	dc01      	bgt.n	8008e14 <__sflush_r+0x1c>
 8008e10:	2000      	movs	r0, #0
 8008e12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e14:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008e16:	2f00      	cmp	r7, #0
 8008e18:	d0fa      	beq.n	8008e10 <__sflush_r+0x18>
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2180      	movs	r1, #128	; 0x80
 8008e1e:	682e      	ldr	r6, [r5, #0]
 8008e20:	602a      	str	r2, [r5, #0]
 8008e22:	001a      	movs	r2, r3
 8008e24:	0149      	lsls	r1, r1, #5
 8008e26:	400a      	ands	r2, r1
 8008e28:	420b      	tst	r3, r1
 8008e2a:	d034      	beq.n	8008e96 <__sflush_r+0x9e>
 8008e2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	075b      	lsls	r3, r3, #29
 8008e32:	d506      	bpl.n	8008e42 <__sflush_r+0x4a>
 8008e34:	6863      	ldr	r3, [r4, #4]
 8008e36:	1ac0      	subs	r0, r0, r3
 8008e38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <__sflush_r+0x4a>
 8008e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e40:	1ac0      	subs	r0, r0, r3
 8008e42:	0002      	movs	r2, r0
 8008e44:	6a21      	ldr	r1, [r4, #32]
 8008e46:	2300      	movs	r3, #0
 8008e48:	0028      	movs	r0, r5
 8008e4a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008e4c:	47b8      	blx	r7
 8008e4e:	89a1      	ldrh	r1, [r4, #12]
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d106      	bne.n	8008e62 <__sflush_r+0x6a>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	2b1d      	cmp	r3, #29
 8008e58:	d831      	bhi.n	8008ebe <__sflush_r+0xc6>
 8008e5a:	4a2c      	ldr	r2, [pc, #176]	; (8008f0c <__sflush_r+0x114>)
 8008e5c:	40da      	lsrs	r2, r3
 8008e5e:	07d3      	lsls	r3, r2, #31
 8008e60:	d52d      	bpl.n	8008ebe <__sflush_r+0xc6>
 8008e62:	2300      	movs	r3, #0
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	6923      	ldr	r3, [r4, #16]
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	04cb      	lsls	r3, r1, #19
 8008e6c:	d505      	bpl.n	8008e7a <__sflush_r+0x82>
 8008e6e:	1c43      	adds	r3, r0, #1
 8008e70:	d102      	bne.n	8008e78 <__sflush_r+0x80>
 8008e72:	682b      	ldr	r3, [r5, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d100      	bne.n	8008e7a <__sflush_r+0x82>
 8008e78:	6560      	str	r0, [r4, #84]	; 0x54
 8008e7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e7c:	602e      	str	r6, [r5, #0]
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	d0c6      	beq.n	8008e10 <__sflush_r+0x18>
 8008e82:	0023      	movs	r3, r4
 8008e84:	3344      	adds	r3, #68	; 0x44
 8008e86:	4299      	cmp	r1, r3
 8008e88:	d002      	beq.n	8008e90 <__sflush_r+0x98>
 8008e8a:	0028      	movs	r0, r5
 8008e8c:	f7ff fa86 	bl	800839c <_free_r>
 8008e90:	2000      	movs	r0, #0
 8008e92:	6360      	str	r0, [r4, #52]	; 0x34
 8008e94:	e7bd      	b.n	8008e12 <__sflush_r+0x1a>
 8008e96:	2301      	movs	r3, #1
 8008e98:	0028      	movs	r0, r5
 8008e9a:	6a21      	ldr	r1, [r4, #32]
 8008e9c:	47b8      	blx	r7
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	d1c5      	bne.n	8008e2e <__sflush_r+0x36>
 8008ea2:	682b      	ldr	r3, [r5, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0c2      	beq.n	8008e2e <__sflush_r+0x36>
 8008ea8:	2b1d      	cmp	r3, #29
 8008eaa:	d001      	beq.n	8008eb0 <__sflush_r+0xb8>
 8008eac:	2b16      	cmp	r3, #22
 8008eae:	d101      	bne.n	8008eb4 <__sflush_r+0xbc>
 8008eb0:	602e      	str	r6, [r5, #0]
 8008eb2:	e7ad      	b.n	8008e10 <__sflush_r+0x18>
 8008eb4:	2340      	movs	r3, #64	; 0x40
 8008eb6:	89a2      	ldrh	r2, [r4, #12]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	81a3      	strh	r3, [r4, #12]
 8008ebc:	e7a9      	b.n	8008e12 <__sflush_r+0x1a>
 8008ebe:	2340      	movs	r3, #64	; 0x40
 8008ec0:	430b      	orrs	r3, r1
 8008ec2:	e7fa      	b.n	8008eba <__sflush_r+0xc2>
 8008ec4:	690f      	ldr	r7, [r1, #16]
 8008ec6:	2f00      	cmp	r7, #0
 8008ec8:	d0a2      	beq.n	8008e10 <__sflush_r+0x18>
 8008eca:	680a      	ldr	r2, [r1, #0]
 8008ecc:	600f      	str	r7, [r1, #0]
 8008ece:	1bd2      	subs	r2, r2, r7
 8008ed0:	9201      	str	r2, [sp, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	079b      	lsls	r3, r3, #30
 8008ed6:	d100      	bne.n	8008eda <__sflush_r+0xe2>
 8008ed8:	694a      	ldr	r2, [r1, #20]
 8008eda:	60a2      	str	r2, [r4, #8]
 8008edc:	9b01      	ldr	r3, [sp, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	dc00      	bgt.n	8008ee4 <__sflush_r+0xec>
 8008ee2:	e795      	b.n	8008e10 <__sflush_r+0x18>
 8008ee4:	003a      	movs	r2, r7
 8008ee6:	0028      	movs	r0, r5
 8008ee8:	9b01      	ldr	r3, [sp, #4]
 8008eea:	6a21      	ldr	r1, [r4, #32]
 8008eec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008eee:	47b0      	blx	r6
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	dc06      	bgt.n	8008f02 <__sflush_r+0x10a>
 8008ef4:	2340      	movs	r3, #64	; 0x40
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	89a2      	ldrh	r2, [r4, #12]
 8008efa:	4240      	negs	r0, r0
 8008efc:	4313      	orrs	r3, r2
 8008efe:	81a3      	strh	r3, [r4, #12]
 8008f00:	e787      	b.n	8008e12 <__sflush_r+0x1a>
 8008f02:	9b01      	ldr	r3, [sp, #4]
 8008f04:	183f      	adds	r7, r7, r0
 8008f06:	1a1b      	subs	r3, r3, r0
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	e7e7      	b.n	8008edc <__sflush_r+0xe4>
 8008f0c:	20400001 	.word	0x20400001

08008f10 <_fflush_r>:
 8008f10:	690b      	ldr	r3, [r1, #16]
 8008f12:	b570      	push	{r4, r5, r6, lr}
 8008f14:	0005      	movs	r5, r0
 8008f16:	000c      	movs	r4, r1
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d102      	bne.n	8008f22 <_fflush_r+0x12>
 8008f1c:	2500      	movs	r5, #0
 8008f1e:	0028      	movs	r0, r5
 8008f20:	bd70      	pop	{r4, r5, r6, pc}
 8008f22:	2800      	cmp	r0, #0
 8008f24:	d004      	beq.n	8008f30 <_fflush_r+0x20>
 8008f26:	6983      	ldr	r3, [r0, #24]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <_fflush_r+0x20>
 8008f2c:	f000 f892 	bl	8009054 <__sinit>
 8008f30:	4b14      	ldr	r3, [pc, #80]	; (8008f84 <_fflush_r+0x74>)
 8008f32:	429c      	cmp	r4, r3
 8008f34:	d11b      	bne.n	8008f6e <_fflush_r+0x5e>
 8008f36:	686c      	ldr	r4, [r5, #4]
 8008f38:	220c      	movs	r2, #12
 8008f3a:	5ea3      	ldrsh	r3, [r4, r2]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d0ed      	beq.n	8008f1c <_fflush_r+0xc>
 8008f40:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f42:	07d2      	lsls	r2, r2, #31
 8008f44:	d404      	bmi.n	8008f50 <_fflush_r+0x40>
 8008f46:	059b      	lsls	r3, r3, #22
 8008f48:	d402      	bmi.n	8008f50 <_fflush_r+0x40>
 8008f4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f4c:	f000 f923 	bl	8009196 <__retarget_lock_acquire_recursive>
 8008f50:	0028      	movs	r0, r5
 8008f52:	0021      	movs	r1, r4
 8008f54:	f7ff ff50 	bl	8008df8 <__sflush_r>
 8008f58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f5a:	0005      	movs	r5, r0
 8008f5c:	07db      	lsls	r3, r3, #31
 8008f5e:	d4de      	bmi.n	8008f1e <_fflush_r+0xe>
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	059b      	lsls	r3, r3, #22
 8008f64:	d4db      	bmi.n	8008f1e <_fflush_r+0xe>
 8008f66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f68:	f000 f916 	bl	8009198 <__retarget_lock_release_recursive>
 8008f6c:	e7d7      	b.n	8008f1e <_fflush_r+0xe>
 8008f6e:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <_fflush_r+0x78>)
 8008f70:	429c      	cmp	r4, r3
 8008f72:	d101      	bne.n	8008f78 <_fflush_r+0x68>
 8008f74:	68ac      	ldr	r4, [r5, #8]
 8008f76:	e7df      	b.n	8008f38 <_fflush_r+0x28>
 8008f78:	4b04      	ldr	r3, [pc, #16]	; (8008f8c <_fflush_r+0x7c>)
 8008f7a:	429c      	cmp	r4, r3
 8008f7c:	d1dc      	bne.n	8008f38 <_fflush_r+0x28>
 8008f7e:	68ec      	ldr	r4, [r5, #12]
 8008f80:	e7da      	b.n	8008f38 <_fflush_r+0x28>
 8008f82:	46c0      	nop			; (mov r8, r8)
 8008f84:	080099cc 	.word	0x080099cc
 8008f88:	080099ec 	.word	0x080099ec
 8008f8c:	080099ac 	.word	0x080099ac

08008f90 <std>:
 8008f90:	2300      	movs	r3, #0
 8008f92:	b510      	push	{r4, lr}
 8008f94:	0004      	movs	r4, r0
 8008f96:	6003      	str	r3, [r0, #0]
 8008f98:	6043      	str	r3, [r0, #4]
 8008f9a:	6083      	str	r3, [r0, #8]
 8008f9c:	8181      	strh	r1, [r0, #12]
 8008f9e:	6643      	str	r3, [r0, #100]	; 0x64
 8008fa0:	0019      	movs	r1, r3
 8008fa2:	81c2      	strh	r2, [r0, #14]
 8008fa4:	6103      	str	r3, [r0, #16]
 8008fa6:	6143      	str	r3, [r0, #20]
 8008fa8:	6183      	str	r3, [r0, #24]
 8008faa:	2208      	movs	r2, #8
 8008fac:	305c      	adds	r0, #92	; 0x5c
 8008fae:	f7fd facf 	bl	8006550 <memset>
 8008fb2:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <std+0x38>)
 8008fb4:	6224      	str	r4, [r4, #32]
 8008fb6:	6263      	str	r3, [r4, #36]	; 0x24
 8008fb8:	4b04      	ldr	r3, [pc, #16]	; (8008fcc <std+0x3c>)
 8008fba:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fbc:	4b04      	ldr	r3, [pc, #16]	; (8008fd0 <std+0x40>)
 8008fbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fc0:	4b04      	ldr	r3, [pc, #16]	; (8008fd4 <std+0x44>)
 8008fc2:	6323      	str	r3, [r4, #48]	; 0x30
 8008fc4:	bd10      	pop	{r4, pc}
 8008fc6:	46c0      	nop			; (mov r8, r8)
 8008fc8:	08009319 	.word	0x08009319
 8008fcc:	08009341 	.word	0x08009341
 8008fd0:	08009379 	.word	0x08009379
 8008fd4:	080093a5 	.word	0x080093a5

08008fd8 <_cleanup_r>:
 8008fd8:	b510      	push	{r4, lr}
 8008fda:	4902      	ldr	r1, [pc, #8]	; (8008fe4 <_cleanup_r+0xc>)
 8008fdc:	f000 f8ba 	bl	8009154 <_fwalk_reent>
 8008fe0:	bd10      	pop	{r4, pc}
 8008fe2:	46c0      	nop			; (mov r8, r8)
 8008fe4:	08008f11 	.word	0x08008f11

08008fe8 <__sfmoreglue>:
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	2568      	movs	r5, #104	; 0x68
 8008fec:	1e4a      	subs	r2, r1, #1
 8008fee:	4355      	muls	r5, r2
 8008ff0:	000e      	movs	r6, r1
 8008ff2:	0029      	movs	r1, r5
 8008ff4:	3174      	adds	r1, #116	; 0x74
 8008ff6:	f7ff fa3d 	bl	8008474 <_malloc_r>
 8008ffa:	1e04      	subs	r4, r0, #0
 8008ffc:	d008      	beq.n	8009010 <__sfmoreglue+0x28>
 8008ffe:	2100      	movs	r1, #0
 8009000:	002a      	movs	r2, r5
 8009002:	6001      	str	r1, [r0, #0]
 8009004:	6046      	str	r6, [r0, #4]
 8009006:	300c      	adds	r0, #12
 8009008:	60a0      	str	r0, [r4, #8]
 800900a:	3268      	adds	r2, #104	; 0x68
 800900c:	f7fd faa0 	bl	8006550 <memset>
 8009010:	0020      	movs	r0, r4
 8009012:	bd70      	pop	{r4, r5, r6, pc}

08009014 <__sfp_lock_acquire>:
 8009014:	b510      	push	{r4, lr}
 8009016:	4802      	ldr	r0, [pc, #8]	; (8009020 <__sfp_lock_acquire+0xc>)
 8009018:	f000 f8bd 	bl	8009196 <__retarget_lock_acquire_recursive>
 800901c:	bd10      	pop	{r4, pc}
 800901e:	46c0      	nop			; (mov r8, r8)
 8009020:	200004f1 	.word	0x200004f1

08009024 <__sfp_lock_release>:
 8009024:	b510      	push	{r4, lr}
 8009026:	4802      	ldr	r0, [pc, #8]	; (8009030 <__sfp_lock_release+0xc>)
 8009028:	f000 f8b6 	bl	8009198 <__retarget_lock_release_recursive>
 800902c:	bd10      	pop	{r4, pc}
 800902e:	46c0      	nop			; (mov r8, r8)
 8009030:	200004f1 	.word	0x200004f1

08009034 <__sinit_lock_acquire>:
 8009034:	b510      	push	{r4, lr}
 8009036:	4802      	ldr	r0, [pc, #8]	; (8009040 <__sinit_lock_acquire+0xc>)
 8009038:	f000 f8ad 	bl	8009196 <__retarget_lock_acquire_recursive>
 800903c:	bd10      	pop	{r4, pc}
 800903e:	46c0      	nop			; (mov r8, r8)
 8009040:	200004f2 	.word	0x200004f2

08009044 <__sinit_lock_release>:
 8009044:	b510      	push	{r4, lr}
 8009046:	4802      	ldr	r0, [pc, #8]	; (8009050 <__sinit_lock_release+0xc>)
 8009048:	f000 f8a6 	bl	8009198 <__retarget_lock_release_recursive>
 800904c:	bd10      	pop	{r4, pc}
 800904e:	46c0      	nop			; (mov r8, r8)
 8009050:	200004f2 	.word	0x200004f2

08009054 <__sinit>:
 8009054:	b513      	push	{r0, r1, r4, lr}
 8009056:	0004      	movs	r4, r0
 8009058:	f7ff ffec 	bl	8009034 <__sinit_lock_acquire>
 800905c:	69a3      	ldr	r3, [r4, #24]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d002      	beq.n	8009068 <__sinit+0x14>
 8009062:	f7ff ffef 	bl	8009044 <__sinit_lock_release>
 8009066:	bd13      	pop	{r0, r1, r4, pc}
 8009068:	64a3      	str	r3, [r4, #72]	; 0x48
 800906a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800906c:	6523      	str	r3, [r4, #80]	; 0x50
 800906e:	4b13      	ldr	r3, [pc, #76]	; (80090bc <__sinit+0x68>)
 8009070:	4a13      	ldr	r2, [pc, #76]	; (80090c0 <__sinit+0x6c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	62a2      	str	r2, [r4, #40]	; 0x28
 8009076:	9301      	str	r3, [sp, #4]
 8009078:	42a3      	cmp	r3, r4
 800907a:	d101      	bne.n	8009080 <__sinit+0x2c>
 800907c:	2301      	movs	r3, #1
 800907e:	61a3      	str	r3, [r4, #24]
 8009080:	0020      	movs	r0, r4
 8009082:	f000 f81f 	bl	80090c4 <__sfp>
 8009086:	6060      	str	r0, [r4, #4]
 8009088:	0020      	movs	r0, r4
 800908a:	f000 f81b 	bl	80090c4 <__sfp>
 800908e:	60a0      	str	r0, [r4, #8]
 8009090:	0020      	movs	r0, r4
 8009092:	f000 f817 	bl	80090c4 <__sfp>
 8009096:	2200      	movs	r2, #0
 8009098:	2104      	movs	r1, #4
 800909a:	60e0      	str	r0, [r4, #12]
 800909c:	6860      	ldr	r0, [r4, #4]
 800909e:	f7ff ff77 	bl	8008f90 <std>
 80090a2:	2201      	movs	r2, #1
 80090a4:	2109      	movs	r1, #9
 80090a6:	68a0      	ldr	r0, [r4, #8]
 80090a8:	f7ff ff72 	bl	8008f90 <std>
 80090ac:	2202      	movs	r2, #2
 80090ae:	2112      	movs	r1, #18
 80090b0:	68e0      	ldr	r0, [r4, #12]
 80090b2:	f7ff ff6d 	bl	8008f90 <std>
 80090b6:	2301      	movs	r3, #1
 80090b8:	61a3      	str	r3, [r4, #24]
 80090ba:	e7d2      	b.n	8009062 <__sinit+0xe>
 80090bc:	08009634 	.word	0x08009634
 80090c0:	08008fd9 	.word	0x08008fd9

080090c4 <__sfp>:
 80090c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c6:	0007      	movs	r7, r0
 80090c8:	f7ff ffa4 	bl	8009014 <__sfp_lock_acquire>
 80090cc:	4b1f      	ldr	r3, [pc, #124]	; (800914c <__sfp+0x88>)
 80090ce:	681e      	ldr	r6, [r3, #0]
 80090d0:	69b3      	ldr	r3, [r6, #24]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d102      	bne.n	80090dc <__sfp+0x18>
 80090d6:	0030      	movs	r0, r6
 80090d8:	f7ff ffbc 	bl	8009054 <__sinit>
 80090dc:	3648      	adds	r6, #72	; 0x48
 80090de:	68b4      	ldr	r4, [r6, #8]
 80090e0:	6873      	ldr	r3, [r6, #4]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	d504      	bpl.n	80090f0 <__sfp+0x2c>
 80090e6:	6833      	ldr	r3, [r6, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d022      	beq.n	8009132 <__sfp+0x6e>
 80090ec:	6836      	ldr	r6, [r6, #0]
 80090ee:	e7f6      	b.n	80090de <__sfp+0x1a>
 80090f0:	220c      	movs	r2, #12
 80090f2:	5ea5      	ldrsh	r5, [r4, r2]
 80090f4:	2d00      	cmp	r5, #0
 80090f6:	d11a      	bne.n	800912e <__sfp+0x6a>
 80090f8:	0020      	movs	r0, r4
 80090fa:	4b15      	ldr	r3, [pc, #84]	; (8009150 <__sfp+0x8c>)
 80090fc:	3058      	adds	r0, #88	; 0x58
 80090fe:	60e3      	str	r3, [r4, #12]
 8009100:	6665      	str	r5, [r4, #100]	; 0x64
 8009102:	f000 f847 	bl	8009194 <__retarget_lock_init_recursive>
 8009106:	f7ff ff8d 	bl	8009024 <__sfp_lock_release>
 800910a:	0020      	movs	r0, r4
 800910c:	2208      	movs	r2, #8
 800910e:	0029      	movs	r1, r5
 8009110:	6025      	str	r5, [r4, #0]
 8009112:	60a5      	str	r5, [r4, #8]
 8009114:	6065      	str	r5, [r4, #4]
 8009116:	6125      	str	r5, [r4, #16]
 8009118:	6165      	str	r5, [r4, #20]
 800911a:	61a5      	str	r5, [r4, #24]
 800911c:	305c      	adds	r0, #92	; 0x5c
 800911e:	f7fd fa17 	bl	8006550 <memset>
 8009122:	6365      	str	r5, [r4, #52]	; 0x34
 8009124:	63a5      	str	r5, [r4, #56]	; 0x38
 8009126:	64a5      	str	r5, [r4, #72]	; 0x48
 8009128:	64e5      	str	r5, [r4, #76]	; 0x4c
 800912a:	0020      	movs	r0, r4
 800912c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800912e:	3468      	adds	r4, #104	; 0x68
 8009130:	e7d7      	b.n	80090e2 <__sfp+0x1e>
 8009132:	2104      	movs	r1, #4
 8009134:	0038      	movs	r0, r7
 8009136:	f7ff ff57 	bl	8008fe8 <__sfmoreglue>
 800913a:	1e04      	subs	r4, r0, #0
 800913c:	6030      	str	r0, [r6, #0]
 800913e:	d1d5      	bne.n	80090ec <__sfp+0x28>
 8009140:	f7ff ff70 	bl	8009024 <__sfp_lock_release>
 8009144:	230c      	movs	r3, #12
 8009146:	603b      	str	r3, [r7, #0]
 8009148:	e7ef      	b.n	800912a <__sfp+0x66>
 800914a:	46c0      	nop			; (mov r8, r8)
 800914c:	08009634 	.word	0x08009634
 8009150:	ffff0001 	.word	0xffff0001

08009154 <_fwalk_reent>:
 8009154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009156:	0004      	movs	r4, r0
 8009158:	0006      	movs	r6, r0
 800915a:	2700      	movs	r7, #0
 800915c:	9101      	str	r1, [sp, #4]
 800915e:	3448      	adds	r4, #72	; 0x48
 8009160:	6863      	ldr	r3, [r4, #4]
 8009162:	68a5      	ldr	r5, [r4, #8]
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	9b00      	ldr	r3, [sp, #0]
 8009168:	3b01      	subs	r3, #1
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	d504      	bpl.n	8009178 <_fwalk_reent+0x24>
 800916e:	6824      	ldr	r4, [r4, #0]
 8009170:	2c00      	cmp	r4, #0
 8009172:	d1f5      	bne.n	8009160 <_fwalk_reent+0xc>
 8009174:	0038      	movs	r0, r7
 8009176:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009178:	89ab      	ldrh	r3, [r5, #12]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d908      	bls.n	8009190 <_fwalk_reent+0x3c>
 800917e:	220e      	movs	r2, #14
 8009180:	5eab      	ldrsh	r3, [r5, r2]
 8009182:	3301      	adds	r3, #1
 8009184:	d004      	beq.n	8009190 <_fwalk_reent+0x3c>
 8009186:	0029      	movs	r1, r5
 8009188:	0030      	movs	r0, r6
 800918a:	9b01      	ldr	r3, [sp, #4]
 800918c:	4798      	blx	r3
 800918e:	4307      	orrs	r7, r0
 8009190:	3568      	adds	r5, #104	; 0x68
 8009192:	e7e8      	b.n	8009166 <_fwalk_reent+0x12>

08009194 <__retarget_lock_init_recursive>:
 8009194:	4770      	bx	lr

08009196 <__retarget_lock_acquire_recursive>:
 8009196:	4770      	bx	lr

08009198 <__retarget_lock_release_recursive>:
 8009198:	4770      	bx	lr
	...

0800919c <__swhatbuf_r>:
 800919c:	b570      	push	{r4, r5, r6, lr}
 800919e:	000e      	movs	r6, r1
 80091a0:	001d      	movs	r5, r3
 80091a2:	230e      	movs	r3, #14
 80091a4:	5ec9      	ldrsh	r1, [r1, r3]
 80091a6:	0014      	movs	r4, r2
 80091a8:	b096      	sub	sp, #88	; 0x58
 80091aa:	2900      	cmp	r1, #0
 80091ac:	da08      	bge.n	80091c0 <__swhatbuf_r+0x24>
 80091ae:	220c      	movs	r2, #12
 80091b0:	5eb3      	ldrsh	r3, [r6, r2]
 80091b2:	2200      	movs	r2, #0
 80091b4:	602a      	str	r2, [r5, #0]
 80091b6:	061b      	lsls	r3, r3, #24
 80091b8:	d411      	bmi.n	80091de <__swhatbuf_r+0x42>
 80091ba:	2380      	movs	r3, #128	; 0x80
 80091bc:	00db      	lsls	r3, r3, #3
 80091be:	e00f      	b.n	80091e0 <__swhatbuf_r+0x44>
 80091c0:	466a      	mov	r2, sp
 80091c2:	f000 f91b 	bl	80093fc <_fstat_r>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	dbf1      	blt.n	80091ae <__swhatbuf_r+0x12>
 80091ca:	23f0      	movs	r3, #240	; 0xf0
 80091cc:	9901      	ldr	r1, [sp, #4]
 80091ce:	021b      	lsls	r3, r3, #8
 80091d0:	4019      	ands	r1, r3
 80091d2:	4b05      	ldr	r3, [pc, #20]	; (80091e8 <__swhatbuf_r+0x4c>)
 80091d4:	18c9      	adds	r1, r1, r3
 80091d6:	424b      	negs	r3, r1
 80091d8:	4159      	adcs	r1, r3
 80091da:	6029      	str	r1, [r5, #0]
 80091dc:	e7ed      	b.n	80091ba <__swhatbuf_r+0x1e>
 80091de:	2340      	movs	r3, #64	; 0x40
 80091e0:	2000      	movs	r0, #0
 80091e2:	6023      	str	r3, [r4, #0]
 80091e4:	b016      	add	sp, #88	; 0x58
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	ffffe000 	.word	0xffffe000

080091ec <__smakebuf_r>:
 80091ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ee:	2602      	movs	r6, #2
 80091f0:	898b      	ldrh	r3, [r1, #12]
 80091f2:	0005      	movs	r5, r0
 80091f4:	000c      	movs	r4, r1
 80091f6:	4233      	tst	r3, r6
 80091f8:	d006      	beq.n	8009208 <__smakebuf_r+0x1c>
 80091fa:	0023      	movs	r3, r4
 80091fc:	3347      	adds	r3, #71	; 0x47
 80091fe:	6023      	str	r3, [r4, #0]
 8009200:	6123      	str	r3, [r4, #16]
 8009202:	2301      	movs	r3, #1
 8009204:	6163      	str	r3, [r4, #20]
 8009206:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009208:	466a      	mov	r2, sp
 800920a:	ab01      	add	r3, sp, #4
 800920c:	f7ff ffc6 	bl	800919c <__swhatbuf_r>
 8009210:	9900      	ldr	r1, [sp, #0]
 8009212:	0007      	movs	r7, r0
 8009214:	0028      	movs	r0, r5
 8009216:	f7ff f92d 	bl	8008474 <_malloc_r>
 800921a:	2800      	cmp	r0, #0
 800921c:	d108      	bne.n	8009230 <__smakebuf_r+0x44>
 800921e:	220c      	movs	r2, #12
 8009220:	5ea3      	ldrsh	r3, [r4, r2]
 8009222:	059a      	lsls	r2, r3, #22
 8009224:	d4ef      	bmi.n	8009206 <__smakebuf_r+0x1a>
 8009226:	2203      	movs	r2, #3
 8009228:	4393      	bics	r3, r2
 800922a:	431e      	orrs	r6, r3
 800922c:	81a6      	strh	r6, [r4, #12]
 800922e:	e7e4      	b.n	80091fa <__smakebuf_r+0xe>
 8009230:	4b0f      	ldr	r3, [pc, #60]	; (8009270 <__smakebuf_r+0x84>)
 8009232:	62ab      	str	r3, [r5, #40]	; 0x28
 8009234:	2380      	movs	r3, #128	; 0x80
 8009236:	89a2      	ldrh	r2, [r4, #12]
 8009238:	6020      	str	r0, [r4, #0]
 800923a:	4313      	orrs	r3, r2
 800923c:	81a3      	strh	r3, [r4, #12]
 800923e:	9b00      	ldr	r3, [sp, #0]
 8009240:	6120      	str	r0, [r4, #16]
 8009242:	6163      	str	r3, [r4, #20]
 8009244:	9b01      	ldr	r3, [sp, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00d      	beq.n	8009266 <__smakebuf_r+0x7a>
 800924a:	0028      	movs	r0, r5
 800924c:	230e      	movs	r3, #14
 800924e:	5ee1      	ldrsh	r1, [r4, r3]
 8009250:	f000 f8e6 	bl	8009420 <_isatty_r>
 8009254:	2800      	cmp	r0, #0
 8009256:	d006      	beq.n	8009266 <__smakebuf_r+0x7a>
 8009258:	2203      	movs	r2, #3
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	4393      	bics	r3, r2
 800925e:	001a      	movs	r2, r3
 8009260:	2301      	movs	r3, #1
 8009262:	4313      	orrs	r3, r2
 8009264:	81a3      	strh	r3, [r4, #12]
 8009266:	89a0      	ldrh	r0, [r4, #12]
 8009268:	4307      	orrs	r7, r0
 800926a:	81a7      	strh	r7, [r4, #12]
 800926c:	e7cb      	b.n	8009206 <__smakebuf_r+0x1a>
 800926e:	46c0      	nop			; (mov r8, r8)
 8009270:	08008fd9 	.word	0x08008fd9

08009274 <_malloc_usable_size_r>:
 8009274:	1f0b      	subs	r3, r1, #4
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	1f18      	subs	r0, r3, #4
 800927a:	2b00      	cmp	r3, #0
 800927c:	da01      	bge.n	8009282 <_malloc_usable_size_r+0xe>
 800927e:	580b      	ldr	r3, [r1, r0]
 8009280:	18c0      	adds	r0, r0, r3
 8009282:	4770      	bx	lr

08009284 <_raise_r>:
 8009284:	b570      	push	{r4, r5, r6, lr}
 8009286:	0004      	movs	r4, r0
 8009288:	000d      	movs	r5, r1
 800928a:	291f      	cmp	r1, #31
 800928c:	d904      	bls.n	8009298 <_raise_r+0x14>
 800928e:	2316      	movs	r3, #22
 8009290:	6003      	str	r3, [r0, #0]
 8009292:	2001      	movs	r0, #1
 8009294:	4240      	negs	r0, r0
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800929a:	2b00      	cmp	r3, #0
 800929c:	d004      	beq.n	80092a8 <_raise_r+0x24>
 800929e:	008a      	lsls	r2, r1, #2
 80092a0:	189b      	adds	r3, r3, r2
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	2a00      	cmp	r2, #0
 80092a6:	d108      	bne.n	80092ba <_raise_r+0x36>
 80092a8:	0020      	movs	r0, r4
 80092aa:	f000 f831 	bl	8009310 <_getpid_r>
 80092ae:	002a      	movs	r2, r5
 80092b0:	0001      	movs	r1, r0
 80092b2:	0020      	movs	r0, r4
 80092b4:	f000 f81a 	bl	80092ec <_kill_r>
 80092b8:	e7ed      	b.n	8009296 <_raise_r+0x12>
 80092ba:	2000      	movs	r0, #0
 80092bc:	2a01      	cmp	r2, #1
 80092be:	d0ea      	beq.n	8009296 <_raise_r+0x12>
 80092c0:	1c51      	adds	r1, r2, #1
 80092c2:	d103      	bne.n	80092cc <_raise_r+0x48>
 80092c4:	2316      	movs	r3, #22
 80092c6:	3001      	adds	r0, #1
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	e7e4      	b.n	8009296 <_raise_r+0x12>
 80092cc:	2400      	movs	r4, #0
 80092ce:	0028      	movs	r0, r5
 80092d0:	601c      	str	r4, [r3, #0]
 80092d2:	4790      	blx	r2
 80092d4:	0020      	movs	r0, r4
 80092d6:	e7de      	b.n	8009296 <_raise_r+0x12>

080092d8 <raise>:
 80092d8:	b510      	push	{r4, lr}
 80092da:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <raise+0x10>)
 80092dc:	0001      	movs	r1, r0
 80092de:	6818      	ldr	r0, [r3, #0]
 80092e0:	f7ff ffd0 	bl	8009284 <_raise_r>
 80092e4:	bd10      	pop	{r4, pc}
 80092e6:	46c0      	nop			; (mov r8, r8)
 80092e8:	2000000c 	.word	0x2000000c

080092ec <_kill_r>:
 80092ec:	2300      	movs	r3, #0
 80092ee:	b570      	push	{r4, r5, r6, lr}
 80092f0:	4d06      	ldr	r5, [pc, #24]	; (800930c <_kill_r+0x20>)
 80092f2:	0004      	movs	r4, r0
 80092f4:	0008      	movs	r0, r1
 80092f6:	0011      	movs	r1, r2
 80092f8:	602b      	str	r3, [r5, #0]
 80092fa:	f7fa f857 	bl	80033ac <_kill>
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	d103      	bne.n	800930a <_kill_r+0x1e>
 8009302:	682b      	ldr	r3, [r5, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d000      	beq.n	800930a <_kill_r+0x1e>
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	bd70      	pop	{r4, r5, r6, pc}
 800930c:	200004ec 	.word	0x200004ec

08009310 <_getpid_r>:
 8009310:	b510      	push	{r4, lr}
 8009312:	f7fa f845 	bl	80033a0 <_getpid>
 8009316:	bd10      	pop	{r4, pc}

08009318 <__sread>:
 8009318:	b570      	push	{r4, r5, r6, lr}
 800931a:	000c      	movs	r4, r1
 800931c:	250e      	movs	r5, #14
 800931e:	5f49      	ldrsh	r1, [r1, r5]
 8009320:	f000 f8a4 	bl	800946c <_read_r>
 8009324:	2800      	cmp	r0, #0
 8009326:	db03      	blt.n	8009330 <__sread+0x18>
 8009328:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800932a:	181b      	adds	r3, r3, r0
 800932c:	6563      	str	r3, [r4, #84]	; 0x54
 800932e:	bd70      	pop	{r4, r5, r6, pc}
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	4a02      	ldr	r2, [pc, #8]	; (800933c <__sread+0x24>)
 8009334:	4013      	ands	r3, r2
 8009336:	81a3      	strh	r3, [r4, #12]
 8009338:	e7f9      	b.n	800932e <__sread+0x16>
 800933a:	46c0      	nop			; (mov r8, r8)
 800933c:	ffffefff 	.word	0xffffefff

08009340 <__swrite>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	001f      	movs	r7, r3
 8009344:	898b      	ldrh	r3, [r1, #12]
 8009346:	0005      	movs	r5, r0
 8009348:	000c      	movs	r4, r1
 800934a:	0016      	movs	r6, r2
 800934c:	05db      	lsls	r3, r3, #23
 800934e:	d505      	bpl.n	800935c <__swrite+0x1c>
 8009350:	230e      	movs	r3, #14
 8009352:	5ec9      	ldrsh	r1, [r1, r3]
 8009354:	2200      	movs	r2, #0
 8009356:	2302      	movs	r3, #2
 8009358:	f000 f874 	bl	8009444 <_lseek_r>
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	4a05      	ldr	r2, [pc, #20]	; (8009374 <__swrite+0x34>)
 8009360:	0028      	movs	r0, r5
 8009362:	4013      	ands	r3, r2
 8009364:	81a3      	strh	r3, [r4, #12]
 8009366:	0032      	movs	r2, r6
 8009368:	230e      	movs	r3, #14
 800936a:	5ee1      	ldrsh	r1, [r4, r3]
 800936c:	003b      	movs	r3, r7
 800936e:	f000 f81f 	bl	80093b0 <_write_r>
 8009372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009374:	ffffefff 	.word	0xffffefff

08009378 <__sseek>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	000c      	movs	r4, r1
 800937c:	250e      	movs	r5, #14
 800937e:	5f49      	ldrsh	r1, [r1, r5]
 8009380:	f000 f860 	bl	8009444 <_lseek_r>
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	1c42      	adds	r2, r0, #1
 8009388:	d103      	bne.n	8009392 <__sseek+0x1a>
 800938a:	4a05      	ldr	r2, [pc, #20]	; (80093a0 <__sseek+0x28>)
 800938c:	4013      	ands	r3, r2
 800938e:	81a3      	strh	r3, [r4, #12]
 8009390:	bd70      	pop	{r4, r5, r6, pc}
 8009392:	2280      	movs	r2, #128	; 0x80
 8009394:	0152      	lsls	r2, r2, #5
 8009396:	4313      	orrs	r3, r2
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	6560      	str	r0, [r4, #84]	; 0x54
 800939c:	e7f8      	b.n	8009390 <__sseek+0x18>
 800939e:	46c0      	nop			; (mov r8, r8)
 80093a0:	ffffefff 	.word	0xffffefff

080093a4 <__sclose>:
 80093a4:	b510      	push	{r4, lr}
 80093a6:	230e      	movs	r3, #14
 80093a8:	5ec9      	ldrsh	r1, [r1, r3]
 80093aa:	f000 f815 	bl	80093d8 <_close_r>
 80093ae:	bd10      	pop	{r4, pc}

080093b0 <_write_r>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	0004      	movs	r4, r0
 80093b4:	0008      	movs	r0, r1
 80093b6:	0011      	movs	r1, r2
 80093b8:	001a      	movs	r2, r3
 80093ba:	2300      	movs	r3, #0
 80093bc:	4d05      	ldr	r5, [pc, #20]	; (80093d4 <_write_r+0x24>)
 80093be:	602b      	str	r3, [r5, #0]
 80093c0:	f7fa f82d 	bl	800341e <_write>
 80093c4:	1c43      	adds	r3, r0, #1
 80093c6:	d103      	bne.n	80093d0 <_write_r+0x20>
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d000      	beq.n	80093d0 <_write_r+0x20>
 80093ce:	6023      	str	r3, [r4, #0]
 80093d0:	bd70      	pop	{r4, r5, r6, pc}
 80093d2:	46c0      	nop			; (mov r8, r8)
 80093d4:	200004ec 	.word	0x200004ec

080093d8 <_close_r>:
 80093d8:	2300      	movs	r3, #0
 80093da:	b570      	push	{r4, r5, r6, lr}
 80093dc:	4d06      	ldr	r5, [pc, #24]	; (80093f8 <_close_r+0x20>)
 80093de:	0004      	movs	r4, r0
 80093e0:	0008      	movs	r0, r1
 80093e2:	602b      	str	r3, [r5, #0]
 80093e4:	f7fa f837 	bl	8003456 <_close>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d103      	bne.n	80093f4 <_close_r+0x1c>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d000      	beq.n	80093f4 <_close_r+0x1c>
 80093f2:	6023      	str	r3, [r4, #0]
 80093f4:	bd70      	pop	{r4, r5, r6, pc}
 80093f6:	46c0      	nop			; (mov r8, r8)
 80093f8:	200004ec 	.word	0x200004ec

080093fc <_fstat_r>:
 80093fc:	2300      	movs	r3, #0
 80093fe:	b570      	push	{r4, r5, r6, lr}
 8009400:	4d06      	ldr	r5, [pc, #24]	; (800941c <_fstat_r+0x20>)
 8009402:	0004      	movs	r4, r0
 8009404:	0008      	movs	r0, r1
 8009406:	0011      	movs	r1, r2
 8009408:	602b      	str	r3, [r5, #0]
 800940a:	f7fa f82e 	bl	800346a <_fstat>
 800940e:	1c43      	adds	r3, r0, #1
 8009410:	d103      	bne.n	800941a <_fstat_r+0x1e>
 8009412:	682b      	ldr	r3, [r5, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d000      	beq.n	800941a <_fstat_r+0x1e>
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	bd70      	pop	{r4, r5, r6, pc}
 800941c:	200004ec 	.word	0x200004ec

08009420 <_isatty_r>:
 8009420:	2300      	movs	r3, #0
 8009422:	b570      	push	{r4, r5, r6, lr}
 8009424:	4d06      	ldr	r5, [pc, #24]	; (8009440 <_isatty_r+0x20>)
 8009426:	0004      	movs	r4, r0
 8009428:	0008      	movs	r0, r1
 800942a:	602b      	str	r3, [r5, #0]
 800942c:	f7fa f82b 	bl	8003486 <_isatty>
 8009430:	1c43      	adds	r3, r0, #1
 8009432:	d103      	bne.n	800943c <_isatty_r+0x1c>
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d000      	beq.n	800943c <_isatty_r+0x1c>
 800943a:	6023      	str	r3, [r4, #0]
 800943c:	bd70      	pop	{r4, r5, r6, pc}
 800943e:	46c0      	nop			; (mov r8, r8)
 8009440:	200004ec 	.word	0x200004ec

08009444 <_lseek_r>:
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	0004      	movs	r4, r0
 8009448:	0008      	movs	r0, r1
 800944a:	0011      	movs	r1, r2
 800944c:	001a      	movs	r2, r3
 800944e:	2300      	movs	r3, #0
 8009450:	4d05      	ldr	r5, [pc, #20]	; (8009468 <_lseek_r+0x24>)
 8009452:	602b      	str	r3, [r5, #0]
 8009454:	f7fa f820 	bl	8003498 <_lseek>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d103      	bne.n	8009464 <_lseek_r+0x20>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d000      	beq.n	8009464 <_lseek_r+0x20>
 8009462:	6023      	str	r3, [r4, #0]
 8009464:	bd70      	pop	{r4, r5, r6, pc}
 8009466:	46c0      	nop			; (mov r8, r8)
 8009468:	200004ec 	.word	0x200004ec

0800946c <_read_r>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	0004      	movs	r4, r0
 8009470:	0008      	movs	r0, r1
 8009472:	0011      	movs	r1, r2
 8009474:	001a      	movs	r2, r3
 8009476:	2300      	movs	r3, #0
 8009478:	4d05      	ldr	r5, [pc, #20]	; (8009490 <_read_r+0x24>)
 800947a:	602b      	str	r3, [r5, #0]
 800947c:	f7f9 ffb2 	bl	80033e4 <_read>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d103      	bne.n	800948c <_read_r+0x20>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d000      	beq.n	800948c <_read_r+0x20>
 800948a:	6023      	str	r3, [r4, #0]
 800948c:	bd70      	pop	{r4, r5, r6, pc}
 800948e:	46c0      	nop			; (mov r8, r8)
 8009490:	200004ec 	.word	0x200004ec

08009494 <_init>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949a:	bc08      	pop	{r3}
 800949c:	469e      	mov	lr, r3
 800949e:	4770      	bx	lr

080094a0 <_fini>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	46c0      	nop			; (mov r8, r8)
 80094a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a6:	bc08      	pop	{r3}
 80094a8:	469e      	mov	lr, r3
 80094aa:	4770      	bx	lr
