
proiect-motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009654  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08009718  08009718  00019718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bc4  08009bc4  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  08009bc4  08009bc4  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009bc4  08009bc4  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bc4  08009bc4  00019bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bc8  08009bc8  00019bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08009bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000214  08009de0  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  08009de0  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010531  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002268  00000000  00000000  0003076d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  000329d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  000338e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000127c2  00000000  00000000  00034710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122fc  00000000  00000000  00046ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d6ac  00000000  00000000  000591ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c687a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004928  00000000  00000000  000c68cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000214 	.word	0x20000214
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080096fc 	.word	0x080096fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000218 	.word	0x20000218
 8000104:	080096fc 	.word	0x080096fc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f9dd 	bl	80017fc <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f92d 	bl	80016ac <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9cf 	bl	80017fc <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9c5 	bl	80017fc <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f955 	bl	8001730 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f94b 	bl	8001730 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 f8b7 	bl	8000624 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f843 	bl	800054c <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f8a9 	bl	8000624 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f89f 	bl	8000624 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f84f 	bl	8000598 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f845 	bl	8000598 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_f2uiz>:
 800051c:	219e      	movs	r1, #158	; 0x9e
 800051e:	b510      	push	{r4, lr}
 8000520:	05c9      	lsls	r1, r1, #23
 8000522:	1c04      	adds	r4, r0, #0
 8000524:	f7ff fff0 	bl	8000508 <__aeabi_fcmpge>
 8000528:	2800      	cmp	r0, #0
 800052a:	d103      	bne.n	8000534 <__aeabi_f2uiz+0x18>
 800052c:	1c20      	adds	r0, r4, #0
 800052e:	f000 fa6b 	bl	8000a08 <__aeabi_f2iz>
 8000532:	bd10      	pop	{r4, pc}
 8000534:	219e      	movs	r1, #158	; 0x9e
 8000536:	1c20      	adds	r0, r4, #0
 8000538:	05c9      	lsls	r1, r1, #23
 800053a:	f000 f8b7 	bl	80006ac <__aeabi_fsub>
 800053e:	f000 fa63 	bl	8000a08 <__aeabi_f2iz>
 8000542:	2380      	movs	r3, #128	; 0x80
 8000544:	061b      	lsls	r3, r3, #24
 8000546:	469c      	mov	ip, r3
 8000548:	4460      	add	r0, ip
 800054a:	e7f2      	b.n	8000532 <__aeabi_f2uiz+0x16>

0800054c <__eqsf2>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	0042      	lsls	r2, r0, #1
 8000550:	0245      	lsls	r5, r0, #9
 8000552:	024e      	lsls	r6, r1, #9
 8000554:	004c      	lsls	r4, r1, #1
 8000556:	0fc3      	lsrs	r3, r0, #31
 8000558:	0a6d      	lsrs	r5, r5, #9
 800055a:	2001      	movs	r0, #1
 800055c:	0e12      	lsrs	r2, r2, #24
 800055e:	0a76      	lsrs	r6, r6, #9
 8000560:	0e24      	lsrs	r4, r4, #24
 8000562:	0fc9      	lsrs	r1, r1, #31
 8000564:	2aff      	cmp	r2, #255	; 0xff
 8000566:	d006      	beq.n	8000576 <__eqsf2+0x2a>
 8000568:	2cff      	cmp	r4, #255	; 0xff
 800056a:	d003      	beq.n	8000574 <__eqsf2+0x28>
 800056c:	42a2      	cmp	r2, r4
 800056e:	d101      	bne.n	8000574 <__eqsf2+0x28>
 8000570:	42b5      	cmp	r5, r6
 8000572:	d006      	beq.n	8000582 <__eqsf2+0x36>
 8000574:	bd70      	pop	{r4, r5, r6, pc}
 8000576:	2d00      	cmp	r5, #0
 8000578:	d1fc      	bne.n	8000574 <__eqsf2+0x28>
 800057a:	2cff      	cmp	r4, #255	; 0xff
 800057c:	d1fa      	bne.n	8000574 <__eqsf2+0x28>
 800057e:	2e00      	cmp	r6, #0
 8000580:	d1f8      	bne.n	8000574 <__eqsf2+0x28>
 8000582:	428b      	cmp	r3, r1
 8000584:	d006      	beq.n	8000594 <__eqsf2+0x48>
 8000586:	2001      	movs	r0, #1
 8000588:	2a00      	cmp	r2, #0
 800058a:	d1f3      	bne.n	8000574 <__eqsf2+0x28>
 800058c:	0028      	movs	r0, r5
 800058e:	1e43      	subs	r3, r0, #1
 8000590:	4198      	sbcs	r0, r3
 8000592:	e7ef      	b.n	8000574 <__eqsf2+0x28>
 8000594:	2000      	movs	r0, #0
 8000596:	e7ed      	b.n	8000574 <__eqsf2+0x28>

08000598 <__gesf2>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	0042      	lsls	r2, r0, #1
 800059c:	0245      	lsls	r5, r0, #9
 800059e:	024e      	lsls	r6, r1, #9
 80005a0:	004c      	lsls	r4, r1, #1
 80005a2:	0fc3      	lsrs	r3, r0, #31
 80005a4:	0a6d      	lsrs	r5, r5, #9
 80005a6:	0e12      	lsrs	r2, r2, #24
 80005a8:	0a76      	lsrs	r6, r6, #9
 80005aa:	0e24      	lsrs	r4, r4, #24
 80005ac:	0fc8      	lsrs	r0, r1, #31
 80005ae:	2aff      	cmp	r2, #255	; 0xff
 80005b0:	d01b      	beq.n	80005ea <__gesf2+0x52>
 80005b2:	2cff      	cmp	r4, #255	; 0xff
 80005b4:	d00e      	beq.n	80005d4 <__gesf2+0x3c>
 80005b6:	2a00      	cmp	r2, #0
 80005b8:	d11b      	bne.n	80005f2 <__gesf2+0x5a>
 80005ba:	2c00      	cmp	r4, #0
 80005bc:	d101      	bne.n	80005c2 <__gesf2+0x2a>
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d01c      	beq.n	80005fc <__gesf2+0x64>
 80005c2:	2d00      	cmp	r5, #0
 80005c4:	d00c      	beq.n	80005e0 <__gesf2+0x48>
 80005c6:	4283      	cmp	r3, r0
 80005c8:	d01c      	beq.n	8000604 <__gesf2+0x6c>
 80005ca:	2102      	movs	r1, #2
 80005cc:	1e58      	subs	r0, r3, #1
 80005ce:	4008      	ands	r0, r1
 80005d0:	3801      	subs	r0, #1
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	2e00      	cmp	r6, #0
 80005d6:	d122      	bne.n	800061e <__gesf2+0x86>
 80005d8:	2a00      	cmp	r2, #0
 80005da:	d1f4      	bne.n	80005c6 <__gesf2+0x2e>
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d1f2      	bne.n	80005c6 <__gesf2+0x2e>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d1f6      	bne.n	80005d2 <__gesf2+0x3a>
 80005e4:	2001      	movs	r0, #1
 80005e6:	4240      	negs	r0, r0
 80005e8:	e7f3      	b.n	80005d2 <__gesf2+0x3a>
 80005ea:	2d00      	cmp	r5, #0
 80005ec:	d117      	bne.n	800061e <__gesf2+0x86>
 80005ee:	2cff      	cmp	r4, #255	; 0xff
 80005f0:	d0f0      	beq.n	80005d4 <__gesf2+0x3c>
 80005f2:	2c00      	cmp	r4, #0
 80005f4:	d1e7      	bne.n	80005c6 <__gesf2+0x2e>
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d1e5      	bne.n	80005c6 <__gesf2+0x2e>
 80005fa:	e7e6      	b.n	80005ca <__gesf2+0x32>
 80005fc:	2000      	movs	r0, #0
 80005fe:	2d00      	cmp	r5, #0
 8000600:	d0e7      	beq.n	80005d2 <__gesf2+0x3a>
 8000602:	e7e2      	b.n	80005ca <__gesf2+0x32>
 8000604:	42a2      	cmp	r2, r4
 8000606:	dc05      	bgt.n	8000614 <__gesf2+0x7c>
 8000608:	dbea      	blt.n	80005e0 <__gesf2+0x48>
 800060a:	42b5      	cmp	r5, r6
 800060c:	d802      	bhi.n	8000614 <__gesf2+0x7c>
 800060e:	d3e7      	bcc.n	80005e0 <__gesf2+0x48>
 8000610:	2000      	movs	r0, #0
 8000612:	e7de      	b.n	80005d2 <__gesf2+0x3a>
 8000614:	4243      	negs	r3, r0
 8000616:	4158      	adcs	r0, r3
 8000618:	0040      	lsls	r0, r0, #1
 800061a:	3801      	subs	r0, #1
 800061c:	e7d9      	b.n	80005d2 <__gesf2+0x3a>
 800061e:	2002      	movs	r0, #2
 8000620:	4240      	negs	r0, r0
 8000622:	e7d6      	b.n	80005d2 <__gesf2+0x3a>

08000624 <__lesf2>:
 8000624:	b570      	push	{r4, r5, r6, lr}
 8000626:	0042      	lsls	r2, r0, #1
 8000628:	0245      	lsls	r5, r0, #9
 800062a:	024e      	lsls	r6, r1, #9
 800062c:	004c      	lsls	r4, r1, #1
 800062e:	0fc3      	lsrs	r3, r0, #31
 8000630:	0a6d      	lsrs	r5, r5, #9
 8000632:	0e12      	lsrs	r2, r2, #24
 8000634:	0a76      	lsrs	r6, r6, #9
 8000636:	0e24      	lsrs	r4, r4, #24
 8000638:	0fc8      	lsrs	r0, r1, #31
 800063a:	2aff      	cmp	r2, #255	; 0xff
 800063c:	d00b      	beq.n	8000656 <__lesf2+0x32>
 800063e:	2cff      	cmp	r4, #255	; 0xff
 8000640:	d00d      	beq.n	800065e <__lesf2+0x3a>
 8000642:	2a00      	cmp	r2, #0
 8000644:	d11f      	bne.n	8000686 <__lesf2+0x62>
 8000646:	2c00      	cmp	r4, #0
 8000648:	d116      	bne.n	8000678 <__lesf2+0x54>
 800064a:	2e00      	cmp	r6, #0
 800064c:	d114      	bne.n	8000678 <__lesf2+0x54>
 800064e:	2000      	movs	r0, #0
 8000650:	2d00      	cmp	r5, #0
 8000652:	d010      	beq.n	8000676 <__lesf2+0x52>
 8000654:	e009      	b.n	800066a <__lesf2+0x46>
 8000656:	2d00      	cmp	r5, #0
 8000658:	d10c      	bne.n	8000674 <__lesf2+0x50>
 800065a:	2cff      	cmp	r4, #255	; 0xff
 800065c:	d113      	bne.n	8000686 <__lesf2+0x62>
 800065e:	2e00      	cmp	r6, #0
 8000660:	d108      	bne.n	8000674 <__lesf2+0x50>
 8000662:	2a00      	cmp	r2, #0
 8000664:	d008      	beq.n	8000678 <__lesf2+0x54>
 8000666:	4283      	cmp	r3, r0
 8000668:	d012      	beq.n	8000690 <__lesf2+0x6c>
 800066a:	2102      	movs	r1, #2
 800066c:	1e58      	subs	r0, r3, #1
 800066e:	4008      	ands	r0, r1
 8000670:	3801      	subs	r0, #1
 8000672:	e000      	b.n	8000676 <__lesf2+0x52>
 8000674:	2002      	movs	r0, #2
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	2d00      	cmp	r5, #0
 800067a:	d1f4      	bne.n	8000666 <__lesf2+0x42>
 800067c:	2800      	cmp	r0, #0
 800067e:	d1fa      	bne.n	8000676 <__lesf2+0x52>
 8000680:	2001      	movs	r0, #1
 8000682:	4240      	negs	r0, r0
 8000684:	e7f7      	b.n	8000676 <__lesf2+0x52>
 8000686:	2c00      	cmp	r4, #0
 8000688:	d1ed      	bne.n	8000666 <__lesf2+0x42>
 800068a:	2e00      	cmp	r6, #0
 800068c:	d1eb      	bne.n	8000666 <__lesf2+0x42>
 800068e:	e7ec      	b.n	800066a <__lesf2+0x46>
 8000690:	42a2      	cmp	r2, r4
 8000692:	dc05      	bgt.n	80006a0 <__lesf2+0x7c>
 8000694:	dbf2      	blt.n	800067c <__lesf2+0x58>
 8000696:	42b5      	cmp	r5, r6
 8000698:	d802      	bhi.n	80006a0 <__lesf2+0x7c>
 800069a:	d3ef      	bcc.n	800067c <__lesf2+0x58>
 800069c:	2000      	movs	r0, #0
 800069e:	e7ea      	b.n	8000676 <__lesf2+0x52>
 80006a0:	4243      	negs	r3, r0
 80006a2:	4158      	adcs	r0, r3
 80006a4:	0040      	lsls	r0, r0, #1
 80006a6:	3801      	subs	r0, #1
 80006a8:	e7e5      	b.n	8000676 <__lesf2+0x52>
 80006aa:	46c0      	nop			; (mov r8, r8)

080006ac <__aeabi_fsub>:
 80006ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ae:	46ce      	mov	lr, r9
 80006b0:	4647      	mov	r7, r8
 80006b2:	0243      	lsls	r3, r0, #9
 80006b4:	0a5b      	lsrs	r3, r3, #9
 80006b6:	024e      	lsls	r6, r1, #9
 80006b8:	00da      	lsls	r2, r3, #3
 80006ba:	4694      	mov	ip, r2
 80006bc:	0a72      	lsrs	r2, r6, #9
 80006be:	4691      	mov	r9, r2
 80006c0:	0045      	lsls	r5, r0, #1
 80006c2:	004a      	lsls	r2, r1, #1
 80006c4:	b580      	push	{r7, lr}
 80006c6:	0e2d      	lsrs	r5, r5, #24
 80006c8:	001f      	movs	r7, r3
 80006ca:	0fc4      	lsrs	r4, r0, #31
 80006cc:	0e12      	lsrs	r2, r2, #24
 80006ce:	0fc9      	lsrs	r1, r1, #31
 80006d0:	09b6      	lsrs	r6, r6, #6
 80006d2:	2aff      	cmp	r2, #255	; 0xff
 80006d4:	d05b      	beq.n	800078e <__aeabi_fsub+0xe2>
 80006d6:	2001      	movs	r0, #1
 80006d8:	4041      	eors	r1, r0
 80006da:	428c      	cmp	r4, r1
 80006dc:	d039      	beq.n	8000752 <__aeabi_fsub+0xa6>
 80006de:	1aa8      	subs	r0, r5, r2
 80006e0:	2800      	cmp	r0, #0
 80006e2:	dd5a      	ble.n	800079a <__aeabi_fsub+0xee>
 80006e4:	2a00      	cmp	r2, #0
 80006e6:	d06a      	beq.n	80007be <__aeabi_fsub+0x112>
 80006e8:	2dff      	cmp	r5, #255	; 0xff
 80006ea:	d100      	bne.n	80006ee <__aeabi_fsub+0x42>
 80006ec:	e0d9      	b.n	80008a2 <__aeabi_fsub+0x1f6>
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	04d2      	lsls	r2, r2, #19
 80006f2:	4316      	orrs	r6, r2
 80006f4:	281b      	cmp	r0, #27
 80006f6:	dc00      	bgt.n	80006fa <__aeabi_fsub+0x4e>
 80006f8:	e0e9      	b.n	80008ce <__aeabi_fsub+0x222>
 80006fa:	2001      	movs	r0, #1
 80006fc:	4663      	mov	r3, ip
 80006fe:	1a18      	subs	r0, r3, r0
 8000700:	0143      	lsls	r3, r0, #5
 8000702:	d400      	bmi.n	8000706 <__aeabi_fsub+0x5a>
 8000704:	e0b4      	b.n	8000870 <__aeabi_fsub+0x1c4>
 8000706:	0180      	lsls	r0, r0, #6
 8000708:	0987      	lsrs	r7, r0, #6
 800070a:	0038      	movs	r0, r7
 800070c:	f002 f852 	bl	80027b4 <__clzsi2>
 8000710:	3805      	subs	r0, #5
 8000712:	4087      	lsls	r7, r0
 8000714:	4285      	cmp	r5, r0
 8000716:	dc00      	bgt.n	800071a <__aeabi_fsub+0x6e>
 8000718:	e0cc      	b.n	80008b4 <__aeabi_fsub+0x208>
 800071a:	1a2d      	subs	r5, r5, r0
 800071c:	48b5      	ldr	r0, [pc, #724]	; (80009f4 <__aeabi_fsub+0x348>)
 800071e:	4038      	ands	r0, r7
 8000720:	0743      	lsls	r3, r0, #29
 8000722:	d004      	beq.n	800072e <__aeabi_fsub+0x82>
 8000724:	230f      	movs	r3, #15
 8000726:	4003      	ands	r3, r0
 8000728:	2b04      	cmp	r3, #4
 800072a:	d000      	beq.n	800072e <__aeabi_fsub+0x82>
 800072c:	3004      	adds	r0, #4
 800072e:	0143      	lsls	r3, r0, #5
 8000730:	d400      	bmi.n	8000734 <__aeabi_fsub+0x88>
 8000732:	e0a0      	b.n	8000876 <__aeabi_fsub+0x1ca>
 8000734:	1c6a      	adds	r2, r5, #1
 8000736:	2dfe      	cmp	r5, #254	; 0xfe
 8000738:	d100      	bne.n	800073c <__aeabi_fsub+0x90>
 800073a:	e08d      	b.n	8000858 <__aeabi_fsub+0x1ac>
 800073c:	0180      	lsls	r0, r0, #6
 800073e:	0a47      	lsrs	r7, r0, #9
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	05d0      	lsls	r0, r2, #23
 8000744:	4338      	orrs	r0, r7
 8000746:	07e4      	lsls	r4, r4, #31
 8000748:	4320      	orrs	r0, r4
 800074a:	bcc0      	pop	{r6, r7}
 800074c:	46b9      	mov	r9, r7
 800074e:	46b0      	mov	r8, r6
 8000750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000752:	1aa8      	subs	r0, r5, r2
 8000754:	4680      	mov	r8, r0
 8000756:	2800      	cmp	r0, #0
 8000758:	dd45      	ble.n	80007e6 <__aeabi_fsub+0x13a>
 800075a:	2a00      	cmp	r2, #0
 800075c:	d070      	beq.n	8000840 <__aeabi_fsub+0x194>
 800075e:	2dff      	cmp	r5, #255	; 0xff
 8000760:	d100      	bne.n	8000764 <__aeabi_fsub+0xb8>
 8000762:	e09e      	b.n	80008a2 <__aeabi_fsub+0x1f6>
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	04db      	lsls	r3, r3, #19
 8000768:	431e      	orrs	r6, r3
 800076a:	4643      	mov	r3, r8
 800076c:	2b1b      	cmp	r3, #27
 800076e:	dc00      	bgt.n	8000772 <__aeabi_fsub+0xc6>
 8000770:	e0d2      	b.n	8000918 <__aeabi_fsub+0x26c>
 8000772:	2001      	movs	r0, #1
 8000774:	4460      	add	r0, ip
 8000776:	0143      	lsls	r3, r0, #5
 8000778:	d57a      	bpl.n	8000870 <__aeabi_fsub+0x1c4>
 800077a:	3501      	adds	r5, #1
 800077c:	2dff      	cmp	r5, #255	; 0xff
 800077e:	d06b      	beq.n	8000858 <__aeabi_fsub+0x1ac>
 8000780:	2301      	movs	r3, #1
 8000782:	4a9d      	ldr	r2, [pc, #628]	; (80009f8 <__aeabi_fsub+0x34c>)
 8000784:	4003      	ands	r3, r0
 8000786:	0840      	lsrs	r0, r0, #1
 8000788:	4010      	ands	r0, r2
 800078a:	4318      	orrs	r0, r3
 800078c:	e7c8      	b.n	8000720 <__aeabi_fsub+0x74>
 800078e:	2e00      	cmp	r6, #0
 8000790:	d020      	beq.n	80007d4 <__aeabi_fsub+0x128>
 8000792:	428c      	cmp	r4, r1
 8000794:	d023      	beq.n	80007de <__aeabi_fsub+0x132>
 8000796:	0028      	movs	r0, r5
 8000798:	38ff      	subs	r0, #255	; 0xff
 800079a:	2800      	cmp	r0, #0
 800079c:	d039      	beq.n	8000812 <__aeabi_fsub+0x166>
 800079e:	1b57      	subs	r7, r2, r5
 80007a0:	2d00      	cmp	r5, #0
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fsub+0xfa>
 80007a4:	e09d      	b.n	80008e2 <__aeabi_fsub+0x236>
 80007a6:	4663      	mov	r3, ip
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_fsub+0x102>
 80007ac:	e0db      	b.n	8000966 <__aeabi_fsub+0x2ba>
 80007ae:	1e7b      	subs	r3, r7, #1
 80007b0:	2f01      	cmp	r7, #1
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fsub+0x10a>
 80007b4:	e10d      	b.n	80009d2 <__aeabi_fsub+0x326>
 80007b6:	2fff      	cmp	r7, #255	; 0xff
 80007b8:	d071      	beq.n	800089e <__aeabi_fsub+0x1f2>
 80007ba:	001f      	movs	r7, r3
 80007bc:	e098      	b.n	80008f0 <__aeabi_fsub+0x244>
 80007be:	2e00      	cmp	r6, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fsub+0x118>
 80007c2:	e0a7      	b.n	8000914 <__aeabi_fsub+0x268>
 80007c4:	1e42      	subs	r2, r0, #1
 80007c6:	2801      	cmp	r0, #1
 80007c8:	d100      	bne.n	80007cc <__aeabi_fsub+0x120>
 80007ca:	e0e6      	b.n	800099a <__aeabi_fsub+0x2ee>
 80007cc:	28ff      	cmp	r0, #255	; 0xff
 80007ce:	d068      	beq.n	80008a2 <__aeabi_fsub+0x1f6>
 80007d0:	0010      	movs	r0, r2
 80007d2:	e78f      	b.n	80006f4 <__aeabi_fsub+0x48>
 80007d4:	2001      	movs	r0, #1
 80007d6:	4041      	eors	r1, r0
 80007d8:	42a1      	cmp	r1, r4
 80007da:	d000      	beq.n	80007de <__aeabi_fsub+0x132>
 80007dc:	e77f      	b.n	80006de <__aeabi_fsub+0x32>
 80007de:	20ff      	movs	r0, #255	; 0xff
 80007e0:	4240      	negs	r0, r0
 80007e2:	4680      	mov	r8, r0
 80007e4:	44a8      	add	r8, r5
 80007e6:	4640      	mov	r0, r8
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d038      	beq.n	800085e <__aeabi_fsub+0x1b2>
 80007ec:	1b51      	subs	r1, r2, r5
 80007ee:	2d00      	cmp	r5, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fsub+0x148>
 80007f2:	e0ae      	b.n	8000952 <__aeabi_fsub+0x2a6>
 80007f4:	2aff      	cmp	r2, #255	; 0xff
 80007f6:	d100      	bne.n	80007fa <__aeabi_fsub+0x14e>
 80007f8:	e0df      	b.n	80009ba <__aeabi_fsub+0x30e>
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	4660      	mov	r0, ip
 80007fe:	04db      	lsls	r3, r3, #19
 8000800:	4318      	orrs	r0, r3
 8000802:	4684      	mov	ip, r0
 8000804:	291b      	cmp	r1, #27
 8000806:	dc00      	bgt.n	800080a <__aeabi_fsub+0x15e>
 8000808:	e0d9      	b.n	80009be <__aeabi_fsub+0x312>
 800080a:	2001      	movs	r0, #1
 800080c:	0015      	movs	r5, r2
 800080e:	1980      	adds	r0, r0, r6
 8000810:	e7b1      	b.n	8000776 <__aeabi_fsub+0xca>
 8000812:	20fe      	movs	r0, #254	; 0xfe
 8000814:	1c6a      	adds	r2, r5, #1
 8000816:	4210      	tst	r0, r2
 8000818:	d171      	bne.n	80008fe <__aeabi_fsub+0x252>
 800081a:	2d00      	cmp	r5, #0
 800081c:	d000      	beq.n	8000820 <__aeabi_fsub+0x174>
 800081e:	e0a6      	b.n	800096e <__aeabi_fsub+0x2c2>
 8000820:	4663      	mov	r3, ip
 8000822:	2b00      	cmp	r3, #0
 8000824:	d100      	bne.n	8000828 <__aeabi_fsub+0x17c>
 8000826:	e0d9      	b.n	80009dc <__aeabi_fsub+0x330>
 8000828:	2200      	movs	r2, #0
 800082a:	2e00      	cmp	r6, #0
 800082c:	d100      	bne.n	8000830 <__aeabi_fsub+0x184>
 800082e:	e788      	b.n	8000742 <__aeabi_fsub+0x96>
 8000830:	1b98      	subs	r0, r3, r6
 8000832:	0143      	lsls	r3, r0, #5
 8000834:	d400      	bmi.n	8000838 <__aeabi_fsub+0x18c>
 8000836:	e0e1      	b.n	80009fc <__aeabi_fsub+0x350>
 8000838:	4663      	mov	r3, ip
 800083a:	000c      	movs	r4, r1
 800083c:	1af0      	subs	r0, r6, r3
 800083e:	e76f      	b.n	8000720 <__aeabi_fsub+0x74>
 8000840:	2e00      	cmp	r6, #0
 8000842:	d100      	bne.n	8000846 <__aeabi_fsub+0x19a>
 8000844:	e0b7      	b.n	80009b6 <__aeabi_fsub+0x30a>
 8000846:	0002      	movs	r2, r0
 8000848:	3a01      	subs	r2, #1
 800084a:	2801      	cmp	r0, #1
 800084c:	d100      	bne.n	8000850 <__aeabi_fsub+0x1a4>
 800084e:	e09c      	b.n	800098a <__aeabi_fsub+0x2de>
 8000850:	28ff      	cmp	r0, #255	; 0xff
 8000852:	d026      	beq.n	80008a2 <__aeabi_fsub+0x1f6>
 8000854:	4690      	mov	r8, r2
 8000856:	e788      	b.n	800076a <__aeabi_fsub+0xbe>
 8000858:	22ff      	movs	r2, #255	; 0xff
 800085a:	2700      	movs	r7, #0
 800085c:	e771      	b.n	8000742 <__aeabi_fsub+0x96>
 800085e:	20fe      	movs	r0, #254	; 0xfe
 8000860:	1c6a      	adds	r2, r5, #1
 8000862:	4210      	tst	r0, r2
 8000864:	d064      	beq.n	8000930 <__aeabi_fsub+0x284>
 8000866:	2aff      	cmp	r2, #255	; 0xff
 8000868:	d0f6      	beq.n	8000858 <__aeabi_fsub+0x1ac>
 800086a:	0015      	movs	r5, r2
 800086c:	4466      	add	r6, ip
 800086e:	0870      	lsrs	r0, r6, #1
 8000870:	0743      	lsls	r3, r0, #29
 8000872:	d000      	beq.n	8000876 <__aeabi_fsub+0x1ca>
 8000874:	e756      	b.n	8000724 <__aeabi_fsub+0x78>
 8000876:	08c3      	lsrs	r3, r0, #3
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d012      	beq.n	80008a2 <__aeabi_fsub+0x1f6>
 800087c:	025b      	lsls	r3, r3, #9
 800087e:	0a5f      	lsrs	r7, r3, #9
 8000880:	b2ea      	uxtb	r2, r5
 8000882:	e75e      	b.n	8000742 <__aeabi_fsub+0x96>
 8000884:	4662      	mov	r2, ip
 8000886:	2a00      	cmp	r2, #0
 8000888:	d100      	bne.n	800088c <__aeabi_fsub+0x1e0>
 800088a:	e096      	b.n	80009ba <__aeabi_fsub+0x30e>
 800088c:	2e00      	cmp	r6, #0
 800088e:	d008      	beq.n	80008a2 <__aeabi_fsub+0x1f6>
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	03d2      	lsls	r2, r2, #15
 8000894:	4213      	tst	r3, r2
 8000896:	d004      	beq.n	80008a2 <__aeabi_fsub+0x1f6>
 8000898:	4648      	mov	r0, r9
 800089a:	4210      	tst	r0, r2
 800089c:	d101      	bne.n	80008a2 <__aeabi_fsub+0x1f6>
 800089e:	000c      	movs	r4, r1
 80008a0:	464b      	mov	r3, r9
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d0d8      	beq.n	8000858 <__aeabi_fsub+0x1ac>
 80008a6:	2780      	movs	r7, #128	; 0x80
 80008a8:	03ff      	lsls	r7, r7, #15
 80008aa:	431f      	orrs	r7, r3
 80008ac:	027f      	lsls	r7, r7, #9
 80008ae:	22ff      	movs	r2, #255	; 0xff
 80008b0:	0a7f      	lsrs	r7, r7, #9
 80008b2:	e746      	b.n	8000742 <__aeabi_fsub+0x96>
 80008b4:	2320      	movs	r3, #32
 80008b6:	003a      	movs	r2, r7
 80008b8:	1b45      	subs	r5, r0, r5
 80008ba:	0038      	movs	r0, r7
 80008bc:	3501      	adds	r5, #1
 80008be:	40ea      	lsrs	r2, r5
 80008c0:	1b5d      	subs	r5, r3, r5
 80008c2:	40a8      	lsls	r0, r5
 80008c4:	1e43      	subs	r3, r0, #1
 80008c6:	4198      	sbcs	r0, r3
 80008c8:	2500      	movs	r5, #0
 80008ca:	4310      	orrs	r0, r2
 80008cc:	e728      	b.n	8000720 <__aeabi_fsub+0x74>
 80008ce:	2320      	movs	r3, #32
 80008d0:	1a1b      	subs	r3, r3, r0
 80008d2:	0032      	movs	r2, r6
 80008d4:	409e      	lsls	r6, r3
 80008d6:	40c2      	lsrs	r2, r0
 80008d8:	0030      	movs	r0, r6
 80008da:	1e43      	subs	r3, r0, #1
 80008dc:	4198      	sbcs	r0, r3
 80008de:	4310      	orrs	r0, r2
 80008e0:	e70c      	b.n	80006fc <__aeabi_fsub+0x50>
 80008e2:	2aff      	cmp	r2, #255	; 0xff
 80008e4:	d0db      	beq.n	800089e <__aeabi_fsub+0x1f2>
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	4660      	mov	r0, ip
 80008ea:	04db      	lsls	r3, r3, #19
 80008ec:	4318      	orrs	r0, r3
 80008ee:	4684      	mov	ip, r0
 80008f0:	2f1b      	cmp	r7, #27
 80008f2:	dd56      	ble.n	80009a2 <__aeabi_fsub+0x2f6>
 80008f4:	2001      	movs	r0, #1
 80008f6:	000c      	movs	r4, r1
 80008f8:	0015      	movs	r5, r2
 80008fa:	1a30      	subs	r0, r6, r0
 80008fc:	e700      	b.n	8000700 <__aeabi_fsub+0x54>
 80008fe:	4663      	mov	r3, ip
 8000900:	1b9f      	subs	r7, r3, r6
 8000902:	017b      	lsls	r3, r7, #5
 8000904:	d43d      	bmi.n	8000982 <__aeabi_fsub+0x2d6>
 8000906:	2f00      	cmp	r7, #0
 8000908:	d000      	beq.n	800090c <__aeabi_fsub+0x260>
 800090a:	e6fe      	b.n	800070a <__aeabi_fsub+0x5e>
 800090c:	2400      	movs	r4, #0
 800090e:	2200      	movs	r2, #0
 8000910:	2700      	movs	r7, #0
 8000912:	e716      	b.n	8000742 <__aeabi_fsub+0x96>
 8000914:	0005      	movs	r5, r0
 8000916:	e7af      	b.n	8000878 <__aeabi_fsub+0x1cc>
 8000918:	0032      	movs	r2, r6
 800091a:	4643      	mov	r3, r8
 800091c:	4641      	mov	r1, r8
 800091e:	40da      	lsrs	r2, r3
 8000920:	2320      	movs	r3, #32
 8000922:	1a5b      	subs	r3, r3, r1
 8000924:	409e      	lsls	r6, r3
 8000926:	0030      	movs	r0, r6
 8000928:	1e43      	subs	r3, r0, #1
 800092a:	4198      	sbcs	r0, r3
 800092c:	4310      	orrs	r0, r2
 800092e:	e721      	b.n	8000774 <__aeabi_fsub+0xc8>
 8000930:	2d00      	cmp	r5, #0
 8000932:	d1a7      	bne.n	8000884 <__aeabi_fsub+0x1d8>
 8000934:	4663      	mov	r3, ip
 8000936:	2b00      	cmp	r3, #0
 8000938:	d059      	beq.n	80009ee <__aeabi_fsub+0x342>
 800093a:	2200      	movs	r2, #0
 800093c:	2e00      	cmp	r6, #0
 800093e:	d100      	bne.n	8000942 <__aeabi_fsub+0x296>
 8000940:	e6ff      	b.n	8000742 <__aeabi_fsub+0x96>
 8000942:	0030      	movs	r0, r6
 8000944:	4460      	add	r0, ip
 8000946:	0143      	lsls	r3, r0, #5
 8000948:	d592      	bpl.n	8000870 <__aeabi_fsub+0x1c4>
 800094a:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <__aeabi_fsub+0x348>)
 800094c:	3501      	adds	r5, #1
 800094e:	4018      	ands	r0, r3
 8000950:	e78e      	b.n	8000870 <__aeabi_fsub+0x1c4>
 8000952:	4663      	mov	r3, ip
 8000954:	2b00      	cmp	r3, #0
 8000956:	d047      	beq.n	80009e8 <__aeabi_fsub+0x33c>
 8000958:	1e4b      	subs	r3, r1, #1
 800095a:	2901      	cmp	r1, #1
 800095c:	d015      	beq.n	800098a <__aeabi_fsub+0x2de>
 800095e:	29ff      	cmp	r1, #255	; 0xff
 8000960:	d02b      	beq.n	80009ba <__aeabi_fsub+0x30e>
 8000962:	0019      	movs	r1, r3
 8000964:	e74e      	b.n	8000804 <__aeabi_fsub+0x158>
 8000966:	000c      	movs	r4, r1
 8000968:	464b      	mov	r3, r9
 800096a:	003d      	movs	r5, r7
 800096c:	e784      	b.n	8000878 <__aeabi_fsub+0x1cc>
 800096e:	4662      	mov	r2, ip
 8000970:	2a00      	cmp	r2, #0
 8000972:	d18b      	bne.n	800088c <__aeabi_fsub+0x1e0>
 8000974:	2e00      	cmp	r6, #0
 8000976:	d192      	bne.n	800089e <__aeabi_fsub+0x1f2>
 8000978:	2780      	movs	r7, #128	; 0x80
 800097a:	2400      	movs	r4, #0
 800097c:	22ff      	movs	r2, #255	; 0xff
 800097e:	03ff      	lsls	r7, r7, #15
 8000980:	e6df      	b.n	8000742 <__aeabi_fsub+0x96>
 8000982:	4663      	mov	r3, ip
 8000984:	000c      	movs	r4, r1
 8000986:	1af7      	subs	r7, r6, r3
 8000988:	e6bf      	b.n	800070a <__aeabi_fsub+0x5e>
 800098a:	0030      	movs	r0, r6
 800098c:	4460      	add	r0, ip
 800098e:	2501      	movs	r5, #1
 8000990:	0143      	lsls	r3, r0, #5
 8000992:	d400      	bmi.n	8000996 <__aeabi_fsub+0x2ea>
 8000994:	e76c      	b.n	8000870 <__aeabi_fsub+0x1c4>
 8000996:	2502      	movs	r5, #2
 8000998:	e6f2      	b.n	8000780 <__aeabi_fsub+0xd4>
 800099a:	4663      	mov	r3, ip
 800099c:	2501      	movs	r5, #1
 800099e:	1b98      	subs	r0, r3, r6
 80009a0:	e6ae      	b.n	8000700 <__aeabi_fsub+0x54>
 80009a2:	2320      	movs	r3, #32
 80009a4:	4664      	mov	r4, ip
 80009a6:	4660      	mov	r0, ip
 80009a8:	40fc      	lsrs	r4, r7
 80009aa:	1bdf      	subs	r7, r3, r7
 80009ac:	40b8      	lsls	r0, r7
 80009ae:	1e43      	subs	r3, r0, #1
 80009b0:	4198      	sbcs	r0, r3
 80009b2:	4320      	orrs	r0, r4
 80009b4:	e79f      	b.n	80008f6 <__aeabi_fsub+0x24a>
 80009b6:	0005      	movs	r5, r0
 80009b8:	e75e      	b.n	8000878 <__aeabi_fsub+0x1cc>
 80009ba:	464b      	mov	r3, r9
 80009bc:	e771      	b.n	80008a2 <__aeabi_fsub+0x1f6>
 80009be:	2320      	movs	r3, #32
 80009c0:	4665      	mov	r5, ip
 80009c2:	4660      	mov	r0, ip
 80009c4:	40cd      	lsrs	r5, r1
 80009c6:	1a59      	subs	r1, r3, r1
 80009c8:	4088      	lsls	r0, r1
 80009ca:	1e43      	subs	r3, r0, #1
 80009cc:	4198      	sbcs	r0, r3
 80009ce:	4328      	orrs	r0, r5
 80009d0:	e71c      	b.n	800080c <__aeabi_fsub+0x160>
 80009d2:	4663      	mov	r3, ip
 80009d4:	000c      	movs	r4, r1
 80009d6:	2501      	movs	r5, #1
 80009d8:	1af0      	subs	r0, r6, r3
 80009da:	e691      	b.n	8000700 <__aeabi_fsub+0x54>
 80009dc:	2e00      	cmp	r6, #0
 80009de:	d095      	beq.n	800090c <__aeabi_fsub+0x260>
 80009e0:	000c      	movs	r4, r1
 80009e2:	464f      	mov	r7, r9
 80009e4:	2200      	movs	r2, #0
 80009e6:	e6ac      	b.n	8000742 <__aeabi_fsub+0x96>
 80009e8:	464b      	mov	r3, r9
 80009ea:	000d      	movs	r5, r1
 80009ec:	e744      	b.n	8000878 <__aeabi_fsub+0x1cc>
 80009ee:	464f      	mov	r7, r9
 80009f0:	2200      	movs	r2, #0
 80009f2:	e6a6      	b.n	8000742 <__aeabi_fsub+0x96>
 80009f4:	fbffffff 	.word	0xfbffffff
 80009f8:	7dffffff 	.word	0x7dffffff
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d000      	beq.n	8000a02 <__aeabi_fsub+0x356>
 8000a00:	e736      	b.n	8000870 <__aeabi_fsub+0x1c4>
 8000a02:	2400      	movs	r4, #0
 8000a04:	2700      	movs	r7, #0
 8000a06:	e69c      	b.n	8000742 <__aeabi_fsub+0x96>

08000a08 <__aeabi_f2iz>:
 8000a08:	0241      	lsls	r1, r0, #9
 8000a0a:	0042      	lsls	r2, r0, #1
 8000a0c:	0fc3      	lsrs	r3, r0, #31
 8000a0e:	0a49      	lsrs	r1, r1, #9
 8000a10:	2000      	movs	r0, #0
 8000a12:	0e12      	lsrs	r2, r2, #24
 8000a14:	2a7e      	cmp	r2, #126	; 0x7e
 8000a16:	dd03      	ble.n	8000a20 <__aeabi_f2iz+0x18>
 8000a18:	2a9d      	cmp	r2, #157	; 0x9d
 8000a1a:	dd02      	ble.n	8000a22 <__aeabi_f2iz+0x1a>
 8000a1c:	4a09      	ldr	r2, [pc, #36]	; (8000a44 <__aeabi_f2iz+0x3c>)
 8000a1e:	1898      	adds	r0, r3, r2
 8000a20:	4770      	bx	lr
 8000a22:	2080      	movs	r0, #128	; 0x80
 8000a24:	0400      	lsls	r0, r0, #16
 8000a26:	4301      	orrs	r1, r0
 8000a28:	2a95      	cmp	r2, #149	; 0x95
 8000a2a:	dc07      	bgt.n	8000a3c <__aeabi_f2iz+0x34>
 8000a2c:	2096      	movs	r0, #150	; 0x96
 8000a2e:	1a82      	subs	r2, r0, r2
 8000a30:	40d1      	lsrs	r1, r2
 8000a32:	4248      	negs	r0, r1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1f3      	bne.n	8000a20 <__aeabi_f2iz+0x18>
 8000a38:	0008      	movs	r0, r1
 8000a3a:	e7f1      	b.n	8000a20 <__aeabi_f2iz+0x18>
 8000a3c:	3a96      	subs	r2, #150	; 0x96
 8000a3e:	4091      	lsls	r1, r2
 8000a40:	e7f7      	b.n	8000a32 <__aeabi_f2iz+0x2a>
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	7fffffff 	.word	0x7fffffff

08000a48 <__aeabi_dadd>:
 8000a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a4a:	464f      	mov	r7, r9
 8000a4c:	4646      	mov	r6, r8
 8000a4e:	46d6      	mov	lr, sl
 8000a50:	000d      	movs	r5, r1
 8000a52:	0004      	movs	r4, r0
 8000a54:	b5c0      	push	{r6, r7, lr}
 8000a56:	001f      	movs	r7, r3
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0328      	lsls	r0, r5, #12
 8000a5c:	0f62      	lsrs	r2, r4, #29
 8000a5e:	0a40      	lsrs	r0, r0, #9
 8000a60:	4310      	orrs	r0, r2
 8000a62:	007a      	lsls	r2, r7, #1
 8000a64:	0d52      	lsrs	r2, r2, #21
 8000a66:	00e3      	lsls	r3, r4, #3
 8000a68:	033c      	lsls	r4, r7, #12
 8000a6a:	4691      	mov	r9, r2
 8000a6c:	0a64      	lsrs	r4, r4, #9
 8000a6e:	0ffa      	lsrs	r2, r7, #31
 8000a70:	0f4f      	lsrs	r7, r1, #29
 8000a72:	006e      	lsls	r6, r5, #1
 8000a74:	4327      	orrs	r7, r4
 8000a76:	4692      	mov	sl, r2
 8000a78:	46b8      	mov	r8, r7
 8000a7a:	0d76      	lsrs	r6, r6, #21
 8000a7c:	0fed      	lsrs	r5, r5, #31
 8000a7e:	00c9      	lsls	r1, r1, #3
 8000a80:	4295      	cmp	r5, r2
 8000a82:	d100      	bne.n	8000a86 <__aeabi_dadd+0x3e>
 8000a84:	e099      	b.n	8000bba <__aeabi_dadd+0x172>
 8000a86:	464c      	mov	r4, r9
 8000a88:	1b34      	subs	r4, r6, r4
 8000a8a:	46a4      	mov	ip, r4
 8000a8c:	2c00      	cmp	r4, #0
 8000a8e:	dc00      	bgt.n	8000a92 <__aeabi_dadd+0x4a>
 8000a90:	e07c      	b.n	8000b8c <__aeabi_dadd+0x144>
 8000a92:	464a      	mov	r2, r9
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	d100      	bne.n	8000a9a <__aeabi_dadd+0x52>
 8000a98:	e0b8      	b.n	8000c0c <__aeabi_dadd+0x1c4>
 8000a9a:	4ac5      	ldr	r2, [pc, #788]	; (8000db0 <__aeabi_dadd+0x368>)
 8000a9c:	4296      	cmp	r6, r2
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_dadd+0x5a>
 8000aa0:	e11c      	b.n	8000cdc <__aeabi_dadd+0x294>
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	003c      	movs	r4, r7
 8000aa6:	0412      	lsls	r2, r2, #16
 8000aa8:	4314      	orrs	r4, r2
 8000aaa:	46a0      	mov	r8, r4
 8000aac:	4662      	mov	r2, ip
 8000aae:	2a38      	cmp	r2, #56	; 0x38
 8000ab0:	dd00      	ble.n	8000ab4 <__aeabi_dadd+0x6c>
 8000ab2:	e161      	b.n	8000d78 <__aeabi_dadd+0x330>
 8000ab4:	2a1f      	cmp	r2, #31
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x72>
 8000ab8:	e1cc      	b.n	8000e54 <__aeabi_dadd+0x40c>
 8000aba:	4664      	mov	r4, ip
 8000abc:	2220      	movs	r2, #32
 8000abe:	1b12      	subs	r2, r2, r4
 8000ac0:	4644      	mov	r4, r8
 8000ac2:	4094      	lsls	r4, r2
 8000ac4:	000f      	movs	r7, r1
 8000ac6:	46a1      	mov	r9, r4
 8000ac8:	4664      	mov	r4, ip
 8000aca:	4091      	lsls	r1, r2
 8000acc:	40e7      	lsrs	r7, r4
 8000ace:	464c      	mov	r4, r9
 8000ad0:	1e4a      	subs	r2, r1, #1
 8000ad2:	4191      	sbcs	r1, r2
 8000ad4:	433c      	orrs	r4, r7
 8000ad6:	4642      	mov	r2, r8
 8000ad8:	4321      	orrs	r1, r4
 8000ada:	4664      	mov	r4, ip
 8000adc:	40e2      	lsrs	r2, r4
 8000ade:	1a80      	subs	r0, r0, r2
 8000ae0:	1a5c      	subs	r4, r3, r1
 8000ae2:	42a3      	cmp	r3, r4
 8000ae4:	419b      	sbcs	r3, r3
 8000ae6:	425f      	negs	r7, r3
 8000ae8:	1bc7      	subs	r7, r0, r7
 8000aea:	023b      	lsls	r3, r7, #8
 8000aec:	d400      	bmi.n	8000af0 <__aeabi_dadd+0xa8>
 8000aee:	e0d0      	b.n	8000c92 <__aeabi_dadd+0x24a>
 8000af0:	027f      	lsls	r7, r7, #9
 8000af2:	0a7f      	lsrs	r7, r7, #9
 8000af4:	2f00      	cmp	r7, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_dadd+0xb2>
 8000af8:	e0ff      	b.n	8000cfa <__aeabi_dadd+0x2b2>
 8000afa:	0038      	movs	r0, r7
 8000afc:	f001 fe5a 	bl	80027b4 <__clzsi2>
 8000b00:	0001      	movs	r1, r0
 8000b02:	3908      	subs	r1, #8
 8000b04:	2320      	movs	r3, #32
 8000b06:	0022      	movs	r2, r4
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	408f      	lsls	r7, r1
 8000b0c:	40da      	lsrs	r2, r3
 8000b0e:	408c      	lsls	r4, r1
 8000b10:	4317      	orrs	r7, r2
 8000b12:	42b1      	cmp	r1, r6
 8000b14:	da00      	bge.n	8000b18 <__aeabi_dadd+0xd0>
 8000b16:	e0ff      	b.n	8000d18 <__aeabi_dadd+0x2d0>
 8000b18:	1b89      	subs	r1, r1, r6
 8000b1a:	1c4b      	adds	r3, r1, #1
 8000b1c:	2b1f      	cmp	r3, #31
 8000b1e:	dd00      	ble.n	8000b22 <__aeabi_dadd+0xda>
 8000b20:	e0a8      	b.n	8000c74 <__aeabi_dadd+0x22c>
 8000b22:	2220      	movs	r2, #32
 8000b24:	0039      	movs	r1, r7
 8000b26:	1ad2      	subs	r2, r2, r3
 8000b28:	0020      	movs	r0, r4
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	4091      	lsls	r1, r2
 8000b2e:	40d8      	lsrs	r0, r3
 8000b30:	1e62      	subs	r2, r4, #1
 8000b32:	4194      	sbcs	r4, r2
 8000b34:	40df      	lsrs	r7, r3
 8000b36:	2600      	movs	r6, #0
 8000b38:	4301      	orrs	r1, r0
 8000b3a:	430c      	orrs	r4, r1
 8000b3c:	0763      	lsls	r3, r4, #29
 8000b3e:	d009      	beq.n	8000b54 <__aeabi_dadd+0x10c>
 8000b40:	230f      	movs	r3, #15
 8000b42:	4023      	ands	r3, r4
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	d005      	beq.n	8000b54 <__aeabi_dadd+0x10c>
 8000b48:	1d23      	adds	r3, r4, #4
 8000b4a:	42a3      	cmp	r3, r4
 8000b4c:	41a4      	sbcs	r4, r4
 8000b4e:	4264      	negs	r4, r4
 8000b50:	193f      	adds	r7, r7, r4
 8000b52:	001c      	movs	r4, r3
 8000b54:	023b      	lsls	r3, r7, #8
 8000b56:	d400      	bmi.n	8000b5a <__aeabi_dadd+0x112>
 8000b58:	e09e      	b.n	8000c98 <__aeabi_dadd+0x250>
 8000b5a:	4b95      	ldr	r3, [pc, #596]	; (8000db0 <__aeabi_dadd+0x368>)
 8000b5c:	3601      	adds	r6, #1
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	d100      	bne.n	8000b64 <__aeabi_dadd+0x11c>
 8000b62:	e0b7      	b.n	8000cd4 <__aeabi_dadd+0x28c>
 8000b64:	4a93      	ldr	r2, [pc, #588]	; (8000db4 <__aeabi_dadd+0x36c>)
 8000b66:	08e4      	lsrs	r4, r4, #3
 8000b68:	4017      	ands	r7, r2
 8000b6a:	077b      	lsls	r3, r7, #29
 8000b6c:	0571      	lsls	r1, r6, #21
 8000b6e:	027f      	lsls	r7, r7, #9
 8000b70:	4323      	orrs	r3, r4
 8000b72:	0b3f      	lsrs	r7, r7, #12
 8000b74:	0d4a      	lsrs	r2, r1, #21
 8000b76:	0512      	lsls	r2, r2, #20
 8000b78:	433a      	orrs	r2, r7
 8000b7a:	07ed      	lsls	r5, r5, #31
 8000b7c:	432a      	orrs	r2, r5
 8000b7e:	0018      	movs	r0, r3
 8000b80:	0011      	movs	r1, r2
 8000b82:	bce0      	pop	{r5, r6, r7}
 8000b84:	46ba      	mov	sl, r7
 8000b86:	46b1      	mov	r9, r6
 8000b88:	46a8      	mov	r8, r5
 8000b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b8c:	2c00      	cmp	r4, #0
 8000b8e:	d04b      	beq.n	8000c28 <__aeabi_dadd+0x1e0>
 8000b90:	464c      	mov	r4, r9
 8000b92:	1ba4      	subs	r4, r4, r6
 8000b94:	46a4      	mov	ip, r4
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d000      	beq.n	8000b9c <__aeabi_dadd+0x154>
 8000b9a:	e123      	b.n	8000de4 <__aeabi_dadd+0x39c>
 8000b9c:	0004      	movs	r4, r0
 8000b9e:	431c      	orrs	r4, r3
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0x15c>
 8000ba2:	e1af      	b.n	8000f04 <__aeabi_dadd+0x4bc>
 8000ba4:	4662      	mov	r2, ip
 8000ba6:	1e54      	subs	r4, r2, #1
 8000ba8:	2a01      	cmp	r2, #1
 8000baa:	d100      	bne.n	8000bae <__aeabi_dadd+0x166>
 8000bac:	e215      	b.n	8000fda <__aeabi_dadd+0x592>
 8000bae:	4d80      	ldr	r5, [pc, #512]	; (8000db0 <__aeabi_dadd+0x368>)
 8000bb0:	45ac      	cmp	ip, r5
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_dadd+0x16e>
 8000bb4:	e1c8      	b.n	8000f48 <__aeabi_dadd+0x500>
 8000bb6:	46a4      	mov	ip, r4
 8000bb8:	e11b      	b.n	8000df2 <__aeabi_dadd+0x3aa>
 8000bba:	464a      	mov	r2, r9
 8000bbc:	1ab2      	subs	r2, r6, r2
 8000bbe:	4694      	mov	ip, r2
 8000bc0:	2a00      	cmp	r2, #0
 8000bc2:	dc00      	bgt.n	8000bc6 <__aeabi_dadd+0x17e>
 8000bc4:	e0ac      	b.n	8000d20 <__aeabi_dadd+0x2d8>
 8000bc6:	464a      	mov	r2, r9
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	d043      	beq.n	8000c54 <__aeabi_dadd+0x20c>
 8000bcc:	4a78      	ldr	r2, [pc, #480]	; (8000db0 <__aeabi_dadd+0x368>)
 8000bce:	4296      	cmp	r6, r2
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dadd+0x18c>
 8000bd2:	e1af      	b.n	8000f34 <__aeabi_dadd+0x4ec>
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	003c      	movs	r4, r7
 8000bd8:	0412      	lsls	r2, r2, #16
 8000bda:	4314      	orrs	r4, r2
 8000bdc:	46a0      	mov	r8, r4
 8000bde:	4662      	mov	r2, ip
 8000be0:	2a38      	cmp	r2, #56	; 0x38
 8000be2:	dc67      	bgt.n	8000cb4 <__aeabi_dadd+0x26c>
 8000be4:	2a1f      	cmp	r2, #31
 8000be6:	dc00      	bgt.n	8000bea <__aeabi_dadd+0x1a2>
 8000be8:	e15f      	b.n	8000eaa <__aeabi_dadd+0x462>
 8000bea:	4647      	mov	r7, r8
 8000bec:	3a20      	subs	r2, #32
 8000bee:	40d7      	lsrs	r7, r2
 8000bf0:	4662      	mov	r2, ip
 8000bf2:	2a20      	cmp	r2, #32
 8000bf4:	d005      	beq.n	8000c02 <__aeabi_dadd+0x1ba>
 8000bf6:	4664      	mov	r4, ip
 8000bf8:	2240      	movs	r2, #64	; 0x40
 8000bfa:	1b12      	subs	r2, r2, r4
 8000bfc:	4644      	mov	r4, r8
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	4321      	orrs	r1, r4
 8000c02:	1e4a      	subs	r2, r1, #1
 8000c04:	4191      	sbcs	r1, r2
 8000c06:	000c      	movs	r4, r1
 8000c08:	433c      	orrs	r4, r7
 8000c0a:	e057      	b.n	8000cbc <__aeabi_dadd+0x274>
 8000c0c:	003a      	movs	r2, r7
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	d100      	bne.n	8000c14 <__aeabi_dadd+0x1cc>
 8000c12:	e105      	b.n	8000e20 <__aeabi_dadd+0x3d8>
 8000c14:	0022      	movs	r2, r4
 8000c16:	3a01      	subs	r2, #1
 8000c18:	2c01      	cmp	r4, #1
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dadd+0x1d6>
 8000c1c:	e182      	b.n	8000f24 <__aeabi_dadd+0x4dc>
 8000c1e:	4c64      	ldr	r4, [pc, #400]	; (8000db0 <__aeabi_dadd+0x368>)
 8000c20:	45a4      	cmp	ip, r4
 8000c22:	d05b      	beq.n	8000cdc <__aeabi_dadd+0x294>
 8000c24:	4694      	mov	ip, r2
 8000c26:	e741      	b.n	8000aac <__aeabi_dadd+0x64>
 8000c28:	4c63      	ldr	r4, [pc, #396]	; (8000db8 <__aeabi_dadd+0x370>)
 8000c2a:	1c77      	adds	r7, r6, #1
 8000c2c:	4227      	tst	r7, r4
 8000c2e:	d000      	beq.n	8000c32 <__aeabi_dadd+0x1ea>
 8000c30:	e0c4      	b.n	8000dbc <__aeabi_dadd+0x374>
 8000c32:	0004      	movs	r4, r0
 8000c34:	431c      	orrs	r4, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d000      	beq.n	8000c3c <__aeabi_dadd+0x1f4>
 8000c3a:	e169      	b.n	8000f10 <__aeabi_dadd+0x4c8>
 8000c3c:	2c00      	cmp	r4, #0
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_dadd+0x1fa>
 8000c40:	e1bf      	b.n	8000fc2 <__aeabi_dadd+0x57a>
 8000c42:	4644      	mov	r4, r8
 8000c44:	430c      	orrs	r4, r1
 8000c46:	d000      	beq.n	8000c4a <__aeabi_dadd+0x202>
 8000c48:	e1d0      	b.n	8000fec <__aeabi_dadd+0x5a4>
 8000c4a:	0742      	lsls	r2, r0, #29
 8000c4c:	08db      	lsrs	r3, r3, #3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	08c0      	lsrs	r0, r0, #3
 8000c52:	e029      	b.n	8000ca8 <__aeabi_dadd+0x260>
 8000c54:	003a      	movs	r2, r7
 8000c56:	430a      	orrs	r2, r1
 8000c58:	d100      	bne.n	8000c5c <__aeabi_dadd+0x214>
 8000c5a:	e170      	b.n	8000f3e <__aeabi_dadd+0x4f6>
 8000c5c:	4662      	mov	r2, ip
 8000c5e:	4664      	mov	r4, ip
 8000c60:	3a01      	subs	r2, #1
 8000c62:	2c01      	cmp	r4, #1
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dadd+0x220>
 8000c66:	e0e0      	b.n	8000e2a <__aeabi_dadd+0x3e2>
 8000c68:	4c51      	ldr	r4, [pc, #324]	; (8000db0 <__aeabi_dadd+0x368>)
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dadd+0x228>
 8000c6e:	e161      	b.n	8000f34 <__aeabi_dadd+0x4ec>
 8000c70:	4694      	mov	ip, r2
 8000c72:	e7b4      	b.n	8000bde <__aeabi_dadd+0x196>
 8000c74:	003a      	movs	r2, r7
 8000c76:	391f      	subs	r1, #31
 8000c78:	40ca      	lsrs	r2, r1
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	2b20      	cmp	r3, #32
 8000c7e:	d003      	beq.n	8000c88 <__aeabi_dadd+0x240>
 8000c80:	2240      	movs	r2, #64	; 0x40
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	409f      	lsls	r7, r3
 8000c86:	433c      	orrs	r4, r7
 8000c88:	1e63      	subs	r3, r4, #1
 8000c8a:	419c      	sbcs	r4, r3
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	2600      	movs	r6, #0
 8000c90:	430c      	orrs	r4, r1
 8000c92:	0763      	lsls	r3, r4, #29
 8000c94:	d000      	beq.n	8000c98 <__aeabi_dadd+0x250>
 8000c96:	e753      	b.n	8000b40 <__aeabi_dadd+0xf8>
 8000c98:	46b4      	mov	ip, r6
 8000c9a:	08e4      	lsrs	r4, r4, #3
 8000c9c:	077b      	lsls	r3, r7, #29
 8000c9e:	4323      	orrs	r3, r4
 8000ca0:	08f8      	lsrs	r0, r7, #3
 8000ca2:	4a43      	ldr	r2, [pc, #268]	; (8000db0 <__aeabi_dadd+0x368>)
 8000ca4:	4594      	cmp	ip, r2
 8000ca6:	d01d      	beq.n	8000ce4 <__aeabi_dadd+0x29c>
 8000ca8:	4662      	mov	r2, ip
 8000caa:	0307      	lsls	r7, r0, #12
 8000cac:	0552      	lsls	r2, r2, #21
 8000cae:	0b3f      	lsrs	r7, r7, #12
 8000cb0:	0d52      	lsrs	r2, r2, #21
 8000cb2:	e760      	b.n	8000b76 <__aeabi_dadd+0x12e>
 8000cb4:	4644      	mov	r4, r8
 8000cb6:	430c      	orrs	r4, r1
 8000cb8:	1e62      	subs	r2, r4, #1
 8000cba:	4194      	sbcs	r4, r2
 8000cbc:	18e4      	adds	r4, r4, r3
 8000cbe:	429c      	cmp	r4, r3
 8000cc0:	419b      	sbcs	r3, r3
 8000cc2:	425f      	negs	r7, r3
 8000cc4:	183f      	adds	r7, r7, r0
 8000cc6:	023b      	lsls	r3, r7, #8
 8000cc8:	d5e3      	bpl.n	8000c92 <__aeabi_dadd+0x24a>
 8000cca:	4b39      	ldr	r3, [pc, #228]	; (8000db0 <__aeabi_dadd+0x368>)
 8000ccc:	3601      	adds	r6, #1
 8000cce:	429e      	cmp	r6, r3
 8000cd0:	d000      	beq.n	8000cd4 <__aeabi_dadd+0x28c>
 8000cd2:	e0b5      	b.n	8000e40 <__aeabi_dadd+0x3f8>
 8000cd4:	0032      	movs	r2, r6
 8000cd6:	2700      	movs	r7, #0
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e74c      	b.n	8000b76 <__aeabi_dadd+0x12e>
 8000cdc:	0742      	lsls	r2, r0, #29
 8000cde:	08db      	lsrs	r3, r3, #3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	08c0      	lsrs	r0, r0, #3
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	4302      	orrs	r2, r0
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x2a4>
 8000cea:	e1e1      	b.n	80010b0 <__aeabi_dadd+0x668>
 8000cec:	2780      	movs	r7, #128	; 0x80
 8000cee:	033f      	lsls	r7, r7, #12
 8000cf0:	4307      	orrs	r7, r0
 8000cf2:	033f      	lsls	r7, r7, #12
 8000cf4:	4a2e      	ldr	r2, [pc, #184]	; (8000db0 <__aeabi_dadd+0x368>)
 8000cf6:	0b3f      	lsrs	r7, r7, #12
 8000cf8:	e73d      	b.n	8000b76 <__aeabi_dadd+0x12e>
 8000cfa:	0020      	movs	r0, r4
 8000cfc:	f001 fd5a 	bl	80027b4 <__clzsi2>
 8000d00:	0001      	movs	r1, r0
 8000d02:	3118      	adds	r1, #24
 8000d04:	291f      	cmp	r1, #31
 8000d06:	dc00      	bgt.n	8000d0a <__aeabi_dadd+0x2c2>
 8000d08:	e6fc      	b.n	8000b04 <__aeabi_dadd+0xbc>
 8000d0a:	3808      	subs	r0, #8
 8000d0c:	4084      	lsls	r4, r0
 8000d0e:	0027      	movs	r7, r4
 8000d10:	2400      	movs	r4, #0
 8000d12:	42b1      	cmp	r1, r6
 8000d14:	db00      	blt.n	8000d18 <__aeabi_dadd+0x2d0>
 8000d16:	e6ff      	b.n	8000b18 <__aeabi_dadd+0xd0>
 8000d18:	4a26      	ldr	r2, [pc, #152]	; (8000db4 <__aeabi_dadd+0x36c>)
 8000d1a:	1a76      	subs	r6, r6, r1
 8000d1c:	4017      	ands	r7, r2
 8000d1e:	e70d      	b.n	8000b3c <__aeabi_dadd+0xf4>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d02f      	beq.n	8000d84 <__aeabi_dadd+0x33c>
 8000d24:	464a      	mov	r2, r9
 8000d26:	1b92      	subs	r2, r2, r6
 8000d28:	4694      	mov	ip, r2
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_dadd+0x2e8>
 8000d2e:	e0ad      	b.n	8000e8c <__aeabi_dadd+0x444>
 8000d30:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <__aeabi_dadd+0x368>)
 8000d32:	4591      	cmp	r9, r2
 8000d34:	d100      	bne.n	8000d38 <__aeabi_dadd+0x2f0>
 8000d36:	e10f      	b.n	8000f58 <__aeabi_dadd+0x510>
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	0412      	lsls	r2, r2, #16
 8000d3c:	4310      	orrs	r0, r2
 8000d3e:	4662      	mov	r2, ip
 8000d40:	2a38      	cmp	r2, #56	; 0x38
 8000d42:	dd00      	ble.n	8000d46 <__aeabi_dadd+0x2fe>
 8000d44:	e10f      	b.n	8000f66 <__aeabi_dadd+0x51e>
 8000d46:	2a1f      	cmp	r2, #31
 8000d48:	dd00      	ble.n	8000d4c <__aeabi_dadd+0x304>
 8000d4a:	e180      	b.n	800104e <__aeabi_dadd+0x606>
 8000d4c:	4664      	mov	r4, ip
 8000d4e:	2220      	movs	r2, #32
 8000d50:	001e      	movs	r6, r3
 8000d52:	1b12      	subs	r2, r2, r4
 8000d54:	4667      	mov	r7, ip
 8000d56:	0004      	movs	r4, r0
 8000d58:	4093      	lsls	r3, r2
 8000d5a:	4094      	lsls	r4, r2
 8000d5c:	40fe      	lsrs	r6, r7
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	4193      	sbcs	r3, r2
 8000d62:	40f8      	lsrs	r0, r7
 8000d64:	4334      	orrs	r4, r6
 8000d66:	431c      	orrs	r4, r3
 8000d68:	4480      	add	r8, r0
 8000d6a:	1864      	adds	r4, r4, r1
 8000d6c:	428c      	cmp	r4, r1
 8000d6e:	41bf      	sbcs	r7, r7
 8000d70:	427f      	negs	r7, r7
 8000d72:	464e      	mov	r6, r9
 8000d74:	4447      	add	r7, r8
 8000d76:	e7a6      	b.n	8000cc6 <__aeabi_dadd+0x27e>
 8000d78:	4642      	mov	r2, r8
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	0011      	movs	r1, r2
 8000d7e:	1e4a      	subs	r2, r1, #1
 8000d80:	4191      	sbcs	r1, r2
 8000d82:	e6ad      	b.n	8000ae0 <__aeabi_dadd+0x98>
 8000d84:	4c0c      	ldr	r4, [pc, #48]	; (8000db8 <__aeabi_dadd+0x370>)
 8000d86:	1c72      	adds	r2, r6, #1
 8000d88:	4222      	tst	r2, r4
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_dadd+0x346>
 8000d8c:	e0a1      	b.n	8000ed2 <__aeabi_dadd+0x48a>
 8000d8e:	0002      	movs	r2, r0
 8000d90:	431a      	orrs	r2, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d000      	beq.n	8000d98 <__aeabi_dadd+0x350>
 8000d96:	e0fa      	b.n	8000f8e <__aeabi_dadd+0x546>
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_dadd+0x356>
 8000d9c:	e145      	b.n	800102a <__aeabi_dadd+0x5e2>
 8000d9e:	003a      	movs	r2, r7
 8000da0:	430a      	orrs	r2, r1
 8000da2:	d000      	beq.n	8000da6 <__aeabi_dadd+0x35e>
 8000da4:	e146      	b.n	8001034 <__aeabi_dadd+0x5ec>
 8000da6:	0742      	lsls	r2, r0, #29
 8000da8:	08db      	lsrs	r3, r3, #3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	08c0      	lsrs	r0, r0, #3
 8000dae:	e77b      	b.n	8000ca8 <__aeabi_dadd+0x260>
 8000db0:	000007ff 	.word	0x000007ff
 8000db4:	ff7fffff 	.word	0xff7fffff
 8000db8:	000007fe 	.word	0x000007fe
 8000dbc:	4647      	mov	r7, r8
 8000dbe:	1a5c      	subs	r4, r3, r1
 8000dc0:	1bc2      	subs	r2, r0, r7
 8000dc2:	42a3      	cmp	r3, r4
 8000dc4:	41bf      	sbcs	r7, r7
 8000dc6:	427f      	negs	r7, r7
 8000dc8:	46b9      	mov	r9, r7
 8000dca:	0017      	movs	r7, r2
 8000dcc:	464a      	mov	r2, r9
 8000dce:	1abf      	subs	r7, r7, r2
 8000dd0:	023a      	lsls	r2, r7, #8
 8000dd2:	d500      	bpl.n	8000dd6 <__aeabi_dadd+0x38e>
 8000dd4:	e08d      	b.n	8000ef2 <__aeabi_dadd+0x4aa>
 8000dd6:	0023      	movs	r3, r4
 8000dd8:	433b      	orrs	r3, r7
 8000dda:	d000      	beq.n	8000dde <__aeabi_dadd+0x396>
 8000ddc:	e68a      	b.n	8000af4 <__aeabi_dadd+0xac>
 8000dde:	2000      	movs	r0, #0
 8000de0:	2500      	movs	r5, #0
 8000de2:	e761      	b.n	8000ca8 <__aeabi_dadd+0x260>
 8000de4:	4cb4      	ldr	r4, [pc, #720]	; (80010b8 <__aeabi_dadd+0x670>)
 8000de6:	45a1      	cmp	r9, r4
 8000de8:	d100      	bne.n	8000dec <__aeabi_dadd+0x3a4>
 8000dea:	e0ad      	b.n	8000f48 <__aeabi_dadd+0x500>
 8000dec:	2480      	movs	r4, #128	; 0x80
 8000dee:	0424      	lsls	r4, r4, #16
 8000df0:	4320      	orrs	r0, r4
 8000df2:	4664      	mov	r4, ip
 8000df4:	2c38      	cmp	r4, #56	; 0x38
 8000df6:	dc3d      	bgt.n	8000e74 <__aeabi_dadd+0x42c>
 8000df8:	4662      	mov	r2, ip
 8000dfa:	2c1f      	cmp	r4, #31
 8000dfc:	dd00      	ble.n	8000e00 <__aeabi_dadd+0x3b8>
 8000dfe:	e0b7      	b.n	8000f70 <__aeabi_dadd+0x528>
 8000e00:	2520      	movs	r5, #32
 8000e02:	001e      	movs	r6, r3
 8000e04:	1b2d      	subs	r5, r5, r4
 8000e06:	0004      	movs	r4, r0
 8000e08:	40ab      	lsls	r3, r5
 8000e0a:	40ac      	lsls	r4, r5
 8000e0c:	40d6      	lsrs	r6, r2
 8000e0e:	40d0      	lsrs	r0, r2
 8000e10:	4642      	mov	r2, r8
 8000e12:	1e5d      	subs	r5, r3, #1
 8000e14:	41ab      	sbcs	r3, r5
 8000e16:	4334      	orrs	r4, r6
 8000e18:	1a12      	subs	r2, r2, r0
 8000e1a:	4690      	mov	r8, r2
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	e02c      	b.n	8000e7a <__aeabi_dadd+0x432>
 8000e20:	0742      	lsls	r2, r0, #29
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	08c0      	lsrs	r0, r0, #3
 8000e28:	e73b      	b.n	8000ca2 <__aeabi_dadd+0x25a>
 8000e2a:	185c      	adds	r4, r3, r1
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	419b      	sbcs	r3, r3
 8000e30:	4440      	add	r0, r8
 8000e32:	425b      	negs	r3, r3
 8000e34:	18c7      	adds	r7, r0, r3
 8000e36:	2601      	movs	r6, #1
 8000e38:	023b      	lsls	r3, r7, #8
 8000e3a:	d400      	bmi.n	8000e3e <__aeabi_dadd+0x3f6>
 8000e3c:	e729      	b.n	8000c92 <__aeabi_dadd+0x24a>
 8000e3e:	2602      	movs	r6, #2
 8000e40:	4a9e      	ldr	r2, [pc, #632]	; (80010bc <__aeabi_dadd+0x674>)
 8000e42:	0863      	lsrs	r3, r4, #1
 8000e44:	4017      	ands	r7, r2
 8000e46:	2201      	movs	r2, #1
 8000e48:	4014      	ands	r4, r2
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	07fb      	lsls	r3, r7, #31
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	087f      	lsrs	r7, r7, #1
 8000e52:	e673      	b.n	8000b3c <__aeabi_dadd+0xf4>
 8000e54:	4644      	mov	r4, r8
 8000e56:	3a20      	subs	r2, #32
 8000e58:	40d4      	lsrs	r4, r2
 8000e5a:	4662      	mov	r2, ip
 8000e5c:	2a20      	cmp	r2, #32
 8000e5e:	d005      	beq.n	8000e6c <__aeabi_dadd+0x424>
 8000e60:	4667      	mov	r7, ip
 8000e62:	2240      	movs	r2, #64	; 0x40
 8000e64:	1bd2      	subs	r2, r2, r7
 8000e66:	4647      	mov	r7, r8
 8000e68:	4097      	lsls	r7, r2
 8000e6a:	4339      	orrs	r1, r7
 8000e6c:	1e4a      	subs	r2, r1, #1
 8000e6e:	4191      	sbcs	r1, r2
 8000e70:	4321      	orrs	r1, r4
 8000e72:	e635      	b.n	8000ae0 <__aeabi_dadd+0x98>
 8000e74:	4303      	orrs	r3, r0
 8000e76:	1e58      	subs	r0, r3, #1
 8000e78:	4183      	sbcs	r3, r0
 8000e7a:	1acc      	subs	r4, r1, r3
 8000e7c:	42a1      	cmp	r1, r4
 8000e7e:	41bf      	sbcs	r7, r7
 8000e80:	4643      	mov	r3, r8
 8000e82:	427f      	negs	r7, r7
 8000e84:	4655      	mov	r5, sl
 8000e86:	464e      	mov	r6, r9
 8000e88:	1bdf      	subs	r7, r3, r7
 8000e8a:	e62e      	b.n	8000aea <__aeabi_dadd+0xa2>
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	d100      	bne.n	8000e94 <__aeabi_dadd+0x44c>
 8000e92:	e0bd      	b.n	8001010 <__aeabi_dadd+0x5c8>
 8000e94:	4662      	mov	r2, ip
 8000e96:	4664      	mov	r4, ip
 8000e98:	3a01      	subs	r2, #1
 8000e9a:	2c01      	cmp	r4, #1
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dadd+0x458>
 8000e9e:	e0e5      	b.n	800106c <__aeabi_dadd+0x624>
 8000ea0:	4c85      	ldr	r4, [pc, #532]	; (80010b8 <__aeabi_dadd+0x670>)
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d058      	beq.n	8000f58 <__aeabi_dadd+0x510>
 8000ea6:	4694      	mov	ip, r2
 8000ea8:	e749      	b.n	8000d3e <__aeabi_dadd+0x2f6>
 8000eaa:	4664      	mov	r4, ip
 8000eac:	2220      	movs	r2, #32
 8000eae:	1b12      	subs	r2, r2, r4
 8000eb0:	4644      	mov	r4, r8
 8000eb2:	4094      	lsls	r4, r2
 8000eb4:	000f      	movs	r7, r1
 8000eb6:	46a1      	mov	r9, r4
 8000eb8:	4664      	mov	r4, ip
 8000eba:	4091      	lsls	r1, r2
 8000ebc:	40e7      	lsrs	r7, r4
 8000ebe:	464c      	mov	r4, r9
 8000ec0:	1e4a      	subs	r2, r1, #1
 8000ec2:	4191      	sbcs	r1, r2
 8000ec4:	433c      	orrs	r4, r7
 8000ec6:	4642      	mov	r2, r8
 8000ec8:	430c      	orrs	r4, r1
 8000eca:	4661      	mov	r1, ip
 8000ecc:	40ca      	lsrs	r2, r1
 8000ece:	1880      	adds	r0, r0, r2
 8000ed0:	e6f4      	b.n	8000cbc <__aeabi_dadd+0x274>
 8000ed2:	4c79      	ldr	r4, [pc, #484]	; (80010b8 <__aeabi_dadd+0x670>)
 8000ed4:	42a2      	cmp	r2, r4
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dadd+0x492>
 8000ed8:	e6fd      	b.n	8000cd6 <__aeabi_dadd+0x28e>
 8000eda:	1859      	adds	r1, r3, r1
 8000edc:	4299      	cmp	r1, r3
 8000ede:	419b      	sbcs	r3, r3
 8000ee0:	4440      	add	r0, r8
 8000ee2:	425f      	negs	r7, r3
 8000ee4:	19c7      	adds	r7, r0, r7
 8000ee6:	07fc      	lsls	r4, r7, #31
 8000ee8:	0849      	lsrs	r1, r1, #1
 8000eea:	0016      	movs	r6, r2
 8000eec:	430c      	orrs	r4, r1
 8000eee:	087f      	lsrs	r7, r7, #1
 8000ef0:	e6cf      	b.n	8000c92 <__aeabi_dadd+0x24a>
 8000ef2:	1acc      	subs	r4, r1, r3
 8000ef4:	42a1      	cmp	r1, r4
 8000ef6:	41bf      	sbcs	r7, r7
 8000ef8:	4643      	mov	r3, r8
 8000efa:	427f      	negs	r7, r7
 8000efc:	1a18      	subs	r0, r3, r0
 8000efe:	4655      	mov	r5, sl
 8000f00:	1bc7      	subs	r7, r0, r7
 8000f02:	e5f7      	b.n	8000af4 <__aeabi_dadd+0xac>
 8000f04:	08c9      	lsrs	r1, r1, #3
 8000f06:	077b      	lsls	r3, r7, #29
 8000f08:	4655      	mov	r5, sl
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	08f8      	lsrs	r0, r7, #3
 8000f0e:	e6c8      	b.n	8000ca2 <__aeabi_dadd+0x25a>
 8000f10:	2c00      	cmp	r4, #0
 8000f12:	d000      	beq.n	8000f16 <__aeabi_dadd+0x4ce>
 8000f14:	e081      	b.n	800101a <__aeabi_dadd+0x5d2>
 8000f16:	4643      	mov	r3, r8
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	d115      	bne.n	8000f48 <__aeabi_dadd+0x500>
 8000f1c:	2080      	movs	r0, #128	; 0x80
 8000f1e:	2500      	movs	r5, #0
 8000f20:	0300      	lsls	r0, r0, #12
 8000f22:	e6e3      	b.n	8000cec <__aeabi_dadd+0x2a4>
 8000f24:	1a5c      	subs	r4, r3, r1
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	419b      	sbcs	r3, r3
 8000f2a:	1bc7      	subs	r7, r0, r7
 8000f2c:	425b      	negs	r3, r3
 8000f2e:	2601      	movs	r6, #1
 8000f30:	1aff      	subs	r7, r7, r3
 8000f32:	e5da      	b.n	8000aea <__aeabi_dadd+0xa2>
 8000f34:	0742      	lsls	r2, r0, #29
 8000f36:	08db      	lsrs	r3, r3, #3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	08c0      	lsrs	r0, r0, #3
 8000f3c:	e6d2      	b.n	8000ce4 <__aeabi_dadd+0x29c>
 8000f3e:	0742      	lsls	r2, r0, #29
 8000f40:	08db      	lsrs	r3, r3, #3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	08c0      	lsrs	r0, r0, #3
 8000f46:	e6ac      	b.n	8000ca2 <__aeabi_dadd+0x25a>
 8000f48:	4643      	mov	r3, r8
 8000f4a:	4642      	mov	r2, r8
 8000f4c:	08c9      	lsrs	r1, r1, #3
 8000f4e:	075b      	lsls	r3, r3, #29
 8000f50:	4655      	mov	r5, sl
 8000f52:	430b      	orrs	r3, r1
 8000f54:	08d0      	lsrs	r0, r2, #3
 8000f56:	e6c5      	b.n	8000ce4 <__aeabi_dadd+0x29c>
 8000f58:	4643      	mov	r3, r8
 8000f5a:	4642      	mov	r2, r8
 8000f5c:	075b      	lsls	r3, r3, #29
 8000f5e:	08c9      	lsrs	r1, r1, #3
 8000f60:	430b      	orrs	r3, r1
 8000f62:	08d0      	lsrs	r0, r2, #3
 8000f64:	e6be      	b.n	8000ce4 <__aeabi_dadd+0x29c>
 8000f66:	4303      	orrs	r3, r0
 8000f68:	001c      	movs	r4, r3
 8000f6a:	1e63      	subs	r3, r4, #1
 8000f6c:	419c      	sbcs	r4, r3
 8000f6e:	e6fc      	b.n	8000d6a <__aeabi_dadd+0x322>
 8000f70:	0002      	movs	r2, r0
 8000f72:	3c20      	subs	r4, #32
 8000f74:	40e2      	lsrs	r2, r4
 8000f76:	0014      	movs	r4, r2
 8000f78:	4662      	mov	r2, ip
 8000f7a:	2a20      	cmp	r2, #32
 8000f7c:	d003      	beq.n	8000f86 <__aeabi_dadd+0x53e>
 8000f7e:	2540      	movs	r5, #64	; 0x40
 8000f80:	1aad      	subs	r5, r5, r2
 8000f82:	40a8      	lsls	r0, r5
 8000f84:	4303      	orrs	r3, r0
 8000f86:	1e58      	subs	r0, r3, #1
 8000f88:	4183      	sbcs	r3, r0
 8000f8a:	4323      	orrs	r3, r4
 8000f8c:	e775      	b.n	8000e7a <__aeabi_dadd+0x432>
 8000f8e:	2a00      	cmp	r2, #0
 8000f90:	d0e2      	beq.n	8000f58 <__aeabi_dadd+0x510>
 8000f92:	003a      	movs	r2, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	d0cd      	beq.n	8000f34 <__aeabi_dadd+0x4ec>
 8000f98:	0742      	lsls	r2, r0, #29
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	08c0      	lsrs	r0, r0, #3
 8000fa2:	0312      	lsls	r2, r2, #12
 8000fa4:	4210      	tst	r0, r2
 8000fa6:	d006      	beq.n	8000fb6 <__aeabi_dadd+0x56e>
 8000fa8:	08fc      	lsrs	r4, r7, #3
 8000faa:	4214      	tst	r4, r2
 8000fac:	d103      	bne.n	8000fb6 <__aeabi_dadd+0x56e>
 8000fae:	0020      	movs	r0, r4
 8000fb0:	08cb      	lsrs	r3, r1, #3
 8000fb2:	077a      	lsls	r2, r7, #29
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	0f5a      	lsrs	r2, r3, #29
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	0752      	lsls	r2, r2, #29
 8000fbc:	08db      	lsrs	r3, r3, #3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	e690      	b.n	8000ce4 <__aeabi_dadd+0x29c>
 8000fc2:	4643      	mov	r3, r8
 8000fc4:	430b      	orrs	r3, r1
 8000fc6:	d100      	bne.n	8000fca <__aeabi_dadd+0x582>
 8000fc8:	e709      	b.n	8000dde <__aeabi_dadd+0x396>
 8000fca:	4643      	mov	r3, r8
 8000fcc:	4642      	mov	r2, r8
 8000fce:	08c9      	lsrs	r1, r1, #3
 8000fd0:	075b      	lsls	r3, r3, #29
 8000fd2:	4655      	mov	r5, sl
 8000fd4:	430b      	orrs	r3, r1
 8000fd6:	08d0      	lsrs	r0, r2, #3
 8000fd8:	e666      	b.n	8000ca8 <__aeabi_dadd+0x260>
 8000fda:	1acc      	subs	r4, r1, r3
 8000fdc:	42a1      	cmp	r1, r4
 8000fde:	4189      	sbcs	r1, r1
 8000fe0:	1a3f      	subs	r7, r7, r0
 8000fe2:	4249      	negs	r1, r1
 8000fe4:	4655      	mov	r5, sl
 8000fe6:	2601      	movs	r6, #1
 8000fe8:	1a7f      	subs	r7, r7, r1
 8000fea:	e57e      	b.n	8000aea <__aeabi_dadd+0xa2>
 8000fec:	4642      	mov	r2, r8
 8000fee:	1a5c      	subs	r4, r3, r1
 8000ff0:	1a87      	subs	r7, r0, r2
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	4192      	sbcs	r2, r2
 8000ff6:	4252      	negs	r2, r2
 8000ff8:	1abf      	subs	r7, r7, r2
 8000ffa:	023a      	lsls	r2, r7, #8
 8000ffc:	d53d      	bpl.n	800107a <__aeabi_dadd+0x632>
 8000ffe:	1acc      	subs	r4, r1, r3
 8001000:	42a1      	cmp	r1, r4
 8001002:	4189      	sbcs	r1, r1
 8001004:	4643      	mov	r3, r8
 8001006:	4249      	negs	r1, r1
 8001008:	1a1f      	subs	r7, r3, r0
 800100a:	4655      	mov	r5, sl
 800100c:	1a7f      	subs	r7, r7, r1
 800100e:	e595      	b.n	8000b3c <__aeabi_dadd+0xf4>
 8001010:	077b      	lsls	r3, r7, #29
 8001012:	08c9      	lsrs	r1, r1, #3
 8001014:	430b      	orrs	r3, r1
 8001016:	08f8      	lsrs	r0, r7, #3
 8001018:	e643      	b.n	8000ca2 <__aeabi_dadd+0x25a>
 800101a:	4644      	mov	r4, r8
 800101c:	08db      	lsrs	r3, r3, #3
 800101e:	430c      	orrs	r4, r1
 8001020:	d130      	bne.n	8001084 <__aeabi_dadd+0x63c>
 8001022:	0742      	lsls	r2, r0, #29
 8001024:	4313      	orrs	r3, r2
 8001026:	08c0      	lsrs	r0, r0, #3
 8001028:	e65c      	b.n	8000ce4 <__aeabi_dadd+0x29c>
 800102a:	077b      	lsls	r3, r7, #29
 800102c:	08c9      	lsrs	r1, r1, #3
 800102e:	430b      	orrs	r3, r1
 8001030:	08f8      	lsrs	r0, r7, #3
 8001032:	e639      	b.n	8000ca8 <__aeabi_dadd+0x260>
 8001034:	185c      	adds	r4, r3, r1
 8001036:	429c      	cmp	r4, r3
 8001038:	419b      	sbcs	r3, r3
 800103a:	4440      	add	r0, r8
 800103c:	425b      	negs	r3, r3
 800103e:	18c7      	adds	r7, r0, r3
 8001040:	023b      	lsls	r3, r7, #8
 8001042:	d400      	bmi.n	8001046 <__aeabi_dadd+0x5fe>
 8001044:	e625      	b.n	8000c92 <__aeabi_dadd+0x24a>
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <__aeabi_dadd+0x674>)
 8001048:	2601      	movs	r6, #1
 800104a:	401f      	ands	r7, r3
 800104c:	e621      	b.n	8000c92 <__aeabi_dadd+0x24a>
 800104e:	0004      	movs	r4, r0
 8001050:	3a20      	subs	r2, #32
 8001052:	40d4      	lsrs	r4, r2
 8001054:	4662      	mov	r2, ip
 8001056:	2a20      	cmp	r2, #32
 8001058:	d004      	beq.n	8001064 <__aeabi_dadd+0x61c>
 800105a:	2240      	movs	r2, #64	; 0x40
 800105c:	4666      	mov	r6, ip
 800105e:	1b92      	subs	r2, r2, r6
 8001060:	4090      	lsls	r0, r2
 8001062:	4303      	orrs	r3, r0
 8001064:	1e5a      	subs	r2, r3, #1
 8001066:	4193      	sbcs	r3, r2
 8001068:	431c      	orrs	r4, r3
 800106a:	e67e      	b.n	8000d6a <__aeabi_dadd+0x322>
 800106c:	185c      	adds	r4, r3, r1
 800106e:	428c      	cmp	r4, r1
 8001070:	4189      	sbcs	r1, r1
 8001072:	4440      	add	r0, r8
 8001074:	4249      	negs	r1, r1
 8001076:	1847      	adds	r7, r0, r1
 8001078:	e6dd      	b.n	8000e36 <__aeabi_dadd+0x3ee>
 800107a:	0023      	movs	r3, r4
 800107c:	433b      	orrs	r3, r7
 800107e:	d100      	bne.n	8001082 <__aeabi_dadd+0x63a>
 8001080:	e6ad      	b.n	8000dde <__aeabi_dadd+0x396>
 8001082:	e606      	b.n	8000c92 <__aeabi_dadd+0x24a>
 8001084:	0744      	lsls	r4, r0, #29
 8001086:	4323      	orrs	r3, r4
 8001088:	2480      	movs	r4, #128	; 0x80
 800108a:	08c0      	lsrs	r0, r0, #3
 800108c:	0324      	lsls	r4, r4, #12
 800108e:	4220      	tst	r0, r4
 8001090:	d008      	beq.n	80010a4 <__aeabi_dadd+0x65c>
 8001092:	4642      	mov	r2, r8
 8001094:	08d6      	lsrs	r6, r2, #3
 8001096:	4226      	tst	r6, r4
 8001098:	d104      	bne.n	80010a4 <__aeabi_dadd+0x65c>
 800109a:	4655      	mov	r5, sl
 800109c:	0030      	movs	r0, r6
 800109e:	08cb      	lsrs	r3, r1, #3
 80010a0:	0751      	lsls	r1, r2, #29
 80010a2:	430b      	orrs	r3, r1
 80010a4:	0f5a      	lsrs	r2, r3, #29
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	08db      	lsrs	r3, r3, #3
 80010aa:	0752      	lsls	r2, r2, #29
 80010ac:	4313      	orrs	r3, r2
 80010ae:	e619      	b.n	8000ce4 <__aeabi_dadd+0x29c>
 80010b0:	2300      	movs	r3, #0
 80010b2:	4a01      	ldr	r2, [pc, #4]	; (80010b8 <__aeabi_dadd+0x670>)
 80010b4:	001f      	movs	r7, r3
 80010b6:	e55e      	b.n	8000b76 <__aeabi_dadd+0x12e>
 80010b8:	000007ff 	.word	0x000007ff
 80010bc:	ff7fffff 	.word	0xff7fffff

080010c0 <__aeabi_ddiv>:
 80010c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c2:	4657      	mov	r7, sl
 80010c4:	464e      	mov	r6, r9
 80010c6:	4645      	mov	r5, r8
 80010c8:	46de      	mov	lr, fp
 80010ca:	b5e0      	push	{r5, r6, r7, lr}
 80010cc:	4681      	mov	r9, r0
 80010ce:	0005      	movs	r5, r0
 80010d0:	030c      	lsls	r4, r1, #12
 80010d2:	0048      	lsls	r0, r1, #1
 80010d4:	4692      	mov	sl, r2
 80010d6:	001f      	movs	r7, r3
 80010d8:	b085      	sub	sp, #20
 80010da:	0b24      	lsrs	r4, r4, #12
 80010dc:	0d40      	lsrs	r0, r0, #21
 80010de:	0fce      	lsrs	r6, r1, #31
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d100      	bne.n	80010e6 <__aeabi_ddiv+0x26>
 80010e4:	e156      	b.n	8001394 <__aeabi_ddiv+0x2d4>
 80010e6:	4bd4      	ldr	r3, [pc, #848]	; (8001438 <__aeabi_ddiv+0x378>)
 80010e8:	4298      	cmp	r0, r3
 80010ea:	d100      	bne.n	80010ee <__aeabi_ddiv+0x2e>
 80010ec:	e172      	b.n	80013d4 <__aeabi_ddiv+0x314>
 80010ee:	0f6b      	lsrs	r3, r5, #29
 80010f0:	00e4      	lsls	r4, r4, #3
 80010f2:	431c      	orrs	r4, r3
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	041b      	lsls	r3, r3, #16
 80010f8:	4323      	orrs	r3, r4
 80010fa:	4698      	mov	r8, r3
 80010fc:	4bcf      	ldr	r3, [pc, #828]	; (800143c <__aeabi_ddiv+0x37c>)
 80010fe:	00ed      	lsls	r5, r5, #3
 8001100:	469b      	mov	fp, r3
 8001102:	2300      	movs	r3, #0
 8001104:	4699      	mov	r9, r3
 8001106:	4483      	add	fp, r0
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	033c      	lsls	r4, r7, #12
 800110c:	007b      	lsls	r3, r7, #1
 800110e:	4650      	mov	r0, sl
 8001110:	0b24      	lsrs	r4, r4, #12
 8001112:	0d5b      	lsrs	r3, r3, #21
 8001114:	0fff      	lsrs	r7, r7, #31
 8001116:	2b00      	cmp	r3, #0
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x5c>
 800111a:	e11f      	b.n	800135c <__aeabi_ddiv+0x29c>
 800111c:	4ac6      	ldr	r2, [pc, #792]	; (8001438 <__aeabi_ddiv+0x378>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d100      	bne.n	8001124 <__aeabi_ddiv+0x64>
 8001122:	e162      	b.n	80013ea <__aeabi_ddiv+0x32a>
 8001124:	49c5      	ldr	r1, [pc, #788]	; (800143c <__aeabi_ddiv+0x37c>)
 8001126:	0f42      	lsrs	r2, r0, #29
 8001128:	468c      	mov	ip, r1
 800112a:	00e4      	lsls	r4, r4, #3
 800112c:	4659      	mov	r1, fp
 800112e:	4314      	orrs	r4, r2
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	4463      	add	r3, ip
 8001134:	0412      	lsls	r2, r2, #16
 8001136:	1acb      	subs	r3, r1, r3
 8001138:	4314      	orrs	r4, r2
 800113a:	469b      	mov	fp, r3
 800113c:	00c2      	lsls	r2, r0, #3
 800113e:	2000      	movs	r0, #0
 8001140:	0033      	movs	r3, r6
 8001142:	407b      	eors	r3, r7
 8001144:	469a      	mov	sl, r3
 8001146:	464b      	mov	r3, r9
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d827      	bhi.n	800119c <__aeabi_ddiv+0xdc>
 800114c:	49bc      	ldr	r1, [pc, #752]	; (8001440 <__aeabi_ddiv+0x380>)
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	58cb      	ldr	r3, [r1, r3]
 8001152:	469f      	mov	pc, r3
 8001154:	46b2      	mov	sl, r6
 8001156:	9b00      	ldr	r3, [sp, #0]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d016      	beq.n	800118a <__aeabi_ddiv+0xca>
 800115c:	2b03      	cmp	r3, #3
 800115e:	d100      	bne.n	8001162 <__aeabi_ddiv+0xa2>
 8001160:	e28e      	b.n	8001680 <__aeabi_ddiv+0x5c0>
 8001162:	2b01      	cmp	r3, #1
 8001164:	d000      	beq.n	8001168 <__aeabi_ddiv+0xa8>
 8001166:	e0d9      	b.n	800131c <__aeabi_ddiv+0x25c>
 8001168:	2300      	movs	r3, #0
 800116a:	2400      	movs	r4, #0
 800116c:	2500      	movs	r5, #0
 800116e:	4652      	mov	r2, sl
 8001170:	051b      	lsls	r3, r3, #20
 8001172:	4323      	orrs	r3, r4
 8001174:	07d2      	lsls	r2, r2, #31
 8001176:	4313      	orrs	r3, r2
 8001178:	0028      	movs	r0, r5
 800117a:	0019      	movs	r1, r3
 800117c:	b005      	add	sp, #20
 800117e:	bcf0      	pop	{r4, r5, r6, r7}
 8001180:	46bb      	mov	fp, r7
 8001182:	46b2      	mov	sl, r6
 8001184:	46a9      	mov	r9, r5
 8001186:	46a0      	mov	r8, r4
 8001188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118a:	2400      	movs	r4, #0
 800118c:	2500      	movs	r5, #0
 800118e:	4baa      	ldr	r3, [pc, #680]	; (8001438 <__aeabi_ddiv+0x378>)
 8001190:	e7ed      	b.n	800116e <__aeabi_ddiv+0xae>
 8001192:	46ba      	mov	sl, r7
 8001194:	46a0      	mov	r8, r4
 8001196:	0015      	movs	r5, r2
 8001198:	9000      	str	r0, [sp, #0]
 800119a:	e7dc      	b.n	8001156 <__aeabi_ddiv+0x96>
 800119c:	4544      	cmp	r4, r8
 800119e:	d200      	bcs.n	80011a2 <__aeabi_ddiv+0xe2>
 80011a0:	e1c7      	b.n	8001532 <__aeabi_ddiv+0x472>
 80011a2:	d100      	bne.n	80011a6 <__aeabi_ddiv+0xe6>
 80011a4:	e1c2      	b.n	800152c <__aeabi_ddiv+0x46c>
 80011a6:	2301      	movs	r3, #1
 80011a8:	425b      	negs	r3, r3
 80011aa:	469c      	mov	ip, r3
 80011ac:	002e      	movs	r6, r5
 80011ae:	4640      	mov	r0, r8
 80011b0:	2500      	movs	r5, #0
 80011b2:	44e3      	add	fp, ip
 80011b4:	0223      	lsls	r3, r4, #8
 80011b6:	0e14      	lsrs	r4, r2, #24
 80011b8:	431c      	orrs	r4, r3
 80011ba:	0c1b      	lsrs	r3, r3, #16
 80011bc:	4699      	mov	r9, r3
 80011be:	0423      	lsls	r3, r4, #16
 80011c0:	0c1f      	lsrs	r7, r3, #16
 80011c2:	0212      	lsls	r2, r2, #8
 80011c4:	4649      	mov	r1, r9
 80011c6:	9200      	str	r2, [sp, #0]
 80011c8:	9701      	str	r7, [sp, #4]
 80011ca:	f7ff f83f 	bl	800024c <__aeabi_uidivmod>
 80011ce:	0002      	movs	r2, r0
 80011d0:	437a      	muls	r2, r7
 80011d2:	040b      	lsls	r3, r1, #16
 80011d4:	0c31      	lsrs	r1, r6, #16
 80011d6:	4680      	mov	r8, r0
 80011d8:	4319      	orrs	r1, r3
 80011da:	428a      	cmp	r2, r1
 80011dc:	d907      	bls.n	80011ee <__aeabi_ddiv+0x12e>
 80011de:	2301      	movs	r3, #1
 80011e0:	425b      	negs	r3, r3
 80011e2:	469c      	mov	ip, r3
 80011e4:	1909      	adds	r1, r1, r4
 80011e6:	44e0      	add	r8, ip
 80011e8:	428c      	cmp	r4, r1
 80011ea:	d800      	bhi.n	80011ee <__aeabi_ddiv+0x12e>
 80011ec:	e207      	b.n	80015fe <__aeabi_ddiv+0x53e>
 80011ee:	1a88      	subs	r0, r1, r2
 80011f0:	4649      	mov	r1, r9
 80011f2:	f7ff f82b 	bl	800024c <__aeabi_uidivmod>
 80011f6:	0409      	lsls	r1, r1, #16
 80011f8:	468c      	mov	ip, r1
 80011fa:	0431      	lsls	r1, r6, #16
 80011fc:	4666      	mov	r6, ip
 80011fe:	9a01      	ldr	r2, [sp, #4]
 8001200:	0c09      	lsrs	r1, r1, #16
 8001202:	4342      	muls	r2, r0
 8001204:	0003      	movs	r3, r0
 8001206:	4331      	orrs	r1, r6
 8001208:	428a      	cmp	r2, r1
 800120a:	d904      	bls.n	8001216 <__aeabi_ddiv+0x156>
 800120c:	1909      	adds	r1, r1, r4
 800120e:	3b01      	subs	r3, #1
 8001210:	428c      	cmp	r4, r1
 8001212:	d800      	bhi.n	8001216 <__aeabi_ddiv+0x156>
 8001214:	e1ed      	b.n	80015f2 <__aeabi_ddiv+0x532>
 8001216:	1a88      	subs	r0, r1, r2
 8001218:	4642      	mov	r2, r8
 800121a:	0412      	lsls	r2, r2, #16
 800121c:	431a      	orrs	r2, r3
 800121e:	4690      	mov	r8, r2
 8001220:	4641      	mov	r1, r8
 8001222:	9b00      	ldr	r3, [sp, #0]
 8001224:	040e      	lsls	r6, r1, #16
 8001226:	0c1b      	lsrs	r3, r3, #16
 8001228:	001f      	movs	r7, r3
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	9b00      	ldr	r3, [sp, #0]
 800122e:	0c36      	lsrs	r6, r6, #16
 8001230:	041b      	lsls	r3, r3, #16
 8001232:	0c19      	lsrs	r1, r3, #16
 8001234:	000b      	movs	r3, r1
 8001236:	4373      	muls	r3, r6
 8001238:	0c12      	lsrs	r2, r2, #16
 800123a:	437e      	muls	r6, r7
 800123c:	9103      	str	r1, [sp, #12]
 800123e:	4351      	muls	r1, r2
 8001240:	437a      	muls	r2, r7
 8001242:	0c1f      	lsrs	r7, r3, #16
 8001244:	46bc      	mov	ip, r7
 8001246:	1876      	adds	r6, r6, r1
 8001248:	4466      	add	r6, ip
 800124a:	42b1      	cmp	r1, r6
 800124c:	d903      	bls.n	8001256 <__aeabi_ddiv+0x196>
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	0249      	lsls	r1, r1, #9
 8001252:	468c      	mov	ip, r1
 8001254:	4462      	add	r2, ip
 8001256:	0c31      	lsrs	r1, r6, #16
 8001258:	188a      	adds	r2, r1, r2
 800125a:	0431      	lsls	r1, r6, #16
 800125c:	041e      	lsls	r6, r3, #16
 800125e:	0c36      	lsrs	r6, r6, #16
 8001260:	198e      	adds	r6, r1, r6
 8001262:	4290      	cmp	r0, r2
 8001264:	d302      	bcc.n	800126c <__aeabi_ddiv+0x1ac>
 8001266:	d112      	bne.n	800128e <__aeabi_ddiv+0x1ce>
 8001268:	42b5      	cmp	r5, r6
 800126a:	d210      	bcs.n	800128e <__aeabi_ddiv+0x1ce>
 800126c:	4643      	mov	r3, r8
 800126e:	1e59      	subs	r1, r3, #1
 8001270:	9b00      	ldr	r3, [sp, #0]
 8001272:	469c      	mov	ip, r3
 8001274:	4465      	add	r5, ip
 8001276:	001f      	movs	r7, r3
 8001278:	429d      	cmp	r5, r3
 800127a:	419b      	sbcs	r3, r3
 800127c:	425b      	negs	r3, r3
 800127e:	191b      	adds	r3, r3, r4
 8001280:	18c0      	adds	r0, r0, r3
 8001282:	4284      	cmp	r4, r0
 8001284:	d200      	bcs.n	8001288 <__aeabi_ddiv+0x1c8>
 8001286:	e1a0      	b.n	80015ca <__aeabi_ddiv+0x50a>
 8001288:	d100      	bne.n	800128c <__aeabi_ddiv+0x1cc>
 800128a:	e19b      	b.n	80015c4 <__aeabi_ddiv+0x504>
 800128c:	4688      	mov	r8, r1
 800128e:	1bae      	subs	r6, r5, r6
 8001290:	42b5      	cmp	r5, r6
 8001292:	41ad      	sbcs	r5, r5
 8001294:	1a80      	subs	r0, r0, r2
 8001296:	426d      	negs	r5, r5
 8001298:	1b40      	subs	r0, r0, r5
 800129a:	4284      	cmp	r4, r0
 800129c:	d100      	bne.n	80012a0 <__aeabi_ddiv+0x1e0>
 800129e:	e1d5      	b.n	800164c <__aeabi_ddiv+0x58c>
 80012a0:	4649      	mov	r1, r9
 80012a2:	f7fe ffd3 	bl	800024c <__aeabi_uidivmod>
 80012a6:	9a01      	ldr	r2, [sp, #4]
 80012a8:	040b      	lsls	r3, r1, #16
 80012aa:	4342      	muls	r2, r0
 80012ac:	0c31      	lsrs	r1, r6, #16
 80012ae:	0005      	movs	r5, r0
 80012b0:	4319      	orrs	r1, r3
 80012b2:	428a      	cmp	r2, r1
 80012b4:	d900      	bls.n	80012b8 <__aeabi_ddiv+0x1f8>
 80012b6:	e16c      	b.n	8001592 <__aeabi_ddiv+0x4d2>
 80012b8:	1a88      	subs	r0, r1, r2
 80012ba:	4649      	mov	r1, r9
 80012bc:	f7fe ffc6 	bl	800024c <__aeabi_uidivmod>
 80012c0:	9a01      	ldr	r2, [sp, #4]
 80012c2:	0436      	lsls	r6, r6, #16
 80012c4:	4342      	muls	r2, r0
 80012c6:	0409      	lsls	r1, r1, #16
 80012c8:	0c36      	lsrs	r6, r6, #16
 80012ca:	0003      	movs	r3, r0
 80012cc:	430e      	orrs	r6, r1
 80012ce:	42b2      	cmp	r2, r6
 80012d0:	d900      	bls.n	80012d4 <__aeabi_ddiv+0x214>
 80012d2:	e153      	b.n	800157c <__aeabi_ddiv+0x4bc>
 80012d4:	9803      	ldr	r0, [sp, #12]
 80012d6:	1ab6      	subs	r6, r6, r2
 80012d8:	0002      	movs	r2, r0
 80012da:	042d      	lsls	r5, r5, #16
 80012dc:	431d      	orrs	r5, r3
 80012de:	9f02      	ldr	r7, [sp, #8]
 80012e0:	042b      	lsls	r3, r5, #16
 80012e2:	0c1b      	lsrs	r3, r3, #16
 80012e4:	435a      	muls	r2, r3
 80012e6:	437b      	muls	r3, r7
 80012e8:	469c      	mov	ip, r3
 80012ea:	0c29      	lsrs	r1, r5, #16
 80012ec:	4348      	muls	r0, r1
 80012ee:	0c13      	lsrs	r3, r2, #16
 80012f0:	4484      	add	ip, r0
 80012f2:	4463      	add	r3, ip
 80012f4:	4379      	muls	r1, r7
 80012f6:	4298      	cmp	r0, r3
 80012f8:	d903      	bls.n	8001302 <__aeabi_ddiv+0x242>
 80012fa:	2080      	movs	r0, #128	; 0x80
 80012fc:	0240      	lsls	r0, r0, #9
 80012fe:	4684      	mov	ip, r0
 8001300:	4461      	add	r1, ip
 8001302:	0c18      	lsrs	r0, r3, #16
 8001304:	0412      	lsls	r2, r2, #16
 8001306:	041b      	lsls	r3, r3, #16
 8001308:	0c12      	lsrs	r2, r2, #16
 800130a:	1841      	adds	r1, r0, r1
 800130c:	189b      	adds	r3, r3, r2
 800130e:	428e      	cmp	r6, r1
 8001310:	d200      	bcs.n	8001314 <__aeabi_ddiv+0x254>
 8001312:	e0ff      	b.n	8001514 <__aeabi_ddiv+0x454>
 8001314:	d100      	bne.n	8001318 <__aeabi_ddiv+0x258>
 8001316:	e0fa      	b.n	800150e <__aeabi_ddiv+0x44e>
 8001318:	2301      	movs	r3, #1
 800131a:	431d      	orrs	r5, r3
 800131c:	4a49      	ldr	r2, [pc, #292]	; (8001444 <__aeabi_ddiv+0x384>)
 800131e:	445a      	add	r2, fp
 8001320:	2a00      	cmp	r2, #0
 8001322:	dc00      	bgt.n	8001326 <__aeabi_ddiv+0x266>
 8001324:	e0aa      	b.n	800147c <__aeabi_ddiv+0x3bc>
 8001326:	076b      	lsls	r3, r5, #29
 8001328:	d000      	beq.n	800132c <__aeabi_ddiv+0x26c>
 800132a:	e13d      	b.n	80015a8 <__aeabi_ddiv+0x4e8>
 800132c:	08ed      	lsrs	r5, r5, #3
 800132e:	4643      	mov	r3, r8
 8001330:	01db      	lsls	r3, r3, #7
 8001332:	d506      	bpl.n	8001342 <__aeabi_ddiv+0x282>
 8001334:	4642      	mov	r2, r8
 8001336:	4b44      	ldr	r3, [pc, #272]	; (8001448 <__aeabi_ddiv+0x388>)
 8001338:	401a      	ands	r2, r3
 800133a:	4690      	mov	r8, r2
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	00d2      	lsls	r2, r2, #3
 8001340:	445a      	add	r2, fp
 8001342:	4b42      	ldr	r3, [pc, #264]	; (800144c <__aeabi_ddiv+0x38c>)
 8001344:	429a      	cmp	r2, r3
 8001346:	dd00      	ble.n	800134a <__aeabi_ddiv+0x28a>
 8001348:	e71f      	b.n	800118a <__aeabi_ddiv+0xca>
 800134a:	4643      	mov	r3, r8
 800134c:	075b      	lsls	r3, r3, #29
 800134e:	431d      	orrs	r5, r3
 8001350:	4643      	mov	r3, r8
 8001352:	0552      	lsls	r2, r2, #21
 8001354:	025c      	lsls	r4, r3, #9
 8001356:	0b24      	lsrs	r4, r4, #12
 8001358:	0d53      	lsrs	r3, r2, #21
 800135a:	e708      	b.n	800116e <__aeabi_ddiv+0xae>
 800135c:	4652      	mov	r2, sl
 800135e:	4322      	orrs	r2, r4
 8001360:	d100      	bne.n	8001364 <__aeabi_ddiv+0x2a4>
 8001362:	e07b      	b.n	800145c <__aeabi_ddiv+0x39c>
 8001364:	2c00      	cmp	r4, #0
 8001366:	d100      	bne.n	800136a <__aeabi_ddiv+0x2aa>
 8001368:	e0fa      	b.n	8001560 <__aeabi_ddiv+0x4a0>
 800136a:	0020      	movs	r0, r4
 800136c:	f001 fa22 	bl	80027b4 <__clzsi2>
 8001370:	0002      	movs	r2, r0
 8001372:	3a0b      	subs	r2, #11
 8001374:	231d      	movs	r3, #29
 8001376:	0001      	movs	r1, r0
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	4652      	mov	r2, sl
 800137c:	3908      	subs	r1, #8
 800137e:	40da      	lsrs	r2, r3
 8001380:	408c      	lsls	r4, r1
 8001382:	4314      	orrs	r4, r2
 8001384:	4652      	mov	r2, sl
 8001386:	408a      	lsls	r2, r1
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <__aeabi_ddiv+0x390>)
 800138a:	4458      	add	r0, fp
 800138c:	469b      	mov	fp, r3
 800138e:	4483      	add	fp, r0
 8001390:	2000      	movs	r0, #0
 8001392:	e6d5      	b.n	8001140 <__aeabi_ddiv+0x80>
 8001394:	464b      	mov	r3, r9
 8001396:	4323      	orrs	r3, r4
 8001398:	4698      	mov	r8, r3
 800139a:	d044      	beq.n	8001426 <__aeabi_ddiv+0x366>
 800139c:	2c00      	cmp	r4, #0
 800139e:	d100      	bne.n	80013a2 <__aeabi_ddiv+0x2e2>
 80013a0:	e0ce      	b.n	8001540 <__aeabi_ddiv+0x480>
 80013a2:	0020      	movs	r0, r4
 80013a4:	f001 fa06 	bl	80027b4 <__clzsi2>
 80013a8:	0001      	movs	r1, r0
 80013aa:	0002      	movs	r2, r0
 80013ac:	390b      	subs	r1, #11
 80013ae:	231d      	movs	r3, #29
 80013b0:	1a5b      	subs	r3, r3, r1
 80013b2:	4649      	mov	r1, r9
 80013b4:	0010      	movs	r0, r2
 80013b6:	40d9      	lsrs	r1, r3
 80013b8:	3808      	subs	r0, #8
 80013ba:	4084      	lsls	r4, r0
 80013bc:	000b      	movs	r3, r1
 80013be:	464d      	mov	r5, r9
 80013c0:	4323      	orrs	r3, r4
 80013c2:	4698      	mov	r8, r3
 80013c4:	4085      	lsls	r5, r0
 80013c6:	4823      	ldr	r0, [pc, #140]	; (8001454 <__aeabi_ddiv+0x394>)
 80013c8:	1a83      	subs	r3, r0, r2
 80013ca:	469b      	mov	fp, r3
 80013cc:	2300      	movs	r3, #0
 80013ce:	4699      	mov	r9, r3
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	e69a      	b.n	800110a <__aeabi_ddiv+0x4a>
 80013d4:	464b      	mov	r3, r9
 80013d6:	4323      	orrs	r3, r4
 80013d8:	4698      	mov	r8, r3
 80013da:	d11d      	bne.n	8001418 <__aeabi_ddiv+0x358>
 80013dc:	2308      	movs	r3, #8
 80013de:	4699      	mov	r9, r3
 80013e0:	3b06      	subs	r3, #6
 80013e2:	2500      	movs	r5, #0
 80013e4:	4683      	mov	fp, r0
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	e68f      	b.n	800110a <__aeabi_ddiv+0x4a>
 80013ea:	4652      	mov	r2, sl
 80013ec:	4322      	orrs	r2, r4
 80013ee:	d109      	bne.n	8001404 <__aeabi_ddiv+0x344>
 80013f0:	2302      	movs	r3, #2
 80013f2:	4649      	mov	r1, r9
 80013f4:	4319      	orrs	r1, r3
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <__aeabi_ddiv+0x398>)
 80013f8:	4689      	mov	r9, r1
 80013fa:	469c      	mov	ip, r3
 80013fc:	2400      	movs	r4, #0
 80013fe:	2002      	movs	r0, #2
 8001400:	44e3      	add	fp, ip
 8001402:	e69d      	b.n	8001140 <__aeabi_ddiv+0x80>
 8001404:	2303      	movs	r3, #3
 8001406:	464a      	mov	r2, r9
 8001408:	431a      	orrs	r2, r3
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <__aeabi_ddiv+0x398>)
 800140c:	4691      	mov	r9, r2
 800140e:	469c      	mov	ip, r3
 8001410:	4652      	mov	r2, sl
 8001412:	2003      	movs	r0, #3
 8001414:	44e3      	add	fp, ip
 8001416:	e693      	b.n	8001140 <__aeabi_ddiv+0x80>
 8001418:	230c      	movs	r3, #12
 800141a:	4699      	mov	r9, r3
 800141c:	3b09      	subs	r3, #9
 800141e:	46a0      	mov	r8, r4
 8001420:	4683      	mov	fp, r0
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	e671      	b.n	800110a <__aeabi_ddiv+0x4a>
 8001426:	2304      	movs	r3, #4
 8001428:	4699      	mov	r9, r3
 800142a:	2300      	movs	r3, #0
 800142c:	469b      	mov	fp, r3
 800142e:	3301      	adds	r3, #1
 8001430:	2500      	movs	r5, #0
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	e669      	b.n	800110a <__aeabi_ddiv+0x4a>
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	000007ff 	.word	0x000007ff
 800143c:	fffffc01 	.word	0xfffffc01
 8001440:	08009734 	.word	0x08009734
 8001444:	000003ff 	.word	0x000003ff
 8001448:	feffffff 	.word	0xfeffffff
 800144c:	000007fe 	.word	0x000007fe
 8001450:	000003f3 	.word	0x000003f3
 8001454:	fffffc0d 	.word	0xfffffc0d
 8001458:	fffff801 	.word	0xfffff801
 800145c:	4649      	mov	r1, r9
 800145e:	2301      	movs	r3, #1
 8001460:	4319      	orrs	r1, r3
 8001462:	4689      	mov	r9, r1
 8001464:	2400      	movs	r4, #0
 8001466:	2001      	movs	r0, #1
 8001468:	e66a      	b.n	8001140 <__aeabi_ddiv+0x80>
 800146a:	2300      	movs	r3, #0
 800146c:	2480      	movs	r4, #128	; 0x80
 800146e:	469a      	mov	sl, r3
 8001470:	2500      	movs	r5, #0
 8001472:	4b8a      	ldr	r3, [pc, #552]	; (800169c <__aeabi_ddiv+0x5dc>)
 8001474:	0324      	lsls	r4, r4, #12
 8001476:	e67a      	b.n	800116e <__aeabi_ddiv+0xae>
 8001478:	2501      	movs	r5, #1
 800147a:	426d      	negs	r5, r5
 800147c:	2301      	movs	r3, #1
 800147e:	1a9b      	subs	r3, r3, r2
 8001480:	2b38      	cmp	r3, #56	; 0x38
 8001482:	dd00      	ble.n	8001486 <__aeabi_ddiv+0x3c6>
 8001484:	e670      	b.n	8001168 <__aeabi_ddiv+0xa8>
 8001486:	2b1f      	cmp	r3, #31
 8001488:	dc00      	bgt.n	800148c <__aeabi_ddiv+0x3cc>
 800148a:	e0bf      	b.n	800160c <__aeabi_ddiv+0x54c>
 800148c:	211f      	movs	r1, #31
 800148e:	4249      	negs	r1, r1
 8001490:	1a8a      	subs	r2, r1, r2
 8001492:	4641      	mov	r1, r8
 8001494:	40d1      	lsrs	r1, r2
 8001496:	000a      	movs	r2, r1
 8001498:	2b20      	cmp	r3, #32
 800149a:	d004      	beq.n	80014a6 <__aeabi_ddiv+0x3e6>
 800149c:	4641      	mov	r1, r8
 800149e:	4b80      	ldr	r3, [pc, #512]	; (80016a0 <__aeabi_ddiv+0x5e0>)
 80014a0:	445b      	add	r3, fp
 80014a2:	4099      	lsls	r1, r3
 80014a4:	430d      	orrs	r5, r1
 80014a6:	1e6b      	subs	r3, r5, #1
 80014a8:	419d      	sbcs	r5, r3
 80014aa:	2307      	movs	r3, #7
 80014ac:	432a      	orrs	r2, r5
 80014ae:	001d      	movs	r5, r3
 80014b0:	2400      	movs	r4, #0
 80014b2:	4015      	ands	r5, r2
 80014b4:	4213      	tst	r3, r2
 80014b6:	d100      	bne.n	80014ba <__aeabi_ddiv+0x3fa>
 80014b8:	e0d4      	b.n	8001664 <__aeabi_ddiv+0x5a4>
 80014ba:	210f      	movs	r1, #15
 80014bc:	2300      	movs	r3, #0
 80014be:	4011      	ands	r1, r2
 80014c0:	2904      	cmp	r1, #4
 80014c2:	d100      	bne.n	80014c6 <__aeabi_ddiv+0x406>
 80014c4:	e0cb      	b.n	800165e <__aeabi_ddiv+0x59e>
 80014c6:	1d11      	adds	r1, r2, #4
 80014c8:	4291      	cmp	r1, r2
 80014ca:	4192      	sbcs	r2, r2
 80014cc:	4252      	negs	r2, r2
 80014ce:	189b      	adds	r3, r3, r2
 80014d0:	000a      	movs	r2, r1
 80014d2:	0219      	lsls	r1, r3, #8
 80014d4:	d400      	bmi.n	80014d8 <__aeabi_ddiv+0x418>
 80014d6:	e0c2      	b.n	800165e <__aeabi_ddiv+0x59e>
 80014d8:	2301      	movs	r3, #1
 80014da:	2400      	movs	r4, #0
 80014dc:	2500      	movs	r5, #0
 80014de:	e646      	b.n	800116e <__aeabi_ddiv+0xae>
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	4641      	mov	r1, r8
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	4219      	tst	r1, r3
 80014e8:	d008      	beq.n	80014fc <__aeabi_ddiv+0x43c>
 80014ea:	421c      	tst	r4, r3
 80014ec:	d106      	bne.n	80014fc <__aeabi_ddiv+0x43c>
 80014ee:	431c      	orrs	r4, r3
 80014f0:	0324      	lsls	r4, r4, #12
 80014f2:	46ba      	mov	sl, r7
 80014f4:	0015      	movs	r5, r2
 80014f6:	4b69      	ldr	r3, [pc, #420]	; (800169c <__aeabi_ddiv+0x5dc>)
 80014f8:	0b24      	lsrs	r4, r4, #12
 80014fa:	e638      	b.n	800116e <__aeabi_ddiv+0xae>
 80014fc:	2480      	movs	r4, #128	; 0x80
 80014fe:	4643      	mov	r3, r8
 8001500:	0324      	lsls	r4, r4, #12
 8001502:	431c      	orrs	r4, r3
 8001504:	0324      	lsls	r4, r4, #12
 8001506:	46b2      	mov	sl, r6
 8001508:	4b64      	ldr	r3, [pc, #400]	; (800169c <__aeabi_ddiv+0x5dc>)
 800150a:	0b24      	lsrs	r4, r4, #12
 800150c:	e62f      	b.n	800116e <__aeabi_ddiv+0xae>
 800150e:	2b00      	cmp	r3, #0
 8001510:	d100      	bne.n	8001514 <__aeabi_ddiv+0x454>
 8001512:	e703      	b.n	800131c <__aeabi_ddiv+0x25c>
 8001514:	19a6      	adds	r6, r4, r6
 8001516:	1e68      	subs	r0, r5, #1
 8001518:	42a6      	cmp	r6, r4
 800151a:	d200      	bcs.n	800151e <__aeabi_ddiv+0x45e>
 800151c:	e08d      	b.n	800163a <__aeabi_ddiv+0x57a>
 800151e:	428e      	cmp	r6, r1
 8001520:	d200      	bcs.n	8001524 <__aeabi_ddiv+0x464>
 8001522:	e0a3      	b.n	800166c <__aeabi_ddiv+0x5ac>
 8001524:	d100      	bne.n	8001528 <__aeabi_ddiv+0x468>
 8001526:	e0b3      	b.n	8001690 <__aeabi_ddiv+0x5d0>
 8001528:	0005      	movs	r5, r0
 800152a:	e6f5      	b.n	8001318 <__aeabi_ddiv+0x258>
 800152c:	42aa      	cmp	r2, r5
 800152e:	d900      	bls.n	8001532 <__aeabi_ddiv+0x472>
 8001530:	e639      	b.n	80011a6 <__aeabi_ddiv+0xe6>
 8001532:	4643      	mov	r3, r8
 8001534:	07de      	lsls	r6, r3, #31
 8001536:	0858      	lsrs	r0, r3, #1
 8001538:	086b      	lsrs	r3, r5, #1
 800153a:	431e      	orrs	r6, r3
 800153c:	07ed      	lsls	r5, r5, #31
 800153e:	e639      	b.n	80011b4 <__aeabi_ddiv+0xf4>
 8001540:	4648      	mov	r0, r9
 8001542:	f001 f937 	bl	80027b4 <__clzsi2>
 8001546:	0001      	movs	r1, r0
 8001548:	0002      	movs	r2, r0
 800154a:	3115      	adds	r1, #21
 800154c:	3220      	adds	r2, #32
 800154e:	291c      	cmp	r1, #28
 8001550:	dc00      	bgt.n	8001554 <__aeabi_ddiv+0x494>
 8001552:	e72c      	b.n	80013ae <__aeabi_ddiv+0x2ee>
 8001554:	464b      	mov	r3, r9
 8001556:	3808      	subs	r0, #8
 8001558:	4083      	lsls	r3, r0
 800155a:	2500      	movs	r5, #0
 800155c:	4698      	mov	r8, r3
 800155e:	e732      	b.n	80013c6 <__aeabi_ddiv+0x306>
 8001560:	f001 f928 	bl	80027b4 <__clzsi2>
 8001564:	0003      	movs	r3, r0
 8001566:	001a      	movs	r2, r3
 8001568:	3215      	adds	r2, #21
 800156a:	3020      	adds	r0, #32
 800156c:	2a1c      	cmp	r2, #28
 800156e:	dc00      	bgt.n	8001572 <__aeabi_ddiv+0x4b2>
 8001570:	e700      	b.n	8001374 <__aeabi_ddiv+0x2b4>
 8001572:	4654      	mov	r4, sl
 8001574:	3b08      	subs	r3, #8
 8001576:	2200      	movs	r2, #0
 8001578:	409c      	lsls	r4, r3
 800157a:	e705      	b.n	8001388 <__aeabi_ddiv+0x2c8>
 800157c:	1936      	adds	r6, r6, r4
 800157e:	3b01      	subs	r3, #1
 8001580:	42b4      	cmp	r4, r6
 8001582:	d900      	bls.n	8001586 <__aeabi_ddiv+0x4c6>
 8001584:	e6a6      	b.n	80012d4 <__aeabi_ddiv+0x214>
 8001586:	42b2      	cmp	r2, r6
 8001588:	d800      	bhi.n	800158c <__aeabi_ddiv+0x4cc>
 800158a:	e6a3      	b.n	80012d4 <__aeabi_ddiv+0x214>
 800158c:	1e83      	subs	r3, r0, #2
 800158e:	1936      	adds	r6, r6, r4
 8001590:	e6a0      	b.n	80012d4 <__aeabi_ddiv+0x214>
 8001592:	1909      	adds	r1, r1, r4
 8001594:	3d01      	subs	r5, #1
 8001596:	428c      	cmp	r4, r1
 8001598:	d900      	bls.n	800159c <__aeabi_ddiv+0x4dc>
 800159a:	e68d      	b.n	80012b8 <__aeabi_ddiv+0x1f8>
 800159c:	428a      	cmp	r2, r1
 800159e:	d800      	bhi.n	80015a2 <__aeabi_ddiv+0x4e2>
 80015a0:	e68a      	b.n	80012b8 <__aeabi_ddiv+0x1f8>
 80015a2:	1e85      	subs	r5, r0, #2
 80015a4:	1909      	adds	r1, r1, r4
 80015a6:	e687      	b.n	80012b8 <__aeabi_ddiv+0x1f8>
 80015a8:	230f      	movs	r3, #15
 80015aa:	402b      	ands	r3, r5
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d100      	bne.n	80015b2 <__aeabi_ddiv+0x4f2>
 80015b0:	e6bc      	b.n	800132c <__aeabi_ddiv+0x26c>
 80015b2:	2305      	movs	r3, #5
 80015b4:	425b      	negs	r3, r3
 80015b6:	42ab      	cmp	r3, r5
 80015b8:	419b      	sbcs	r3, r3
 80015ba:	3504      	adds	r5, #4
 80015bc:	425b      	negs	r3, r3
 80015be:	08ed      	lsrs	r5, r5, #3
 80015c0:	4498      	add	r8, r3
 80015c2:	e6b4      	b.n	800132e <__aeabi_ddiv+0x26e>
 80015c4:	42af      	cmp	r7, r5
 80015c6:	d900      	bls.n	80015ca <__aeabi_ddiv+0x50a>
 80015c8:	e660      	b.n	800128c <__aeabi_ddiv+0x1cc>
 80015ca:	4282      	cmp	r2, r0
 80015cc:	d804      	bhi.n	80015d8 <__aeabi_ddiv+0x518>
 80015ce:	d000      	beq.n	80015d2 <__aeabi_ddiv+0x512>
 80015d0:	e65c      	b.n	800128c <__aeabi_ddiv+0x1cc>
 80015d2:	42ae      	cmp	r6, r5
 80015d4:	d800      	bhi.n	80015d8 <__aeabi_ddiv+0x518>
 80015d6:	e659      	b.n	800128c <__aeabi_ddiv+0x1cc>
 80015d8:	2302      	movs	r3, #2
 80015da:	425b      	negs	r3, r3
 80015dc:	469c      	mov	ip, r3
 80015de:	9b00      	ldr	r3, [sp, #0]
 80015e0:	44e0      	add	r8, ip
 80015e2:	469c      	mov	ip, r3
 80015e4:	4465      	add	r5, ip
 80015e6:	429d      	cmp	r5, r3
 80015e8:	419b      	sbcs	r3, r3
 80015ea:	425b      	negs	r3, r3
 80015ec:	191b      	adds	r3, r3, r4
 80015ee:	18c0      	adds	r0, r0, r3
 80015f0:	e64d      	b.n	800128e <__aeabi_ddiv+0x1ce>
 80015f2:	428a      	cmp	r2, r1
 80015f4:	d800      	bhi.n	80015f8 <__aeabi_ddiv+0x538>
 80015f6:	e60e      	b.n	8001216 <__aeabi_ddiv+0x156>
 80015f8:	1e83      	subs	r3, r0, #2
 80015fa:	1909      	adds	r1, r1, r4
 80015fc:	e60b      	b.n	8001216 <__aeabi_ddiv+0x156>
 80015fe:	428a      	cmp	r2, r1
 8001600:	d800      	bhi.n	8001604 <__aeabi_ddiv+0x544>
 8001602:	e5f4      	b.n	80011ee <__aeabi_ddiv+0x12e>
 8001604:	1e83      	subs	r3, r0, #2
 8001606:	4698      	mov	r8, r3
 8001608:	1909      	adds	r1, r1, r4
 800160a:	e5f0      	b.n	80011ee <__aeabi_ddiv+0x12e>
 800160c:	4925      	ldr	r1, [pc, #148]	; (80016a4 <__aeabi_ddiv+0x5e4>)
 800160e:	0028      	movs	r0, r5
 8001610:	4459      	add	r1, fp
 8001612:	408d      	lsls	r5, r1
 8001614:	4642      	mov	r2, r8
 8001616:	408a      	lsls	r2, r1
 8001618:	1e69      	subs	r1, r5, #1
 800161a:	418d      	sbcs	r5, r1
 800161c:	4641      	mov	r1, r8
 800161e:	40d8      	lsrs	r0, r3
 8001620:	40d9      	lsrs	r1, r3
 8001622:	4302      	orrs	r2, r0
 8001624:	432a      	orrs	r2, r5
 8001626:	000b      	movs	r3, r1
 8001628:	0751      	lsls	r1, r2, #29
 800162a:	d100      	bne.n	800162e <__aeabi_ddiv+0x56e>
 800162c:	e751      	b.n	80014d2 <__aeabi_ddiv+0x412>
 800162e:	210f      	movs	r1, #15
 8001630:	4011      	ands	r1, r2
 8001632:	2904      	cmp	r1, #4
 8001634:	d000      	beq.n	8001638 <__aeabi_ddiv+0x578>
 8001636:	e746      	b.n	80014c6 <__aeabi_ddiv+0x406>
 8001638:	e74b      	b.n	80014d2 <__aeabi_ddiv+0x412>
 800163a:	0005      	movs	r5, r0
 800163c:	428e      	cmp	r6, r1
 800163e:	d000      	beq.n	8001642 <__aeabi_ddiv+0x582>
 8001640:	e66a      	b.n	8001318 <__aeabi_ddiv+0x258>
 8001642:	9a00      	ldr	r2, [sp, #0]
 8001644:	4293      	cmp	r3, r2
 8001646:	d000      	beq.n	800164a <__aeabi_ddiv+0x58a>
 8001648:	e666      	b.n	8001318 <__aeabi_ddiv+0x258>
 800164a:	e667      	b.n	800131c <__aeabi_ddiv+0x25c>
 800164c:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <__aeabi_ddiv+0x5e8>)
 800164e:	445a      	add	r2, fp
 8001650:	2a00      	cmp	r2, #0
 8001652:	dc00      	bgt.n	8001656 <__aeabi_ddiv+0x596>
 8001654:	e710      	b.n	8001478 <__aeabi_ddiv+0x3b8>
 8001656:	2301      	movs	r3, #1
 8001658:	2500      	movs	r5, #0
 800165a:	4498      	add	r8, r3
 800165c:	e667      	b.n	800132e <__aeabi_ddiv+0x26e>
 800165e:	075d      	lsls	r5, r3, #29
 8001660:	025b      	lsls	r3, r3, #9
 8001662:	0b1c      	lsrs	r4, r3, #12
 8001664:	08d2      	lsrs	r2, r2, #3
 8001666:	2300      	movs	r3, #0
 8001668:	4315      	orrs	r5, r2
 800166a:	e580      	b.n	800116e <__aeabi_ddiv+0xae>
 800166c:	9800      	ldr	r0, [sp, #0]
 800166e:	3d02      	subs	r5, #2
 8001670:	0042      	lsls	r2, r0, #1
 8001672:	4282      	cmp	r2, r0
 8001674:	41bf      	sbcs	r7, r7
 8001676:	427f      	negs	r7, r7
 8001678:	193c      	adds	r4, r7, r4
 800167a:	1936      	adds	r6, r6, r4
 800167c:	9200      	str	r2, [sp, #0]
 800167e:	e7dd      	b.n	800163c <__aeabi_ddiv+0x57c>
 8001680:	2480      	movs	r4, #128	; 0x80
 8001682:	4643      	mov	r3, r8
 8001684:	0324      	lsls	r4, r4, #12
 8001686:	431c      	orrs	r4, r3
 8001688:	0324      	lsls	r4, r4, #12
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <__aeabi_ddiv+0x5dc>)
 800168c:	0b24      	lsrs	r4, r4, #12
 800168e:	e56e      	b.n	800116e <__aeabi_ddiv+0xae>
 8001690:	9a00      	ldr	r2, [sp, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d3ea      	bcc.n	800166c <__aeabi_ddiv+0x5ac>
 8001696:	0005      	movs	r5, r0
 8001698:	e7d3      	b.n	8001642 <__aeabi_ddiv+0x582>
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	000007ff 	.word	0x000007ff
 80016a0:	0000043e 	.word	0x0000043e
 80016a4:	0000041e 	.word	0x0000041e
 80016a8:	000003ff 	.word	0x000003ff

080016ac <__eqdf2>:
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	464e      	mov	r6, r9
 80016b0:	4645      	mov	r5, r8
 80016b2:	46de      	mov	lr, fp
 80016b4:	4657      	mov	r7, sl
 80016b6:	4690      	mov	r8, r2
 80016b8:	b5e0      	push	{r5, r6, r7, lr}
 80016ba:	0017      	movs	r7, r2
 80016bc:	031a      	lsls	r2, r3, #12
 80016be:	0b12      	lsrs	r2, r2, #12
 80016c0:	0005      	movs	r5, r0
 80016c2:	4684      	mov	ip, r0
 80016c4:	4819      	ldr	r0, [pc, #100]	; (800172c <__eqdf2+0x80>)
 80016c6:	030e      	lsls	r6, r1, #12
 80016c8:	004c      	lsls	r4, r1, #1
 80016ca:	4691      	mov	r9, r2
 80016cc:	005a      	lsls	r2, r3, #1
 80016ce:	0fdb      	lsrs	r3, r3, #31
 80016d0:	469b      	mov	fp, r3
 80016d2:	0b36      	lsrs	r6, r6, #12
 80016d4:	0d64      	lsrs	r4, r4, #21
 80016d6:	0fc9      	lsrs	r1, r1, #31
 80016d8:	0d52      	lsrs	r2, r2, #21
 80016da:	4284      	cmp	r4, r0
 80016dc:	d019      	beq.n	8001712 <__eqdf2+0x66>
 80016de:	4282      	cmp	r2, r0
 80016e0:	d010      	beq.n	8001704 <__eqdf2+0x58>
 80016e2:	2001      	movs	r0, #1
 80016e4:	4294      	cmp	r4, r2
 80016e6:	d10e      	bne.n	8001706 <__eqdf2+0x5a>
 80016e8:	454e      	cmp	r6, r9
 80016ea:	d10c      	bne.n	8001706 <__eqdf2+0x5a>
 80016ec:	2001      	movs	r0, #1
 80016ee:	45c4      	cmp	ip, r8
 80016f0:	d109      	bne.n	8001706 <__eqdf2+0x5a>
 80016f2:	4559      	cmp	r1, fp
 80016f4:	d017      	beq.n	8001726 <__eqdf2+0x7a>
 80016f6:	2c00      	cmp	r4, #0
 80016f8:	d105      	bne.n	8001706 <__eqdf2+0x5a>
 80016fa:	0030      	movs	r0, r6
 80016fc:	4328      	orrs	r0, r5
 80016fe:	1e43      	subs	r3, r0, #1
 8001700:	4198      	sbcs	r0, r3
 8001702:	e000      	b.n	8001706 <__eqdf2+0x5a>
 8001704:	2001      	movs	r0, #1
 8001706:	bcf0      	pop	{r4, r5, r6, r7}
 8001708:	46bb      	mov	fp, r7
 800170a:	46b2      	mov	sl, r6
 800170c:	46a9      	mov	r9, r5
 800170e:	46a0      	mov	r8, r4
 8001710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001712:	0033      	movs	r3, r6
 8001714:	2001      	movs	r0, #1
 8001716:	432b      	orrs	r3, r5
 8001718:	d1f5      	bne.n	8001706 <__eqdf2+0x5a>
 800171a:	42a2      	cmp	r2, r4
 800171c:	d1f3      	bne.n	8001706 <__eqdf2+0x5a>
 800171e:	464b      	mov	r3, r9
 8001720:	433b      	orrs	r3, r7
 8001722:	d1f0      	bne.n	8001706 <__eqdf2+0x5a>
 8001724:	e7e2      	b.n	80016ec <__eqdf2+0x40>
 8001726:	2000      	movs	r0, #0
 8001728:	e7ed      	b.n	8001706 <__eqdf2+0x5a>
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	000007ff 	.word	0x000007ff

08001730 <__gedf2>:
 8001730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001732:	4647      	mov	r7, r8
 8001734:	46ce      	mov	lr, r9
 8001736:	0004      	movs	r4, r0
 8001738:	0018      	movs	r0, r3
 800173a:	0016      	movs	r6, r2
 800173c:	031b      	lsls	r3, r3, #12
 800173e:	0b1b      	lsrs	r3, r3, #12
 8001740:	4d2d      	ldr	r5, [pc, #180]	; (80017f8 <__gedf2+0xc8>)
 8001742:	004a      	lsls	r2, r1, #1
 8001744:	4699      	mov	r9, r3
 8001746:	b580      	push	{r7, lr}
 8001748:	0043      	lsls	r3, r0, #1
 800174a:	030f      	lsls	r7, r1, #12
 800174c:	46a4      	mov	ip, r4
 800174e:	46b0      	mov	r8, r6
 8001750:	0b3f      	lsrs	r7, r7, #12
 8001752:	0d52      	lsrs	r2, r2, #21
 8001754:	0fc9      	lsrs	r1, r1, #31
 8001756:	0d5b      	lsrs	r3, r3, #21
 8001758:	0fc0      	lsrs	r0, r0, #31
 800175a:	42aa      	cmp	r2, r5
 800175c:	d021      	beq.n	80017a2 <__gedf2+0x72>
 800175e:	42ab      	cmp	r3, r5
 8001760:	d013      	beq.n	800178a <__gedf2+0x5a>
 8001762:	2a00      	cmp	r2, #0
 8001764:	d122      	bne.n	80017ac <__gedf2+0x7c>
 8001766:	433c      	orrs	r4, r7
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <__gedf2+0x42>
 800176c:	464d      	mov	r5, r9
 800176e:	432e      	orrs	r6, r5
 8001770:	d022      	beq.n	80017b8 <__gedf2+0x88>
 8001772:	2c00      	cmp	r4, #0
 8001774:	d010      	beq.n	8001798 <__gedf2+0x68>
 8001776:	4281      	cmp	r1, r0
 8001778:	d022      	beq.n	80017c0 <__gedf2+0x90>
 800177a:	2002      	movs	r0, #2
 800177c:	3901      	subs	r1, #1
 800177e:	4008      	ands	r0, r1
 8001780:	3801      	subs	r0, #1
 8001782:	bcc0      	pop	{r6, r7}
 8001784:	46b9      	mov	r9, r7
 8001786:	46b0      	mov	r8, r6
 8001788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178a:	464d      	mov	r5, r9
 800178c:	432e      	orrs	r6, r5
 800178e:	d129      	bne.n	80017e4 <__gedf2+0xb4>
 8001790:	2a00      	cmp	r2, #0
 8001792:	d1f0      	bne.n	8001776 <__gedf2+0x46>
 8001794:	433c      	orrs	r4, r7
 8001796:	d1ee      	bne.n	8001776 <__gedf2+0x46>
 8001798:	2800      	cmp	r0, #0
 800179a:	d1f2      	bne.n	8001782 <__gedf2+0x52>
 800179c:	2001      	movs	r0, #1
 800179e:	4240      	negs	r0, r0
 80017a0:	e7ef      	b.n	8001782 <__gedf2+0x52>
 80017a2:	003d      	movs	r5, r7
 80017a4:	4325      	orrs	r5, r4
 80017a6:	d11d      	bne.n	80017e4 <__gedf2+0xb4>
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d0ee      	beq.n	800178a <__gedf2+0x5a>
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1e2      	bne.n	8001776 <__gedf2+0x46>
 80017b0:	464c      	mov	r4, r9
 80017b2:	4326      	orrs	r6, r4
 80017b4:	d1df      	bne.n	8001776 <__gedf2+0x46>
 80017b6:	e7e0      	b.n	800177a <__gedf2+0x4a>
 80017b8:	2000      	movs	r0, #0
 80017ba:	2c00      	cmp	r4, #0
 80017bc:	d0e1      	beq.n	8001782 <__gedf2+0x52>
 80017be:	e7dc      	b.n	800177a <__gedf2+0x4a>
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dc0a      	bgt.n	80017da <__gedf2+0xaa>
 80017c4:	dbe8      	blt.n	8001798 <__gedf2+0x68>
 80017c6:	454f      	cmp	r7, r9
 80017c8:	d8d7      	bhi.n	800177a <__gedf2+0x4a>
 80017ca:	d00e      	beq.n	80017ea <__gedf2+0xba>
 80017cc:	2000      	movs	r0, #0
 80017ce:	454f      	cmp	r7, r9
 80017d0:	d2d7      	bcs.n	8001782 <__gedf2+0x52>
 80017d2:	2900      	cmp	r1, #0
 80017d4:	d0e2      	beq.n	800179c <__gedf2+0x6c>
 80017d6:	0008      	movs	r0, r1
 80017d8:	e7d3      	b.n	8001782 <__gedf2+0x52>
 80017da:	4243      	negs	r3, r0
 80017dc:	4158      	adcs	r0, r3
 80017de:	0040      	lsls	r0, r0, #1
 80017e0:	3801      	subs	r0, #1
 80017e2:	e7ce      	b.n	8001782 <__gedf2+0x52>
 80017e4:	2002      	movs	r0, #2
 80017e6:	4240      	negs	r0, r0
 80017e8:	e7cb      	b.n	8001782 <__gedf2+0x52>
 80017ea:	45c4      	cmp	ip, r8
 80017ec:	d8c5      	bhi.n	800177a <__gedf2+0x4a>
 80017ee:	2000      	movs	r0, #0
 80017f0:	45c4      	cmp	ip, r8
 80017f2:	d2c6      	bcs.n	8001782 <__gedf2+0x52>
 80017f4:	e7ed      	b.n	80017d2 <__gedf2+0xa2>
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	000007ff 	.word	0x000007ff

080017fc <__ledf2>:
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	4647      	mov	r7, r8
 8001800:	46ce      	mov	lr, r9
 8001802:	0004      	movs	r4, r0
 8001804:	0018      	movs	r0, r3
 8001806:	0016      	movs	r6, r2
 8001808:	031b      	lsls	r3, r3, #12
 800180a:	0b1b      	lsrs	r3, r3, #12
 800180c:	4d2c      	ldr	r5, [pc, #176]	; (80018c0 <__ledf2+0xc4>)
 800180e:	004a      	lsls	r2, r1, #1
 8001810:	4699      	mov	r9, r3
 8001812:	b580      	push	{r7, lr}
 8001814:	0043      	lsls	r3, r0, #1
 8001816:	030f      	lsls	r7, r1, #12
 8001818:	46a4      	mov	ip, r4
 800181a:	46b0      	mov	r8, r6
 800181c:	0b3f      	lsrs	r7, r7, #12
 800181e:	0d52      	lsrs	r2, r2, #21
 8001820:	0fc9      	lsrs	r1, r1, #31
 8001822:	0d5b      	lsrs	r3, r3, #21
 8001824:	0fc0      	lsrs	r0, r0, #31
 8001826:	42aa      	cmp	r2, r5
 8001828:	d00d      	beq.n	8001846 <__ledf2+0x4a>
 800182a:	42ab      	cmp	r3, r5
 800182c:	d010      	beq.n	8001850 <__ledf2+0x54>
 800182e:	2a00      	cmp	r2, #0
 8001830:	d127      	bne.n	8001882 <__ledf2+0x86>
 8001832:	433c      	orrs	r4, r7
 8001834:	2b00      	cmp	r3, #0
 8001836:	d111      	bne.n	800185c <__ledf2+0x60>
 8001838:	464d      	mov	r5, r9
 800183a:	432e      	orrs	r6, r5
 800183c:	d10e      	bne.n	800185c <__ledf2+0x60>
 800183e:	2000      	movs	r0, #0
 8001840:	2c00      	cmp	r4, #0
 8001842:	d015      	beq.n	8001870 <__ledf2+0x74>
 8001844:	e00e      	b.n	8001864 <__ledf2+0x68>
 8001846:	003d      	movs	r5, r7
 8001848:	4325      	orrs	r5, r4
 800184a:	d110      	bne.n	800186e <__ledf2+0x72>
 800184c:	4293      	cmp	r3, r2
 800184e:	d118      	bne.n	8001882 <__ledf2+0x86>
 8001850:	464d      	mov	r5, r9
 8001852:	432e      	orrs	r6, r5
 8001854:	d10b      	bne.n	800186e <__ledf2+0x72>
 8001856:	2a00      	cmp	r2, #0
 8001858:	d102      	bne.n	8001860 <__ledf2+0x64>
 800185a:	433c      	orrs	r4, r7
 800185c:	2c00      	cmp	r4, #0
 800185e:	d00b      	beq.n	8001878 <__ledf2+0x7c>
 8001860:	4281      	cmp	r1, r0
 8001862:	d014      	beq.n	800188e <__ledf2+0x92>
 8001864:	2002      	movs	r0, #2
 8001866:	3901      	subs	r1, #1
 8001868:	4008      	ands	r0, r1
 800186a:	3801      	subs	r0, #1
 800186c:	e000      	b.n	8001870 <__ledf2+0x74>
 800186e:	2002      	movs	r0, #2
 8001870:	bcc0      	pop	{r6, r7}
 8001872:	46b9      	mov	r9, r7
 8001874:	46b0      	mov	r8, r6
 8001876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001878:	2800      	cmp	r0, #0
 800187a:	d1f9      	bne.n	8001870 <__ledf2+0x74>
 800187c:	2001      	movs	r0, #1
 800187e:	4240      	negs	r0, r0
 8001880:	e7f6      	b.n	8001870 <__ledf2+0x74>
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1ec      	bne.n	8001860 <__ledf2+0x64>
 8001886:	464c      	mov	r4, r9
 8001888:	4326      	orrs	r6, r4
 800188a:	d1e9      	bne.n	8001860 <__ledf2+0x64>
 800188c:	e7ea      	b.n	8001864 <__ledf2+0x68>
 800188e:	429a      	cmp	r2, r3
 8001890:	dd04      	ble.n	800189c <__ledf2+0xa0>
 8001892:	4243      	negs	r3, r0
 8001894:	4158      	adcs	r0, r3
 8001896:	0040      	lsls	r0, r0, #1
 8001898:	3801      	subs	r0, #1
 800189a:	e7e9      	b.n	8001870 <__ledf2+0x74>
 800189c:	429a      	cmp	r2, r3
 800189e:	dbeb      	blt.n	8001878 <__ledf2+0x7c>
 80018a0:	454f      	cmp	r7, r9
 80018a2:	d8df      	bhi.n	8001864 <__ledf2+0x68>
 80018a4:	d006      	beq.n	80018b4 <__ledf2+0xb8>
 80018a6:	2000      	movs	r0, #0
 80018a8:	454f      	cmp	r7, r9
 80018aa:	d2e1      	bcs.n	8001870 <__ledf2+0x74>
 80018ac:	2900      	cmp	r1, #0
 80018ae:	d0e5      	beq.n	800187c <__ledf2+0x80>
 80018b0:	0008      	movs	r0, r1
 80018b2:	e7dd      	b.n	8001870 <__ledf2+0x74>
 80018b4:	45c4      	cmp	ip, r8
 80018b6:	d8d5      	bhi.n	8001864 <__ledf2+0x68>
 80018b8:	2000      	movs	r0, #0
 80018ba:	45c4      	cmp	ip, r8
 80018bc:	d2d8      	bcs.n	8001870 <__ledf2+0x74>
 80018be:	e7f5      	b.n	80018ac <__ledf2+0xb0>
 80018c0:	000007ff 	.word	0x000007ff

080018c4 <__aeabi_dmul>:
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c6:	4657      	mov	r7, sl
 80018c8:	464e      	mov	r6, r9
 80018ca:	4645      	mov	r5, r8
 80018cc:	46de      	mov	lr, fp
 80018ce:	b5e0      	push	{r5, r6, r7, lr}
 80018d0:	4698      	mov	r8, r3
 80018d2:	030c      	lsls	r4, r1, #12
 80018d4:	004b      	lsls	r3, r1, #1
 80018d6:	0006      	movs	r6, r0
 80018d8:	4692      	mov	sl, r2
 80018da:	b087      	sub	sp, #28
 80018dc:	0b24      	lsrs	r4, r4, #12
 80018de:	0d5b      	lsrs	r3, r3, #21
 80018e0:	0fcf      	lsrs	r7, r1, #31
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d100      	bne.n	80018e8 <__aeabi_dmul+0x24>
 80018e6:	e15c      	b.n	8001ba2 <__aeabi_dmul+0x2de>
 80018e8:	4ad9      	ldr	r2, [pc, #868]	; (8001c50 <__aeabi_dmul+0x38c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d100      	bne.n	80018f0 <__aeabi_dmul+0x2c>
 80018ee:	e175      	b.n	8001bdc <__aeabi_dmul+0x318>
 80018f0:	0f42      	lsrs	r2, r0, #29
 80018f2:	00e4      	lsls	r4, r4, #3
 80018f4:	4314      	orrs	r4, r2
 80018f6:	2280      	movs	r2, #128	; 0x80
 80018f8:	0412      	lsls	r2, r2, #16
 80018fa:	4314      	orrs	r4, r2
 80018fc:	4ad5      	ldr	r2, [pc, #852]	; (8001c54 <__aeabi_dmul+0x390>)
 80018fe:	00c5      	lsls	r5, r0, #3
 8001900:	4694      	mov	ip, r2
 8001902:	4463      	add	r3, ip
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	4699      	mov	r9, r3
 800190a:	469b      	mov	fp, r3
 800190c:	4643      	mov	r3, r8
 800190e:	4642      	mov	r2, r8
 8001910:	031e      	lsls	r6, r3, #12
 8001912:	0fd2      	lsrs	r2, r2, #31
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4650      	mov	r0, sl
 8001918:	4690      	mov	r8, r2
 800191a:	0b36      	lsrs	r6, r6, #12
 800191c:	0d5b      	lsrs	r3, r3, #21
 800191e:	d100      	bne.n	8001922 <__aeabi_dmul+0x5e>
 8001920:	e120      	b.n	8001b64 <__aeabi_dmul+0x2a0>
 8001922:	4acb      	ldr	r2, [pc, #812]	; (8001c50 <__aeabi_dmul+0x38c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d100      	bne.n	800192a <__aeabi_dmul+0x66>
 8001928:	e162      	b.n	8001bf0 <__aeabi_dmul+0x32c>
 800192a:	49ca      	ldr	r1, [pc, #808]	; (8001c54 <__aeabi_dmul+0x390>)
 800192c:	0f42      	lsrs	r2, r0, #29
 800192e:	468c      	mov	ip, r1
 8001930:	9900      	ldr	r1, [sp, #0]
 8001932:	4463      	add	r3, ip
 8001934:	00f6      	lsls	r6, r6, #3
 8001936:	468c      	mov	ip, r1
 8001938:	4316      	orrs	r6, r2
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	449c      	add	ip, r3
 800193e:	0412      	lsls	r2, r2, #16
 8001940:	4663      	mov	r3, ip
 8001942:	4316      	orrs	r6, r2
 8001944:	00c2      	lsls	r2, r0, #3
 8001946:	2000      	movs	r0, #0
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	9900      	ldr	r1, [sp, #0]
 800194c:	4643      	mov	r3, r8
 800194e:	3101      	adds	r1, #1
 8001950:	468c      	mov	ip, r1
 8001952:	4649      	mov	r1, r9
 8001954:	407b      	eors	r3, r7
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	290f      	cmp	r1, #15
 800195a:	d826      	bhi.n	80019aa <__aeabi_dmul+0xe6>
 800195c:	4bbe      	ldr	r3, [pc, #760]	; (8001c58 <__aeabi_dmul+0x394>)
 800195e:	0089      	lsls	r1, r1, #2
 8001960:	5859      	ldr	r1, [r3, r1]
 8001962:	468f      	mov	pc, r1
 8001964:	4643      	mov	r3, r8
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	0034      	movs	r4, r6
 800196a:	0015      	movs	r5, r2
 800196c:	4683      	mov	fp, r0
 800196e:	465b      	mov	r3, fp
 8001970:	2b02      	cmp	r3, #2
 8001972:	d016      	beq.n	80019a2 <__aeabi_dmul+0xde>
 8001974:	2b03      	cmp	r3, #3
 8001976:	d100      	bne.n	800197a <__aeabi_dmul+0xb6>
 8001978:	e203      	b.n	8001d82 <__aeabi_dmul+0x4be>
 800197a:	2b01      	cmp	r3, #1
 800197c:	d000      	beq.n	8001980 <__aeabi_dmul+0xbc>
 800197e:	e0cd      	b.n	8001b1c <__aeabi_dmul+0x258>
 8001980:	2200      	movs	r2, #0
 8001982:	2400      	movs	r4, #0
 8001984:	2500      	movs	r5, #0
 8001986:	9b01      	ldr	r3, [sp, #4]
 8001988:	0512      	lsls	r2, r2, #20
 800198a:	4322      	orrs	r2, r4
 800198c:	07db      	lsls	r3, r3, #31
 800198e:	431a      	orrs	r2, r3
 8001990:	0028      	movs	r0, r5
 8001992:	0011      	movs	r1, r2
 8001994:	b007      	add	sp, #28
 8001996:	bcf0      	pop	{r4, r5, r6, r7}
 8001998:	46bb      	mov	fp, r7
 800199a:	46b2      	mov	sl, r6
 800199c:	46a9      	mov	r9, r5
 800199e:	46a0      	mov	r8, r4
 80019a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a2:	2400      	movs	r4, #0
 80019a4:	2500      	movs	r5, #0
 80019a6:	4aaa      	ldr	r2, [pc, #680]	; (8001c50 <__aeabi_dmul+0x38c>)
 80019a8:	e7ed      	b.n	8001986 <__aeabi_dmul+0xc2>
 80019aa:	0c28      	lsrs	r0, r5, #16
 80019ac:	042d      	lsls	r5, r5, #16
 80019ae:	0c2d      	lsrs	r5, r5, #16
 80019b0:	002b      	movs	r3, r5
 80019b2:	0c11      	lsrs	r1, r2, #16
 80019b4:	0412      	lsls	r2, r2, #16
 80019b6:	0c12      	lsrs	r2, r2, #16
 80019b8:	4353      	muls	r3, r2
 80019ba:	4698      	mov	r8, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	002f      	movs	r7, r5
 80019c0:	4343      	muls	r3, r0
 80019c2:	4699      	mov	r9, r3
 80019c4:	434f      	muls	r7, r1
 80019c6:	444f      	add	r7, r9
 80019c8:	46bb      	mov	fp, r7
 80019ca:	4647      	mov	r7, r8
 80019cc:	000b      	movs	r3, r1
 80019ce:	0c3f      	lsrs	r7, r7, #16
 80019d0:	46ba      	mov	sl, r7
 80019d2:	4343      	muls	r3, r0
 80019d4:	44da      	add	sl, fp
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	45d1      	cmp	r9, sl
 80019da:	d904      	bls.n	80019e6 <__aeabi_dmul+0x122>
 80019dc:	2780      	movs	r7, #128	; 0x80
 80019de:	027f      	lsls	r7, r7, #9
 80019e0:	46b9      	mov	r9, r7
 80019e2:	444b      	add	r3, r9
 80019e4:	9302      	str	r3, [sp, #8]
 80019e6:	4653      	mov	r3, sl
 80019e8:	0c1b      	lsrs	r3, r3, #16
 80019ea:	469b      	mov	fp, r3
 80019ec:	4653      	mov	r3, sl
 80019ee:	041f      	lsls	r7, r3, #16
 80019f0:	4643      	mov	r3, r8
 80019f2:	041b      	lsls	r3, r3, #16
 80019f4:	0c1b      	lsrs	r3, r3, #16
 80019f6:	4698      	mov	r8, r3
 80019f8:	003b      	movs	r3, r7
 80019fa:	4443      	add	r3, r8
 80019fc:	9304      	str	r3, [sp, #16]
 80019fe:	0c33      	lsrs	r3, r6, #16
 8001a00:	0436      	lsls	r6, r6, #16
 8001a02:	0c36      	lsrs	r6, r6, #16
 8001a04:	4698      	mov	r8, r3
 8001a06:	0033      	movs	r3, r6
 8001a08:	4343      	muls	r3, r0
 8001a0a:	4699      	mov	r9, r3
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	4343      	muls	r3, r0
 8001a10:	002f      	movs	r7, r5
 8001a12:	469a      	mov	sl, r3
 8001a14:	4643      	mov	r3, r8
 8001a16:	4377      	muls	r7, r6
 8001a18:	435d      	muls	r5, r3
 8001a1a:	0c38      	lsrs	r0, r7, #16
 8001a1c:	444d      	add	r5, r9
 8001a1e:	1945      	adds	r5, r0, r5
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d903      	bls.n	8001a2c <__aeabi_dmul+0x168>
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	025b      	lsls	r3, r3, #9
 8001a28:	4699      	mov	r9, r3
 8001a2a:	44ca      	add	sl, r9
 8001a2c:	043f      	lsls	r7, r7, #16
 8001a2e:	0c28      	lsrs	r0, r5, #16
 8001a30:	0c3f      	lsrs	r7, r7, #16
 8001a32:	042d      	lsls	r5, r5, #16
 8001a34:	19ed      	adds	r5, r5, r7
 8001a36:	0c27      	lsrs	r7, r4, #16
 8001a38:	0424      	lsls	r4, r4, #16
 8001a3a:	0c24      	lsrs	r4, r4, #16
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	0020      	movs	r0, r4
 8001a40:	4350      	muls	r0, r2
 8001a42:	437a      	muls	r2, r7
 8001a44:	4691      	mov	r9, r2
 8001a46:	003a      	movs	r2, r7
 8001a48:	4453      	add	r3, sl
 8001a4a:	9305      	str	r3, [sp, #20]
 8001a4c:	0c03      	lsrs	r3, r0, #16
 8001a4e:	469a      	mov	sl, r3
 8001a50:	434a      	muls	r2, r1
 8001a52:	4361      	muls	r1, r4
 8001a54:	4449      	add	r1, r9
 8001a56:	4451      	add	r1, sl
 8001a58:	44ab      	add	fp, r5
 8001a5a:	4589      	cmp	r9, r1
 8001a5c:	d903      	bls.n	8001a66 <__aeabi_dmul+0x1a2>
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	025b      	lsls	r3, r3, #9
 8001a62:	4699      	mov	r9, r3
 8001a64:	444a      	add	r2, r9
 8001a66:	0400      	lsls	r0, r0, #16
 8001a68:	0c0b      	lsrs	r3, r1, #16
 8001a6a:	0c00      	lsrs	r0, r0, #16
 8001a6c:	0409      	lsls	r1, r1, #16
 8001a6e:	1809      	adds	r1, r1, r0
 8001a70:	0020      	movs	r0, r4
 8001a72:	4699      	mov	r9, r3
 8001a74:	4643      	mov	r3, r8
 8001a76:	4370      	muls	r0, r6
 8001a78:	435c      	muls	r4, r3
 8001a7a:	437e      	muls	r6, r7
 8001a7c:	435f      	muls	r7, r3
 8001a7e:	0c03      	lsrs	r3, r0, #16
 8001a80:	4698      	mov	r8, r3
 8001a82:	19a4      	adds	r4, r4, r6
 8001a84:	4444      	add	r4, r8
 8001a86:	444a      	add	r2, r9
 8001a88:	9703      	str	r7, [sp, #12]
 8001a8a:	42a6      	cmp	r6, r4
 8001a8c:	d904      	bls.n	8001a98 <__aeabi_dmul+0x1d4>
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	025b      	lsls	r3, r3, #9
 8001a92:	4698      	mov	r8, r3
 8001a94:	4447      	add	r7, r8
 8001a96:	9703      	str	r7, [sp, #12]
 8001a98:	0423      	lsls	r3, r4, #16
 8001a9a:	9e02      	ldr	r6, [sp, #8]
 8001a9c:	469a      	mov	sl, r3
 8001a9e:	9b05      	ldr	r3, [sp, #20]
 8001aa0:	445e      	add	r6, fp
 8001aa2:	4698      	mov	r8, r3
 8001aa4:	42ae      	cmp	r6, r5
 8001aa6:	41ad      	sbcs	r5, r5
 8001aa8:	1876      	adds	r6, r6, r1
 8001aaa:	428e      	cmp	r6, r1
 8001aac:	4189      	sbcs	r1, r1
 8001aae:	0400      	lsls	r0, r0, #16
 8001ab0:	0c00      	lsrs	r0, r0, #16
 8001ab2:	4450      	add	r0, sl
 8001ab4:	4440      	add	r0, r8
 8001ab6:	426d      	negs	r5, r5
 8001ab8:	1947      	adds	r7, r0, r5
 8001aba:	46b8      	mov	r8, r7
 8001abc:	4693      	mov	fp, r2
 8001abe:	4249      	negs	r1, r1
 8001ac0:	4689      	mov	r9, r1
 8001ac2:	44c3      	add	fp, r8
 8001ac4:	44d9      	add	r9, fp
 8001ac6:	4298      	cmp	r0, r3
 8001ac8:	4180      	sbcs	r0, r0
 8001aca:	45a8      	cmp	r8, r5
 8001acc:	41ad      	sbcs	r5, r5
 8001ace:	4593      	cmp	fp, r2
 8001ad0:	4192      	sbcs	r2, r2
 8001ad2:	4589      	cmp	r9, r1
 8001ad4:	4189      	sbcs	r1, r1
 8001ad6:	426d      	negs	r5, r5
 8001ad8:	4240      	negs	r0, r0
 8001ada:	4328      	orrs	r0, r5
 8001adc:	0c24      	lsrs	r4, r4, #16
 8001ade:	4252      	negs	r2, r2
 8001ae0:	4249      	negs	r1, r1
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	9b03      	ldr	r3, [sp, #12]
 8001ae6:	1900      	adds	r0, r0, r4
 8001ae8:	1880      	adds	r0, r0, r2
 8001aea:	18c7      	adds	r7, r0, r3
 8001aec:	464b      	mov	r3, r9
 8001aee:	0ddc      	lsrs	r4, r3, #23
 8001af0:	9b04      	ldr	r3, [sp, #16]
 8001af2:	0275      	lsls	r5, r6, #9
 8001af4:	431d      	orrs	r5, r3
 8001af6:	1e6a      	subs	r2, r5, #1
 8001af8:	4195      	sbcs	r5, r2
 8001afa:	464b      	mov	r3, r9
 8001afc:	0df6      	lsrs	r6, r6, #23
 8001afe:	027f      	lsls	r7, r7, #9
 8001b00:	4335      	orrs	r5, r6
 8001b02:	025a      	lsls	r2, r3, #9
 8001b04:	433c      	orrs	r4, r7
 8001b06:	4315      	orrs	r5, r2
 8001b08:	01fb      	lsls	r3, r7, #7
 8001b0a:	d400      	bmi.n	8001b0e <__aeabi_dmul+0x24a>
 8001b0c:	e11c      	b.n	8001d48 <__aeabi_dmul+0x484>
 8001b0e:	2101      	movs	r1, #1
 8001b10:	086a      	lsrs	r2, r5, #1
 8001b12:	400d      	ands	r5, r1
 8001b14:	4315      	orrs	r5, r2
 8001b16:	07e2      	lsls	r2, r4, #31
 8001b18:	4315      	orrs	r5, r2
 8001b1a:	0864      	lsrs	r4, r4, #1
 8001b1c:	494f      	ldr	r1, [pc, #316]	; (8001c5c <__aeabi_dmul+0x398>)
 8001b1e:	4461      	add	r1, ip
 8001b20:	2900      	cmp	r1, #0
 8001b22:	dc00      	bgt.n	8001b26 <__aeabi_dmul+0x262>
 8001b24:	e0b0      	b.n	8001c88 <__aeabi_dmul+0x3c4>
 8001b26:	076b      	lsls	r3, r5, #29
 8001b28:	d009      	beq.n	8001b3e <__aeabi_dmul+0x27a>
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	402a      	ands	r2, r5
 8001b2e:	2a04      	cmp	r2, #4
 8001b30:	d005      	beq.n	8001b3e <__aeabi_dmul+0x27a>
 8001b32:	1d2a      	adds	r2, r5, #4
 8001b34:	42aa      	cmp	r2, r5
 8001b36:	41ad      	sbcs	r5, r5
 8001b38:	426d      	negs	r5, r5
 8001b3a:	1964      	adds	r4, r4, r5
 8001b3c:	0015      	movs	r5, r2
 8001b3e:	01e3      	lsls	r3, r4, #7
 8001b40:	d504      	bpl.n	8001b4c <__aeabi_dmul+0x288>
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	4a46      	ldr	r2, [pc, #280]	; (8001c60 <__aeabi_dmul+0x39c>)
 8001b46:	00c9      	lsls	r1, r1, #3
 8001b48:	4014      	ands	r4, r2
 8001b4a:	4461      	add	r1, ip
 8001b4c:	4a45      	ldr	r2, [pc, #276]	; (8001c64 <__aeabi_dmul+0x3a0>)
 8001b4e:	4291      	cmp	r1, r2
 8001b50:	dd00      	ble.n	8001b54 <__aeabi_dmul+0x290>
 8001b52:	e726      	b.n	80019a2 <__aeabi_dmul+0xde>
 8001b54:	0762      	lsls	r2, r4, #29
 8001b56:	08ed      	lsrs	r5, r5, #3
 8001b58:	0264      	lsls	r4, r4, #9
 8001b5a:	0549      	lsls	r1, r1, #21
 8001b5c:	4315      	orrs	r5, r2
 8001b5e:	0b24      	lsrs	r4, r4, #12
 8001b60:	0d4a      	lsrs	r2, r1, #21
 8001b62:	e710      	b.n	8001986 <__aeabi_dmul+0xc2>
 8001b64:	4652      	mov	r2, sl
 8001b66:	4332      	orrs	r2, r6
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dmul+0x2a8>
 8001b6a:	e07f      	b.n	8001c6c <__aeabi_dmul+0x3a8>
 8001b6c:	2e00      	cmp	r6, #0
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dmul+0x2ae>
 8001b70:	e0dc      	b.n	8001d2c <__aeabi_dmul+0x468>
 8001b72:	0030      	movs	r0, r6
 8001b74:	f000 fe1e 	bl	80027b4 <__clzsi2>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	3a0b      	subs	r2, #11
 8001b7c:	231d      	movs	r3, #29
 8001b7e:	0001      	movs	r1, r0
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	4652      	mov	r2, sl
 8001b84:	3908      	subs	r1, #8
 8001b86:	40da      	lsrs	r2, r3
 8001b88:	408e      	lsls	r6, r1
 8001b8a:	4316      	orrs	r6, r2
 8001b8c:	4652      	mov	r2, sl
 8001b8e:	408a      	lsls	r2, r1
 8001b90:	9b00      	ldr	r3, [sp, #0]
 8001b92:	4935      	ldr	r1, [pc, #212]	; (8001c68 <__aeabi_dmul+0x3a4>)
 8001b94:	1a18      	subs	r0, r3, r0
 8001b96:	0003      	movs	r3, r0
 8001b98:	468c      	mov	ip, r1
 8001b9a:	4463      	add	r3, ip
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	e6d3      	b.n	800194a <__aeabi_dmul+0x86>
 8001ba2:	0025      	movs	r5, r4
 8001ba4:	4305      	orrs	r5, r0
 8001ba6:	d04a      	beq.n	8001c3e <__aeabi_dmul+0x37a>
 8001ba8:	2c00      	cmp	r4, #0
 8001baa:	d100      	bne.n	8001bae <__aeabi_dmul+0x2ea>
 8001bac:	e0b0      	b.n	8001d10 <__aeabi_dmul+0x44c>
 8001bae:	0020      	movs	r0, r4
 8001bb0:	f000 fe00 	bl	80027b4 <__clzsi2>
 8001bb4:	0001      	movs	r1, r0
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	390b      	subs	r1, #11
 8001bba:	231d      	movs	r3, #29
 8001bbc:	0010      	movs	r0, r2
 8001bbe:	1a5b      	subs	r3, r3, r1
 8001bc0:	0031      	movs	r1, r6
 8001bc2:	0035      	movs	r5, r6
 8001bc4:	3808      	subs	r0, #8
 8001bc6:	4084      	lsls	r4, r0
 8001bc8:	40d9      	lsrs	r1, r3
 8001bca:	4085      	lsls	r5, r0
 8001bcc:	430c      	orrs	r4, r1
 8001bce:	4826      	ldr	r0, [pc, #152]	; (8001c68 <__aeabi_dmul+0x3a4>)
 8001bd0:	1a83      	subs	r3, r0, r2
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4699      	mov	r9, r3
 8001bd8:	469b      	mov	fp, r3
 8001bda:	e697      	b.n	800190c <__aeabi_dmul+0x48>
 8001bdc:	0005      	movs	r5, r0
 8001bde:	4325      	orrs	r5, r4
 8001be0:	d126      	bne.n	8001c30 <__aeabi_dmul+0x36c>
 8001be2:	2208      	movs	r2, #8
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2302      	movs	r3, #2
 8001be8:	2400      	movs	r4, #0
 8001bea:	4691      	mov	r9, r2
 8001bec:	469b      	mov	fp, r3
 8001bee:	e68d      	b.n	800190c <__aeabi_dmul+0x48>
 8001bf0:	4652      	mov	r2, sl
 8001bf2:	9b00      	ldr	r3, [sp, #0]
 8001bf4:	4332      	orrs	r2, r6
 8001bf6:	d110      	bne.n	8001c1a <__aeabi_dmul+0x356>
 8001bf8:	4915      	ldr	r1, [pc, #84]	; (8001c50 <__aeabi_dmul+0x38c>)
 8001bfa:	2600      	movs	r6, #0
 8001bfc:	468c      	mov	ip, r1
 8001bfe:	4463      	add	r3, ip
 8001c00:	4649      	mov	r1, r9
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2302      	movs	r3, #2
 8001c06:	4319      	orrs	r1, r3
 8001c08:	4689      	mov	r9, r1
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	e69d      	b.n	800194a <__aeabi_dmul+0x86>
 8001c0e:	465b      	mov	r3, fp
 8001c10:	9701      	str	r7, [sp, #4]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d000      	beq.n	8001c18 <__aeabi_dmul+0x354>
 8001c16:	e6ad      	b.n	8001974 <__aeabi_dmul+0xb0>
 8001c18:	e6c3      	b.n	80019a2 <__aeabi_dmul+0xde>
 8001c1a:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <__aeabi_dmul+0x38c>)
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	4694      	mov	ip, r2
 8001c20:	4463      	add	r3, ip
 8001c22:	464a      	mov	r2, r9
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2303      	movs	r3, #3
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	4691      	mov	r9, r2
 8001c2c:	4652      	mov	r2, sl
 8001c2e:	e68c      	b.n	800194a <__aeabi_dmul+0x86>
 8001c30:	220c      	movs	r2, #12
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2303      	movs	r3, #3
 8001c36:	0005      	movs	r5, r0
 8001c38:	4691      	mov	r9, r2
 8001c3a:	469b      	mov	fp, r3
 8001c3c:	e666      	b.n	800190c <__aeabi_dmul+0x48>
 8001c3e:	2304      	movs	r3, #4
 8001c40:	4699      	mov	r9, r3
 8001c42:	2300      	movs	r3, #0
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	2400      	movs	r4, #0
 8001c4a:	469b      	mov	fp, r3
 8001c4c:	e65e      	b.n	800190c <__aeabi_dmul+0x48>
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	000007ff 	.word	0x000007ff
 8001c54:	fffffc01 	.word	0xfffffc01
 8001c58:	08009774 	.word	0x08009774
 8001c5c:	000003ff 	.word	0x000003ff
 8001c60:	feffffff 	.word	0xfeffffff
 8001c64:	000007fe 	.word	0x000007fe
 8001c68:	fffffc0d 	.word	0xfffffc0d
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	2301      	movs	r3, #1
 8001c70:	4319      	orrs	r1, r3
 8001c72:	4689      	mov	r9, r1
 8001c74:	2600      	movs	r6, #0
 8001c76:	2001      	movs	r0, #1
 8001c78:	e667      	b.n	800194a <__aeabi_dmul+0x86>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	2480      	movs	r4, #128	; 0x80
 8001c7e:	2500      	movs	r5, #0
 8001c80:	4a43      	ldr	r2, [pc, #268]	; (8001d90 <__aeabi_dmul+0x4cc>)
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	0324      	lsls	r4, r4, #12
 8001c86:	e67e      	b.n	8001986 <__aeabi_dmul+0xc2>
 8001c88:	2001      	movs	r0, #1
 8001c8a:	1a40      	subs	r0, r0, r1
 8001c8c:	2838      	cmp	r0, #56	; 0x38
 8001c8e:	dd00      	ble.n	8001c92 <__aeabi_dmul+0x3ce>
 8001c90:	e676      	b.n	8001980 <__aeabi_dmul+0xbc>
 8001c92:	281f      	cmp	r0, #31
 8001c94:	dd5b      	ble.n	8001d4e <__aeabi_dmul+0x48a>
 8001c96:	221f      	movs	r2, #31
 8001c98:	0023      	movs	r3, r4
 8001c9a:	4252      	negs	r2, r2
 8001c9c:	1a51      	subs	r1, r2, r1
 8001c9e:	40cb      	lsrs	r3, r1
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	2820      	cmp	r0, #32
 8001ca4:	d003      	beq.n	8001cae <__aeabi_dmul+0x3ea>
 8001ca6:	4a3b      	ldr	r2, [pc, #236]	; (8001d94 <__aeabi_dmul+0x4d0>)
 8001ca8:	4462      	add	r2, ip
 8001caa:	4094      	lsls	r4, r2
 8001cac:	4325      	orrs	r5, r4
 8001cae:	1e6a      	subs	r2, r5, #1
 8001cb0:	4195      	sbcs	r5, r2
 8001cb2:	002a      	movs	r2, r5
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	2107      	movs	r1, #7
 8001cb8:	000d      	movs	r5, r1
 8001cba:	2400      	movs	r4, #0
 8001cbc:	4015      	ands	r5, r2
 8001cbe:	4211      	tst	r1, r2
 8001cc0:	d05b      	beq.n	8001d7a <__aeabi_dmul+0x4b6>
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	2400      	movs	r4, #0
 8001cc6:	4011      	ands	r1, r2
 8001cc8:	2904      	cmp	r1, #4
 8001cca:	d053      	beq.n	8001d74 <__aeabi_dmul+0x4b0>
 8001ccc:	1d11      	adds	r1, r2, #4
 8001cce:	4291      	cmp	r1, r2
 8001cd0:	4192      	sbcs	r2, r2
 8001cd2:	4252      	negs	r2, r2
 8001cd4:	18a4      	adds	r4, r4, r2
 8001cd6:	000a      	movs	r2, r1
 8001cd8:	0223      	lsls	r3, r4, #8
 8001cda:	d54b      	bpl.n	8001d74 <__aeabi_dmul+0x4b0>
 8001cdc:	2201      	movs	r2, #1
 8001cde:	2400      	movs	r4, #0
 8001ce0:	2500      	movs	r5, #0
 8001ce2:	e650      	b.n	8001986 <__aeabi_dmul+0xc2>
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	031b      	lsls	r3, r3, #12
 8001ce8:	421c      	tst	r4, r3
 8001cea:	d009      	beq.n	8001d00 <__aeabi_dmul+0x43c>
 8001cec:	421e      	tst	r6, r3
 8001cee:	d107      	bne.n	8001d00 <__aeabi_dmul+0x43c>
 8001cf0:	4333      	orrs	r3, r6
 8001cf2:	031c      	lsls	r4, r3, #12
 8001cf4:	4643      	mov	r3, r8
 8001cf6:	0015      	movs	r5, r2
 8001cf8:	0b24      	lsrs	r4, r4, #12
 8001cfa:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <__aeabi_dmul+0x4cc>)
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	e642      	b.n	8001986 <__aeabi_dmul+0xc2>
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	0312      	lsls	r2, r2, #12
 8001d04:	4314      	orrs	r4, r2
 8001d06:	0324      	lsls	r4, r4, #12
 8001d08:	4a21      	ldr	r2, [pc, #132]	; (8001d90 <__aeabi_dmul+0x4cc>)
 8001d0a:	0b24      	lsrs	r4, r4, #12
 8001d0c:	9701      	str	r7, [sp, #4]
 8001d0e:	e63a      	b.n	8001986 <__aeabi_dmul+0xc2>
 8001d10:	f000 fd50 	bl	80027b4 <__clzsi2>
 8001d14:	0001      	movs	r1, r0
 8001d16:	0002      	movs	r2, r0
 8001d18:	3115      	adds	r1, #21
 8001d1a:	3220      	adds	r2, #32
 8001d1c:	291c      	cmp	r1, #28
 8001d1e:	dc00      	bgt.n	8001d22 <__aeabi_dmul+0x45e>
 8001d20:	e74b      	b.n	8001bba <__aeabi_dmul+0x2f6>
 8001d22:	0034      	movs	r4, r6
 8001d24:	3808      	subs	r0, #8
 8001d26:	2500      	movs	r5, #0
 8001d28:	4084      	lsls	r4, r0
 8001d2a:	e750      	b.n	8001bce <__aeabi_dmul+0x30a>
 8001d2c:	f000 fd42 	bl	80027b4 <__clzsi2>
 8001d30:	0003      	movs	r3, r0
 8001d32:	001a      	movs	r2, r3
 8001d34:	3215      	adds	r2, #21
 8001d36:	3020      	adds	r0, #32
 8001d38:	2a1c      	cmp	r2, #28
 8001d3a:	dc00      	bgt.n	8001d3e <__aeabi_dmul+0x47a>
 8001d3c:	e71e      	b.n	8001b7c <__aeabi_dmul+0x2b8>
 8001d3e:	4656      	mov	r6, sl
 8001d40:	3b08      	subs	r3, #8
 8001d42:	2200      	movs	r2, #0
 8001d44:	409e      	lsls	r6, r3
 8001d46:	e723      	b.n	8001b90 <__aeabi_dmul+0x2cc>
 8001d48:	9b00      	ldr	r3, [sp, #0]
 8001d4a:	469c      	mov	ip, r3
 8001d4c:	e6e6      	b.n	8001b1c <__aeabi_dmul+0x258>
 8001d4e:	4912      	ldr	r1, [pc, #72]	; (8001d98 <__aeabi_dmul+0x4d4>)
 8001d50:	0022      	movs	r2, r4
 8001d52:	4461      	add	r1, ip
 8001d54:	002e      	movs	r6, r5
 8001d56:	408d      	lsls	r5, r1
 8001d58:	408a      	lsls	r2, r1
 8001d5a:	40c6      	lsrs	r6, r0
 8001d5c:	1e69      	subs	r1, r5, #1
 8001d5e:	418d      	sbcs	r5, r1
 8001d60:	4332      	orrs	r2, r6
 8001d62:	432a      	orrs	r2, r5
 8001d64:	40c4      	lsrs	r4, r0
 8001d66:	0753      	lsls	r3, r2, #29
 8001d68:	d0b6      	beq.n	8001cd8 <__aeabi_dmul+0x414>
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	4011      	ands	r1, r2
 8001d6e:	2904      	cmp	r1, #4
 8001d70:	d1ac      	bne.n	8001ccc <__aeabi_dmul+0x408>
 8001d72:	e7b1      	b.n	8001cd8 <__aeabi_dmul+0x414>
 8001d74:	0765      	lsls	r5, r4, #29
 8001d76:	0264      	lsls	r4, r4, #9
 8001d78:	0b24      	lsrs	r4, r4, #12
 8001d7a:	08d2      	lsrs	r2, r2, #3
 8001d7c:	4315      	orrs	r5, r2
 8001d7e:	2200      	movs	r2, #0
 8001d80:	e601      	b.n	8001986 <__aeabi_dmul+0xc2>
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	0312      	lsls	r2, r2, #12
 8001d86:	4314      	orrs	r4, r2
 8001d88:	0324      	lsls	r4, r4, #12
 8001d8a:	4a01      	ldr	r2, [pc, #4]	; (8001d90 <__aeabi_dmul+0x4cc>)
 8001d8c:	0b24      	lsrs	r4, r4, #12
 8001d8e:	e5fa      	b.n	8001986 <__aeabi_dmul+0xc2>
 8001d90:	000007ff 	.word	0x000007ff
 8001d94:	0000043e 	.word	0x0000043e
 8001d98:	0000041e 	.word	0x0000041e

08001d9c <__aeabi_dsub>:
 8001d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9e:	4657      	mov	r7, sl
 8001da0:	464e      	mov	r6, r9
 8001da2:	4645      	mov	r5, r8
 8001da4:	46de      	mov	lr, fp
 8001da6:	b5e0      	push	{r5, r6, r7, lr}
 8001da8:	001e      	movs	r6, r3
 8001daa:	0017      	movs	r7, r2
 8001dac:	004a      	lsls	r2, r1, #1
 8001dae:	030b      	lsls	r3, r1, #12
 8001db0:	0d52      	lsrs	r2, r2, #21
 8001db2:	0a5b      	lsrs	r3, r3, #9
 8001db4:	4690      	mov	r8, r2
 8001db6:	0f42      	lsrs	r2, r0, #29
 8001db8:	431a      	orrs	r2, r3
 8001dba:	0fcd      	lsrs	r5, r1, #31
 8001dbc:	4ccd      	ldr	r4, [pc, #820]	; (80020f4 <__aeabi_dsub+0x358>)
 8001dbe:	0331      	lsls	r1, r6, #12
 8001dc0:	00c3      	lsls	r3, r0, #3
 8001dc2:	4694      	mov	ip, r2
 8001dc4:	0070      	lsls	r0, r6, #1
 8001dc6:	0f7a      	lsrs	r2, r7, #29
 8001dc8:	0a49      	lsrs	r1, r1, #9
 8001dca:	00ff      	lsls	r7, r7, #3
 8001dcc:	469a      	mov	sl, r3
 8001dce:	46b9      	mov	r9, r7
 8001dd0:	0d40      	lsrs	r0, r0, #21
 8001dd2:	0ff6      	lsrs	r6, r6, #31
 8001dd4:	4311      	orrs	r1, r2
 8001dd6:	42a0      	cmp	r0, r4
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_dsub+0x40>
 8001dda:	e0b1      	b.n	8001f40 <__aeabi_dsub+0x1a4>
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4056      	eors	r6, r2
 8001de0:	46b3      	mov	fp, r6
 8001de2:	42b5      	cmp	r5, r6
 8001de4:	d100      	bne.n	8001de8 <__aeabi_dsub+0x4c>
 8001de6:	e088      	b.n	8001efa <__aeabi_dsub+0x15e>
 8001de8:	4642      	mov	r2, r8
 8001dea:	1a12      	subs	r2, r2, r0
 8001dec:	2a00      	cmp	r2, #0
 8001dee:	dc00      	bgt.n	8001df2 <__aeabi_dsub+0x56>
 8001df0:	e0ae      	b.n	8001f50 <__aeabi_dsub+0x1b4>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d100      	bne.n	8001df8 <__aeabi_dsub+0x5c>
 8001df6:	e0c1      	b.n	8001f7c <__aeabi_dsub+0x1e0>
 8001df8:	48be      	ldr	r0, [pc, #760]	; (80020f4 <__aeabi_dsub+0x358>)
 8001dfa:	4580      	cmp	r8, r0
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x64>
 8001dfe:	e151      	b.n	80020a4 <__aeabi_dsub+0x308>
 8001e00:	2080      	movs	r0, #128	; 0x80
 8001e02:	0400      	lsls	r0, r0, #16
 8001e04:	4301      	orrs	r1, r0
 8001e06:	2a38      	cmp	r2, #56	; 0x38
 8001e08:	dd00      	ble.n	8001e0c <__aeabi_dsub+0x70>
 8001e0a:	e17b      	b.n	8002104 <__aeabi_dsub+0x368>
 8001e0c:	2a1f      	cmp	r2, #31
 8001e0e:	dd00      	ble.n	8001e12 <__aeabi_dsub+0x76>
 8001e10:	e1ee      	b.n	80021f0 <__aeabi_dsub+0x454>
 8001e12:	2020      	movs	r0, #32
 8001e14:	003e      	movs	r6, r7
 8001e16:	1a80      	subs	r0, r0, r2
 8001e18:	000c      	movs	r4, r1
 8001e1a:	40d6      	lsrs	r6, r2
 8001e1c:	40d1      	lsrs	r1, r2
 8001e1e:	4087      	lsls	r7, r0
 8001e20:	4662      	mov	r2, ip
 8001e22:	4084      	lsls	r4, r0
 8001e24:	1a52      	subs	r2, r2, r1
 8001e26:	1e78      	subs	r0, r7, #1
 8001e28:	4187      	sbcs	r7, r0
 8001e2a:	4694      	mov	ip, r2
 8001e2c:	4334      	orrs	r4, r6
 8001e2e:	4327      	orrs	r7, r4
 8001e30:	1bdc      	subs	r4, r3, r7
 8001e32:	42a3      	cmp	r3, r4
 8001e34:	419b      	sbcs	r3, r3
 8001e36:	4662      	mov	r2, ip
 8001e38:	425b      	negs	r3, r3
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	4699      	mov	r9, r3
 8001e3e:	464b      	mov	r3, r9
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	d400      	bmi.n	8001e46 <__aeabi_dsub+0xaa>
 8001e44:	e118      	b.n	8002078 <__aeabi_dsub+0x2dc>
 8001e46:	464b      	mov	r3, r9
 8001e48:	0258      	lsls	r0, r3, #9
 8001e4a:	0a43      	lsrs	r3, r0, #9
 8001e4c:	4699      	mov	r9, r3
 8001e4e:	464b      	mov	r3, r9
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0xba>
 8001e54:	e137      	b.n	80020c6 <__aeabi_dsub+0x32a>
 8001e56:	4648      	mov	r0, r9
 8001e58:	f000 fcac 	bl	80027b4 <__clzsi2>
 8001e5c:	0001      	movs	r1, r0
 8001e5e:	3908      	subs	r1, #8
 8001e60:	2320      	movs	r3, #32
 8001e62:	0022      	movs	r2, r4
 8001e64:	4648      	mov	r0, r9
 8001e66:	1a5b      	subs	r3, r3, r1
 8001e68:	40da      	lsrs	r2, r3
 8001e6a:	4088      	lsls	r0, r1
 8001e6c:	408c      	lsls	r4, r1
 8001e6e:	4643      	mov	r3, r8
 8001e70:	4310      	orrs	r0, r2
 8001e72:	4588      	cmp	r8, r1
 8001e74:	dd00      	ble.n	8001e78 <__aeabi_dsub+0xdc>
 8001e76:	e136      	b.n	80020e6 <__aeabi_dsub+0x34a>
 8001e78:	1ac9      	subs	r1, r1, r3
 8001e7a:	1c4b      	adds	r3, r1, #1
 8001e7c:	2b1f      	cmp	r3, #31
 8001e7e:	dd00      	ble.n	8001e82 <__aeabi_dsub+0xe6>
 8001e80:	e0ea      	b.n	8002058 <__aeabi_dsub+0x2bc>
 8001e82:	2220      	movs	r2, #32
 8001e84:	0026      	movs	r6, r4
 8001e86:	1ad2      	subs	r2, r2, r3
 8001e88:	0001      	movs	r1, r0
 8001e8a:	4094      	lsls	r4, r2
 8001e8c:	40de      	lsrs	r6, r3
 8001e8e:	40d8      	lsrs	r0, r3
 8001e90:	2300      	movs	r3, #0
 8001e92:	4091      	lsls	r1, r2
 8001e94:	1e62      	subs	r2, r4, #1
 8001e96:	4194      	sbcs	r4, r2
 8001e98:	4681      	mov	r9, r0
 8001e9a:	4698      	mov	r8, r3
 8001e9c:	4331      	orrs	r1, r6
 8001e9e:	430c      	orrs	r4, r1
 8001ea0:	0763      	lsls	r3, r4, #29
 8001ea2:	d009      	beq.n	8001eb8 <__aeabi_dsub+0x11c>
 8001ea4:	230f      	movs	r3, #15
 8001ea6:	4023      	ands	r3, r4
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d005      	beq.n	8001eb8 <__aeabi_dsub+0x11c>
 8001eac:	1d23      	adds	r3, r4, #4
 8001eae:	42a3      	cmp	r3, r4
 8001eb0:	41a4      	sbcs	r4, r4
 8001eb2:	4264      	negs	r4, r4
 8001eb4:	44a1      	add	r9, r4
 8001eb6:	001c      	movs	r4, r3
 8001eb8:	464b      	mov	r3, r9
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	d400      	bmi.n	8001ec0 <__aeabi_dsub+0x124>
 8001ebe:	e0de      	b.n	800207e <__aeabi_dsub+0x2e2>
 8001ec0:	4641      	mov	r1, r8
 8001ec2:	4b8c      	ldr	r3, [pc, #560]	; (80020f4 <__aeabi_dsub+0x358>)
 8001ec4:	3101      	adds	r1, #1
 8001ec6:	4299      	cmp	r1, r3
 8001ec8:	d100      	bne.n	8001ecc <__aeabi_dsub+0x130>
 8001eca:	e0e7      	b.n	800209c <__aeabi_dsub+0x300>
 8001ecc:	464b      	mov	r3, r9
 8001ece:	488a      	ldr	r0, [pc, #552]	; (80020f8 <__aeabi_dsub+0x35c>)
 8001ed0:	08e4      	lsrs	r4, r4, #3
 8001ed2:	4003      	ands	r3, r0
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	0549      	lsls	r1, r1, #21
 8001ed8:	075b      	lsls	r3, r3, #29
 8001eda:	0240      	lsls	r0, r0, #9
 8001edc:	4323      	orrs	r3, r4
 8001ede:	0d4a      	lsrs	r2, r1, #21
 8001ee0:	0b04      	lsrs	r4, r0, #12
 8001ee2:	0512      	lsls	r2, r2, #20
 8001ee4:	07ed      	lsls	r5, r5, #31
 8001ee6:	4322      	orrs	r2, r4
 8001ee8:	432a      	orrs	r2, r5
 8001eea:	0018      	movs	r0, r3
 8001eec:	0011      	movs	r1, r2
 8001eee:	bcf0      	pop	{r4, r5, r6, r7}
 8001ef0:	46bb      	mov	fp, r7
 8001ef2:	46b2      	mov	sl, r6
 8001ef4:	46a9      	mov	r9, r5
 8001ef6:	46a0      	mov	r8, r4
 8001ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001efa:	4642      	mov	r2, r8
 8001efc:	1a12      	subs	r2, r2, r0
 8001efe:	2a00      	cmp	r2, #0
 8001f00:	dd52      	ble.n	8001fa8 <__aeabi_dsub+0x20c>
 8001f02:	2800      	cmp	r0, #0
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x16c>
 8001f06:	e09c      	b.n	8002042 <__aeabi_dsub+0x2a6>
 8001f08:	45a0      	cmp	r8, r4
 8001f0a:	d100      	bne.n	8001f0e <__aeabi_dsub+0x172>
 8001f0c:	e0ca      	b.n	80020a4 <__aeabi_dsub+0x308>
 8001f0e:	2080      	movs	r0, #128	; 0x80
 8001f10:	0400      	lsls	r0, r0, #16
 8001f12:	4301      	orrs	r1, r0
 8001f14:	2a38      	cmp	r2, #56	; 0x38
 8001f16:	dd00      	ble.n	8001f1a <__aeabi_dsub+0x17e>
 8001f18:	e149      	b.n	80021ae <__aeabi_dsub+0x412>
 8001f1a:	2a1f      	cmp	r2, #31
 8001f1c:	dc00      	bgt.n	8001f20 <__aeabi_dsub+0x184>
 8001f1e:	e197      	b.n	8002250 <__aeabi_dsub+0x4b4>
 8001f20:	0010      	movs	r0, r2
 8001f22:	000e      	movs	r6, r1
 8001f24:	3820      	subs	r0, #32
 8001f26:	40c6      	lsrs	r6, r0
 8001f28:	2a20      	cmp	r2, #32
 8001f2a:	d004      	beq.n	8001f36 <__aeabi_dsub+0x19a>
 8001f2c:	2040      	movs	r0, #64	; 0x40
 8001f2e:	1a82      	subs	r2, r0, r2
 8001f30:	4091      	lsls	r1, r2
 8001f32:	430f      	orrs	r7, r1
 8001f34:	46b9      	mov	r9, r7
 8001f36:	464c      	mov	r4, r9
 8001f38:	1e62      	subs	r2, r4, #1
 8001f3a:	4194      	sbcs	r4, r2
 8001f3c:	4334      	orrs	r4, r6
 8001f3e:	e13a      	b.n	80021b6 <__aeabi_dsub+0x41a>
 8001f40:	000a      	movs	r2, r1
 8001f42:	433a      	orrs	r2, r7
 8001f44:	d028      	beq.n	8001f98 <__aeabi_dsub+0x1fc>
 8001f46:	46b3      	mov	fp, r6
 8001f48:	42b5      	cmp	r5, r6
 8001f4a:	d02b      	beq.n	8001fa4 <__aeabi_dsub+0x208>
 8001f4c:	4a6b      	ldr	r2, [pc, #428]	; (80020fc <__aeabi_dsub+0x360>)
 8001f4e:	4442      	add	r2, r8
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d05d      	beq.n	8002010 <__aeabi_dsub+0x274>
 8001f54:	4642      	mov	r2, r8
 8001f56:	4644      	mov	r4, r8
 8001f58:	1a82      	subs	r2, r0, r2
 8001f5a:	2c00      	cmp	r4, #0
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dsub+0x1c4>
 8001f5e:	e0f5      	b.n	800214c <__aeabi_dsub+0x3b0>
 8001f60:	4665      	mov	r5, ip
 8001f62:	431d      	orrs	r5, r3
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dsub+0x1cc>
 8001f66:	e19c      	b.n	80022a2 <__aeabi_dsub+0x506>
 8001f68:	1e55      	subs	r5, r2, #1
 8001f6a:	2a01      	cmp	r2, #1
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dsub+0x1d4>
 8001f6e:	e1fb      	b.n	8002368 <__aeabi_dsub+0x5cc>
 8001f70:	4c60      	ldr	r4, [pc, #384]	; (80020f4 <__aeabi_dsub+0x358>)
 8001f72:	42a2      	cmp	r2, r4
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x1dc>
 8001f76:	e1bd      	b.n	80022f4 <__aeabi_dsub+0x558>
 8001f78:	002a      	movs	r2, r5
 8001f7a:	e0f0      	b.n	800215e <__aeabi_dsub+0x3c2>
 8001f7c:	0008      	movs	r0, r1
 8001f7e:	4338      	orrs	r0, r7
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0x1e8>
 8001f82:	e0c3      	b.n	800210c <__aeabi_dsub+0x370>
 8001f84:	1e50      	subs	r0, r2, #1
 8001f86:	2a01      	cmp	r2, #1
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x1f0>
 8001f8a:	e1a8      	b.n	80022de <__aeabi_dsub+0x542>
 8001f8c:	4c59      	ldr	r4, [pc, #356]	; (80020f4 <__aeabi_dsub+0x358>)
 8001f8e:	42a2      	cmp	r2, r4
 8001f90:	d100      	bne.n	8001f94 <__aeabi_dsub+0x1f8>
 8001f92:	e087      	b.n	80020a4 <__aeabi_dsub+0x308>
 8001f94:	0002      	movs	r2, r0
 8001f96:	e736      	b.n	8001e06 <__aeabi_dsub+0x6a>
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4056      	eors	r6, r2
 8001f9c:	46b3      	mov	fp, r6
 8001f9e:	42b5      	cmp	r5, r6
 8001fa0:	d000      	beq.n	8001fa4 <__aeabi_dsub+0x208>
 8001fa2:	e721      	b.n	8001de8 <__aeabi_dsub+0x4c>
 8001fa4:	4a55      	ldr	r2, [pc, #340]	; (80020fc <__aeabi_dsub+0x360>)
 8001fa6:	4442      	add	r2, r8
 8001fa8:	2a00      	cmp	r2, #0
 8001faa:	d100      	bne.n	8001fae <__aeabi_dsub+0x212>
 8001fac:	e0b5      	b.n	800211a <__aeabi_dsub+0x37e>
 8001fae:	4642      	mov	r2, r8
 8001fb0:	4644      	mov	r4, r8
 8001fb2:	1a82      	subs	r2, r0, r2
 8001fb4:	2c00      	cmp	r4, #0
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0x21e>
 8001fb8:	e138      	b.n	800222c <__aeabi_dsub+0x490>
 8001fba:	4e4e      	ldr	r6, [pc, #312]	; (80020f4 <__aeabi_dsub+0x358>)
 8001fbc:	42b0      	cmp	r0, r6
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x226>
 8001fc0:	e1de      	b.n	8002380 <__aeabi_dsub+0x5e4>
 8001fc2:	2680      	movs	r6, #128	; 0x80
 8001fc4:	4664      	mov	r4, ip
 8001fc6:	0436      	lsls	r6, r6, #16
 8001fc8:	4334      	orrs	r4, r6
 8001fca:	46a4      	mov	ip, r4
 8001fcc:	2a38      	cmp	r2, #56	; 0x38
 8001fce:	dd00      	ble.n	8001fd2 <__aeabi_dsub+0x236>
 8001fd0:	e196      	b.n	8002300 <__aeabi_dsub+0x564>
 8001fd2:	2a1f      	cmp	r2, #31
 8001fd4:	dd00      	ble.n	8001fd8 <__aeabi_dsub+0x23c>
 8001fd6:	e224      	b.n	8002422 <__aeabi_dsub+0x686>
 8001fd8:	2620      	movs	r6, #32
 8001fda:	1ab4      	subs	r4, r6, r2
 8001fdc:	46a2      	mov	sl, r4
 8001fde:	4664      	mov	r4, ip
 8001fe0:	4656      	mov	r6, sl
 8001fe2:	40b4      	lsls	r4, r6
 8001fe4:	46a1      	mov	r9, r4
 8001fe6:	001c      	movs	r4, r3
 8001fe8:	464e      	mov	r6, r9
 8001fea:	40d4      	lsrs	r4, r2
 8001fec:	4326      	orrs	r6, r4
 8001fee:	0034      	movs	r4, r6
 8001ff0:	4656      	mov	r6, sl
 8001ff2:	40b3      	lsls	r3, r6
 8001ff4:	1e5e      	subs	r6, r3, #1
 8001ff6:	41b3      	sbcs	r3, r6
 8001ff8:	431c      	orrs	r4, r3
 8001ffa:	4663      	mov	r3, ip
 8001ffc:	40d3      	lsrs	r3, r2
 8001ffe:	18c9      	adds	r1, r1, r3
 8002000:	19e4      	adds	r4, r4, r7
 8002002:	42bc      	cmp	r4, r7
 8002004:	41bf      	sbcs	r7, r7
 8002006:	427f      	negs	r7, r7
 8002008:	46b9      	mov	r9, r7
 800200a:	4680      	mov	r8, r0
 800200c:	4489      	add	r9, r1
 800200e:	e0d8      	b.n	80021c2 <__aeabi_dsub+0x426>
 8002010:	4640      	mov	r0, r8
 8002012:	4c3b      	ldr	r4, [pc, #236]	; (8002100 <__aeabi_dsub+0x364>)
 8002014:	3001      	adds	r0, #1
 8002016:	4220      	tst	r0, r4
 8002018:	d000      	beq.n	800201c <__aeabi_dsub+0x280>
 800201a:	e0b4      	b.n	8002186 <__aeabi_dsub+0x3ea>
 800201c:	4640      	mov	r0, r8
 800201e:	2800      	cmp	r0, #0
 8002020:	d000      	beq.n	8002024 <__aeabi_dsub+0x288>
 8002022:	e144      	b.n	80022ae <__aeabi_dsub+0x512>
 8002024:	4660      	mov	r0, ip
 8002026:	4318      	orrs	r0, r3
 8002028:	d100      	bne.n	800202c <__aeabi_dsub+0x290>
 800202a:	e190      	b.n	800234e <__aeabi_dsub+0x5b2>
 800202c:	0008      	movs	r0, r1
 800202e:	4338      	orrs	r0, r7
 8002030:	d000      	beq.n	8002034 <__aeabi_dsub+0x298>
 8002032:	e1aa      	b.n	800238a <__aeabi_dsub+0x5ee>
 8002034:	4661      	mov	r1, ip
 8002036:	08db      	lsrs	r3, r3, #3
 8002038:	0749      	lsls	r1, r1, #29
 800203a:	430b      	orrs	r3, r1
 800203c:	4661      	mov	r1, ip
 800203e:	08cc      	lsrs	r4, r1, #3
 8002040:	e027      	b.n	8002092 <__aeabi_dsub+0x2f6>
 8002042:	0008      	movs	r0, r1
 8002044:	4338      	orrs	r0, r7
 8002046:	d061      	beq.n	800210c <__aeabi_dsub+0x370>
 8002048:	1e50      	subs	r0, r2, #1
 800204a:	2a01      	cmp	r2, #1
 800204c:	d100      	bne.n	8002050 <__aeabi_dsub+0x2b4>
 800204e:	e139      	b.n	80022c4 <__aeabi_dsub+0x528>
 8002050:	42a2      	cmp	r2, r4
 8002052:	d027      	beq.n	80020a4 <__aeabi_dsub+0x308>
 8002054:	0002      	movs	r2, r0
 8002056:	e75d      	b.n	8001f14 <__aeabi_dsub+0x178>
 8002058:	0002      	movs	r2, r0
 800205a:	391f      	subs	r1, #31
 800205c:	40ca      	lsrs	r2, r1
 800205e:	0011      	movs	r1, r2
 8002060:	2b20      	cmp	r3, #32
 8002062:	d003      	beq.n	800206c <__aeabi_dsub+0x2d0>
 8002064:	2240      	movs	r2, #64	; 0x40
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	4098      	lsls	r0, r3
 800206a:	4304      	orrs	r4, r0
 800206c:	1e63      	subs	r3, r4, #1
 800206e:	419c      	sbcs	r4, r3
 8002070:	2300      	movs	r3, #0
 8002072:	4699      	mov	r9, r3
 8002074:	4698      	mov	r8, r3
 8002076:	430c      	orrs	r4, r1
 8002078:	0763      	lsls	r3, r4, #29
 800207a:	d000      	beq.n	800207e <__aeabi_dsub+0x2e2>
 800207c:	e712      	b.n	8001ea4 <__aeabi_dsub+0x108>
 800207e:	464b      	mov	r3, r9
 8002080:	464a      	mov	r2, r9
 8002082:	08e4      	lsrs	r4, r4, #3
 8002084:	075b      	lsls	r3, r3, #29
 8002086:	4323      	orrs	r3, r4
 8002088:	08d4      	lsrs	r4, r2, #3
 800208a:	4642      	mov	r2, r8
 800208c:	4919      	ldr	r1, [pc, #100]	; (80020f4 <__aeabi_dsub+0x358>)
 800208e:	428a      	cmp	r2, r1
 8002090:	d00e      	beq.n	80020b0 <__aeabi_dsub+0x314>
 8002092:	0324      	lsls	r4, r4, #12
 8002094:	0552      	lsls	r2, r2, #21
 8002096:	0b24      	lsrs	r4, r4, #12
 8002098:	0d52      	lsrs	r2, r2, #21
 800209a:	e722      	b.n	8001ee2 <__aeabi_dsub+0x146>
 800209c:	000a      	movs	r2, r1
 800209e:	2400      	movs	r4, #0
 80020a0:	2300      	movs	r3, #0
 80020a2:	e71e      	b.n	8001ee2 <__aeabi_dsub+0x146>
 80020a4:	08db      	lsrs	r3, r3, #3
 80020a6:	4662      	mov	r2, ip
 80020a8:	0752      	lsls	r2, r2, #29
 80020aa:	4313      	orrs	r3, r2
 80020ac:	4662      	mov	r2, ip
 80020ae:	08d4      	lsrs	r4, r2, #3
 80020b0:	001a      	movs	r2, r3
 80020b2:	4322      	orrs	r2, r4
 80020b4:	d100      	bne.n	80020b8 <__aeabi_dsub+0x31c>
 80020b6:	e1fc      	b.n	80024b2 <__aeabi_dsub+0x716>
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	0312      	lsls	r2, r2, #12
 80020bc:	4314      	orrs	r4, r2
 80020be:	0324      	lsls	r4, r4, #12
 80020c0:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <__aeabi_dsub+0x358>)
 80020c2:	0b24      	lsrs	r4, r4, #12
 80020c4:	e70d      	b.n	8001ee2 <__aeabi_dsub+0x146>
 80020c6:	0020      	movs	r0, r4
 80020c8:	f000 fb74 	bl	80027b4 <__clzsi2>
 80020cc:	0001      	movs	r1, r0
 80020ce:	3118      	adds	r1, #24
 80020d0:	291f      	cmp	r1, #31
 80020d2:	dc00      	bgt.n	80020d6 <__aeabi_dsub+0x33a>
 80020d4:	e6c4      	b.n	8001e60 <__aeabi_dsub+0xc4>
 80020d6:	3808      	subs	r0, #8
 80020d8:	4084      	lsls	r4, r0
 80020da:	4643      	mov	r3, r8
 80020dc:	0020      	movs	r0, r4
 80020de:	2400      	movs	r4, #0
 80020e0:	4588      	cmp	r8, r1
 80020e2:	dc00      	bgt.n	80020e6 <__aeabi_dsub+0x34a>
 80020e4:	e6c8      	b.n	8001e78 <__aeabi_dsub+0xdc>
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <__aeabi_dsub+0x35c>)
 80020e8:	1a5b      	subs	r3, r3, r1
 80020ea:	4010      	ands	r0, r2
 80020ec:	4698      	mov	r8, r3
 80020ee:	4681      	mov	r9, r0
 80020f0:	e6d6      	b.n	8001ea0 <__aeabi_dsub+0x104>
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	000007ff 	.word	0x000007ff
 80020f8:	ff7fffff 	.word	0xff7fffff
 80020fc:	fffff801 	.word	0xfffff801
 8002100:	000007fe 	.word	0x000007fe
 8002104:	430f      	orrs	r7, r1
 8002106:	1e7a      	subs	r2, r7, #1
 8002108:	4197      	sbcs	r7, r2
 800210a:	e691      	b.n	8001e30 <__aeabi_dsub+0x94>
 800210c:	4661      	mov	r1, ip
 800210e:	08db      	lsrs	r3, r3, #3
 8002110:	0749      	lsls	r1, r1, #29
 8002112:	430b      	orrs	r3, r1
 8002114:	4661      	mov	r1, ip
 8002116:	08cc      	lsrs	r4, r1, #3
 8002118:	e7b8      	b.n	800208c <__aeabi_dsub+0x2f0>
 800211a:	4640      	mov	r0, r8
 800211c:	4cd3      	ldr	r4, [pc, #844]	; (800246c <__aeabi_dsub+0x6d0>)
 800211e:	3001      	adds	r0, #1
 8002120:	4220      	tst	r0, r4
 8002122:	d000      	beq.n	8002126 <__aeabi_dsub+0x38a>
 8002124:	e0a2      	b.n	800226c <__aeabi_dsub+0x4d0>
 8002126:	4640      	mov	r0, r8
 8002128:	2800      	cmp	r0, #0
 800212a:	d000      	beq.n	800212e <__aeabi_dsub+0x392>
 800212c:	e101      	b.n	8002332 <__aeabi_dsub+0x596>
 800212e:	4660      	mov	r0, ip
 8002130:	4318      	orrs	r0, r3
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x39a>
 8002134:	e15e      	b.n	80023f4 <__aeabi_dsub+0x658>
 8002136:	0008      	movs	r0, r1
 8002138:	4338      	orrs	r0, r7
 800213a:	d000      	beq.n	800213e <__aeabi_dsub+0x3a2>
 800213c:	e15f      	b.n	80023fe <__aeabi_dsub+0x662>
 800213e:	4661      	mov	r1, ip
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	0749      	lsls	r1, r1, #29
 8002144:	430b      	orrs	r3, r1
 8002146:	4661      	mov	r1, ip
 8002148:	08cc      	lsrs	r4, r1, #3
 800214a:	e7a2      	b.n	8002092 <__aeabi_dsub+0x2f6>
 800214c:	4dc8      	ldr	r5, [pc, #800]	; (8002470 <__aeabi_dsub+0x6d4>)
 800214e:	42a8      	cmp	r0, r5
 8002150:	d100      	bne.n	8002154 <__aeabi_dsub+0x3b8>
 8002152:	e0cf      	b.n	80022f4 <__aeabi_dsub+0x558>
 8002154:	2580      	movs	r5, #128	; 0x80
 8002156:	4664      	mov	r4, ip
 8002158:	042d      	lsls	r5, r5, #16
 800215a:	432c      	orrs	r4, r5
 800215c:	46a4      	mov	ip, r4
 800215e:	2a38      	cmp	r2, #56	; 0x38
 8002160:	dc56      	bgt.n	8002210 <__aeabi_dsub+0x474>
 8002162:	2a1f      	cmp	r2, #31
 8002164:	dd00      	ble.n	8002168 <__aeabi_dsub+0x3cc>
 8002166:	e0d1      	b.n	800230c <__aeabi_dsub+0x570>
 8002168:	2520      	movs	r5, #32
 800216a:	001e      	movs	r6, r3
 800216c:	1aad      	subs	r5, r5, r2
 800216e:	4664      	mov	r4, ip
 8002170:	40ab      	lsls	r3, r5
 8002172:	40ac      	lsls	r4, r5
 8002174:	40d6      	lsrs	r6, r2
 8002176:	1e5d      	subs	r5, r3, #1
 8002178:	41ab      	sbcs	r3, r5
 800217a:	4334      	orrs	r4, r6
 800217c:	4323      	orrs	r3, r4
 800217e:	4664      	mov	r4, ip
 8002180:	40d4      	lsrs	r4, r2
 8002182:	1b09      	subs	r1, r1, r4
 8002184:	e049      	b.n	800221a <__aeabi_dsub+0x47e>
 8002186:	4660      	mov	r0, ip
 8002188:	1bdc      	subs	r4, r3, r7
 800218a:	1a46      	subs	r6, r0, r1
 800218c:	42a3      	cmp	r3, r4
 800218e:	4180      	sbcs	r0, r0
 8002190:	4240      	negs	r0, r0
 8002192:	4681      	mov	r9, r0
 8002194:	0030      	movs	r0, r6
 8002196:	464e      	mov	r6, r9
 8002198:	1b80      	subs	r0, r0, r6
 800219a:	4681      	mov	r9, r0
 800219c:	0200      	lsls	r0, r0, #8
 800219e:	d476      	bmi.n	800228e <__aeabi_dsub+0x4f2>
 80021a0:	464b      	mov	r3, r9
 80021a2:	4323      	orrs	r3, r4
 80021a4:	d000      	beq.n	80021a8 <__aeabi_dsub+0x40c>
 80021a6:	e652      	b.n	8001e4e <__aeabi_dsub+0xb2>
 80021a8:	2400      	movs	r4, #0
 80021aa:	2500      	movs	r5, #0
 80021ac:	e771      	b.n	8002092 <__aeabi_dsub+0x2f6>
 80021ae:	4339      	orrs	r1, r7
 80021b0:	000c      	movs	r4, r1
 80021b2:	1e62      	subs	r2, r4, #1
 80021b4:	4194      	sbcs	r4, r2
 80021b6:	18e4      	adds	r4, r4, r3
 80021b8:	429c      	cmp	r4, r3
 80021ba:	419b      	sbcs	r3, r3
 80021bc:	425b      	negs	r3, r3
 80021be:	4463      	add	r3, ip
 80021c0:	4699      	mov	r9, r3
 80021c2:	464b      	mov	r3, r9
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	d400      	bmi.n	80021ca <__aeabi_dsub+0x42e>
 80021c8:	e756      	b.n	8002078 <__aeabi_dsub+0x2dc>
 80021ca:	2301      	movs	r3, #1
 80021cc:	469c      	mov	ip, r3
 80021ce:	4ba8      	ldr	r3, [pc, #672]	; (8002470 <__aeabi_dsub+0x6d4>)
 80021d0:	44e0      	add	r8, ip
 80021d2:	4598      	cmp	r8, r3
 80021d4:	d038      	beq.n	8002248 <__aeabi_dsub+0x4ac>
 80021d6:	464b      	mov	r3, r9
 80021d8:	48a6      	ldr	r0, [pc, #664]	; (8002474 <__aeabi_dsub+0x6d8>)
 80021da:	2201      	movs	r2, #1
 80021dc:	4003      	ands	r3, r0
 80021de:	0018      	movs	r0, r3
 80021e0:	0863      	lsrs	r3, r4, #1
 80021e2:	4014      	ands	r4, r2
 80021e4:	431c      	orrs	r4, r3
 80021e6:	07c3      	lsls	r3, r0, #31
 80021e8:	431c      	orrs	r4, r3
 80021ea:	0843      	lsrs	r3, r0, #1
 80021ec:	4699      	mov	r9, r3
 80021ee:	e657      	b.n	8001ea0 <__aeabi_dsub+0x104>
 80021f0:	0010      	movs	r0, r2
 80021f2:	000e      	movs	r6, r1
 80021f4:	3820      	subs	r0, #32
 80021f6:	40c6      	lsrs	r6, r0
 80021f8:	2a20      	cmp	r2, #32
 80021fa:	d004      	beq.n	8002206 <__aeabi_dsub+0x46a>
 80021fc:	2040      	movs	r0, #64	; 0x40
 80021fe:	1a82      	subs	r2, r0, r2
 8002200:	4091      	lsls	r1, r2
 8002202:	430f      	orrs	r7, r1
 8002204:	46b9      	mov	r9, r7
 8002206:	464f      	mov	r7, r9
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4337      	orrs	r7, r6
 800220e:	e60f      	b.n	8001e30 <__aeabi_dsub+0x94>
 8002210:	4662      	mov	r2, ip
 8002212:	431a      	orrs	r2, r3
 8002214:	0013      	movs	r3, r2
 8002216:	1e5a      	subs	r2, r3, #1
 8002218:	4193      	sbcs	r3, r2
 800221a:	1afc      	subs	r4, r7, r3
 800221c:	42a7      	cmp	r7, r4
 800221e:	41bf      	sbcs	r7, r7
 8002220:	427f      	negs	r7, r7
 8002222:	1bcb      	subs	r3, r1, r7
 8002224:	4699      	mov	r9, r3
 8002226:	465d      	mov	r5, fp
 8002228:	4680      	mov	r8, r0
 800222a:	e608      	b.n	8001e3e <__aeabi_dsub+0xa2>
 800222c:	4666      	mov	r6, ip
 800222e:	431e      	orrs	r6, r3
 8002230:	d100      	bne.n	8002234 <__aeabi_dsub+0x498>
 8002232:	e0be      	b.n	80023b2 <__aeabi_dsub+0x616>
 8002234:	1e56      	subs	r6, r2, #1
 8002236:	2a01      	cmp	r2, #1
 8002238:	d100      	bne.n	800223c <__aeabi_dsub+0x4a0>
 800223a:	e109      	b.n	8002450 <__aeabi_dsub+0x6b4>
 800223c:	4c8c      	ldr	r4, [pc, #560]	; (8002470 <__aeabi_dsub+0x6d4>)
 800223e:	42a2      	cmp	r2, r4
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x4a8>
 8002242:	e119      	b.n	8002478 <__aeabi_dsub+0x6dc>
 8002244:	0032      	movs	r2, r6
 8002246:	e6c1      	b.n	8001fcc <__aeabi_dsub+0x230>
 8002248:	4642      	mov	r2, r8
 800224a:	2400      	movs	r4, #0
 800224c:	2300      	movs	r3, #0
 800224e:	e648      	b.n	8001ee2 <__aeabi_dsub+0x146>
 8002250:	2020      	movs	r0, #32
 8002252:	000c      	movs	r4, r1
 8002254:	1a80      	subs	r0, r0, r2
 8002256:	003e      	movs	r6, r7
 8002258:	4087      	lsls	r7, r0
 800225a:	4084      	lsls	r4, r0
 800225c:	40d6      	lsrs	r6, r2
 800225e:	1e78      	subs	r0, r7, #1
 8002260:	4187      	sbcs	r7, r0
 8002262:	40d1      	lsrs	r1, r2
 8002264:	4334      	orrs	r4, r6
 8002266:	433c      	orrs	r4, r7
 8002268:	448c      	add	ip, r1
 800226a:	e7a4      	b.n	80021b6 <__aeabi_dsub+0x41a>
 800226c:	4a80      	ldr	r2, [pc, #512]	; (8002470 <__aeabi_dsub+0x6d4>)
 800226e:	4290      	cmp	r0, r2
 8002270:	d100      	bne.n	8002274 <__aeabi_dsub+0x4d8>
 8002272:	e0e9      	b.n	8002448 <__aeabi_dsub+0x6ac>
 8002274:	19df      	adds	r7, r3, r7
 8002276:	429f      	cmp	r7, r3
 8002278:	419b      	sbcs	r3, r3
 800227a:	4461      	add	r1, ip
 800227c:	425b      	negs	r3, r3
 800227e:	18c9      	adds	r1, r1, r3
 8002280:	07cc      	lsls	r4, r1, #31
 8002282:	087f      	lsrs	r7, r7, #1
 8002284:	084b      	lsrs	r3, r1, #1
 8002286:	4699      	mov	r9, r3
 8002288:	4680      	mov	r8, r0
 800228a:	433c      	orrs	r4, r7
 800228c:	e6f4      	b.n	8002078 <__aeabi_dsub+0x2dc>
 800228e:	1afc      	subs	r4, r7, r3
 8002290:	42a7      	cmp	r7, r4
 8002292:	41bf      	sbcs	r7, r7
 8002294:	4663      	mov	r3, ip
 8002296:	427f      	negs	r7, r7
 8002298:	1ac9      	subs	r1, r1, r3
 800229a:	1bcb      	subs	r3, r1, r7
 800229c:	4699      	mov	r9, r3
 800229e:	465d      	mov	r5, fp
 80022a0:	e5d5      	b.n	8001e4e <__aeabi_dsub+0xb2>
 80022a2:	08ff      	lsrs	r7, r7, #3
 80022a4:	074b      	lsls	r3, r1, #29
 80022a6:	465d      	mov	r5, fp
 80022a8:	433b      	orrs	r3, r7
 80022aa:	08cc      	lsrs	r4, r1, #3
 80022ac:	e6ee      	b.n	800208c <__aeabi_dsub+0x2f0>
 80022ae:	4662      	mov	r2, ip
 80022b0:	431a      	orrs	r2, r3
 80022b2:	d000      	beq.n	80022b6 <__aeabi_dsub+0x51a>
 80022b4:	e082      	b.n	80023bc <__aeabi_dsub+0x620>
 80022b6:	000b      	movs	r3, r1
 80022b8:	433b      	orrs	r3, r7
 80022ba:	d11b      	bne.n	80022f4 <__aeabi_dsub+0x558>
 80022bc:	2480      	movs	r4, #128	; 0x80
 80022be:	2500      	movs	r5, #0
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e6f9      	b.n	80020b8 <__aeabi_dsub+0x31c>
 80022c4:	19dc      	adds	r4, r3, r7
 80022c6:	429c      	cmp	r4, r3
 80022c8:	419b      	sbcs	r3, r3
 80022ca:	4461      	add	r1, ip
 80022cc:	4689      	mov	r9, r1
 80022ce:	425b      	negs	r3, r3
 80022d0:	4499      	add	r9, r3
 80022d2:	464b      	mov	r3, r9
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	d444      	bmi.n	8002362 <__aeabi_dsub+0x5c6>
 80022d8:	2301      	movs	r3, #1
 80022da:	4698      	mov	r8, r3
 80022dc:	e6cc      	b.n	8002078 <__aeabi_dsub+0x2dc>
 80022de:	1bdc      	subs	r4, r3, r7
 80022e0:	4662      	mov	r2, ip
 80022e2:	42a3      	cmp	r3, r4
 80022e4:	419b      	sbcs	r3, r3
 80022e6:	1a51      	subs	r1, r2, r1
 80022e8:	425b      	negs	r3, r3
 80022ea:	1acb      	subs	r3, r1, r3
 80022ec:	4699      	mov	r9, r3
 80022ee:	2301      	movs	r3, #1
 80022f0:	4698      	mov	r8, r3
 80022f2:	e5a4      	b.n	8001e3e <__aeabi_dsub+0xa2>
 80022f4:	08ff      	lsrs	r7, r7, #3
 80022f6:	074b      	lsls	r3, r1, #29
 80022f8:	465d      	mov	r5, fp
 80022fa:	433b      	orrs	r3, r7
 80022fc:	08cc      	lsrs	r4, r1, #3
 80022fe:	e6d7      	b.n	80020b0 <__aeabi_dsub+0x314>
 8002300:	4662      	mov	r2, ip
 8002302:	431a      	orrs	r2, r3
 8002304:	0014      	movs	r4, r2
 8002306:	1e63      	subs	r3, r4, #1
 8002308:	419c      	sbcs	r4, r3
 800230a:	e679      	b.n	8002000 <__aeabi_dsub+0x264>
 800230c:	0015      	movs	r5, r2
 800230e:	4664      	mov	r4, ip
 8002310:	3d20      	subs	r5, #32
 8002312:	40ec      	lsrs	r4, r5
 8002314:	46a0      	mov	r8, r4
 8002316:	2a20      	cmp	r2, #32
 8002318:	d005      	beq.n	8002326 <__aeabi_dsub+0x58a>
 800231a:	2540      	movs	r5, #64	; 0x40
 800231c:	4664      	mov	r4, ip
 800231e:	1aaa      	subs	r2, r5, r2
 8002320:	4094      	lsls	r4, r2
 8002322:	4323      	orrs	r3, r4
 8002324:	469a      	mov	sl, r3
 8002326:	4654      	mov	r4, sl
 8002328:	1e63      	subs	r3, r4, #1
 800232a:	419c      	sbcs	r4, r3
 800232c:	4643      	mov	r3, r8
 800232e:	4323      	orrs	r3, r4
 8002330:	e773      	b.n	800221a <__aeabi_dsub+0x47e>
 8002332:	4662      	mov	r2, ip
 8002334:	431a      	orrs	r2, r3
 8002336:	d023      	beq.n	8002380 <__aeabi_dsub+0x5e4>
 8002338:	000a      	movs	r2, r1
 800233a:	433a      	orrs	r2, r7
 800233c:	d000      	beq.n	8002340 <__aeabi_dsub+0x5a4>
 800233e:	e0a0      	b.n	8002482 <__aeabi_dsub+0x6e6>
 8002340:	4662      	mov	r2, ip
 8002342:	08db      	lsrs	r3, r3, #3
 8002344:	0752      	lsls	r2, r2, #29
 8002346:	4313      	orrs	r3, r2
 8002348:	4662      	mov	r2, ip
 800234a:	08d4      	lsrs	r4, r2, #3
 800234c:	e6b0      	b.n	80020b0 <__aeabi_dsub+0x314>
 800234e:	000b      	movs	r3, r1
 8002350:	433b      	orrs	r3, r7
 8002352:	d100      	bne.n	8002356 <__aeabi_dsub+0x5ba>
 8002354:	e728      	b.n	80021a8 <__aeabi_dsub+0x40c>
 8002356:	08ff      	lsrs	r7, r7, #3
 8002358:	074b      	lsls	r3, r1, #29
 800235a:	465d      	mov	r5, fp
 800235c:	433b      	orrs	r3, r7
 800235e:	08cc      	lsrs	r4, r1, #3
 8002360:	e697      	b.n	8002092 <__aeabi_dsub+0x2f6>
 8002362:	2302      	movs	r3, #2
 8002364:	4698      	mov	r8, r3
 8002366:	e736      	b.n	80021d6 <__aeabi_dsub+0x43a>
 8002368:	1afc      	subs	r4, r7, r3
 800236a:	42a7      	cmp	r7, r4
 800236c:	41bf      	sbcs	r7, r7
 800236e:	4663      	mov	r3, ip
 8002370:	427f      	negs	r7, r7
 8002372:	1ac9      	subs	r1, r1, r3
 8002374:	1bcb      	subs	r3, r1, r7
 8002376:	4699      	mov	r9, r3
 8002378:	2301      	movs	r3, #1
 800237a:	465d      	mov	r5, fp
 800237c:	4698      	mov	r8, r3
 800237e:	e55e      	b.n	8001e3e <__aeabi_dsub+0xa2>
 8002380:	074b      	lsls	r3, r1, #29
 8002382:	08ff      	lsrs	r7, r7, #3
 8002384:	433b      	orrs	r3, r7
 8002386:	08cc      	lsrs	r4, r1, #3
 8002388:	e692      	b.n	80020b0 <__aeabi_dsub+0x314>
 800238a:	1bdc      	subs	r4, r3, r7
 800238c:	4660      	mov	r0, ip
 800238e:	42a3      	cmp	r3, r4
 8002390:	41b6      	sbcs	r6, r6
 8002392:	1a40      	subs	r0, r0, r1
 8002394:	4276      	negs	r6, r6
 8002396:	1b80      	subs	r0, r0, r6
 8002398:	4681      	mov	r9, r0
 800239a:	0200      	lsls	r0, r0, #8
 800239c:	d560      	bpl.n	8002460 <__aeabi_dsub+0x6c4>
 800239e:	1afc      	subs	r4, r7, r3
 80023a0:	42a7      	cmp	r7, r4
 80023a2:	41bf      	sbcs	r7, r7
 80023a4:	4663      	mov	r3, ip
 80023a6:	427f      	negs	r7, r7
 80023a8:	1ac9      	subs	r1, r1, r3
 80023aa:	1bcb      	subs	r3, r1, r7
 80023ac:	4699      	mov	r9, r3
 80023ae:	465d      	mov	r5, fp
 80023b0:	e576      	b.n	8001ea0 <__aeabi_dsub+0x104>
 80023b2:	08ff      	lsrs	r7, r7, #3
 80023b4:	074b      	lsls	r3, r1, #29
 80023b6:	433b      	orrs	r3, r7
 80023b8:	08cc      	lsrs	r4, r1, #3
 80023ba:	e667      	b.n	800208c <__aeabi_dsub+0x2f0>
 80023bc:	000a      	movs	r2, r1
 80023be:	08db      	lsrs	r3, r3, #3
 80023c0:	433a      	orrs	r2, r7
 80023c2:	d100      	bne.n	80023c6 <__aeabi_dsub+0x62a>
 80023c4:	e66f      	b.n	80020a6 <__aeabi_dsub+0x30a>
 80023c6:	4662      	mov	r2, ip
 80023c8:	0752      	lsls	r2, r2, #29
 80023ca:	4313      	orrs	r3, r2
 80023cc:	4662      	mov	r2, ip
 80023ce:	08d4      	lsrs	r4, r2, #3
 80023d0:	2280      	movs	r2, #128	; 0x80
 80023d2:	0312      	lsls	r2, r2, #12
 80023d4:	4214      	tst	r4, r2
 80023d6:	d007      	beq.n	80023e8 <__aeabi_dsub+0x64c>
 80023d8:	08c8      	lsrs	r0, r1, #3
 80023da:	4210      	tst	r0, r2
 80023dc:	d104      	bne.n	80023e8 <__aeabi_dsub+0x64c>
 80023de:	465d      	mov	r5, fp
 80023e0:	0004      	movs	r4, r0
 80023e2:	08fb      	lsrs	r3, r7, #3
 80023e4:	0749      	lsls	r1, r1, #29
 80023e6:	430b      	orrs	r3, r1
 80023e8:	0f5a      	lsrs	r2, r3, #29
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	08db      	lsrs	r3, r3, #3
 80023ee:	0752      	lsls	r2, r2, #29
 80023f0:	4313      	orrs	r3, r2
 80023f2:	e65d      	b.n	80020b0 <__aeabi_dsub+0x314>
 80023f4:	074b      	lsls	r3, r1, #29
 80023f6:	08ff      	lsrs	r7, r7, #3
 80023f8:	433b      	orrs	r3, r7
 80023fa:	08cc      	lsrs	r4, r1, #3
 80023fc:	e649      	b.n	8002092 <__aeabi_dsub+0x2f6>
 80023fe:	19dc      	adds	r4, r3, r7
 8002400:	429c      	cmp	r4, r3
 8002402:	419b      	sbcs	r3, r3
 8002404:	4461      	add	r1, ip
 8002406:	4689      	mov	r9, r1
 8002408:	425b      	negs	r3, r3
 800240a:	4499      	add	r9, r3
 800240c:	464b      	mov	r3, r9
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	d400      	bmi.n	8002414 <__aeabi_dsub+0x678>
 8002412:	e631      	b.n	8002078 <__aeabi_dsub+0x2dc>
 8002414:	464a      	mov	r2, r9
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <__aeabi_dsub+0x6d8>)
 8002418:	401a      	ands	r2, r3
 800241a:	2301      	movs	r3, #1
 800241c:	4691      	mov	r9, r2
 800241e:	4698      	mov	r8, r3
 8002420:	e62a      	b.n	8002078 <__aeabi_dsub+0x2dc>
 8002422:	0016      	movs	r6, r2
 8002424:	4664      	mov	r4, ip
 8002426:	3e20      	subs	r6, #32
 8002428:	40f4      	lsrs	r4, r6
 800242a:	46a0      	mov	r8, r4
 800242c:	2a20      	cmp	r2, #32
 800242e:	d005      	beq.n	800243c <__aeabi_dsub+0x6a0>
 8002430:	2640      	movs	r6, #64	; 0x40
 8002432:	4664      	mov	r4, ip
 8002434:	1ab2      	subs	r2, r6, r2
 8002436:	4094      	lsls	r4, r2
 8002438:	4323      	orrs	r3, r4
 800243a:	469a      	mov	sl, r3
 800243c:	4654      	mov	r4, sl
 800243e:	1e63      	subs	r3, r4, #1
 8002440:	419c      	sbcs	r4, r3
 8002442:	4643      	mov	r3, r8
 8002444:	431c      	orrs	r4, r3
 8002446:	e5db      	b.n	8002000 <__aeabi_dsub+0x264>
 8002448:	0002      	movs	r2, r0
 800244a:	2400      	movs	r4, #0
 800244c:	2300      	movs	r3, #0
 800244e:	e548      	b.n	8001ee2 <__aeabi_dsub+0x146>
 8002450:	19dc      	adds	r4, r3, r7
 8002452:	42bc      	cmp	r4, r7
 8002454:	41bf      	sbcs	r7, r7
 8002456:	4461      	add	r1, ip
 8002458:	4689      	mov	r9, r1
 800245a:	427f      	negs	r7, r7
 800245c:	44b9      	add	r9, r7
 800245e:	e738      	b.n	80022d2 <__aeabi_dsub+0x536>
 8002460:	464b      	mov	r3, r9
 8002462:	4323      	orrs	r3, r4
 8002464:	d100      	bne.n	8002468 <__aeabi_dsub+0x6cc>
 8002466:	e69f      	b.n	80021a8 <__aeabi_dsub+0x40c>
 8002468:	e606      	b.n	8002078 <__aeabi_dsub+0x2dc>
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	000007fe 	.word	0x000007fe
 8002470:	000007ff 	.word	0x000007ff
 8002474:	ff7fffff 	.word	0xff7fffff
 8002478:	08ff      	lsrs	r7, r7, #3
 800247a:	074b      	lsls	r3, r1, #29
 800247c:	433b      	orrs	r3, r7
 800247e:	08cc      	lsrs	r4, r1, #3
 8002480:	e616      	b.n	80020b0 <__aeabi_dsub+0x314>
 8002482:	4662      	mov	r2, ip
 8002484:	08db      	lsrs	r3, r3, #3
 8002486:	0752      	lsls	r2, r2, #29
 8002488:	4313      	orrs	r3, r2
 800248a:	4662      	mov	r2, ip
 800248c:	08d4      	lsrs	r4, r2, #3
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	0312      	lsls	r2, r2, #12
 8002492:	4214      	tst	r4, r2
 8002494:	d007      	beq.n	80024a6 <__aeabi_dsub+0x70a>
 8002496:	08c8      	lsrs	r0, r1, #3
 8002498:	4210      	tst	r0, r2
 800249a:	d104      	bne.n	80024a6 <__aeabi_dsub+0x70a>
 800249c:	465d      	mov	r5, fp
 800249e:	0004      	movs	r4, r0
 80024a0:	08fb      	lsrs	r3, r7, #3
 80024a2:	0749      	lsls	r1, r1, #29
 80024a4:	430b      	orrs	r3, r1
 80024a6:	0f5a      	lsrs	r2, r3, #29
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	0752      	lsls	r2, r2, #29
 80024ac:	08db      	lsrs	r3, r3, #3
 80024ae:	4313      	orrs	r3, r2
 80024b0:	e5fe      	b.n	80020b0 <__aeabi_dsub+0x314>
 80024b2:	2300      	movs	r3, #0
 80024b4:	4a01      	ldr	r2, [pc, #4]	; (80024bc <__aeabi_dsub+0x720>)
 80024b6:	001c      	movs	r4, r3
 80024b8:	e513      	b.n	8001ee2 <__aeabi_dsub+0x146>
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	000007ff 	.word	0x000007ff

080024c0 <__aeabi_dcmpun>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	0005      	movs	r5, r0
 80024c4:	480c      	ldr	r0, [pc, #48]	; (80024f8 <__aeabi_dcmpun+0x38>)
 80024c6:	031c      	lsls	r4, r3, #12
 80024c8:	0016      	movs	r6, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	030a      	lsls	r2, r1, #12
 80024ce:	0049      	lsls	r1, r1, #1
 80024d0:	0b12      	lsrs	r2, r2, #12
 80024d2:	0d49      	lsrs	r1, r1, #21
 80024d4:	0b24      	lsrs	r4, r4, #12
 80024d6:	0d5b      	lsrs	r3, r3, #21
 80024d8:	4281      	cmp	r1, r0
 80024da:	d008      	beq.n	80024ee <__aeabi_dcmpun+0x2e>
 80024dc:	4a06      	ldr	r2, [pc, #24]	; (80024f8 <__aeabi_dcmpun+0x38>)
 80024de:	2000      	movs	r0, #0
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d103      	bne.n	80024ec <__aeabi_dcmpun+0x2c>
 80024e4:	0020      	movs	r0, r4
 80024e6:	4330      	orrs	r0, r6
 80024e8:	1e43      	subs	r3, r0, #1
 80024ea:	4198      	sbcs	r0, r3
 80024ec:	bd70      	pop	{r4, r5, r6, pc}
 80024ee:	2001      	movs	r0, #1
 80024f0:	432a      	orrs	r2, r5
 80024f2:	d1fb      	bne.n	80024ec <__aeabi_dcmpun+0x2c>
 80024f4:	e7f2      	b.n	80024dc <__aeabi_dcmpun+0x1c>
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	000007ff 	.word	0x000007ff

080024fc <__aeabi_d2iz>:
 80024fc:	000a      	movs	r2, r1
 80024fe:	b530      	push	{r4, r5, lr}
 8002500:	4c13      	ldr	r4, [pc, #76]	; (8002550 <__aeabi_d2iz+0x54>)
 8002502:	0053      	lsls	r3, r2, #1
 8002504:	0309      	lsls	r1, r1, #12
 8002506:	0005      	movs	r5, r0
 8002508:	0b09      	lsrs	r1, r1, #12
 800250a:	2000      	movs	r0, #0
 800250c:	0d5b      	lsrs	r3, r3, #21
 800250e:	0fd2      	lsrs	r2, r2, #31
 8002510:	42a3      	cmp	r3, r4
 8002512:	dd04      	ble.n	800251e <__aeabi_d2iz+0x22>
 8002514:	480f      	ldr	r0, [pc, #60]	; (8002554 <__aeabi_d2iz+0x58>)
 8002516:	4283      	cmp	r3, r0
 8002518:	dd02      	ble.n	8002520 <__aeabi_d2iz+0x24>
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <__aeabi_d2iz+0x5c>)
 800251c:	18d0      	adds	r0, r2, r3
 800251e:	bd30      	pop	{r4, r5, pc}
 8002520:	2080      	movs	r0, #128	; 0x80
 8002522:	0340      	lsls	r0, r0, #13
 8002524:	4301      	orrs	r1, r0
 8002526:	480d      	ldr	r0, [pc, #52]	; (800255c <__aeabi_d2iz+0x60>)
 8002528:	1ac0      	subs	r0, r0, r3
 800252a:	281f      	cmp	r0, #31
 800252c:	dd08      	ble.n	8002540 <__aeabi_d2iz+0x44>
 800252e:	480c      	ldr	r0, [pc, #48]	; (8002560 <__aeabi_d2iz+0x64>)
 8002530:	1ac3      	subs	r3, r0, r3
 8002532:	40d9      	lsrs	r1, r3
 8002534:	000b      	movs	r3, r1
 8002536:	4258      	negs	r0, r3
 8002538:	2a00      	cmp	r2, #0
 800253a:	d1f0      	bne.n	800251e <__aeabi_d2iz+0x22>
 800253c:	0018      	movs	r0, r3
 800253e:	e7ee      	b.n	800251e <__aeabi_d2iz+0x22>
 8002540:	4c08      	ldr	r4, [pc, #32]	; (8002564 <__aeabi_d2iz+0x68>)
 8002542:	40c5      	lsrs	r5, r0
 8002544:	46a4      	mov	ip, r4
 8002546:	4463      	add	r3, ip
 8002548:	4099      	lsls	r1, r3
 800254a:	000b      	movs	r3, r1
 800254c:	432b      	orrs	r3, r5
 800254e:	e7f2      	b.n	8002536 <__aeabi_d2iz+0x3a>
 8002550:	000003fe 	.word	0x000003fe
 8002554:	0000041d 	.word	0x0000041d
 8002558:	7fffffff 	.word	0x7fffffff
 800255c:	00000433 	.word	0x00000433
 8002560:	00000413 	.word	0x00000413
 8002564:	fffffbed 	.word	0xfffffbed

08002568 <__aeabi_i2d>:
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	2800      	cmp	r0, #0
 800256c:	d016      	beq.n	800259c <__aeabi_i2d+0x34>
 800256e:	17c3      	asrs	r3, r0, #31
 8002570:	18c5      	adds	r5, r0, r3
 8002572:	405d      	eors	r5, r3
 8002574:	0fc4      	lsrs	r4, r0, #31
 8002576:	0028      	movs	r0, r5
 8002578:	f000 f91c 	bl	80027b4 <__clzsi2>
 800257c:	4a11      	ldr	r2, [pc, #68]	; (80025c4 <__aeabi_i2d+0x5c>)
 800257e:	1a12      	subs	r2, r2, r0
 8002580:	280a      	cmp	r0, #10
 8002582:	dc16      	bgt.n	80025b2 <__aeabi_i2d+0x4a>
 8002584:	0003      	movs	r3, r0
 8002586:	002e      	movs	r6, r5
 8002588:	3315      	adds	r3, #21
 800258a:	409e      	lsls	r6, r3
 800258c:	230b      	movs	r3, #11
 800258e:	1a18      	subs	r0, r3, r0
 8002590:	40c5      	lsrs	r5, r0
 8002592:	0552      	lsls	r2, r2, #21
 8002594:	032d      	lsls	r5, r5, #12
 8002596:	0b2d      	lsrs	r5, r5, #12
 8002598:	0d53      	lsrs	r3, r2, #21
 800259a:	e003      	b.n	80025a4 <__aeabi_i2d+0x3c>
 800259c:	2400      	movs	r4, #0
 800259e:	2300      	movs	r3, #0
 80025a0:	2500      	movs	r5, #0
 80025a2:	2600      	movs	r6, #0
 80025a4:	051b      	lsls	r3, r3, #20
 80025a6:	432b      	orrs	r3, r5
 80025a8:	07e4      	lsls	r4, r4, #31
 80025aa:	4323      	orrs	r3, r4
 80025ac:	0030      	movs	r0, r6
 80025ae:	0019      	movs	r1, r3
 80025b0:	bd70      	pop	{r4, r5, r6, pc}
 80025b2:	380b      	subs	r0, #11
 80025b4:	4085      	lsls	r5, r0
 80025b6:	0552      	lsls	r2, r2, #21
 80025b8:	032d      	lsls	r5, r5, #12
 80025ba:	2600      	movs	r6, #0
 80025bc:	0b2d      	lsrs	r5, r5, #12
 80025be:	0d53      	lsrs	r3, r2, #21
 80025c0:	e7f0      	b.n	80025a4 <__aeabi_i2d+0x3c>
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	0000041e 	.word	0x0000041e

080025c8 <__aeabi_ui2d>:
 80025c8:	b510      	push	{r4, lr}
 80025ca:	1e04      	subs	r4, r0, #0
 80025cc:	d010      	beq.n	80025f0 <__aeabi_ui2d+0x28>
 80025ce:	f000 f8f1 	bl	80027b4 <__clzsi2>
 80025d2:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <__aeabi_ui2d+0x48>)
 80025d4:	1a1b      	subs	r3, r3, r0
 80025d6:	280a      	cmp	r0, #10
 80025d8:	dc11      	bgt.n	80025fe <__aeabi_ui2d+0x36>
 80025da:	220b      	movs	r2, #11
 80025dc:	0021      	movs	r1, r4
 80025de:	1a12      	subs	r2, r2, r0
 80025e0:	40d1      	lsrs	r1, r2
 80025e2:	3015      	adds	r0, #21
 80025e4:	030a      	lsls	r2, r1, #12
 80025e6:	055b      	lsls	r3, r3, #21
 80025e8:	4084      	lsls	r4, r0
 80025ea:	0b12      	lsrs	r2, r2, #12
 80025ec:	0d5b      	lsrs	r3, r3, #21
 80025ee:	e001      	b.n	80025f4 <__aeabi_ui2d+0x2c>
 80025f0:	2300      	movs	r3, #0
 80025f2:	2200      	movs	r2, #0
 80025f4:	051b      	lsls	r3, r3, #20
 80025f6:	4313      	orrs	r3, r2
 80025f8:	0020      	movs	r0, r4
 80025fa:	0019      	movs	r1, r3
 80025fc:	bd10      	pop	{r4, pc}
 80025fe:	0022      	movs	r2, r4
 8002600:	380b      	subs	r0, #11
 8002602:	4082      	lsls	r2, r0
 8002604:	055b      	lsls	r3, r3, #21
 8002606:	0312      	lsls	r2, r2, #12
 8002608:	2400      	movs	r4, #0
 800260a:	0b12      	lsrs	r2, r2, #12
 800260c:	0d5b      	lsrs	r3, r3, #21
 800260e:	e7f1      	b.n	80025f4 <__aeabi_ui2d+0x2c>
 8002610:	0000041e 	.word	0x0000041e

08002614 <__aeabi_f2d>:
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	0043      	lsls	r3, r0, #1
 8002618:	0246      	lsls	r6, r0, #9
 800261a:	0fc4      	lsrs	r4, r0, #31
 800261c:	20fe      	movs	r0, #254	; 0xfe
 800261e:	0e1b      	lsrs	r3, r3, #24
 8002620:	1c59      	adds	r1, r3, #1
 8002622:	0a75      	lsrs	r5, r6, #9
 8002624:	4208      	tst	r0, r1
 8002626:	d00c      	beq.n	8002642 <__aeabi_f2d+0x2e>
 8002628:	22e0      	movs	r2, #224	; 0xe0
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	4694      	mov	ip, r2
 800262e:	076d      	lsls	r5, r5, #29
 8002630:	0b36      	lsrs	r6, r6, #12
 8002632:	4463      	add	r3, ip
 8002634:	051b      	lsls	r3, r3, #20
 8002636:	4333      	orrs	r3, r6
 8002638:	07e4      	lsls	r4, r4, #31
 800263a:	4323      	orrs	r3, r4
 800263c:	0028      	movs	r0, r5
 800263e:	0019      	movs	r1, r3
 8002640:	bd70      	pop	{r4, r5, r6, pc}
 8002642:	2b00      	cmp	r3, #0
 8002644:	d114      	bne.n	8002670 <__aeabi_f2d+0x5c>
 8002646:	2d00      	cmp	r5, #0
 8002648:	d01b      	beq.n	8002682 <__aeabi_f2d+0x6e>
 800264a:	0028      	movs	r0, r5
 800264c:	f000 f8b2 	bl	80027b4 <__clzsi2>
 8002650:	280a      	cmp	r0, #10
 8002652:	dc1c      	bgt.n	800268e <__aeabi_f2d+0x7a>
 8002654:	230b      	movs	r3, #11
 8002656:	002e      	movs	r6, r5
 8002658:	1a1b      	subs	r3, r3, r0
 800265a:	40de      	lsrs	r6, r3
 800265c:	0003      	movs	r3, r0
 800265e:	3315      	adds	r3, #21
 8002660:	409d      	lsls	r5, r3
 8002662:	4a0e      	ldr	r2, [pc, #56]	; (800269c <__aeabi_f2d+0x88>)
 8002664:	0336      	lsls	r6, r6, #12
 8002666:	1a12      	subs	r2, r2, r0
 8002668:	0552      	lsls	r2, r2, #21
 800266a:	0b36      	lsrs	r6, r6, #12
 800266c:	0d53      	lsrs	r3, r2, #21
 800266e:	e7e1      	b.n	8002634 <__aeabi_f2d+0x20>
 8002670:	2d00      	cmp	r5, #0
 8002672:	d009      	beq.n	8002688 <__aeabi_f2d+0x74>
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	0b36      	lsrs	r6, r6, #12
 8002678:	0312      	lsls	r2, r2, #12
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <__aeabi_f2d+0x8c>)
 800267c:	076d      	lsls	r5, r5, #29
 800267e:	4316      	orrs	r6, r2
 8002680:	e7d8      	b.n	8002634 <__aeabi_f2d+0x20>
 8002682:	2300      	movs	r3, #0
 8002684:	2600      	movs	r6, #0
 8002686:	e7d5      	b.n	8002634 <__aeabi_f2d+0x20>
 8002688:	2600      	movs	r6, #0
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <__aeabi_f2d+0x8c>)
 800268c:	e7d2      	b.n	8002634 <__aeabi_f2d+0x20>
 800268e:	0003      	movs	r3, r0
 8002690:	3b0b      	subs	r3, #11
 8002692:	409d      	lsls	r5, r3
 8002694:	002e      	movs	r6, r5
 8002696:	2500      	movs	r5, #0
 8002698:	e7e3      	b.n	8002662 <__aeabi_f2d+0x4e>
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	00000389 	.word	0x00000389
 80026a0:	000007ff 	.word	0x000007ff

080026a4 <__aeabi_d2f>:
 80026a4:	0002      	movs	r2, r0
 80026a6:	004b      	lsls	r3, r1, #1
 80026a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026aa:	0d5b      	lsrs	r3, r3, #21
 80026ac:	030c      	lsls	r4, r1, #12
 80026ae:	4e3d      	ldr	r6, [pc, #244]	; (80027a4 <__aeabi_d2f+0x100>)
 80026b0:	0a64      	lsrs	r4, r4, #9
 80026b2:	0f40      	lsrs	r0, r0, #29
 80026b4:	1c5f      	adds	r7, r3, #1
 80026b6:	0fc9      	lsrs	r1, r1, #31
 80026b8:	4304      	orrs	r4, r0
 80026ba:	00d5      	lsls	r5, r2, #3
 80026bc:	4237      	tst	r7, r6
 80026be:	d00a      	beq.n	80026d6 <__aeabi_d2f+0x32>
 80026c0:	4839      	ldr	r0, [pc, #228]	; (80027a8 <__aeabi_d2f+0x104>)
 80026c2:	181e      	adds	r6, r3, r0
 80026c4:	2efe      	cmp	r6, #254	; 0xfe
 80026c6:	dd16      	ble.n	80026f6 <__aeabi_d2f+0x52>
 80026c8:	20ff      	movs	r0, #255	; 0xff
 80026ca:	2400      	movs	r4, #0
 80026cc:	05c0      	lsls	r0, r0, #23
 80026ce:	4320      	orrs	r0, r4
 80026d0:	07c9      	lsls	r1, r1, #31
 80026d2:	4308      	orrs	r0, r1
 80026d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <__aeabi_d2f+0x44>
 80026da:	432c      	orrs	r4, r5
 80026dc:	d026      	beq.n	800272c <__aeabi_d2f+0x88>
 80026de:	2205      	movs	r2, #5
 80026e0:	0192      	lsls	r2, r2, #6
 80026e2:	0a54      	lsrs	r4, r2, #9
 80026e4:	b2d8      	uxtb	r0, r3
 80026e6:	e7f1      	b.n	80026cc <__aeabi_d2f+0x28>
 80026e8:	4325      	orrs	r5, r4
 80026ea:	d0ed      	beq.n	80026c8 <__aeabi_d2f+0x24>
 80026ec:	2080      	movs	r0, #128	; 0x80
 80026ee:	03c0      	lsls	r0, r0, #15
 80026f0:	4304      	orrs	r4, r0
 80026f2:	20ff      	movs	r0, #255	; 0xff
 80026f4:	e7ea      	b.n	80026cc <__aeabi_d2f+0x28>
 80026f6:	2e00      	cmp	r6, #0
 80026f8:	dd1b      	ble.n	8002732 <__aeabi_d2f+0x8e>
 80026fa:	0192      	lsls	r2, r2, #6
 80026fc:	1e53      	subs	r3, r2, #1
 80026fe:	419a      	sbcs	r2, r3
 8002700:	00e4      	lsls	r4, r4, #3
 8002702:	0f6d      	lsrs	r5, r5, #29
 8002704:	4322      	orrs	r2, r4
 8002706:	432a      	orrs	r2, r5
 8002708:	0753      	lsls	r3, r2, #29
 800270a:	d048      	beq.n	800279e <__aeabi_d2f+0xfa>
 800270c:	230f      	movs	r3, #15
 800270e:	4013      	ands	r3, r2
 8002710:	2b04      	cmp	r3, #4
 8002712:	d000      	beq.n	8002716 <__aeabi_d2f+0x72>
 8002714:	3204      	adds	r2, #4
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	04db      	lsls	r3, r3, #19
 800271a:	4013      	ands	r3, r2
 800271c:	d03f      	beq.n	800279e <__aeabi_d2f+0xfa>
 800271e:	1c70      	adds	r0, r6, #1
 8002720:	2efe      	cmp	r6, #254	; 0xfe
 8002722:	d0d1      	beq.n	80026c8 <__aeabi_d2f+0x24>
 8002724:	0192      	lsls	r2, r2, #6
 8002726:	0a54      	lsrs	r4, r2, #9
 8002728:	b2c0      	uxtb	r0, r0
 800272a:	e7cf      	b.n	80026cc <__aeabi_d2f+0x28>
 800272c:	2000      	movs	r0, #0
 800272e:	2400      	movs	r4, #0
 8002730:	e7cc      	b.n	80026cc <__aeabi_d2f+0x28>
 8002732:	0032      	movs	r2, r6
 8002734:	3217      	adds	r2, #23
 8002736:	db22      	blt.n	800277e <__aeabi_d2f+0xda>
 8002738:	2080      	movs	r0, #128	; 0x80
 800273a:	0400      	lsls	r0, r0, #16
 800273c:	4320      	orrs	r0, r4
 800273e:	241e      	movs	r4, #30
 8002740:	1ba4      	subs	r4, r4, r6
 8002742:	2c1f      	cmp	r4, #31
 8002744:	dd1d      	ble.n	8002782 <__aeabi_d2f+0xde>
 8002746:	2202      	movs	r2, #2
 8002748:	4252      	negs	r2, r2
 800274a:	1b96      	subs	r6, r2, r6
 800274c:	0002      	movs	r2, r0
 800274e:	40f2      	lsrs	r2, r6
 8002750:	0016      	movs	r6, r2
 8002752:	2c20      	cmp	r4, #32
 8002754:	d004      	beq.n	8002760 <__aeabi_d2f+0xbc>
 8002756:	4a15      	ldr	r2, [pc, #84]	; (80027ac <__aeabi_d2f+0x108>)
 8002758:	4694      	mov	ip, r2
 800275a:	4463      	add	r3, ip
 800275c:	4098      	lsls	r0, r3
 800275e:	4305      	orrs	r5, r0
 8002760:	002a      	movs	r2, r5
 8002762:	1e53      	subs	r3, r2, #1
 8002764:	419a      	sbcs	r2, r3
 8002766:	4332      	orrs	r2, r6
 8002768:	2600      	movs	r6, #0
 800276a:	0753      	lsls	r3, r2, #29
 800276c:	d1ce      	bne.n	800270c <__aeabi_d2f+0x68>
 800276e:	2480      	movs	r4, #128	; 0x80
 8002770:	0013      	movs	r3, r2
 8002772:	04e4      	lsls	r4, r4, #19
 8002774:	2001      	movs	r0, #1
 8002776:	4023      	ands	r3, r4
 8002778:	4222      	tst	r2, r4
 800277a:	d1d3      	bne.n	8002724 <__aeabi_d2f+0x80>
 800277c:	e7b0      	b.n	80026e0 <__aeabi_d2f+0x3c>
 800277e:	2300      	movs	r3, #0
 8002780:	e7ad      	b.n	80026de <__aeabi_d2f+0x3a>
 8002782:	4a0b      	ldr	r2, [pc, #44]	; (80027b0 <__aeabi_d2f+0x10c>)
 8002784:	4694      	mov	ip, r2
 8002786:	002a      	movs	r2, r5
 8002788:	40e2      	lsrs	r2, r4
 800278a:	0014      	movs	r4, r2
 800278c:	002a      	movs	r2, r5
 800278e:	4463      	add	r3, ip
 8002790:	409a      	lsls	r2, r3
 8002792:	4098      	lsls	r0, r3
 8002794:	1e55      	subs	r5, r2, #1
 8002796:	41aa      	sbcs	r2, r5
 8002798:	4302      	orrs	r2, r0
 800279a:	4322      	orrs	r2, r4
 800279c:	e7e4      	b.n	8002768 <__aeabi_d2f+0xc4>
 800279e:	0033      	movs	r3, r6
 80027a0:	e79e      	b.n	80026e0 <__aeabi_d2f+0x3c>
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	000007fe 	.word	0x000007fe
 80027a8:	fffffc80 	.word	0xfffffc80
 80027ac:	fffffca2 	.word	0xfffffca2
 80027b0:	fffffc82 	.word	0xfffffc82

080027b4 <__clzsi2>:
 80027b4:	211c      	movs	r1, #28
 80027b6:	2301      	movs	r3, #1
 80027b8:	041b      	lsls	r3, r3, #16
 80027ba:	4298      	cmp	r0, r3
 80027bc:	d301      	bcc.n	80027c2 <__clzsi2+0xe>
 80027be:	0c00      	lsrs	r0, r0, #16
 80027c0:	3910      	subs	r1, #16
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	4298      	cmp	r0, r3
 80027c6:	d301      	bcc.n	80027cc <__clzsi2+0x18>
 80027c8:	0a00      	lsrs	r0, r0, #8
 80027ca:	3908      	subs	r1, #8
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	4298      	cmp	r0, r3
 80027d0:	d301      	bcc.n	80027d6 <__clzsi2+0x22>
 80027d2:	0900      	lsrs	r0, r0, #4
 80027d4:	3904      	subs	r1, #4
 80027d6:	a202      	add	r2, pc, #8	; (adr r2, 80027e0 <__clzsi2+0x2c>)
 80027d8:	5c10      	ldrb	r0, [r2, r0]
 80027da:	1840      	adds	r0, r0, r1
 80027dc:	4770      	bx	lr
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	02020304 	.word	0x02020304
 80027e4:	01010101 	.word	0x01010101
	...

080027f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027f0:	b5b0      	push	{r4, r5, r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027f6:	f001 f855 	bl	80038a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027fa:	f000 f8b1 	bl	8002960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027fe:	f000 fac5 	bl	8002d8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002802:	f000 fa93 	bl	8002d2c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002806:	f000 f8f7 	bl	80029f8 <MX_SPI1_Init>
  MX_TIM3_Init();
 800280a:	f000 f997 	bl	8002b3c <MX_TIM3_Init>
  MX_TIM14_Init();
 800280e:	f000 fa3d 	bl	8002c8c <MX_TIM14_Init>
  MX_TIM1_Init();
 8002812:	f000 f92f 	bl	8002a74 <MX_TIM1_Init>
  MX_TIM6_Init();
 8002816:	f000 f9f5 	bl	8002c04 <MX_TIM6_Init>
  MX_TIM7_Init();
 800281a:	f000 fa15 	bl	8002c48 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800281e:	4b42      	ldr	r3, [pc, #264]	; (8002928 <main+0x138>)
 8002820:	2100      	movs	r1, #0
 8002822:	0018      	movs	r0, r3
 8002824:	f002 fab8 	bl	8004d98 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8002828:	4b40      	ldr	r3, [pc, #256]	; (800292c <main+0x13c>)
 800282a:	213c      	movs	r1, #60	; 0x3c
 800282c:	0018      	movs	r0, r3
 800282e:	f002 fc0d 	bl	800504c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8002832:	4b3f      	ldr	r3, [pc, #252]	; (8002930 <main+0x140>)
 8002834:	0018      	movs	r0, r3
 8002836:	f002 fa0b 	bl	8004c50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800283a:	4b3e      	ldr	r3, [pc, #248]	; (8002934 <main+0x144>)
 800283c:	0018      	movs	r0, r3
 800283e:	f002 fa07 	bl	8004c50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8002842:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <main+0x148>)
 8002844:	0018      	movs	r0, r3
 8002846:	f002 fa03 	bl	8004c50 <HAL_TIM_Base_Start_IT>
  motInit(0);
 800284a:	2000      	movs	r0, #0
 800284c:	f000 fb80 	bl	8002f50 <motInit>
  /* USER CODE BEGIN WHILE */
  while (1){
	static uint8_t x = 0;
	static uint32_t timer = 0;
	static float targetVel = 0;
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	019b      	lsls	r3, r3, #6
 8002854:	4a39      	ldr	r2, [pc, #228]	; (800293c <main+0x14c>)
 8002856:	0019      	movs	r1, r3
 8002858:	0010      	movs	r0, r2
 800285a:	f001 fb1b 	bl	8003e94 <HAL_GPIO_ReadPin>
 800285e:	1e03      	subs	r3, r0, #0
 8002860:	d13e      	bne.n	80028e0 <main+0xf0>
		if(HAL_GetTick() > timer){
 8002862:	f001 f879 	bl	8003958 <HAL_GetTick>
 8002866:	0002      	movs	r2, r0
 8002868:	4b35      	ldr	r3, [pc, #212]	; (8002940 <main+0x150>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d937      	bls.n	80028e0 <main+0xf0>
			if(x == 0) targetVel = 64000;
 8002870:	4b34      	ldr	r3, [pc, #208]	; (8002944 <main+0x154>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d103      	bne.n	8002880 <main+0x90>
 8002878:	4b33      	ldr	r3, [pc, #204]	; (8002948 <main+0x158>)
 800287a:	4a34      	ldr	r2, [pc, #208]	; (800294c <main+0x15c>)
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e016      	b.n	80028ae <main+0xbe>
			else if(x == 1) targetVel = 0;
 8002880:	4b30      	ldr	r3, [pc, #192]	; (8002944 <main+0x154>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d103      	bne.n	8002890 <main+0xa0>
 8002888:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <main+0x158>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e00e      	b.n	80028ae <main+0xbe>
			else if(x == 2) targetVel = -64000;
 8002890:	4b2c      	ldr	r3, [pc, #176]	; (8002944 <main+0x154>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d103      	bne.n	80028a0 <main+0xb0>
 8002898:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <main+0x158>)
 800289a:	4a2d      	ldr	r2, [pc, #180]	; (8002950 <main+0x160>)
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e006      	b.n	80028ae <main+0xbe>
			else if(x == 3) targetVel = 0;
 80028a0:	4b28      	ldr	r3, [pc, #160]	; (8002944 <main+0x154>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d102      	bne.n	80028ae <main+0xbe>
 80028a8:	4b27      	ldr	r3, [pc, #156]	; (8002948 <main+0x158>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
			motSetTargetVelocity(targetVel);
 80028ae:	4b26      	ldr	r3, [pc, #152]	; (8002948 <main+0x158>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	1c18      	adds	r0, r3, #0
 80028b4:	f000 fbbe 	bl	8003034 <motSetTargetVelocity>
			x = (x == 4) ? 0 : x+1;
 80028b8:	4b22      	ldr	r3, [pc, #136]	; (8002944 <main+0x154>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d004      	beq.n	80028ca <main+0xda>
 80028c0:	4b20      	ldr	r3, [pc, #128]	; (8002944 <main+0x154>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	e000      	b.n	80028cc <main+0xdc>
 80028ca:	2200      	movs	r2, #0
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <main+0x154>)
 80028ce:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick() + 500;
 80028d0:	f001 f842 	bl	8003958 <HAL_GetTick>
 80028d4:	0003      	movs	r3, r0
 80028d6:	33f5      	adds	r3, #245	; 0xf5
 80028d8:	33ff      	adds	r3, #255	; 0xff
 80028da:	001a      	movs	r2, r3
 80028dc:	4b18      	ldr	r3, [pc, #96]	; (8002940 <main+0x150>)
 80028de:	601a      	str	r2, [r3, #0]
		}
	}
    sprintf(printf_buf, "target(RPM:%f,vel(RPM):%f\n", targetVel, motGetVelocity());
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <main+0x158>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	1c18      	adds	r0, r3, #0
 80028e6:	f7ff fe95 	bl	8002614 <__aeabi_f2d>
 80028ea:	0004      	movs	r4, r0
 80028ec:	000d      	movs	r5, r1
 80028ee:	f000 fb5b 	bl	8002fa8 <motGetVelocity>
 80028f2:	1c03      	adds	r3, r0, #0
 80028f4:	1c18      	adds	r0, r3, #0
 80028f6:	f7ff fe8d 	bl	8002614 <__aeabi_f2d>
 80028fa:	0002      	movs	r2, r0
 80028fc:	000b      	movs	r3, r1
 80028fe:	4915      	ldr	r1, [pc, #84]	; (8002954 <main+0x164>)
 8002900:	4815      	ldr	r0, [pc, #84]	; (8002958 <main+0x168>)
 8002902:	9200      	str	r2, [sp, #0]
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	0022      	movs	r2, r4
 8002908:	002b      	movs	r3, r5
 800290a:	f004 fbcb 	bl	80070a4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)printf_buf, strlen(printf_buf), 1000);
 800290e:	4b12      	ldr	r3, [pc, #72]	; (8002958 <main+0x168>)
 8002910:	0018      	movs	r0, r3
 8002912:	f7fd fbf9 	bl	8000108 <strlen>
 8002916:	0003      	movs	r3, r0
 8002918:	b29a      	uxth	r2, r3
 800291a:	23fa      	movs	r3, #250	; 0xfa
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	490e      	ldr	r1, [pc, #56]	; (8002958 <main+0x168>)
 8002920:	480e      	ldr	r0, [pc, #56]	; (800295c <main+0x16c>)
 8002922:	f003 fafd 	bl	8005f20 <HAL_UART_Transmit>
  while (1){
 8002926:	e793      	b.n	8002850 <main+0x60>
 8002928:	200003b4 	.word	0x200003b4
 800292c:	200002dc 	.word	0x200002dc
 8002930:	20000294 	.word	0x20000294
 8002934:	20000324 	.word	0x20000324
 8002938:	2000036c 	.word	0x2000036c
 800293c:	48000800 	.word	0x48000800
 8002940:	20000584 	.word	0x20000584
 8002944:	20000588 	.word	0x20000588
 8002948:	2000058c 	.word	0x2000058c
 800294c:	477a0000 	.word	0x477a0000
 8002950:	c77a0000 	.word	0xc77a0000
 8002954:	08009718 	.word	0x08009718
 8002958:	20000484 	.word	0x20000484
 800295c:	200003fc 	.word	0x200003fc

08002960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b091      	sub	sp, #68	; 0x44
 8002964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002966:	2410      	movs	r4, #16
 8002968:	193b      	adds	r3, r7, r4
 800296a:	0018      	movs	r0, r3
 800296c:	2330      	movs	r3, #48	; 0x30
 800296e:	001a      	movs	r2, r3
 8002970:	2100      	movs	r1, #0
 8002972:	f003 ff21 	bl	80067b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002976:	003b      	movs	r3, r7
 8002978:	0018      	movs	r0, r3
 800297a:	2310      	movs	r3, #16
 800297c:	001a      	movs	r2, r3
 800297e:	2100      	movs	r1, #0
 8002980:	f003 ff1a 	bl	80067b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002984:	0021      	movs	r1, r4
 8002986:	187b      	adds	r3, r7, r1
 8002988:	2202      	movs	r2, #2
 800298a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800298c:	187b      	adds	r3, r7, r1
 800298e:	2201      	movs	r2, #1
 8002990:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002992:	187b      	adds	r3, r7, r1
 8002994:	2210      	movs	r2, #16
 8002996:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002998:	187b      	adds	r3, r7, r1
 800299a:	2202      	movs	r2, #2
 800299c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800299e:	187b      	adds	r3, r7, r1
 80029a0:	2280      	movs	r2, #128	; 0x80
 80029a2:	0212      	lsls	r2, r2, #8
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	0352      	lsls	r2, r2, #13
 80029ac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	2200      	movs	r2, #0
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	0018      	movs	r0, r3
 80029b8:	f001 fac2 	bl	8003f40 <HAL_RCC_OscConfig>
 80029bc:	1e03      	subs	r3, r0, #0
 80029be:	d001      	beq.n	80029c4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80029c0:	f000 fac1 	bl	8002f46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029c4:	003b      	movs	r3, r7
 80029c6:	2207      	movs	r2, #7
 80029c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ca:	003b      	movs	r3, r7
 80029cc:	2202      	movs	r2, #2
 80029ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029d0:	003b      	movs	r3, r7
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029d6:	003b      	movs	r3, r7
 80029d8:	2200      	movs	r2, #0
 80029da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029dc:	003b      	movs	r3, r7
 80029de:	2101      	movs	r1, #1
 80029e0:	0018      	movs	r0, r3
 80029e2:	f001 fdcb 	bl	800457c <HAL_RCC_ClockConfig>
 80029e6:	1e03      	subs	r3, r0, #0
 80029e8:	d001      	beq.n	80029ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80029ea:	f000 faac 	bl	8002f46 <Error_Handler>
  }
}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b011      	add	sp, #68	; 0x44
 80029f4:	bd90      	pop	{r4, r7, pc}
	...

080029f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <MX_SPI1_Init+0x74>)
 80029fe:	4a1c      	ldr	r2, [pc, #112]	; (8002a70 <MX_SPI1_Init+0x78>)
 8002a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a04:	2282      	movs	r2, #130	; 0x82
 8002a06:	0052      	lsls	r2, r2, #1
 8002a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a0a:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002a10:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a12:	22c0      	movs	r2, #192	; 0xc0
 8002a14:	0092      	lsls	r2, r2, #2
 8002a16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	0092      	lsls	r2, r2, #2
 8002a2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a2e:	2210      	movs	r2, #16
 8002a30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a32:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a46:	2207      	movs	r2, #7
 8002a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a52:	2208      	movs	r2, #8
 8002a54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f001 fed5 	bl	8004808 <HAL_SPI_Init>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d001      	beq.n	8002a66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a62:	f000 fa70 	bl	8002f46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000230 	.word	0x20000230
 8002a70:	40013000 	.word	0x40013000

08002a74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	0018      	movs	r0, r3
 8002a80:	2314      	movs	r3, #20
 8002a82:	001a      	movs	r2, r3
 8002a84:	2100      	movs	r1, #0
 8002a86:	f003 fe97 	bl	80067b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	2308      	movs	r3, #8
 8002a90:	001a      	movs	r2, r3
 8002a92:	2100      	movs	r1, #0
 8002a94:	f003 fe90 	bl	80067b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a98:	4b25      	ldr	r3, [pc, #148]	; (8002b30 <MX_TIM1_Init+0xbc>)
 8002a9a:	4a26      	ldr	r2, [pc, #152]	; (8002b34 <MX_TIM1_Init+0xc0>)
 8002a9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a9e:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <MX_TIM1_Init+0xbc>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa4:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <MX_TIM1_Init+0xbc>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002aaa:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <MX_TIM1_Init+0xbc>)
 8002aac:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <MX_TIM1_Init+0xc4>)
 8002aae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab0:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <MX_TIM1_Init+0xbc>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <MX_TIM1_Init+0xbc>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002abc:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <MX_TIM1_Init+0xbc>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <MX_TIM1_Init+0xbc>)
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f002 f873 	bl	8004bb0 <HAL_TIM_Base_Init>
 8002aca:	1e03      	subs	r3, r0, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8002ace:	f000 fa3a 	bl	8002f46 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002ad2:	210c      	movs	r1, #12
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	2207      	movs	r2, #7
 8002ad8:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2270      	movs	r2, #112	; 0x70
 8002ade:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	2200      	movs	r2, #0
 8002aea:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	2200      	movs	r2, #0
 8002af0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002af2:	187a      	adds	r2, r7, r1
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <MX_TIM1_Init+0xbc>)
 8002af6:	0011      	movs	r1, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f002 fd47 	bl	800558c <HAL_TIM_SlaveConfigSynchro>
 8002afe:	1e03      	subs	r3, r0, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002b02:	f000 fa20 	bl	8002f46 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	2200      	movs	r2, #0
 8002b10:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b12:	1d3a      	adds	r2, r7, #4
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <MX_TIM1_Init+0xbc>)
 8002b16:	0011      	movs	r1, r2
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f003 f945 	bl	8005da8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d001      	beq.n	8002b26 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8002b22:	f000 fa10 	bl	8002f46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b008      	add	sp, #32
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	20000294 	.word	0x20000294
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	0000ffff 	.word	0x0000ffff

08002b3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b08d      	sub	sp, #52	; 0x34
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b42:	240c      	movs	r4, #12
 8002b44:	193b      	adds	r3, r7, r4
 8002b46:	0018      	movs	r0, r3
 8002b48:	2324      	movs	r3, #36	; 0x24
 8002b4a:	001a      	movs	r2, r3
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	f003 fe33 	bl	80067b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	0018      	movs	r0, r3
 8002b56:	2308      	movs	r3, #8
 8002b58:	001a      	movs	r2, r3
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	f003 fe2c 	bl	80067b8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b60:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <MX_TIM3_Init+0xbc>)
 8002b62:	4a26      	ldr	r2, [pc, #152]	; (8002bfc <MX_TIM3_Init+0xc0>)
 8002b64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b66:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <MX_TIM3_Init+0xbc>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <MX_TIM3_Init+0xbc>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <MX_TIM3_Init+0xbc>)
 8002b74:	4a22      	ldr	r2, [pc, #136]	; (8002c00 <MX_TIM3_Init+0xc4>)
 8002b76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b78:	4b1f      	ldr	r3, [pc, #124]	; (8002bf8 <MX_TIM3_Init+0xbc>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <MX_TIM3_Init+0xbc>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b84:	0021      	movs	r1, r4
 8002b86:	187b      	adds	r3, r7, r1
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	2200      	movs	r2, #0
 8002b90:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b92:	187b      	adds	r3, r7, r1
 8002b94:	2201      	movs	r2, #1
 8002b96:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	2201      	movs	r2, #1
 8002bae:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bb0:	187b      	adds	r3, r7, r1
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	2200      	movs	r2, #0
 8002bba:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002bbc:	187a      	adds	r2, r7, r1
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <MX_TIM3_Init+0xbc>)
 8002bc0:	0011      	movs	r1, r2
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f002 f99a 	bl	8004efc <HAL_TIM_Encoder_Init>
 8002bc8:	1e03      	subs	r3, r0, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002bcc:	f000 f9bb 	bl	8002f46 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bdc:	1d3a      	adds	r2, r7, #4
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <MX_TIM3_Init+0xbc>)
 8002be0:	0011      	movs	r1, r2
 8002be2:	0018      	movs	r0, r3
 8002be4:	f003 f8e0 	bl	8005da8 <HAL_TIMEx_MasterConfigSynchronization>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002bec:	f000 f9ab 	bl	8002f46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b00d      	add	sp, #52	; 0x34
 8002bf6:	bd90      	pop	{r4, r7, pc}
 8002bf8:	200002dc 	.word	0x200002dc
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	0000ffff 	.word	0x0000ffff

08002c04 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <MX_TIM6_Init+0x38>)
 8002c0a:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <MX_TIM6_Init+0x3c>)
 8002c0c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <MX_TIM6_Init+0x38>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <MX_TIM6_Init+0x38>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <MX_TIM6_Init+0x38>)
 8002c1c:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <MX_TIM6_Init+0x40>)
 8002c1e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <MX_TIM6_Init+0x38>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <MX_TIM6_Init+0x38>)
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f001 ffc1 	bl	8004bb0 <HAL_TIM_Base_Init>
 8002c2e:	1e03      	subs	r3, r0, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8002c32:	f000 f988 	bl	8002f46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000324 	.word	0x20000324
 8002c40:	40001000 	.word	0x40001000
 8002c44:	0000ffff 	.word	0x0000ffff

08002c48 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM7_Init 0 */

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <MX_TIM7_Init+0x3c>)
 8002c4e:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <MX_TIM7_Init+0x40>)
 8002c50:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 479;
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <MX_TIM7_Init+0x3c>)
 8002c54:	22e0      	movs	r2, #224	; 0xe0
 8002c56:	32ff      	adds	r2, #255	; 0xff
 8002c58:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <MX_TIM7_Init+0x3c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <MX_TIM7_Init+0x3c>)
 8002c62:	22fa      	movs	r2, #250	; 0xfa
 8002c64:	0092      	lsls	r2, r2, #2
 8002c66:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <MX_TIM7_Init+0x3c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <MX_TIM7_Init+0x3c>)
 8002c70:	0018      	movs	r0, r3
 8002c72:	f001 ff9d 	bl	8004bb0 <HAL_TIM_Base_Init>
 8002c76:	1e03      	subs	r3, r0, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM7_Init+0x36>
  {
    Error_Handler();
 8002c7a:	f000 f964 	bl	8002f46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	2000036c 	.word	0x2000036c
 8002c88:	40001400 	.word	0x40001400

08002c8c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	0018      	movs	r0, r3
 8002c96:	231c      	movs	r3, #28
 8002c98:	001a      	movs	r2, r3
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	f003 fd8c 	bl	80067b8 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002ca0:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <MX_TIM14_Init+0x94>)
 8002ca2:	4a20      	ldr	r2, [pc, #128]	; (8002d24 <MX_TIM14_Init+0x98>)
 8002ca4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <MX_TIM14_Init+0x94>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cac:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <MX_TIM14_Init+0x94>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <MX_TIM14_Init+0x94>)
 8002cb4:	4a1c      	ldr	r2, [pc, #112]	; (8002d28 <MX_TIM14_Init+0x9c>)
 8002cb6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <MX_TIM14_Init+0x94>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <MX_TIM14_Init+0x94>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002cc4:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <MX_TIM14_Init+0x94>)
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f001 ff72 	bl	8004bb0 <HAL_TIM_Base_Init>
 8002ccc:	1e03      	subs	r3, r0, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8002cd0:	f000 f939 	bl	8002f46 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <MX_TIM14_Init+0x94>)
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f002 f806 	bl	8004ce8 <HAL_TIM_PWM_Init>
 8002cdc:	1e03      	subs	r3, r0, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8002ce0:	f000 f931 	bl	8002f46 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	2260      	movs	r2, #96	; 0x60
 8002ce8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002cea:	1d3b      	adds	r3, r7, #4
 8002cec:	2200      	movs	r2, #0
 8002cee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cf0:	1d3b      	adds	r3, r7, #4
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cfc:	1d39      	adds	r1, r7, #4
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <MX_TIM14_Init+0x94>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	0018      	movs	r0, r3
 8002d04:	f002 fb7c 	bl	8005400 <HAL_TIM_PWM_ConfigChannel>
 8002d08:	1e03      	subs	r3, r0, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002d0c:	f000 f91b 	bl	8002f46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <MX_TIM14_Init+0x94>)
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 fc0a 	bl	800352c <HAL_TIM_MspPostInit>

}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b008      	add	sp, #32
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	200003b4 	.word	0x200003b4
 8002d24:	40002000 	.word	0x40002000
 8002d28:	0000ffff 	.word	0x0000ffff

08002d2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d32:	4a15      	ldr	r2, [pc, #84]	; (8002d88 <MX_USART2_UART_Init+0x5c>)
 8002d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d38:	22e1      	movs	r2, #225	; 0xe1
 8002d3a:	0252      	lsls	r2, r2, #9
 8002d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d52:	220c      	movs	r2, #12
 8002d54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d70:	0018      	movs	r0, r3
 8002d72:	f003 f881 	bl	8005e78 <HAL_UART_Init>
 8002d76:	1e03      	subs	r3, r0, #0
 8002d78:	d001      	beq.n	8002d7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002d7a:	f000 f8e4 	bl	8002f46 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	200003fc 	.word	0x200003fc
 8002d88:	40004400 	.word	0x40004400

08002d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b08b      	sub	sp, #44	; 0x2c
 8002d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d92:	2414      	movs	r4, #20
 8002d94:	193b      	adds	r3, r7, r4
 8002d96:	0018      	movs	r0, r3
 8002d98:	2314      	movs	r3, #20
 8002d9a:	001a      	movs	r2, r3
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	f003 fd0b 	bl	80067b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da2:	4b58      	ldr	r3, [pc, #352]	; (8002f04 <MX_GPIO_Init+0x178>)
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	4b57      	ldr	r3, [pc, #348]	; (8002f04 <MX_GPIO_Init+0x178>)
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	0309      	lsls	r1, r1, #12
 8002dac:	430a      	orrs	r2, r1
 8002dae:	615a      	str	r2, [r3, #20]
 8002db0:	4b54      	ldr	r3, [pc, #336]	; (8002f04 <MX_GPIO_Init+0x178>)
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	031b      	lsls	r3, r3, #12
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dbe:	4b51      	ldr	r3, [pc, #324]	; (8002f04 <MX_GPIO_Init+0x178>)
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	4b50      	ldr	r3, [pc, #320]	; (8002f04 <MX_GPIO_Init+0x178>)
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	03c9      	lsls	r1, r1, #15
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	615a      	str	r2, [r3, #20]
 8002dcc:	4b4d      	ldr	r3, [pc, #308]	; (8002f04 <MX_GPIO_Init+0x178>)
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	03db      	lsls	r3, r3, #15
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dda:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <MX_GPIO_Init+0x178>)
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	4b49      	ldr	r3, [pc, #292]	; (8002f04 <MX_GPIO_Init+0x178>)
 8002de0:	2180      	movs	r1, #128	; 0x80
 8002de2:	0289      	lsls	r1, r1, #10
 8002de4:	430a      	orrs	r2, r1
 8002de6:	615a      	str	r2, [r3, #20]
 8002de8:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <MX_GPIO_Init+0x178>)
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	029b      	lsls	r3, r3, #10
 8002df0:	4013      	ands	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df6:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <MX_GPIO_Init+0x178>)
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <MX_GPIO_Init+0x178>)
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	02c9      	lsls	r1, r1, #11
 8002e00:	430a      	orrs	r2, r1
 8002e02:	615a      	str	r2, [r3, #20]
 8002e04:	4b3f      	ldr	r3, [pc, #252]	; (8002f04 <MX_GPIO_Init+0x178>)
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	02db      	lsls	r3, r3, #11
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	607b      	str	r3, [r7, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002e12:	2390      	movs	r3, #144	; 0x90
 8002e14:	05db      	lsls	r3, r3, #23
 8002e16:	2200      	movs	r2, #0
 8002e18:	2120      	movs	r1, #32
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f001 f857 	bl	8003ece <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002e20:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <MX_GPIO_Init+0x17c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	2180      	movs	r1, #128	; 0x80
 8002e26:	0018      	movs	r0, r3
 8002e28:	f001 f851 	bl	8003ece <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002e2c:	4b37      	ldr	r3, [pc, #220]	; (8002f0c <MX_GPIO_Init+0x180>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2140      	movs	r1, #64	; 0x40
 8002e32:	0018      	movs	r0, r3
 8002e34:	f001 f84b 	bl	8003ece <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e38:	193b      	adds	r3, r7, r4
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	0192      	lsls	r2, r2, #6
 8002e3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e40:	193b      	adds	r3, r7, r4
 8002e42:	2284      	movs	r2, #132	; 0x84
 8002e44:	0392      	lsls	r2, r2, #14
 8002e46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	193b      	adds	r3, r7, r4
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e4e:	193b      	adds	r3, r7, r4
 8002e50:	4a2d      	ldr	r2, [pc, #180]	; (8002f08 <MX_GPIO_Init+0x17c>)
 8002e52:	0019      	movs	r1, r3
 8002e54:	0010      	movs	r0, r2
 8002e56:	f000 fead 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e5a:	193b      	adds	r3, r7, r4
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e60:	193b      	adds	r3, r7, r4
 8002e62:	2288      	movs	r2, #136	; 0x88
 8002e64:	0352      	lsls	r2, r2, #13
 8002e66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6e:	193a      	adds	r2, r7, r4
 8002e70:	2390      	movs	r3, #144	; 0x90
 8002e72:	05db      	lsls	r3, r3, #23
 8002e74:	0011      	movs	r1, r2
 8002e76:	0018      	movs	r0, r3
 8002e78:	f000 fe9c 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002e7c:	193b      	adds	r3, r7, r4
 8002e7e:	2220      	movs	r2, #32
 8002e80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e82:	193b      	adds	r3, r7, r4
 8002e84:	2201      	movs	r2, #1
 8002e86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	193b      	adds	r3, r7, r4
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8e:	193b      	adds	r3, r7, r4
 8002e90:	2200      	movs	r2, #0
 8002e92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002e94:	193a      	adds	r2, r7, r4
 8002e96:	2390      	movs	r3, #144	; 0x90
 8002e98:	05db      	lsls	r3, r3, #23
 8002e9a:	0011      	movs	r1, r2
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f000 fe89 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ea2:	193b      	adds	r3, r7, r4
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea8:	193b      	adds	r3, r7, r4
 8002eaa:	2201      	movs	r2, #1
 8002eac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb4:	193b      	adds	r3, r7, r4
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eba:	193b      	adds	r3, r7, r4
 8002ebc:	4a12      	ldr	r2, [pc, #72]	; (8002f08 <MX_GPIO_Init+0x17c>)
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	0010      	movs	r0, r2
 8002ec2:	f000 fe77 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ec6:	0021      	movs	r1, r4
 8002ec8:	187b      	adds	r3, r7, r1
 8002eca:	2240      	movs	r2, #64	; 0x40
 8002ecc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ece:	187b      	adds	r3, r7, r1
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	187b      	adds	r3, r7, r1
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	187b      	adds	r3, r7, r1
 8002edc:	2200      	movs	r2, #0
 8002ede:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee0:	187b      	adds	r3, r7, r1
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <MX_GPIO_Init+0x180>)
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	0010      	movs	r0, r2
 8002ee8:	f000 fe64 	bl	8003bb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002eec:	2200      	movs	r2, #0
 8002eee:	2100      	movs	r1, #0
 8002ef0:	2005      	movs	r0, #5
 8002ef2:	f000 fde7 	bl	8003ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002ef6:	2005      	movs	r0, #5
 8002ef8:	f000 fdf9 	bl	8003aee <HAL_NVIC_EnableIRQ>

}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b00b      	add	sp, #44	; 0x2c
 8002f02:	bd90      	pop	{r4, r7, pc}
 8002f04:	40021000 	.word	0x40021000
 8002f08:	48000800 	.word	0x48000800
 8002f0c:	48000400 	.word	0x48000400

08002f10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	0002      	movs	r2, r0
 8002f18:	1dbb      	adds	r3, r7, #6
 8002f1a:	801a      	strh	r2, [r3, #0]
	motGpioExtiCallback(GPIO_Pin);
 8002f1c:	1dbb      	adds	r3, r7, #6
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f000 f8dd 	bl	80030e0 <motGpioExtiCallback>
}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b002      	add	sp, #8
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
	motTimPeriodElapsedCallback(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f000 f895 	bl	8003068 <motTimPeriodElapsedCallback>
}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b002      	add	sp, #8
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4a:	b672      	cpsid	i
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f4e:	e7fe      	b.n	8002f4e <Error_Handler+0x8>

08002f50 <motInit>:
static void motSetPWM(uint32_t);
static void motSetVelocity(float);
static void Error_Handler(uint32_t err);

// PUBLIC FUNCTION CODE
void motInit(uint32_t initialOdometer){
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	initialOdometerPulseValue = initialOdometer * 1000/*m to mm conversion*/ * MOT_ODO_PULSES_PER_ROT / MOT_WHEEL_LENGTH_MM;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <motInit+0x44>)
 8002f5c:	4353      	muls	r3, r2
 8002f5e:	21d7      	movs	r1, #215	; 0xd7
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7fd f8ed 	bl	8000140 <__udivsi3>
 8002f66:	0003      	movs	r3, r0
 8002f68:	001a      	movs	r2, r3
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <motInit+0x48>)
 8002f6c:	601a      	str	r2, [r3, #0]
	PIDController_Init(&pid);
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <motInit+0x4c>)
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 f964 	bl	800323e <PIDController_Init>
	targetVel = 0;
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <motInit+0x50>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
	initalised = 1;
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <motInit+0x54>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
	motSetTargetVelocity(targetVel);
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <motInit+0x50>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	1c18      	adds	r0, r3, #0
 8002f88:	f000 f854 	bl	8003034 <motSetTargetVelocity>
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	00002af8 	.word	0x00002af8
 8002f98:	20000598 	.word	0x20000598
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	20000594 	.word	0x20000594
 8002fa4:	20000590 	.word	0x20000590

08002fa8 <motGetVelocity>:
	if(!initalised) Error_Handler(MOT_ERR_UNINITIALISED);
	int32_t pulseCount = (odometerOverflowCtr<<16) + MOT_ODO_TIM->CNT + initialOdometerPulseValue;
	return ((float)pulseCount) * MOT_WHEEL_LENGTH_MM / (MOT_GEAR_RATIO * MOT_ODO_PULSES_PER_ROT * 1000/*mm to m conversion*/ );
}

float motGetVelocity(void){
 8002fa8:	b5b0      	push	{r4, r5, r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
	if(!initalised) Error_Handler(MOT_ERR_UNINITIALISED);
 8002fae:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <motGetVelocity+0x78>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d103      	bne.n	8002fbe <motGetVelocity+0x16>
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <motGetVelocity+0x7c>)
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 f939 	bl	8003230 <Error_Handler>
	uint32_t timerTickCount = timekeepingTimerT2 - timekeepingTimerT1;
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <motGetVelocity+0x80>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <motGetVelocity+0x84>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	607b      	str	r3, [r7, #4]

	float vel = motGetDirection() * (48000000.0 * 60) / (timerTickCount * MOT_ODO_PULSES_PER_ROT);
 8002fca:	f000 f8ab 	bl	8003124 <motGetDirection>
 8002fce:	1c03      	adds	r3, r0, #0
 8002fd0:	1c18      	adds	r0, r3, #0
 8002fd2:	f7ff fb1f 	bl	8002614 <__aeabi_f2d>
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	4b15      	ldr	r3, [pc, #84]	; (8003030 <motGetVelocity+0x88>)
 8002fda:	f7fe fc73 	bl	80018c4 <__aeabi_dmul>
 8002fde:	0002      	movs	r2, r0
 8002fe0:	000b      	movs	r3, r1
 8002fe2:	0014      	movs	r4, r2
 8002fe4:	001d      	movs	r5, r3
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	0013      	movs	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	189b      	adds	r3, r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	189b      	adds	r3, r3, r2
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f7ff fae8 	bl	80025c8 <__aeabi_ui2d>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	000b      	movs	r3, r1
 8002ffc:	0020      	movs	r0, r4
 8002ffe:	0029      	movs	r1, r5
 8003000:	f7fe f85e 	bl	80010c0 <__aeabi_ddiv>
 8003004:	0002      	movs	r2, r0
 8003006:	000b      	movs	r3, r1
 8003008:	0010      	movs	r0, r2
 800300a:	0019      	movs	r1, r3
 800300c:	f7ff fb4a 	bl	80026a4 <__aeabi_d2f>
 8003010:	1c03      	adds	r3, r0, #0
 8003012:	603b      	str	r3, [r7, #0]

	return vel;
 8003014:	683b      	ldr	r3, [r7, #0]
}
 8003016:	1c18      	adds	r0, r3, #0
 8003018:	46bd      	mov	sp, r7
 800301a:	b002      	add	sp, #8
 800301c:	bdb0      	pop	{r4, r5, r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	20000590 	.word	0x20000590
 8003024:	00004d03 	.word	0x00004d03
 8003028:	200005a8 	.word	0x200005a8
 800302c:	200005a4 	.word	0x200005a4
 8003030:	41e5752a 	.word	0x41e5752a

08003034 <motSetTargetVelocity>:

void motSetTargetVelocity(float velocity){
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
	if(!initalised) Error_Handler(MOT_ERR_UNINITIALISED);
 800303c:	4b07      	ldr	r3, [pc, #28]	; (800305c <motSetTargetVelocity+0x28>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d103      	bne.n	800304c <motSetTargetVelocity+0x18>
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <motSetTargetVelocity+0x2c>)
 8003046:	0018      	movs	r0, r3
 8003048:	f000 f8f2 	bl	8003230 <Error_Handler>

	targetVel = velocity;
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <motSetTargetVelocity+0x30>)
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	601a      	str	r2, [r3, #0]
}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	46bd      	mov	sp, r7
 8003056:	b002      	add	sp, #8
 8003058:	bd80      	pop	{r7, pc}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	20000590 	.word	0x20000590
 8003060:	00004d03 	.word	0x00004d03
 8003064:	20000594 	.word	0x20000594

08003068 <motTimPeriodElapsedCallback>:

void motTimPeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	if(!initalised) return;
 8003070:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <motTimPeriodElapsedCallback+0x5c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d020      	beq.n	80030ba <motTimPeriodElapsedCallback+0x52>
	if(htim->Instance == MOT_ODO_TIM)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <motTimPeriodElapsedCallback+0x60>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d105      	bne.n	800308e <motTimPeriodElapsedCallback+0x26>
		odometerOverflowCtr++;
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <motTimPeriodElapsedCallback+0x64>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	4b10      	ldr	r3, [pc, #64]	; (80030cc <motTimPeriodElapsedCallback+0x64>)
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e016      	b.n	80030bc <motTimPeriodElapsedCallback+0x54>
	else if(htim->Instance == MOT_TIM_TIM)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a0f      	ldr	r2, [pc, #60]	; (80030d0 <motTimPeriodElapsedCallback+0x68>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d105      	bne.n	80030a4 <motTimPeriodElapsedCallback+0x3c>
		timekeepingTimerOverflowCtr++;
 8003098:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <motTimPeriodElapsedCallback+0x6c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <motTimPeriodElapsedCallback+0x6c>)
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e00b      	b.n	80030bc <motTimPeriodElapsedCallback+0x54>
	else if(htim->Instance == MOT_PID_TIM){
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <motTimPeriodElapsedCallback+0x70>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d106      	bne.n	80030bc <motTimPeriodElapsedCallback+0x54>
//		float measurement = motGetVelocity();
//		PIDController_Update(&pid, targetVel, measurement);
//		motSetVelocity(pid.out);
		motSetVelocity(targetVel);
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <motTimPeriodElapsedCallback+0x74>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	1c18      	adds	r0, r3, #0
 80030b4:	f000 f88a 	bl	80031cc <motSetVelocity>
 80030b8:	e000      	b.n	80030bc <motTimPeriodElapsedCallback+0x54>
	if(!initalised) return;
 80030ba:	46c0      	nop			; (mov r8, r8)
	}
}
 80030bc:	46bd      	mov	sp, r7
 80030be:	b002      	add	sp, #8
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	20000590 	.word	0x20000590
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	2000059c 	.word	0x2000059c
 80030d0:	40001000 	.word	0x40001000
 80030d4:	200005a0 	.word	0x200005a0
 80030d8:	40001400 	.word	0x40001400
 80030dc:	20000594 	.word	0x20000594

080030e0 <motGpioExtiCallback>:

void motGpioExtiCallback(uint16_t GPIO_Pin){
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	0002      	movs	r2, r0
 80030e8:	1dbb      	adds	r3, r7, #6
 80030ea:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == MOT_INT_PIN){
 80030ec:	1dbb      	adds	r3, r7, #6
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d10b      	bne.n	800310c <motGpioExtiCallback+0x2c>
		timekeepingTimerT1 = timekeepingTimerT2;
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <motGpioExtiCallback+0x34>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <motGpioExtiCallback+0x38>)
 80030fa:	601a      	str	r2, [r3, #0]
		timekeepingTimerT2 = (timekeepingTimerOverflowCtr << 16) + MOT_TIM_TIM->CNT;
 80030fc:	4b07      	ldr	r3, [pc, #28]	; (800311c <motGpioExtiCallback+0x3c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	041a      	lsls	r2, r3, #16
 8003102:	4b07      	ldr	r3, [pc, #28]	; (8003120 <motGpioExtiCallback+0x40>)
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	18d2      	adds	r2, r2, r3
 8003108:	4b02      	ldr	r3, [pc, #8]	; (8003114 <motGpioExtiCallback+0x34>)
 800310a:	601a      	str	r2, [r3, #0]
	}
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}
 8003114:	200005a8 	.word	0x200005a8
 8003118:	200005a4 	.word	0x200005a4
 800311c:	200005a0 	.word	0x200005a0
 8003120:	40001000 	.word	0x40001000

08003124 <motGetDirection>:

// PRIVATE FUNCTION CODE
static float motGetDirection(){
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
	if((MOT_ENC_TIM->CR1 >> 4) & 1) return MOT_BACKWARD;
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <motGetDirection+0x20>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	2201      	movs	r2, #1
 8003130:	4013      	ands	r3, r2
 8003132:	d001      	beq.n	8003138 <motGetDirection+0x14>
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <motGetDirection+0x24>)
 8003136:	e001      	b.n	800313c <motGetDirection+0x18>
	else return MOT_FORWARD;
 8003138:	23fe      	movs	r3, #254	; 0xfe
 800313a:	059b      	lsls	r3, r3, #22
}
 800313c:	1c18      	adds	r0, r3, #0
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	40000400 	.word	0x40000400
 8003148:	bf800000 	.word	0xbf800000

0800314c <motSetDirection>:

void motSetDirection(int direction){
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	switch(direction){
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d009      	beq.n	800316e <motSetDirection+0x22>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b01      	cmp	r3, #1
 800315e:	dc2d      	bgt.n	80031bc <motSetDirection+0x70>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3301      	adds	r3, #1
 8003164:	d010      	beq.n	8003188 <motSetDirection+0x3c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01a      	beq.n	80031a2 <motSetDirection+0x56>
		case MOT_STOP:
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
			break;
	}
}
 800316c:	e026      	b.n	80031bc <motSetDirection+0x70>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <motSetDirection+0x78>)
 8003170:	2200      	movs	r2, #0
 8003172:	2140      	movs	r1, #64	; 0x40
 8003174:	0018      	movs	r0, r3
 8003176:	f000 feaa 	bl	8003ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_SET);
 800317a:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <motSetDirection+0x7c>)
 800317c:	2201      	movs	r2, #1
 800317e:	2180      	movs	r1, #128	; 0x80
 8003180:	0018      	movs	r0, r3
 8003182:	f000 fea4 	bl	8003ece <HAL_GPIO_WritePin>
			break;
 8003186:	e019      	b.n	80031bc <motSetDirection+0x70>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_SET);
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <motSetDirection+0x78>)
 800318a:	2201      	movs	r2, #1
 800318c:	2140      	movs	r1, #64	; 0x40
 800318e:	0018      	movs	r0, r3
 8003190:	f000 fe9d 	bl	8003ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <motSetDirection+0x7c>)
 8003196:	2200      	movs	r2, #0
 8003198:	2180      	movs	r1, #128	; 0x80
 800319a:	0018      	movs	r0, r3
 800319c:	f000 fe97 	bl	8003ece <HAL_GPIO_WritePin>
			break;
 80031a0:	e00c      	b.n	80031bc <motSetDirection+0x70>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <motSetDirection+0x78>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	2140      	movs	r1, #64	; 0x40
 80031a8:	0018      	movs	r0, r3
 80031aa:	f000 fe90 	bl	8003ece <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <motSetDirection+0x7c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	2180      	movs	r1, #128	; 0x80
 80031b4:	0018      	movs	r0, r3
 80031b6:	f000 fe8a 	bl	8003ece <HAL_GPIO_WritePin>
			break;
 80031ba:	46c0      	nop			; (mov r8, r8)
}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b002      	add	sp, #8
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	48000400 	.word	0x48000400
 80031c8:	48000800 	.word	0x48000800

080031cc <motSetVelocity>:

void motSetVelocity(float vel){
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
	if(vel < 0){
 80031d4:	2100      	movs	r1, #0
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd f978 	bl	80004cc <__aeabi_fcmplt>
 80031dc:	1e03      	subs	r3, r0, #0
 80031de:	d00a      	beq.n	80031f6 <motSetVelocity+0x2a>
		motSetDirection(MOT_BACKWARD);
 80031e0:	2301      	movs	r3, #1
 80031e2:	425b      	negs	r3, r3
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7ff ffb1 	bl	800314c <motSetDirection>
		vel *= -1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2280      	movs	r2, #128	; 0x80
 80031ee:	0612      	lsls	r2, r2, #24
 80031f0:	4053      	eors	r3, r2
 80031f2:	607b      	str	r3, [r7, #4]
 80031f4:	e002      	b.n	80031fc <motSetVelocity+0x30>
	} else motSetDirection(MOT_FORWARD);
 80031f6:	2001      	movs	r0, #1
 80031f8:	f7ff ffa8 	bl	800314c <motSetDirection>
	motSetPWM((uint32_t)vel);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7fd f98d 	bl	800051c <__aeabi_f2uiz>
 8003202:	0003      	movs	r3, r0
 8003204:	0018      	movs	r0, r3
 8003206:	f000 f805 	bl	8003214 <motSetPWM>
}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b002      	add	sp, #8
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <motSetPWM>:

void motSetPWM(uint32_t pwm){
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	MOT_PWM_TIM->CCR1 = pwm;
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <motSetPWM+0x18>)
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b002      	add	sp, #8
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	40002000 	.word	0x40002000

08003230 <Error_Handler>:

void Error_Handler(uint32_t err)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003238:	b672      	cpsid	i
}
 800323a:	46c0      	nop			; (mov r8, r8)
  __disable_irq();
  while (1);
 800323c:	e7fe      	b.n	800323c <Error_Handler+0xc>

0800323e <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	635a      	str	r2, [r3, #52]	; 0x34

}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b002      	add	sp, #8
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003272:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <HAL_MspInit+0x44>)
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <HAL_MspInit+0x44>)
 8003278:	2101      	movs	r1, #1
 800327a:	430a      	orrs	r2, r1
 800327c:	619a      	str	r2, [r3, #24]
 800327e:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <HAL_MspInit+0x44>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2201      	movs	r2, #1
 8003284:	4013      	ands	r3, r2
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_MspInit+0x44>)
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_MspInit+0x44>)
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	0549      	lsls	r1, r1, #21
 8003294:	430a      	orrs	r2, r1
 8003296:	61da      	str	r2, [r3, #28]
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_MspInit+0x44>)
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	055b      	lsls	r3, r3, #21
 80032a0:	4013      	ands	r3, r2
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b002      	add	sp, #8
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	40021000 	.word	0x40021000

080032b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032b4:	b590      	push	{r4, r7, lr}
 80032b6:	b08b      	sub	sp, #44	; 0x2c
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032bc:	2414      	movs	r4, #20
 80032be:	193b      	adds	r3, r7, r4
 80032c0:	0018      	movs	r0, r3
 80032c2:	2314      	movs	r3, #20
 80032c4:	001a      	movs	r2, r3
 80032c6:	2100      	movs	r1, #0
 80032c8:	f003 fa76 	bl	80067b8 <memset>
  if(hspi->Instance==SPI1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a20      	ldr	r2, [pc, #128]	; (8003354 <HAL_SPI_MspInit+0xa0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d139      	bne.n	800334a <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032d6:	4b20      	ldr	r3, [pc, #128]	; (8003358 <HAL_SPI_MspInit+0xa4>)
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	4b1f      	ldr	r3, [pc, #124]	; (8003358 <HAL_SPI_MspInit+0xa4>)
 80032dc:	2180      	movs	r1, #128	; 0x80
 80032de:	0149      	lsls	r1, r1, #5
 80032e0:	430a      	orrs	r2, r1
 80032e2:	619a      	str	r2, [r3, #24]
 80032e4:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <HAL_SPI_MspInit+0xa4>)
 80032e6:	699a      	ldr	r2, [r3, #24]
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	015b      	lsls	r3, r3, #5
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f2:	4b19      	ldr	r3, [pc, #100]	; (8003358 <HAL_SPI_MspInit+0xa4>)
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_SPI_MspInit+0xa4>)
 80032f8:	2180      	movs	r1, #128	; 0x80
 80032fa:	02c9      	lsls	r1, r1, #11
 80032fc:	430a      	orrs	r2, r1
 80032fe:	615a      	str	r2, [r3, #20]
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_SPI_MspInit+0xa4>)
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	02db      	lsls	r3, r3, #11
 8003308:	4013      	ands	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800330e:	0021      	movs	r1, r4
 8003310:	187b      	adds	r3, r7, r1
 8003312:	2238      	movs	r2, #56	; 0x38
 8003314:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	187b      	adds	r3, r7, r1
 8003318:	2202      	movs	r2, #2
 800331a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	187b      	adds	r3, r7, r1
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003322:	187b      	adds	r3, r7, r1
 8003324:	2203      	movs	r2, #3
 8003326:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003328:	187b      	adds	r3, r7, r1
 800332a:	2200      	movs	r2, #0
 800332c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332e:	187b      	adds	r3, r7, r1
 8003330:	4a0a      	ldr	r2, [pc, #40]	; (800335c <HAL_SPI_MspInit+0xa8>)
 8003332:	0019      	movs	r1, r3
 8003334:	0010      	movs	r0, r2
 8003336:	f000 fc3d 	bl	8003bb4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 800333a:	2200      	movs	r2, #0
 800333c:	2101      	movs	r1, #1
 800333e:	2019      	movs	r0, #25
 8003340:	f000 fbc0 	bl	8003ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003344:	2019      	movs	r0, #25
 8003346:	f000 fbd2 	bl	8003aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	46bd      	mov	sp, r7
 800334e:	b00b      	add	sp, #44	; 0x2c
 8003350:	bd90      	pop	{r4, r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	40013000 	.word	0x40013000
 8003358:	40021000 	.word	0x40021000
 800335c:	48000400 	.word	0x48000400

08003360 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b08d      	sub	sp, #52	; 0x34
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003368:	241c      	movs	r4, #28
 800336a:	193b      	adds	r3, r7, r4
 800336c:	0018      	movs	r0, r3
 800336e:	2314      	movs	r3, #20
 8003370:	001a      	movs	r2, r3
 8003372:	2100      	movs	r1, #0
 8003374:	f003 fa20 	bl	80067b8 <memset>
  if(htim_base->Instance==TIM1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a41      	ldr	r2, [pc, #260]	; (8003484 <HAL_TIM_Base_MspInit+0x124>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d134      	bne.n	80033ec <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003382:	4b41      	ldr	r3, [pc, #260]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	4b40      	ldr	r3, [pc, #256]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	0109      	lsls	r1, r1, #4
 800338c:	430a      	orrs	r2, r1
 800338e:	619a      	str	r2, [r3, #24]
 8003390:	4b3d      	ldr	r3, [pc, #244]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 8003392:	699a      	ldr	r2, [r3, #24]
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800339e:	4b3a      	ldr	r3, [pc, #232]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	4b39      	ldr	r3, [pc, #228]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 80033a4:	2180      	movs	r1, #128	; 0x80
 80033a6:	0289      	lsls	r1, r1, #10
 80033a8:	430a      	orrs	r2, r1
 80033aa:	615a      	str	r2, [r3, #20]
 80033ac:	4b36      	ldr	r3, [pc, #216]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	029b      	lsls	r3, r3, #10
 80033b4:	4013      	ands	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80033ba:	193b      	adds	r3, r7, r4
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	0152      	lsls	r2, r2, #5
 80033c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	0021      	movs	r1, r4
 80033c4:	187b      	adds	r3, r7, r1
 80033c6:	2202      	movs	r2, #2
 80033c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	187b      	adds	r3, r7, r1
 80033cc:	2200      	movs	r2, #0
 80033ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d0:	187b      	adds	r3, r7, r1
 80033d2:	2200      	movs	r2, #0
 80033d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80033d6:	187b      	adds	r3, r7, r1
 80033d8:	2202      	movs	r2, #2
 80033da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033dc:	187a      	adds	r2, r7, r1
 80033de:	2390      	movs	r3, #144	; 0x90
 80033e0:	05db      	lsls	r3, r3, #23
 80033e2:	0011      	movs	r1, r2
 80033e4:	0018      	movs	r0, r3
 80033e6:	f000 fbe5 	bl	8003bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80033ea:	e046      	b.n	800347a <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM6)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a26      	ldr	r2, [pc, #152]	; (800348c <HAL_TIM_Base_MspInit+0x12c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d114      	bne.n	8003420 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	4b23      	ldr	r3, [pc, #140]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 80033fc:	2110      	movs	r1, #16
 80033fe:	430a      	orrs	r2, r1
 8003400:	61da      	str	r2, [r3, #28]
 8003402:	4b21      	ldr	r3, [pc, #132]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	2210      	movs	r2, #16
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800340e:	2200      	movs	r2, #0
 8003410:	2100      	movs	r1, #0
 8003412:	2011      	movs	r0, #17
 8003414:	f000 fb56 	bl	8003ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003418:	2011      	movs	r0, #17
 800341a:	f000 fb68 	bl	8003aee <HAL_NVIC_EnableIRQ>
}
 800341e:	e02c      	b.n	800347a <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM7)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1a      	ldr	r2, [pc, #104]	; (8003490 <HAL_TIM_Base_MspInit+0x130>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d114      	bne.n	8003454 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	4b16      	ldr	r3, [pc, #88]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 8003430:	2120      	movs	r1, #32
 8003432:	430a      	orrs	r2, r1
 8003434:	61da      	str	r2, [r3, #28]
 8003436:	4b14      	ldr	r3, [pc, #80]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	2220      	movs	r2, #32
 800343c:	4013      	ands	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003442:	2200      	movs	r2, #0
 8003444:	2100      	movs	r1, #0
 8003446:	2012      	movs	r0, #18
 8003448:	f000 fb3c 	bl	8003ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800344c:	2012      	movs	r0, #18
 800344e:	f000 fb4e 	bl	8003aee <HAL_NVIC_EnableIRQ>
}
 8003452:	e012      	b.n	800347a <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM14)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a0e      	ldr	r2, [pc, #56]	; (8003494 <HAL_TIM_Base_MspInit+0x134>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d10d      	bne.n	800347a <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 8003460:	69da      	ldr	r2, [r3, #28]
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	0049      	lsls	r1, r1, #1
 8003468:	430a      	orrs	r2, r1
 800346a:	61da      	str	r2, [r3, #28]
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_TIM_Base_MspInit+0x128>)
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4013      	ands	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	b00d      	add	sp, #52	; 0x34
 8003480:	bd90      	pop	{r4, r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40021000 	.word	0x40021000
 800348c:	40001000 	.word	0x40001000
 8003490:	40001400 	.word	0x40001400
 8003494:	40002000 	.word	0x40002000

08003498 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b08b      	sub	sp, #44	; 0x2c
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	2414      	movs	r4, #20
 80034a2:	193b      	adds	r3, r7, r4
 80034a4:	0018      	movs	r0, r3
 80034a6:	2314      	movs	r3, #20
 80034a8:	001a      	movs	r2, r3
 80034aa:	2100      	movs	r1, #0
 80034ac:	f003 f984 	bl	80067b8 <memset>
  if(htim_encoder->Instance==TIM3)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1b      	ldr	r2, [pc, #108]	; (8003524 <HAL_TIM_Encoder_MspInit+0x8c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d130      	bne.n	800351c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034ba:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <HAL_TIM_Encoder_MspInit+0x90>)
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <HAL_TIM_Encoder_MspInit+0x90>)
 80034c0:	2102      	movs	r1, #2
 80034c2:	430a      	orrs	r2, r1
 80034c4:	61da      	str	r2, [r3, #28]
 80034c6:	4b18      	ldr	r3, [pc, #96]	; (8003528 <HAL_TIM_Encoder_MspInit+0x90>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	2202      	movs	r2, #2
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d2:	4b15      	ldr	r3, [pc, #84]	; (8003528 <HAL_TIM_Encoder_MspInit+0x90>)
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	4b14      	ldr	r3, [pc, #80]	; (8003528 <HAL_TIM_Encoder_MspInit+0x90>)
 80034d8:	2180      	movs	r1, #128	; 0x80
 80034da:	0289      	lsls	r1, r1, #10
 80034dc:	430a      	orrs	r2, r1
 80034de:	615a      	str	r2, [r3, #20]
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <HAL_TIM_Encoder_MspInit+0x90>)
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	029b      	lsls	r3, r3, #10
 80034e8:	4013      	ands	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034ee:	0021      	movs	r1, r4
 80034f0:	187b      	adds	r3, r7, r1
 80034f2:	22c0      	movs	r2, #192	; 0xc0
 80034f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	187b      	adds	r3, r7, r1
 80034f8:	2202      	movs	r2, #2
 80034fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	187b      	adds	r3, r7, r1
 80034fe:	2200      	movs	r2, #0
 8003500:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003502:	187b      	adds	r3, r7, r1
 8003504:	2200      	movs	r2, #0
 8003506:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003508:	187b      	adds	r3, r7, r1
 800350a:	2201      	movs	r2, #1
 800350c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350e:	187a      	adds	r2, r7, r1
 8003510:	2390      	movs	r3, #144	; 0x90
 8003512:	05db      	lsls	r3, r3, #23
 8003514:	0011      	movs	r1, r2
 8003516:	0018      	movs	r0, r3
 8003518:	f000 fb4c 	bl	8003bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b00b      	add	sp, #44	; 0x2c
 8003522:	bd90      	pop	{r4, r7, pc}
 8003524:	40000400 	.word	0x40000400
 8003528:	40021000 	.word	0x40021000

0800352c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b089      	sub	sp, #36	; 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003534:	240c      	movs	r4, #12
 8003536:	193b      	adds	r3, r7, r4
 8003538:	0018      	movs	r0, r3
 800353a:	2314      	movs	r3, #20
 800353c:	001a      	movs	r2, r3
 800353e:	2100      	movs	r1, #0
 8003540:	f003 f93a 	bl	80067b8 <memset>
  if(htim->Instance==TIM14)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a15      	ldr	r2, [pc, #84]	; (80035a0 <HAL_TIM_MspPostInit+0x74>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d124      	bne.n	8003598 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354e:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <HAL_TIM_MspPostInit+0x78>)
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	4b14      	ldr	r3, [pc, #80]	; (80035a4 <HAL_TIM_MspPostInit+0x78>)
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	0289      	lsls	r1, r1, #10
 8003558:	430a      	orrs	r2, r1
 800355a:	615a      	str	r2, [r3, #20]
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_TIM_MspPostInit+0x78>)
 800355e:	695a      	ldr	r2, [r3, #20]
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	029b      	lsls	r3, r3, #10
 8003564:	4013      	ands	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800356a:	0021      	movs	r1, r4
 800356c:	187b      	adds	r3, r7, r1
 800356e:	2210      	movs	r2, #16
 8003570:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	187b      	adds	r3, r7, r1
 8003574:	2202      	movs	r2, #2
 8003576:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	187b      	adds	r3, r7, r1
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357e:	187b      	adds	r3, r7, r1
 8003580:	2200      	movs	r2, #0
 8003582:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8003584:	187b      	adds	r3, r7, r1
 8003586:	2204      	movs	r2, #4
 8003588:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358a:	187a      	adds	r2, r7, r1
 800358c:	2390      	movs	r3, #144	; 0x90
 800358e:	05db      	lsls	r3, r3, #23
 8003590:	0011      	movs	r1, r2
 8003592:	0018      	movs	r0, r3
 8003594:	f000 fb0e 	bl	8003bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	b009      	add	sp, #36	; 0x24
 800359e:	bd90      	pop	{r4, r7, pc}
 80035a0:	40002000 	.word	0x40002000
 80035a4:	40021000 	.word	0x40021000

080035a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b08b      	sub	sp, #44	; 0x2c
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	2414      	movs	r4, #20
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	0018      	movs	r0, r3
 80035b6:	2314      	movs	r3, #20
 80035b8:	001a      	movs	r2, r3
 80035ba:	2100      	movs	r1, #0
 80035bc:	f003 f8fc 	bl	80067b8 <memset>
  if(huart->Instance==USART2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <HAL_UART_MspInit+0x90>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d132      	bne.n	8003630 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035ca:	4b1c      	ldr	r3, [pc, #112]	; (800363c <HAL_UART_MspInit+0x94>)
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_UART_MspInit+0x94>)
 80035d0:	2180      	movs	r1, #128	; 0x80
 80035d2:	0289      	lsls	r1, r1, #10
 80035d4:	430a      	orrs	r2, r1
 80035d6:	61da      	str	r2, [r3, #28]
 80035d8:	4b18      	ldr	r3, [pc, #96]	; (800363c <HAL_UART_MspInit+0x94>)
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	029b      	lsls	r3, r3, #10
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <HAL_UART_MspInit+0x94>)
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	4b14      	ldr	r3, [pc, #80]	; (800363c <HAL_UART_MspInit+0x94>)
 80035ec:	2180      	movs	r1, #128	; 0x80
 80035ee:	0289      	lsls	r1, r1, #10
 80035f0:	430a      	orrs	r2, r1
 80035f2:	615a      	str	r2, [r3, #20]
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_UART_MspInit+0x94>)
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	029b      	lsls	r3, r3, #10
 80035fc:	4013      	ands	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003602:	0021      	movs	r1, r4
 8003604:	187b      	adds	r3, r7, r1
 8003606:	220c      	movs	r2, #12
 8003608:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	187b      	adds	r3, r7, r1
 800360c:	2202      	movs	r2, #2
 800360e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	187b      	adds	r3, r7, r1
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003616:	187b      	adds	r3, r7, r1
 8003618:	2203      	movs	r2, #3
 800361a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800361c:	187b      	adds	r3, r7, r1
 800361e:	2201      	movs	r2, #1
 8003620:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003622:	187a      	adds	r2, r7, r1
 8003624:	2390      	movs	r3, #144	; 0x90
 8003626:	05db      	lsls	r3, r3, #23
 8003628:	0011      	movs	r1, r2
 800362a:	0018      	movs	r0, r3
 800362c:	f000 fac2 	bl	8003bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	b00b      	add	sp, #44	; 0x2c
 8003636:	bd90      	pop	{r4, r7, pc}
 8003638:	40004400 	.word	0x40004400
 800363c:	40021000 	.word	0x40021000

08003640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003644:	e7fe      	b.n	8003644 <NMI_Handler+0x4>

08003646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800364a:	e7fe      	b.n	800364a <HardFault_Handler+0x4>

0800364c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003664:	f000 f966 	bl	8003934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003672:	2001      	movs	r0, #1
 8003674:	f000 fc48 	bl	8003f08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <TIM6_IRQHandler+0x14>)
 8003686:	0018      	movs	r0, r3
 8003688:	f001 fda4 	bl	80051d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	20000324 	.word	0x20000324

08003698 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <TIM7_IRQHandler+0x14>)
 800369e:	0018      	movs	r0, r3
 80036a0:	f001 fd98 	bl	80051d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	2000036c 	.word	0x2000036c

080036b0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <SPI1_IRQHandler+0x14>)
 80036b6:	0018      	movs	r0, r3
 80036b8:	f001 f95e 	bl	8004978 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	20000230 	.word	0x20000230

080036c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  return 1;
 80036cc:	2301      	movs	r3, #1
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <_kill>:

int _kill(int pid, int sig)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036de:	f003 f841 	bl	8006764 <__errno>
 80036e2:	0003      	movs	r3, r0
 80036e4:	2216      	movs	r2, #22
 80036e6:	601a      	str	r2, [r3, #0]
  return -1;
 80036e8:	2301      	movs	r3, #1
 80036ea:	425b      	negs	r3, r3
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <_exit>:

void _exit (int status)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036fc:	2301      	movs	r3, #1
 80036fe:	425a      	negs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	0011      	movs	r1, r2
 8003704:	0018      	movs	r0, r3
 8003706:	f7ff ffe5 	bl	80036d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800370a:	e7fe      	b.n	800370a <_exit+0x16>

0800370c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	e00a      	b.n	8003734 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800371e:	e000      	b.n	8003722 <_read+0x16>
 8003720:	bf00      	nop
 8003722:	0001      	movs	r1, r0
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	60ba      	str	r2, [r7, #8]
 800372a:	b2ca      	uxtb	r2, r1
 800372c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3301      	adds	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	dbf0      	blt.n	800371e <_read+0x12>
  }

  return len;
 800373c:	687b      	ldr	r3, [r7, #4]
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	b006      	add	sp, #24
 8003744:	bd80      	pop	{r7, pc}

08003746 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e009      	b.n	800376c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	60ba      	str	r2, [r7, #8]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	0018      	movs	r0, r3
 8003762:	e000      	b.n	8003766 <_write+0x20>
 8003764:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	3301      	adds	r3, #1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	dbf1      	blt.n	8003758 <_write+0x12>
  }
  return len;
 8003774:	687b      	ldr	r3, [r7, #4]
}
 8003776:	0018      	movs	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	b006      	add	sp, #24
 800377c:	bd80      	pop	{r7, pc}

0800377e <_close>:

int _close(int file)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003786:	2301      	movs	r3, #1
 8003788:	425b      	negs	r3, r3
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	b002      	add	sp, #8
 8003790:	bd80      	pop	{r7, pc}

08003792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2280      	movs	r2, #128	; 0x80
 80037a0:	0192      	lsls	r2, r2, #6
 80037a2:	605a      	str	r2, [r3, #4]
  return 0;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	0018      	movs	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b002      	add	sp, #8
 80037ac:	bd80      	pop	{r7, pc}

080037ae <_isatty>:

int _isatty(int file)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037b6:	2301      	movs	r3, #1
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b002      	add	sp, #8
 80037be:	bd80      	pop	{r7, pc}

080037c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	0018      	movs	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b004      	add	sp, #16
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037e0:	4a14      	ldr	r2, [pc, #80]	; (8003834 <_sbrk+0x5c>)
 80037e2:	4b15      	ldr	r3, [pc, #84]	; (8003838 <_sbrk+0x60>)
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037ec:	4b13      	ldr	r3, [pc, #76]	; (800383c <_sbrk+0x64>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d102      	bne.n	80037fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037f4:	4b11      	ldr	r3, [pc, #68]	; (800383c <_sbrk+0x64>)
 80037f6:	4a12      	ldr	r2, [pc, #72]	; (8003840 <_sbrk+0x68>)
 80037f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <_sbrk+0x64>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	18d3      	adds	r3, r2, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	429a      	cmp	r2, r3
 8003806:	d207      	bcs.n	8003818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003808:	f002 ffac 	bl	8006764 <__errno>
 800380c:	0003      	movs	r3, r0
 800380e:	220c      	movs	r2, #12
 8003810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003812:	2301      	movs	r3, #1
 8003814:	425b      	negs	r3, r3
 8003816:	e009      	b.n	800382c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <_sbrk+0x64>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800381e:	4b07      	ldr	r3, [pc, #28]	; (800383c <_sbrk+0x64>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <_sbrk+0x64>)
 8003828:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800382a:	68fb      	ldr	r3, [r7, #12]
}
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	b006      	add	sp, #24
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20004000 	.word	0x20004000
 8003838:	00000400 	.word	0x00000400
 800383c:	200005ac 	.word	0x200005ac
 8003840:	200005c8 	.word	0x200005c8

08003844 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003850:	480d      	ldr	r0, [pc, #52]	; (8003888 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003852:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003854:	f7ff fff6 	bl	8003844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003858:	480c      	ldr	r0, [pc, #48]	; (800388c <LoopForever+0x6>)
  ldr r1, =_edata
 800385a:	490d      	ldr	r1, [pc, #52]	; (8003890 <LoopForever+0xa>)
  ldr r2, =_sidata
 800385c:	4a0d      	ldr	r2, [pc, #52]	; (8003894 <LoopForever+0xe>)
  movs r3, #0
 800385e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003860:	e002      	b.n	8003868 <LoopCopyDataInit>

08003862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003866:	3304      	adds	r3, #4

08003868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800386a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800386c:	d3f9      	bcc.n	8003862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800386e:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003870:	4c0a      	ldr	r4, [pc, #40]	; (800389c <LoopForever+0x16>)
  movs r3, #0
 8003872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003874:	e001      	b.n	800387a <LoopFillZerobss>

08003876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003878:	3204      	adds	r2, #4

0800387a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800387a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800387c:	d3fb      	bcc.n	8003876 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800387e:	f002 ff77 	bl	8006770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003882:	f7fe ffb5 	bl	80027f0 <main>

08003886 <LoopForever>:

LoopForever:
    b LoopForever
 8003886:	e7fe      	b.n	8003886 <LoopForever>
  ldr   r0, =_estack
 8003888:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800388c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003890:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8003894:	08009bcc 	.word	0x08009bcc
  ldr r2, =_sbss
 8003898:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 800389c:	200005c4 	.word	0x200005c4

080038a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038a0:	e7fe      	b.n	80038a0 <ADC1_IRQHandler>
	...

080038a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038a8:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <HAL_Init+0x24>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <HAL_Init+0x24>)
 80038ae:	2110      	movs	r1, #16
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80038b4:	2000      	movs	r0, #0
 80038b6:	f000 f809 	bl	80038cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038ba:	f7ff fcd7 	bl	800326c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	0018      	movs	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	40022000 	.word	0x40022000

080038cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038d4:	4b14      	ldr	r3, [pc, #80]	; (8003928 <HAL_InitTick+0x5c>)
 80038d6:	681c      	ldr	r4, [r3, #0]
 80038d8:	4b14      	ldr	r3, [pc, #80]	; (800392c <HAL_InitTick+0x60>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	0019      	movs	r1, r3
 80038de:	23fa      	movs	r3, #250	; 0xfa
 80038e0:	0098      	lsls	r0, r3, #2
 80038e2:	f7fc fc2d 	bl	8000140 <__udivsi3>
 80038e6:	0003      	movs	r3, r0
 80038e8:	0019      	movs	r1, r3
 80038ea:	0020      	movs	r0, r4
 80038ec:	f7fc fc28 	bl	8000140 <__udivsi3>
 80038f0:	0003      	movs	r3, r0
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 f90b 	bl	8003b0e <HAL_SYSTICK_Config>
 80038f8:	1e03      	subs	r3, r0, #0
 80038fa:	d001      	beq.n	8003900 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e00f      	b.n	8003920 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d80b      	bhi.n	800391e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	2301      	movs	r3, #1
 800390a:	425b      	negs	r3, r3
 800390c:	2200      	movs	r2, #0
 800390e:	0018      	movs	r0, r3
 8003910:	f000 f8d8 	bl	8003ac4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_InitTick+0x64>)
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	b003      	add	sp, #12
 8003926:	bd90      	pop	{r4, r7, pc}
 8003928:	20000038 	.word	0x20000038
 800392c:	20000040 	.word	0x20000040
 8003930:	2000003c 	.word	0x2000003c

08003934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_IncTick+0x1c>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	001a      	movs	r2, r3
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_IncTick+0x20>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	18d2      	adds	r2, r2, r3
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <HAL_IncTick+0x20>)
 8003946:	601a      	str	r2, [r3, #0]
}
 8003948:	46c0      	nop			; (mov r8, r8)
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	20000040 	.word	0x20000040
 8003954:	200005b0 	.word	0x200005b0

08003958 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  return uwTick;
 800395c:	4b02      	ldr	r3, [pc, #8]	; (8003968 <HAL_GetTick+0x10>)
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	0018      	movs	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	200005b0 	.word	0x200005b0

0800396c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	0002      	movs	r2, r0
 8003974:	1dfb      	adds	r3, r7, #7
 8003976:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003978:	1dfb      	adds	r3, r7, #7
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b7f      	cmp	r3, #127	; 0x7f
 800397e:	d809      	bhi.n	8003994 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003980:	1dfb      	adds	r3, r7, #7
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	001a      	movs	r2, r3
 8003986:	231f      	movs	r3, #31
 8003988:	401a      	ands	r2, r3
 800398a:	4b04      	ldr	r3, [pc, #16]	; (800399c <__NVIC_EnableIRQ+0x30>)
 800398c:	2101      	movs	r1, #1
 800398e:	4091      	lsls	r1, r2
 8003990:	000a      	movs	r2, r1
 8003992:	601a      	str	r2, [r3, #0]
  }
}
 8003994:	46c0      	nop			; (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b002      	add	sp, #8
 800399a:	bd80      	pop	{r7, pc}
 800399c:	e000e100 	.word	0xe000e100

080039a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	0002      	movs	r2, r0
 80039a8:	6039      	str	r1, [r7, #0]
 80039aa:	1dfb      	adds	r3, r7, #7
 80039ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039ae:	1dfb      	adds	r3, r7, #7
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b7f      	cmp	r3, #127	; 0x7f
 80039b4:	d828      	bhi.n	8003a08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039b6:	4a2f      	ldr	r2, [pc, #188]	; (8003a74 <__NVIC_SetPriority+0xd4>)
 80039b8:	1dfb      	adds	r3, r7, #7
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	b25b      	sxtb	r3, r3
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	33c0      	adds	r3, #192	; 0xc0
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	589b      	ldr	r3, [r3, r2]
 80039c6:	1dfa      	adds	r2, r7, #7
 80039c8:	7812      	ldrb	r2, [r2, #0]
 80039ca:	0011      	movs	r1, r2
 80039cc:	2203      	movs	r2, #3
 80039ce:	400a      	ands	r2, r1
 80039d0:	00d2      	lsls	r2, r2, #3
 80039d2:	21ff      	movs	r1, #255	; 0xff
 80039d4:	4091      	lsls	r1, r2
 80039d6:	000a      	movs	r2, r1
 80039d8:	43d2      	mvns	r2, r2
 80039da:	401a      	ands	r2, r3
 80039dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	019b      	lsls	r3, r3, #6
 80039e2:	22ff      	movs	r2, #255	; 0xff
 80039e4:	401a      	ands	r2, r3
 80039e6:	1dfb      	adds	r3, r7, #7
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	0018      	movs	r0, r3
 80039ec:	2303      	movs	r3, #3
 80039ee:	4003      	ands	r3, r0
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039f4:	481f      	ldr	r0, [pc, #124]	; (8003a74 <__NVIC_SetPriority+0xd4>)
 80039f6:	1dfb      	adds	r3, r7, #7
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	b25b      	sxtb	r3, r3
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	430a      	orrs	r2, r1
 8003a00:	33c0      	adds	r3, #192	; 0xc0
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a06:	e031      	b.n	8003a6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a08:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <__NVIC_SetPriority+0xd8>)
 8003a0a:	1dfb      	adds	r3, r7, #7
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	0019      	movs	r1, r3
 8003a10:	230f      	movs	r3, #15
 8003a12:	400b      	ands	r3, r1
 8003a14:	3b08      	subs	r3, #8
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	3306      	adds	r3, #6
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	18d3      	adds	r3, r2, r3
 8003a1e:	3304      	adds	r3, #4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	1dfa      	adds	r2, r7, #7
 8003a24:	7812      	ldrb	r2, [r2, #0]
 8003a26:	0011      	movs	r1, r2
 8003a28:	2203      	movs	r2, #3
 8003a2a:	400a      	ands	r2, r1
 8003a2c:	00d2      	lsls	r2, r2, #3
 8003a2e:	21ff      	movs	r1, #255	; 0xff
 8003a30:	4091      	lsls	r1, r2
 8003a32:	000a      	movs	r2, r1
 8003a34:	43d2      	mvns	r2, r2
 8003a36:	401a      	ands	r2, r3
 8003a38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	019b      	lsls	r3, r3, #6
 8003a3e:	22ff      	movs	r2, #255	; 0xff
 8003a40:	401a      	ands	r2, r3
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	0018      	movs	r0, r3
 8003a48:	2303      	movs	r3, #3
 8003a4a:	4003      	ands	r3, r0
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a50:	4809      	ldr	r0, [pc, #36]	; (8003a78 <__NVIC_SetPriority+0xd8>)
 8003a52:	1dfb      	adds	r3, r7, #7
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	001c      	movs	r4, r3
 8003a58:	230f      	movs	r3, #15
 8003a5a:	4023      	ands	r3, r4
 8003a5c:	3b08      	subs	r3, #8
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	430a      	orrs	r2, r1
 8003a62:	3306      	adds	r3, #6
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	18c3      	adds	r3, r0, r3
 8003a68:	3304      	adds	r3, #4
 8003a6a:	601a      	str	r2, [r3, #0]
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b003      	add	sp, #12
 8003a72:	bd90      	pop	{r4, r7, pc}
 8003a74:	e000e100 	.word	0xe000e100
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	1e5a      	subs	r2, r3, #1
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	045b      	lsls	r3, r3, #17
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d301      	bcc.n	8003a94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a90:	2301      	movs	r3, #1
 8003a92:	e010      	b.n	8003ab6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a94:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <SysTick_Config+0x44>)
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	3a01      	subs	r2, #1
 8003a9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	425b      	negs	r3, r3
 8003aa0:	2103      	movs	r1, #3
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f7ff ff7c 	bl	80039a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <SysTick_Config+0x44>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aae:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <SysTick_Config+0x44>)
 8003ab0:	2207      	movs	r2, #7
 8003ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b002      	add	sp, #8
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	e000e010 	.word	0xe000e010

08003ac4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	210f      	movs	r1, #15
 8003ad0:	187b      	adds	r3, r7, r1
 8003ad2:	1c02      	adds	r2, r0, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	187b      	adds	r3, r7, r1
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	b25b      	sxtb	r3, r3
 8003ade:	0011      	movs	r1, r2
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7ff ff5d 	bl	80039a0 <__NVIC_SetPriority>
}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b004      	add	sp, #16
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	0002      	movs	r2, r0
 8003af6:	1dfb      	adds	r3, r7, #7
 8003af8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003afa:	1dfb      	adds	r3, r7, #7
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	b25b      	sxtb	r3, r3
 8003b00:	0018      	movs	r0, r3
 8003b02:	f7ff ff33 	bl	800396c <__NVIC_EnableIRQ>
}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b002      	add	sp, #8
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f7ff ffaf 	bl	8003a7c <SysTick_Config>
 8003b1e:	0003      	movs	r3, r0
}
 8003b20:	0018      	movs	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b002      	add	sp, #8
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b30:	210f      	movs	r1, #15
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2221      	movs	r2, #33	; 0x21
 8003b3c:	5c9b      	ldrb	r3, [r3, r2]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d006      	beq.n	8003b52 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2204      	movs	r2, #4
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003b4a:	187b      	adds	r3, r7, r1
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]
 8003b50:	e028      	b.n	8003ba4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	210e      	movs	r1, #14
 8003b5e:	438a      	bics	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	438a      	bics	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	4091      	lsls	r1, r2
 8003b7e:	000a      	movs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2221      	movs	r2, #33	; 0x21
 8003b86:	2101      	movs	r1, #1
 8003b88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	2100      	movs	r1, #0
 8003b90:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	0010      	movs	r0, r2
 8003ba2:	4798      	blx	r3
    }
  }
  return status;
 8003ba4:	230f      	movs	r3, #15
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	781b      	ldrb	r3, [r3, #0]
}
 8003baa:	0018      	movs	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b004      	add	sp, #16
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bc2:	e14f      	b.n	8003e64 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4091      	lsls	r1, r2
 8003bce:	000a      	movs	r2, r1
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d100      	bne.n	8003bdc <HAL_GPIO_Init+0x28>
 8003bda:	e140      	b.n	8003e5e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2203      	movs	r2, #3
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d005      	beq.n	8003bf4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2203      	movs	r2, #3
 8003bee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d130      	bne.n	8003c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	409a      	lsls	r2, r3
 8003c02:	0013      	movs	r3, r2
 8003c04:	43da      	mvns	r2, r3
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	409a      	lsls	r2, r3
 8003c16:	0013      	movs	r3, r2
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	0013      	movs	r3, r2
 8003c32:	43da      	mvns	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	2201      	movs	r2, #1
 8003c42:	401a      	ands	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	409a      	lsls	r2, r3
 8003c48:	0013      	movs	r3, r2
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d017      	beq.n	8003c92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	0013      	movs	r3, r2
 8003c72:	43da      	mvns	r2, r3
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	409a      	lsls	r2, r3
 8003c84:	0013      	movs	r3, r2
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2203      	movs	r2, #3
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d123      	bne.n	8003ce6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	08da      	lsrs	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3208      	adds	r2, #8
 8003ca6:	0092      	lsls	r2, r2, #2
 8003ca8:	58d3      	ldr	r3, [r2, r3]
 8003caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2207      	movs	r2, #7
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	220f      	movs	r2, #15
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	0013      	movs	r3, r2
 8003cba:	43da      	mvns	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2107      	movs	r1, #7
 8003cca:	400b      	ands	r3, r1
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	0013      	movs	r3, r2
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	08da      	lsrs	r2, r3, #3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3208      	adds	r2, #8
 8003ce0:	0092      	lsls	r2, r2, #2
 8003ce2:	6939      	ldr	r1, [r7, #16]
 8003ce4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	0013      	movs	r3, r2
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2203      	movs	r2, #3
 8003d04:	401a      	ands	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	0013      	movs	r3, r2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	23c0      	movs	r3, #192	; 0xc0
 8003d20:	029b      	lsls	r3, r3, #10
 8003d22:	4013      	ands	r3, r2
 8003d24:	d100      	bne.n	8003d28 <HAL_GPIO_Init+0x174>
 8003d26:	e09a      	b.n	8003e5e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d28:	4b54      	ldr	r3, [pc, #336]	; (8003e7c <HAL_GPIO_Init+0x2c8>)
 8003d2a:	699a      	ldr	r2, [r3, #24]
 8003d2c:	4b53      	ldr	r3, [pc, #332]	; (8003e7c <HAL_GPIO_Init+0x2c8>)
 8003d2e:	2101      	movs	r1, #1
 8003d30:	430a      	orrs	r2, r1
 8003d32:	619a      	str	r2, [r3, #24]
 8003d34:	4b51      	ldr	r3, [pc, #324]	; (8003e7c <HAL_GPIO_Init+0x2c8>)
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d40:	4a4f      	ldr	r2, [pc, #316]	; (8003e80 <HAL_GPIO_Init+0x2cc>)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	3302      	adds	r3, #2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	589b      	ldr	r3, [r3, r2]
 8003d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2203      	movs	r2, #3
 8003d52:	4013      	ands	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	220f      	movs	r2, #15
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	0013      	movs	r3, r2
 8003d5c:	43da      	mvns	r2, r3
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	2390      	movs	r3, #144	; 0x90
 8003d68:	05db      	lsls	r3, r3, #23
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d013      	beq.n	8003d96 <HAL_GPIO_Init+0x1e2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a44      	ldr	r2, [pc, #272]	; (8003e84 <HAL_GPIO_Init+0x2d0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00d      	beq.n	8003d92 <HAL_GPIO_Init+0x1de>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a43      	ldr	r2, [pc, #268]	; (8003e88 <HAL_GPIO_Init+0x2d4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <HAL_GPIO_Init+0x1da>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a42      	ldr	r2, [pc, #264]	; (8003e8c <HAL_GPIO_Init+0x2d8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d101      	bne.n	8003d8a <HAL_GPIO_Init+0x1d6>
 8003d86:	2303      	movs	r3, #3
 8003d88:	e006      	b.n	8003d98 <HAL_GPIO_Init+0x1e4>
 8003d8a:	2305      	movs	r3, #5
 8003d8c:	e004      	b.n	8003d98 <HAL_GPIO_Init+0x1e4>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e002      	b.n	8003d98 <HAL_GPIO_Init+0x1e4>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <HAL_GPIO_Init+0x1e4>
 8003d96:	2300      	movs	r3, #0
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	2103      	movs	r1, #3
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	0092      	lsls	r2, r2, #2
 8003da0:	4093      	lsls	r3, r2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003da8:	4935      	ldr	r1, [pc, #212]	; (8003e80 <HAL_GPIO_Init+0x2cc>)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	089b      	lsrs	r3, r3, #2
 8003dae:	3302      	adds	r3, #2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003db6:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <HAL_GPIO_Init+0x2dc>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	035b      	lsls	r3, r3, #13
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003dda:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <HAL_GPIO_Init+0x2dc>)
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003de0:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <HAL_GPIO_Init+0x2dc>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	43da      	mvns	r2, r3
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4013      	ands	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	039b      	lsls	r3, r3, #14
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e04:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <HAL_GPIO_Init+0x2dc>)
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003e0a:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <HAL_GPIO_Init+0x2dc>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	43da      	mvns	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4013      	ands	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	2380      	movs	r3, #128	; 0x80
 8003e20:	029b      	lsls	r3, r3, #10
 8003e22:	4013      	ands	r3, r2
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <HAL_GPIO_Init+0x2dc>)
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003e34:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <HAL_GPIO_Init+0x2dc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	43da      	mvns	r2, r3
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	025b      	lsls	r3, r3, #9
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e58:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <HAL_GPIO_Init+0x2dc>)
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	3301      	adds	r3, #1
 8003e62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	40da      	lsrs	r2, r3
 8003e6c:	1e13      	subs	r3, r2, #0
 8003e6e:	d000      	beq.n	8003e72 <HAL_GPIO_Init+0x2be>
 8003e70:	e6a8      	b.n	8003bc4 <HAL_GPIO_Init+0x10>
  } 
}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b006      	add	sp, #24
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40010000 	.word	0x40010000
 8003e84:	48000400 	.word	0x48000400
 8003e88:	48000800 	.word	0x48000800
 8003e8c:	48000c00 	.word	0x48000c00
 8003e90:	40010400 	.word	0x40010400

08003e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	000a      	movs	r2, r1
 8003e9e:	1cbb      	adds	r3, r7, #2
 8003ea0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	1cba      	adds	r2, r7, #2
 8003ea8:	8812      	ldrh	r2, [r2, #0]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003eae:	230f      	movs	r3, #15
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e003      	b.n	8003ec0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eb8:	230f      	movs	r3, #15
 8003eba:	18fb      	adds	r3, r7, r3
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003ec0:	230f      	movs	r3, #15
 8003ec2:	18fb      	adds	r3, r7, r3
 8003ec4:	781b      	ldrb	r3, [r3, #0]
  }
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b004      	add	sp, #16
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	0008      	movs	r0, r1
 8003ed8:	0011      	movs	r1, r2
 8003eda:	1cbb      	adds	r3, r7, #2
 8003edc:	1c02      	adds	r2, r0, #0
 8003ede:	801a      	strh	r2, [r3, #0]
 8003ee0:	1c7b      	adds	r3, r7, #1
 8003ee2:	1c0a      	adds	r2, r1, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ee6:	1c7b      	adds	r3, r7, #1
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d004      	beq.n	8003ef8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eee:	1cbb      	adds	r3, r7, #2
 8003ef0:	881a      	ldrh	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ef6:	e003      	b.n	8003f00 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ef8:	1cbb      	adds	r3, r7, #2
 8003efa:	881a      	ldrh	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f00:	46c0      	nop			; (mov r8, r8)
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b002      	add	sp, #8
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	0002      	movs	r2, r0
 8003f10:	1dbb      	adds	r3, r7, #6
 8003f12:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	1dba      	adds	r2, r7, #6
 8003f1a:	8812      	ldrh	r2, [r2, #0]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d008      	beq.n	8003f32 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003f22:	1dba      	adds	r2, r7, #6
 8003f24:	8812      	ldrh	r2, [r2, #0]
 8003f26:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f28:	1dbb      	adds	r3, r7, #6
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7fe ffef 	bl	8002f10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b002      	add	sp, #8
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	40010400 	.word	0x40010400

08003f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e305      	b.n	800455e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2201      	movs	r2, #1
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d100      	bne.n	8003f5e <HAL_RCC_OscConfig+0x1e>
 8003f5c:	e08d      	b.n	800407a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f5e:	4bc5      	ldr	r3, [pc, #788]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	220c      	movs	r2, #12
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d00e      	beq.n	8003f88 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f6a:	4bc2      	ldr	r3, [pc, #776]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	220c      	movs	r2, #12
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d116      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x64>
 8003f76:	4bbf      	ldr	r3, [pc, #764]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	23c0      	movs	r3, #192	; 0xc0
 8003f7c:	025b      	lsls	r3, r3, #9
 8003f7e:	401a      	ands	r2, r3
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	025b      	lsls	r3, r3, #9
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d10d      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	4bba      	ldr	r3, [pc, #744]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	029b      	lsls	r3, r3, #10
 8003f90:	4013      	ands	r3, r2
 8003f92:	d100      	bne.n	8003f96 <HAL_RCC_OscConfig+0x56>
 8003f94:	e070      	b.n	8004078 <HAL_RCC_OscConfig+0x138>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d000      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x60>
 8003f9e:	e06b      	b.n	8004078 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e2dc      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_OscConfig+0x7c>
 8003fac:	4bb1      	ldr	r3, [pc, #708]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4bb0      	ldr	r3, [pc, #704]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8003fb2:	2180      	movs	r1, #128	; 0x80
 8003fb4:	0249      	lsls	r1, r1, #9
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	e02f      	b.n	800401c <HAL_RCC_OscConfig+0xdc>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10c      	bne.n	8003fde <HAL_RCC_OscConfig+0x9e>
 8003fc4:	4bab      	ldr	r3, [pc, #684]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4baa      	ldr	r3, [pc, #680]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8003fca:	49ab      	ldr	r1, [pc, #684]	; (8004278 <HAL_RCC_OscConfig+0x338>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	4ba8      	ldr	r3, [pc, #672]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4ba7      	ldr	r3, [pc, #668]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8003fd6:	49a9      	ldr	r1, [pc, #676]	; (800427c <HAL_RCC_OscConfig+0x33c>)
 8003fd8:	400a      	ands	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e01e      	b.n	800401c <HAL_RCC_OscConfig+0xdc>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d10e      	bne.n	8004004 <HAL_RCC_OscConfig+0xc4>
 8003fe6:	4ba3      	ldr	r3, [pc, #652]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4ba2      	ldr	r3, [pc, #648]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8003fec:	2180      	movs	r1, #128	; 0x80
 8003fee:	02c9      	lsls	r1, r1, #11
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	4b9f      	ldr	r3, [pc, #636]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b9e      	ldr	r3, [pc, #632]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8003ffa:	2180      	movs	r1, #128	; 0x80
 8003ffc:	0249      	lsls	r1, r1, #9
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e00b      	b.n	800401c <HAL_RCC_OscConfig+0xdc>
 8004004:	4b9b      	ldr	r3, [pc, #620]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4b9a      	ldr	r3, [pc, #616]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 800400a:	499b      	ldr	r1, [pc, #620]	; (8004278 <HAL_RCC_OscConfig+0x338>)
 800400c:	400a      	ands	r2, r1
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	4b98      	ldr	r3, [pc, #608]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	4b97      	ldr	r3, [pc, #604]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004016:	4999      	ldr	r1, [pc, #612]	; (800427c <HAL_RCC_OscConfig+0x33c>)
 8004018:	400a      	ands	r2, r1
 800401a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d014      	beq.n	800404e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7ff fc98 	bl	8003958 <HAL_GetTick>
 8004028:	0003      	movs	r3, r0
 800402a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800402e:	f7ff fc93 	bl	8003958 <HAL_GetTick>
 8004032:	0002      	movs	r2, r0
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b64      	cmp	r3, #100	; 0x64
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e28e      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004040:	4b8c      	ldr	r3, [pc, #560]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	029b      	lsls	r3, r3, #10
 8004048:	4013      	ands	r3, r2
 800404a:	d0f0      	beq.n	800402e <HAL_RCC_OscConfig+0xee>
 800404c:	e015      	b.n	800407a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404e:	f7ff fc83 	bl	8003958 <HAL_GetTick>
 8004052:	0003      	movs	r3, r0
 8004054:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004058:	f7ff fc7e 	bl	8003958 <HAL_GetTick>
 800405c:	0002      	movs	r2, r0
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b64      	cmp	r3, #100	; 0x64
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e279      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406a:	4b82      	ldr	r3, [pc, #520]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	2380      	movs	r3, #128	; 0x80
 8004070:	029b      	lsls	r3, r3, #10
 8004072:	4013      	ands	r3, r2
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x118>
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2202      	movs	r2, #2
 8004080:	4013      	ands	r3, r2
 8004082:	d100      	bne.n	8004086 <HAL_RCC_OscConfig+0x146>
 8004084:	e06c      	b.n	8004160 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004086:	4b7b      	ldr	r3, [pc, #492]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	220c      	movs	r2, #12
 800408c:	4013      	ands	r3, r2
 800408e:	d00e      	beq.n	80040ae <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004090:	4b78      	ldr	r3, [pc, #480]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	220c      	movs	r2, #12
 8004096:	4013      	ands	r3, r2
 8004098:	2b08      	cmp	r3, #8
 800409a:	d11f      	bne.n	80040dc <HAL_RCC_OscConfig+0x19c>
 800409c:	4b75      	ldr	r3, [pc, #468]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	23c0      	movs	r3, #192	; 0xc0
 80040a2:	025b      	lsls	r3, r3, #9
 80040a4:	401a      	ands	r2, r3
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d116      	bne.n	80040dc <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ae:	4b71      	ldr	r3, [pc, #452]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2202      	movs	r2, #2
 80040b4:	4013      	ands	r3, r2
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_OscConfig+0x184>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e24c      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c4:	4b6b      	ldr	r3, [pc, #428]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	22f8      	movs	r2, #248	; 0xf8
 80040ca:	4393      	bics	r3, r2
 80040cc:	0019      	movs	r1, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	00da      	lsls	r2, r3, #3
 80040d4:	4b67      	ldr	r3, [pc, #412]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 80040d6:	430a      	orrs	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040da:	e041      	b.n	8004160 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d024      	beq.n	800412e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e4:	4b63      	ldr	r3, [pc, #396]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b62      	ldr	r3, [pc, #392]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 80040ea:	2101      	movs	r1, #1
 80040ec:	430a      	orrs	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7ff fc32 	bl	8003958 <HAL_GetTick>
 80040f4:	0003      	movs	r3, r0
 80040f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fa:	f7ff fc2d 	bl	8003958 <HAL_GetTick>
 80040fe:	0002      	movs	r2, r0
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e228      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410c:	4b59      	ldr	r3, [pc, #356]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2202      	movs	r2, #2
 8004112:	4013      	ands	r3, r2
 8004114:	d0f1      	beq.n	80040fa <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004116:	4b57      	ldr	r3, [pc, #348]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	22f8      	movs	r2, #248	; 0xf8
 800411c:	4393      	bics	r3, r2
 800411e:	0019      	movs	r1, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	00da      	lsls	r2, r3, #3
 8004126:	4b53      	ldr	r3, [pc, #332]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004128:	430a      	orrs	r2, r1
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	e018      	b.n	8004160 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412e:	4b51      	ldr	r3, [pc, #324]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b50      	ldr	r3, [pc, #320]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004134:	2101      	movs	r1, #1
 8004136:	438a      	bics	r2, r1
 8004138:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413a:	f7ff fc0d 	bl	8003958 <HAL_GetTick>
 800413e:	0003      	movs	r3, r0
 8004140:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004144:	f7ff fc08 	bl	8003958 <HAL_GetTick>
 8004148:	0002      	movs	r2, r0
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e203      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004156:	4b47      	ldr	r3, [pc, #284]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2202      	movs	r2, #2
 800415c:	4013      	ands	r3, r2
 800415e:	d1f1      	bne.n	8004144 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2208      	movs	r2, #8
 8004166:	4013      	ands	r3, r2
 8004168:	d036      	beq.n	80041d8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d019      	beq.n	80041a6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004172:	4b40      	ldr	r3, [pc, #256]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004176:	4b3f      	ldr	r3, [pc, #252]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004178:	2101      	movs	r1, #1
 800417a:	430a      	orrs	r2, r1
 800417c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417e:	f7ff fbeb 	bl	8003958 <HAL_GetTick>
 8004182:	0003      	movs	r3, r0
 8004184:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004188:	f7ff fbe6 	bl	8003958 <HAL_GetTick>
 800418c:	0002      	movs	r2, r0
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e1e1      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800419a:	4b36      	ldr	r3, [pc, #216]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2202      	movs	r2, #2
 80041a0:	4013      	ands	r3, r2
 80041a2:	d0f1      	beq.n	8004188 <HAL_RCC_OscConfig+0x248>
 80041a4:	e018      	b.n	80041d8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a6:	4b33      	ldr	r3, [pc, #204]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 80041a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041aa:	4b32      	ldr	r3, [pc, #200]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 80041ac:	2101      	movs	r1, #1
 80041ae:	438a      	bics	r2, r1
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b2:	f7ff fbd1 	bl	8003958 <HAL_GetTick>
 80041b6:	0003      	movs	r3, r0
 80041b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041bc:	f7ff fbcc 	bl	8003958 <HAL_GetTick>
 80041c0:	0002      	movs	r2, r0
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e1c7      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ce:	4b29      	ldr	r3, [pc, #164]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2202      	movs	r2, #2
 80041d4:	4013      	ands	r3, r2
 80041d6:	d1f1      	bne.n	80041bc <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2204      	movs	r2, #4
 80041de:	4013      	ands	r3, r2
 80041e0:	d100      	bne.n	80041e4 <HAL_RCC_OscConfig+0x2a4>
 80041e2:	e0b5      	b.n	8004350 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e4:	201f      	movs	r0, #31
 80041e6:	183b      	adds	r3, r7, r0
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ec:	4b21      	ldr	r3, [pc, #132]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 80041ee:	69da      	ldr	r2, [r3, #28]
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	055b      	lsls	r3, r3, #21
 80041f4:	4013      	ands	r3, r2
 80041f6:	d110      	bne.n	800421a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f8:	4b1e      	ldr	r3, [pc, #120]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 80041fe:	2180      	movs	r1, #128	; 0x80
 8004200:	0549      	lsls	r1, r1, #21
 8004202:	430a      	orrs	r2, r1
 8004204:	61da      	str	r2, [r3, #28]
 8004206:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	2380      	movs	r3, #128	; 0x80
 800420c:	055b      	lsls	r3, r3, #21
 800420e:	4013      	ands	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004214:	183b      	adds	r3, r7, r0
 8004216:	2201      	movs	r2, #1
 8004218:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421a:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_RCC_OscConfig+0x340>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	4013      	ands	r3, r2
 8004224:	d11a      	bne.n	800425c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004226:	4b16      	ldr	r3, [pc, #88]	; (8004280 <HAL_RCC_OscConfig+0x340>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <HAL_RCC_OscConfig+0x340>)
 800422c:	2180      	movs	r1, #128	; 0x80
 800422e:	0049      	lsls	r1, r1, #1
 8004230:	430a      	orrs	r2, r1
 8004232:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004234:	f7ff fb90 	bl	8003958 <HAL_GetTick>
 8004238:	0003      	movs	r3, r0
 800423a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423e:	f7ff fb8b 	bl	8003958 <HAL_GetTick>
 8004242:	0002      	movs	r2, r0
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b64      	cmp	r3, #100	; 0x64
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e186      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RCC_OscConfig+0x340>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	4013      	ands	r3, r2
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10f      	bne.n	8004284 <HAL_RCC_OscConfig+0x344>
 8004264:	4b03      	ldr	r3, [pc, #12]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 8004266:	6a1a      	ldr	r2, [r3, #32]
 8004268:	4b02      	ldr	r3, [pc, #8]	; (8004274 <HAL_RCC_OscConfig+0x334>)
 800426a:	2101      	movs	r1, #1
 800426c:	430a      	orrs	r2, r1
 800426e:	621a      	str	r2, [r3, #32]
 8004270:	e036      	b.n	80042e0 <HAL_RCC_OscConfig+0x3a0>
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	40021000 	.word	0x40021000
 8004278:	fffeffff 	.word	0xfffeffff
 800427c:	fffbffff 	.word	0xfffbffff
 8004280:	40007000 	.word	0x40007000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10c      	bne.n	80042a6 <HAL_RCC_OscConfig+0x366>
 800428c:	4bb6      	ldr	r3, [pc, #728]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 800428e:	6a1a      	ldr	r2, [r3, #32]
 8004290:	4bb5      	ldr	r3, [pc, #724]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004292:	2101      	movs	r1, #1
 8004294:	438a      	bics	r2, r1
 8004296:	621a      	str	r2, [r3, #32]
 8004298:	4bb3      	ldr	r3, [pc, #716]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 800429a:	6a1a      	ldr	r2, [r3, #32]
 800429c:	4bb2      	ldr	r3, [pc, #712]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 800429e:	2104      	movs	r1, #4
 80042a0:	438a      	bics	r2, r1
 80042a2:	621a      	str	r2, [r3, #32]
 80042a4:	e01c      	b.n	80042e0 <HAL_RCC_OscConfig+0x3a0>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x388>
 80042ae:	4bae      	ldr	r3, [pc, #696]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80042b0:	6a1a      	ldr	r2, [r3, #32]
 80042b2:	4bad      	ldr	r3, [pc, #692]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80042b4:	2104      	movs	r1, #4
 80042b6:	430a      	orrs	r2, r1
 80042b8:	621a      	str	r2, [r3, #32]
 80042ba:	4bab      	ldr	r3, [pc, #684]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80042bc:	6a1a      	ldr	r2, [r3, #32]
 80042be:	4baa      	ldr	r3, [pc, #680]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80042c0:	2101      	movs	r1, #1
 80042c2:	430a      	orrs	r2, r1
 80042c4:	621a      	str	r2, [r3, #32]
 80042c6:	e00b      	b.n	80042e0 <HAL_RCC_OscConfig+0x3a0>
 80042c8:	4ba7      	ldr	r3, [pc, #668]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80042ca:	6a1a      	ldr	r2, [r3, #32]
 80042cc:	4ba6      	ldr	r3, [pc, #664]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80042ce:	2101      	movs	r1, #1
 80042d0:	438a      	bics	r2, r1
 80042d2:	621a      	str	r2, [r3, #32]
 80042d4:	4ba4      	ldr	r3, [pc, #656]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80042d6:	6a1a      	ldr	r2, [r3, #32]
 80042d8:	4ba3      	ldr	r3, [pc, #652]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80042da:	2104      	movs	r1, #4
 80042dc:	438a      	bics	r2, r1
 80042de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d014      	beq.n	8004312 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e8:	f7ff fb36 	bl	8003958 <HAL_GetTick>
 80042ec:	0003      	movs	r3, r0
 80042ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f0:	e009      	b.n	8004306 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7ff fb31 	bl	8003958 <HAL_GetTick>
 80042f6:	0002      	movs	r2, r0
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	4a9b      	ldr	r2, [pc, #620]	; (800456c <HAL_RCC_OscConfig+0x62c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e12b      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004306:	4b98      	ldr	r3, [pc, #608]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	2202      	movs	r2, #2
 800430c:	4013      	ands	r3, r2
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCC_OscConfig+0x3b2>
 8004310:	e013      	b.n	800433a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004312:	f7ff fb21 	bl	8003958 <HAL_GetTick>
 8004316:	0003      	movs	r3, r0
 8004318:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431a:	e009      	b.n	8004330 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431c:	f7ff fb1c 	bl	8003958 <HAL_GetTick>
 8004320:	0002      	movs	r2, r0
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	4a91      	ldr	r2, [pc, #580]	; (800456c <HAL_RCC_OscConfig+0x62c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e116      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004330:	4b8d      	ldr	r3, [pc, #564]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	2202      	movs	r2, #2
 8004336:	4013      	ands	r3, r2
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800433a:	231f      	movs	r3, #31
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004344:	4b88      	ldr	r3, [pc, #544]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	4b87      	ldr	r3, [pc, #540]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 800434a:	4989      	ldr	r1, [pc, #548]	; (8004570 <HAL_RCC_OscConfig+0x630>)
 800434c:	400a      	ands	r2, r1
 800434e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2210      	movs	r2, #16
 8004356:	4013      	ands	r3, r2
 8004358:	d063      	beq.n	8004422 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d12a      	bne.n	80043b8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004362:	4b81      	ldr	r3, [pc, #516]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004366:	4b80      	ldr	r3, [pc, #512]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004368:	2104      	movs	r1, #4
 800436a:	430a      	orrs	r2, r1
 800436c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800436e:	4b7e      	ldr	r3, [pc, #504]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004372:	4b7d      	ldr	r3, [pc, #500]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004374:	2101      	movs	r1, #1
 8004376:	430a      	orrs	r2, r1
 8004378:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800437a:	f7ff faed 	bl	8003958 <HAL_GetTick>
 800437e:	0003      	movs	r3, r0
 8004380:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004384:	f7ff fae8 	bl	8003958 <HAL_GetTick>
 8004388:	0002      	movs	r2, r0
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e0e3      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004396:	4b74      	ldr	r3, [pc, #464]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	2202      	movs	r2, #2
 800439c:	4013      	ands	r3, r2
 800439e:	d0f1      	beq.n	8004384 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80043a0:	4b71      	ldr	r3, [pc, #452]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80043a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a4:	22f8      	movs	r2, #248	; 0xf8
 80043a6:	4393      	bics	r3, r2
 80043a8:	0019      	movs	r1, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	00da      	lsls	r2, r3, #3
 80043b0:	4b6d      	ldr	r3, [pc, #436]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80043b2:	430a      	orrs	r2, r1
 80043b4:	635a      	str	r2, [r3, #52]	; 0x34
 80043b6:	e034      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	3305      	adds	r3, #5
 80043be:	d111      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80043c0:	4b69      	ldr	r3, [pc, #420]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80043c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c4:	4b68      	ldr	r3, [pc, #416]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80043c6:	2104      	movs	r1, #4
 80043c8:	438a      	bics	r2, r1
 80043ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80043cc:	4b66      	ldr	r3, [pc, #408]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80043ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d0:	22f8      	movs	r2, #248	; 0xf8
 80043d2:	4393      	bics	r3, r2
 80043d4:	0019      	movs	r1, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	00da      	lsls	r2, r3, #3
 80043dc:	4b62      	ldr	r3, [pc, #392]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80043de:	430a      	orrs	r2, r1
 80043e0:	635a      	str	r2, [r3, #52]	; 0x34
 80043e2:	e01e      	b.n	8004422 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80043e4:	4b60      	ldr	r3, [pc, #384]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80043e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e8:	4b5f      	ldr	r3, [pc, #380]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80043ea:	2104      	movs	r1, #4
 80043ec:	430a      	orrs	r2, r1
 80043ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80043f0:	4b5d      	ldr	r3, [pc, #372]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80043f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043f4:	4b5c      	ldr	r3, [pc, #368]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80043f6:	2101      	movs	r1, #1
 80043f8:	438a      	bics	r2, r1
 80043fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fc:	f7ff faac 	bl	8003958 <HAL_GetTick>
 8004400:	0003      	movs	r3, r0
 8004402:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004406:	f7ff faa7 	bl	8003958 <HAL_GetTick>
 800440a:	0002      	movs	r2, r0
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e0a2      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004418:	4b53      	ldr	r3, [pc, #332]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 800441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441c:	2202      	movs	r2, #2
 800441e:	4013      	ands	r3, r2
 8004420:	d1f1      	bne.n	8004406 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d100      	bne.n	800442c <HAL_RCC_OscConfig+0x4ec>
 800442a:	e097      	b.n	800455c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800442c:	4b4e      	ldr	r3, [pc, #312]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	220c      	movs	r2, #12
 8004432:	4013      	ands	r3, r2
 8004434:	2b08      	cmp	r3, #8
 8004436:	d100      	bne.n	800443a <HAL_RCC_OscConfig+0x4fa>
 8004438:	e06b      	b.n	8004512 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d14c      	bne.n	80044dc <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004442:	4b49      	ldr	r3, [pc, #292]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4b48      	ldr	r3, [pc, #288]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004448:	494a      	ldr	r1, [pc, #296]	; (8004574 <HAL_RCC_OscConfig+0x634>)
 800444a:	400a      	ands	r2, r1
 800444c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444e:	f7ff fa83 	bl	8003958 <HAL_GetTick>
 8004452:	0003      	movs	r3, r0
 8004454:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004458:	f7ff fa7e 	bl	8003958 <HAL_GetTick>
 800445c:	0002      	movs	r2, r0
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e079      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446a:	4b3f      	ldr	r3, [pc, #252]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	049b      	lsls	r3, r3, #18
 8004472:	4013      	ands	r3, r2
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004476:	4b3c      	ldr	r3, [pc, #240]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	220f      	movs	r2, #15
 800447c:	4393      	bics	r3, r2
 800447e:	0019      	movs	r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004484:	4b38      	ldr	r3, [pc, #224]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004486:	430a      	orrs	r2, r1
 8004488:	62da      	str	r2, [r3, #44]	; 0x2c
 800448a:	4b37      	ldr	r3, [pc, #220]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4a3a      	ldr	r2, [pc, #232]	; (8004578 <HAL_RCC_OscConfig+0x638>)
 8004490:	4013      	ands	r3, r2
 8004492:	0019      	movs	r1, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	431a      	orrs	r2, r3
 800449e:	4b32      	ldr	r3, [pc, #200]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80044a0:	430a      	orrs	r2, r1
 80044a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a4:	4b30      	ldr	r3, [pc, #192]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4b2f      	ldr	r3, [pc, #188]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80044aa:	2180      	movs	r1, #128	; 0x80
 80044ac:	0449      	lsls	r1, r1, #17
 80044ae:	430a      	orrs	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b2:	f7ff fa51 	bl	8003958 <HAL_GetTick>
 80044b6:	0003      	movs	r3, r0
 80044b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044bc:	f7ff fa4c 	bl	8003958 <HAL_GetTick>
 80044c0:	0002      	movs	r2, r0
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e047      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044ce:	4b26      	ldr	r3, [pc, #152]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	2380      	movs	r3, #128	; 0x80
 80044d4:	049b      	lsls	r3, r3, #18
 80044d6:	4013      	ands	r3, r2
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x57c>
 80044da:	e03f      	b.n	800455c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044dc:	4b22      	ldr	r3, [pc, #136]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b21      	ldr	r3, [pc, #132]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 80044e2:	4924      	ldr	r1, [pc, #144]	; (8004574 <HAL_RCC_OscConfig+0x634>)
 80044e4:	400a      	ands	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7ff fa36 	bl	8003958 <HAL_GetTick>
 80044ec:	0003      	movs	r3, r0
 80044ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f2:	f7ff fa31 	bl	8003958 <HAL_GetTick>
 80044f6:	0002      	movs	r2, r0
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e02c      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004504:	4b18      	ldr	r3, [pc, #96]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	049b      	lsls	r3, r3, #18
 800450c:	4013      	ands	r3, r2
 800450e:	d1f0      	bne.n	80044f2 <HAL_RCC_OscConfig+0x5b2>
 8004510:	e024      	b.n	800455c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e01f      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004524:	4b10      	ldr	r3, [pc, #64]	; (8004568 <HAL_RCC_OscConfig+0x628>)
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	23c0      	movs	r3, #192	; 0xc0
 800452e:	025b      	lsls	r3, r3, #9
 8004530:	401a      	ands	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	429a      	cmp	r2, r3
 8004538:	d10e      	bne.n	8004558 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	220f      	movs	r2, #15
 800453e:	401a      	ands	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d107      	bne.n	8004558 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	23f0      	movs	r3, #240	; 0xf0
 800454c:	039b      	lsls	r3, r3, #14
 800454e:	401a      	ands	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	0018      	movs	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	b008      	add	sp, #32
 8004564:	bd80      	pop	{r7, pc}
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	40021000 	.word	0x40021000
 800456c:	00001388 	.word	0x00001388
 8004570:	efffffff 	.word	0xefffffff
 8004574:	feffffff 	.word	0xfeffffff
 8004578:	ffc27fff 	.word	0xffc27fff

0800457c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0b3      	b.n	80046f8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004590:	4b5b      	ldr	r3, [pc, #364]	; (8004700 <HAL_RCC_ClockConfig+0x184>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2201      	movs	r2, #1
 8004596:	4013      	ands	r3, r2
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d911      	bls.n	80045c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459e:	4b58      	ldr	r3, [pc, #352]	; (8004700 <HAL_RCC_ClockConfig+0x184>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2201      	movs	r2, #1
 80045a4:	4393      	bics	r3, r2
 80045a6:	0019      	movs	r1, r3
 80045a8:	4b55      	ldr	r3, [pc, #340]	; (8004700 <HAL_RCC_ClockConfig+0x184>)
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b0:	4b53      	ldr	r3, [pc, #332]	; (8004700 <HAL_RCC_ClockConfig+0x184>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2201      	movs	r2, #1
 80045b6:	4013      	ands	r3, r2
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d001      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e09a      	b.n	80046f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2202      	movs	r2, #2
 80045c8:	4013      	ands	r3, r2
 80045ca:	d015      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2204      	movs	r2, #4
 80045d2:	4013      	ands	r3, r2
 80045d4:	d006      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80045d6:	4b4b      	ldr	r3, [pc, #300]	; (8004704 <HAL_RCC_ClockConfig+0x188>)
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	4b4a      	ldr	r3, [pc, #296]	; (8004704 <HAL_RCC_ClockConfig+0x188>)
 80045dc:	21e0      	movs	r1, #224	; 0xe0
 80045de:	00c9      	lsls	r1, r1, #3
 80045e0:	430a      	orrs	r2, r1
 80045e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e4:	4b47      	ldr	r3, [pc, #284]	; (8004704 <HAL_RCC_ClockConfig+0x188>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	22f0      	movs	r2, #240	; 0xf0
 80045ea:	4393      	bics	r3, r2
 80045ec:	0019      	movs	r1, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	4b44      	ldr	r3, [pc, #272]	; (8004704 <HAL_RCC_ClockConfig+0x188>)
 80045f4:	430a      	orrs	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2201      	movs	r2, #1
 80045fe:	4013      	ands	r3, r2
 8004600:	d040      	beq.n	8004684 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d107      	bne.n	800461a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460a:	4b3e      	ldr	r3, [pc, #248]	; (8004704 <HAL_RCC_ClockConfig+0x188>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	029b      	lsls	r3, r3, #10
 8004612:	4013      	ands	r3, r2
 8004614:	d114      	bne.n	8004640 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e06e      	b.n	80046f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d107      	bne.n	8004632 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004622:	4b38      	ldr	r3, [pc, #224]	; (8004704 <HAL_RCC_ClockConfig+0x188>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	2380      	movs	r3, #128	; 0x80
 8004628:	049b      	lsls	r3, r3, #18
 800462a:	4013      	ands	r3, r2
 800462c:	d108      	bne.n	8004640 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e062      	b.n	80046f8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004632:	4b34      	ldr	r3, [pc, #208]	; (8004704 <HAL_RCC_ClockConfig+0x188>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2202      	movs	r2, #2
 8004638:	4013      	ands	r3, r2
 800463a:	d101      	bne.n	8004640 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e05b      	b.n	80046f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004640:	4b30      	ldr	r3, [pc, #192]	; (8004704 <HAL_RCC_ClockConfig+0x188>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2203      	movs	r2, #3
 8004646:	4393      	bics	r3, r2
 8004648:	0019      	movs	r1, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	4b2d      	ldr	r3, [pc, #180]	; (8004704 <HAL_RCC_ClockConfig+0x188>)
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004654:	f7ff f980 	bl	8003958 <HAL_GetTick>
 8004658:	0003      	movs	r3, r0
 800465a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465c:	e009      	b.n	8004672 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465e:	f7ff f97b 	bl	8003958 <HAL_GetTick>
 8004662:	0002      	movs	r2, r0
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	4a27      	ldr	r2, [pc, #156]	; (8004708 <HAL_RCC_ClockConfig+0x18c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e042      	b.n	80046f8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004672:	4b24      	ldr	r3, [pc, #144]	; (8004704 <HAL_RCC_ClockConfig+0x188>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	220c      	movs	r2, #12
 8004678:	401a      	ands	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	429a      	cmp	r2, r3
 8004682:	d1ec      	bne.n	800465e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004684:	4b1e      	ldr	r3, [pc, #120]	; (8004700 <HAL_RCC_ClockConfig+0x184>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2201      	movs	r2, #1
 800468a:	4013      	ands	r3, r2
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d211      	bcs.n	80046b6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004692:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <HAL_RCC_ClockConfig+0x184>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2201      	movs	r2, #1
 8004698:	4393      	bics	r3, r2
 800469a:	0019      	movs	r1, r3
 800469c:	4b18      	ldr	r3, [pc, #96]	; (8004700 <HAL_RCC_ClockConfig+0x184>)
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a4:	4b16      	ldr	r3, [pc, #88]	; (8004700 <HAL_RCC_ClockConfig+0x184>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2201      	movs	r2, #1
 80046aa:	4013      	ands	r3, r2
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d001      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e020      	b.n	80046f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2204      	movs	r2, #4
 80046bc:	4013      	ands	r3, r2
 80046be:	d009      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80046c0:	4b10      	ldr	r3, [pc, #64]	; (8004704 <HAL_RCC_ClockConfig+0x188>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	4a11      	ldr	r2, [pc, #68]	; (800470c <HAL_RCC_ClockConfig+0x190>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	0019      	movs	r1, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <HAL_RCC_ClockConfig+0x188>)
 80046d0:	430a      	orrs	r2, r1
 80046d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046d4:	f000 f820 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 80046d8:	0001      	movs	r1, r0
 80046da:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <HAL_RCC_ClockConfig+0x188>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	091b      	lsrs	r3, r3, #4
 80046e0:	220f      	movs	r2, #15
 80046e2:	4013      	ands	r3, r2
 80046e4:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <HAL_RCC_ClockConfig+0x194>)
 80046e6:	5cd3      	ldrb	r3, [r2, r3]
 80046e8:	000a      	movs	r2, r1
 80046ea:	40da      	lsrs	r2, r3
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <HAL_RCC_ClockConfig+0x198>)
 80046ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80046f0:	2000      	movs	r0, #0
 80046f2:	f7ff f8eb 	bl	80038cc <HAL_InitTick>
  
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b004      	add	sp, #16
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40022000 	.word	0x40022000
 8004704:	40021000 	.word	0x40021000
 8004708:	00001388 	.word	0x00001388
 800470c:	fffff8ff 	.word	0xfffff8ff
 8004710:	080097b4 	.word	0x080097b4
 8004714:	20000038 	.word	0x20000038

08004718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	2300      	movs	r3, #0
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	2300      	movs	r3, #0
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	2300      	movs	r3, #0
 800472c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004732:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	220c      	movs	r2, #12
 800473c:	4013      	ands	r3, r2
 800473e:	2b04      	cmp	r3, #4
 8004740:	d002      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0x30>
 8004742:	2b08      	cmp	r3, #8
 8004744:	d003      	beq.n	800474e <HAL_RCC_GetSysClockFreq+0x36>
 8004746:	e02e      	b.n	80047a6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004748:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800474a:	613b      	str	r3, [r7, #16]
      break;
 800474c:	e02e      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	0c9b      	lsrs	r3, r3, #18
 8004752:	220f      	movs	r2, #15
 8004754:	4013      	ands	r3, r2
 8004756:	4a1a      	ldr	r2, [pc, #104]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004758:	5cd3      	ldrb	r3, [r2, r3]
 800475a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800475c:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	220f      	movs	r2, #15
 8004762:	4013      	ands	r3, r2
 8004764:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004766:	5cd3      	ldrb	r3, [r2, r3]
 8004768:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	23c0      	movs	r3, #192	; 0xc0
 800476e:	025b      	lsls	r3, r3, #9
 8004770:	401a      	ands	r2, r3
 8004772:	2380      	movs	r3, #128	; 0x80
 8004774:	025b      	lsls	r3, r3, #9
 8004776:	429a      	cmp	r2, r3
 8004778:	d109      	bne.n	800478e <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	480f      	ldr	r0, [pc, #60]	; (80047bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800477e:	f7fb fcdf 	bl	8000140 <__udivsi3>
 8004782:	0003      	movs	r3, r0
 8004784:	001a      	movs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4353      	muls	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	e008      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	480a      	ldr	r0, [pc, #40]	; (80047bc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004792:	f7fb fcd5 	bl	8000140 <__udivsi3>
 8004796:	0003      	movs	r3, r0
 8004798:	001a      	movs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4353      	muls	r3, r2
 800479e:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	613b      	str	r3, [r7, #16]
      break;
 80047a4:	e002      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047a6:	4b05      	ldr	r3, [pc, #20]	; (80047bc <HAL_RCC_GetSysClockFreq+0xa4>)
 80047a8:	613b      	str	r3, [r7, #16]
      break;
 80047aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80047ac:	693b      	ldr	r3, [r7, #16]
}
 80047ae:	0018      	movs	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b006      	add	sp, #24
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	40021000 	.word	0x40021000
 80047bc:	007a1200 	.word	0x007a1200
 80047c0:	080097cc 	.word	0x080097cc
 80047c4:	080097dc 	.word	0x080097dc

080047c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047cc:	4b02      	ldr	r3, [pc, #8]	; (80047d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80047ce:	681b      	ldr	r3, [r3, #0]
}
 80047d0:	0018      	movs	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	20000038 	.word	0x20000038

080047dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80047e0:	f7ff fff2 	bl	80047c8 <HAL_RCC_GetHCLKFreq>
 80047e4:	0001      	movs	r1, r0
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	2207      	movs	r2, #7
 80047ee:	4013      	ands	r3, r2
 80047f0:	4a04      	ldr	r2, [pc, #16]	; (8004804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047f2:	5cd3      	ldrb	r3, [r2, r3]
 80047f4:	40d9      	lsrs	r1, r3
 80047f6:	000b      	movs	r3, r1
}    
 80047f8:	0018      	movs	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	40021000 	.word	0x40021000
 8004804:	080097c4 	.word	0x080097c4

08004808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e0a8      	b.n	800496c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	2382      	movs	r3, #130	; 0x82
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	429a      	cmp	r2, r3
 800482c:	d009      	beq.n	8004842 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	61da      	str	r2, [r3, #28]
 8004834:	e005      	b.n	8004842 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	225d      	movs	r2, #93	; 0x5d
 800484c:	5c9b      	ldrb	r3, [r3, r2]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d107      	bne.n	8004864 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	225c      	movs	r2, #92	; 0x5c
 8004858:	2100      	movs	r1, #0
 800485a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	0018      	movs	r0, r3
 8004860:	f7fe fd28 	bl	80032b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	225d      	movs	r2, #93	; 0x5d
 8004868:	2102      	movs	r1, #2
 800486a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2140      	movs	r1, #64	; 0x40
 8004878:	438a      	bics	r2, r1
 800487a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	23e0      	movs	r3, #224	; 0xe0
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	429a      	cmp	r2, r3
 8004886:	d902      	bls.n	800488e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	e002      	b.n	8004894 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800488e:	2380      	movs	r3, #128	; 0x80
 8004890:	015b      	lsls	r3, r3, #5
 8004892:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	23f0      	movs	r3, #240	; 0xf0
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	429a      	cmp	r2, r3
 800489e:	d008      	beq.n	80048b2 <HAL_SPI_Init+0xaa>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	23e0      	movs	r3, #224	; 0xe0
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d002      	beq.n	80048b2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	2382      	movs	r3, #130	; 0x82
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	401a      	ands	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6899      	ldr	r1, [r3, #8]
 80048c0:	2384      	movs	r3, #132	; 0x84
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	400b      	ands	r3, r1
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2102      	movs	r1, #2
 80048ce:	400b      	ands	r3, r1
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	2101      	movs	r1, #1
 80048d8:	400b      	ands	r3, r1
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6999      	ldr	r1, [r3, #24]
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	400b      	ands	r3, r1
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	2138      	movs	r1, #56	; 0x38
 80048ee:	400b      	ands	r3, r1
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	2180      	movs	r1, #128	; 0x80
 80048f8:	400b      	ands	r3, r1
 80048fa:	431a      	orrs	r2, r3
 80048fc:	0011      	movs	r1, r2
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004902:	2380      	movs	r3, #128	; 0x80
 8004904:	019b      	lsls	r3, r3, #6
 8004906:	401a      	ands	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	2204      	movs	r2, #4
 8004918:	401a      	ands	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	2110      	movs	r1, #16
 8004920:	400b      	ands	r3, r1
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004928:	2108      	movs	r1, #8
 800492a:	400b      	ands	r3, r1
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68d9      	ldr	r1, [r3, #12]
 8004932:	23f0      	movs	r3, #240	; 0xf0
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	400b      	ands	r3, r1
 8004938:	431a      	orrs	r2, r3
 800493a:	0011      	movs	r1, r2
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	015b      	lsls	r3, r3, #5
 8004942:	401a      	ands	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69da      	ldr	r2, [r3, #28]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4907      	ldr	r1, [pc, #28]	; (8004974 <HAL_SPI_Init+0x16c>)
 8004958:	400a      	ands	r2, r1
 800495a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	225d      	movs	r2, #93	; 0x5d
 8004966:	2101      	movs	r1, #1
 8004968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	0018      	movs	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	b004      	add	sp, #16
 8004972:	bd80      	pop	{r7, pc}
 8004974:	fffff7ff 	.word	0xfffff7ff

08004978 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	099b      	lsrs	r3, r3, #6
 8004994:	001a      	movs	r2, r3
 8004996:	2301      	movs	r3, #1
 8004998:	4013      	ands	r3, r2
 800499a:	d10f      	bne.n	80049bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2201      	movs	r2, #1
 80049a0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049a2:	d00b      	beq.n	80049bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	099b      	lsrs	r3, r3, #6
 80049a8:	001a      	movs	r2, r3
 80049aa:	2301      	movs	r3, #1
 80049ac:	4013      	ands	r3, r2
 80049ae:	d005      	beq.n	80049bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	0010      	movs	r0, r2
 80049b8:	4798      	blx	r3
    return;
 80049ba:	e0d5      	b.n	8004b68 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	001a      	movs	r2, r3
 80049c2:	2301      	movs	r3, #1
 80049c4:	4013      	ands	r3, r2
 80049c6:	d00b      	beq.n	80049e0 <HAL_SPI_IRQHandler+0x68>
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	09db      	lsrs	r3, r3, #7
 80049cc:	001a      	movs	r2, r3
 80049ce:	2301      	movs	r3, #1
 80049d0:	4013      	ands	r3, r2
 80049d2:	d005      	beq.n	80049e0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	0010      	movs	r0, r2
 80049dc:	4798      	blx	r3
    return;
 80049de:	e0c3      	b.n	8004b68 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	001a      	movs	r2, r3
 80049e6:	2301      	movs	r3, #1
 80049e8:	4013      	ands	r3, r2
 80049ea:	d10c      	bne.n	8004a06 <HAL_SPI_IRQHandler+0x8e>
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	099b      	lsrs	r3, r3, #6
 80049f0:	001a      	movs	r2, r3
 80049f2:	2301      	movs	r3, #1
 80049f4:	4013      	ands	r3, r2
 80049f6:	d106      	bne.n	8004a06 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	001a      	movs	r2, r3
 80049fe:	2301      	movs	r3, #1
 8004a00:	4013      	ands	r3, r2
 8004a02:	d100      	bne.n	8004a06 <HAL_SPI_IRQHandler+0x8e>
 8004a04:	e0b0      	b.n	8004b68 <HAL_SPI_IRQHandler+0x1f0>
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d100      	bne.n	8004a14 <HAL_SPI_IRQHandler+0x9c>
 8004a12:	e0a9      	b.n	8004b68 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	099b      	lsrs	r3, r3, #6
 8004a18:	001a      	movs	r2, r3
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d023      	beq.n	8004a68 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	225d      	movs	r2, #93	; 0x5d
 8004a24:	5c9b      	ldrb	r3, [r3, r2]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d011      	beq.n	8004a50 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a30:	2204      	movs	r2, #4
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	e00b      	b.n	8004a68 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	693b      	ldr	r3, [r7, #16]
        return;
 8004a66:	e07f      	b.n	8004b68 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	001a      	movs	r2, r3
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4013      	ands	r3, r2
 8004a72:	d014      	beq.n	8004a9e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a78:	2201      	movs	r2, #1
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2140      	movs	r1, #64	; 0x40
 8004a98:	438a      	bics	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	0a1b      	lsrs	r3, r3, #8
 8004aa2:	001a      	movs	r2, r3
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d00c      	beq.n	8004ac4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aae:	2208      	movs	r2, #8
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d04c      	beq.n	8004b66 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	21e0      	movs	r1, #224	; 0xe0
 8004ad8:	438a      	bics	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	225d      	movs	r2, #93	; 0x5d
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d103      	bne.n	8004af4 <HAL_SPI_IRQHandler+0x17c>
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	2201      	movs	r2, #1
 8004af0:	4013      	ands	r3, r2
 8004af2:	d032      	beq.n	8004b5a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2103      	movs	r1, #3
 8004b00:	438a      	bics	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d010      	beq.n	8004b2e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b10:	4a17      	ldr	r2, [pc, #92]	; (8004b70 <HAL_SPI_IRQHandler+0x1f8>)
 8004b12:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7ff f805 	bl	8003b28 <HAL_DMA_Abort_IT>
 8004b1e:	1e03      	subs	r3, r0, #0
 8004b20:	d005      	beq.n	8004b2e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b26:	2240      	movs	r2, #64	; 0x40
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d016      	beq.n	8004b64 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3a:	4a0d      	ldr	r2, [pc, #52]	; (8004b70 <HAL_SPI_IRQHandler+0x1f8>)
 8004b3c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7fe fff0 	bl	8003b28 <HAL_DMA_Abort_IT>
 8004b48:	1e03      	subs	r3, r0, #0
 8004b4a:	d00b      	beq.n	8004b64 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b50:	2240      	movs	r2, #64	; 0x40
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004b58:	e004      	b.n	8004b64 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f000 f809 	bl	8004b74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004b62:	e000      	b.n	8004b66 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8004b64:	46c0      	nop			; (mov r8, r8)
    return;
 8004b66:	46c0      	nop			; (mov r8, r8)
  }
}
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b008      	add	sp, #32
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	08004b85 	.word	0x08004b85

08004b74 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b7c:	46c0      	nop			; (mov r8, r8)
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	b002      	add	sp, #8
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2246      	movs	r2, #70	; 0x46
 8004b96:	2100      	movs	r1, #0
 8004b98:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f7ff ffe6 	bl	8004b74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ba8:	46c0      	nop			; (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b004      	add	sp, #16
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e042      	b.n	8004c48 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	223d      	movs	r2, #61	; 0x3d
 8004bc6:	5c9b      	ldrb	r3, [r3, r2]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d107      	bne.n	8004bde <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	223c      	movs	r2, #60	; 0x3c
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f7fe fbc1 	bl	8003360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	223d      	movs	r2, #61	; 0x3d
 8004be2:	2102      	movs	r1, #2
 8004be4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3304      	adds	r3, #4
 8004bee:	0019      	movs	r1, r3
 8004bf0:	0010      	movs	r0, r2
 8004bf2:	f000 fd31 	bl	8005658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2246      	movs	r2, #70	; 0x46
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	223e      	movs	r2, #62	; 0x3e
 8004c02:	2101      	movs	r1, #1
 8004c04:	5499      	strb	r1, [r3, r2]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	223f      	movs	r2, #63	; 0x3f
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	5499      	strb	r1, [r3, r2]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2240      	movs	r2, #64	; 0x40
 8004c12:	2101      	movs	r1, #1
 8004c14:	5499      	strb	r1, [r3, r2]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2241      	movs	r2, #65	; 0x41
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2242      	movs	r2, #66	; 0x42
 8004c22:	2101      	movs	r1, #1
 8004c24:	5499      	strb	r1, [r3, r2]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2243      	movs	r2, #67	; 0x43
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	5499      	strb	r1, [r3, r2]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2244      	movs	r2, #68	; 0x44
 8004c32:	2101      	movs	r1, #1
 8004c34:	5499      	strb	r1, [r3, r2]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2245      	movs	r2, #69	; 0x45
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	223d      	movs	r2, #61	; 0x3d
 8004c42:	2101      	movs	r1, #1
 8004c44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	0018      	movs	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	b002      	add	sp, #8
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	223d      	movs	r2, #61	; 0x3d
 8004c5c:	5c9b      	ldrb	r3, [r3, r2]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d001      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e035      	b.n	8004cd4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	223d      	movs	r2, #61	; 0x3d
 8004c6c:	2102      	movs	r1, #2
 8004c6e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a15      	ldr	r2, [pc, #84]	; (8004cdc <HAL_TIM_Base_Start_IT+0x8c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_TIM_Base_Start_IT+0x4e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a14      	ldr	r2, [pc, #80]	; (8004ce0 <HAL_TIM_Base_Start_IT+0x90>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_TIM_Base_Start_IT+0x4e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a12      	ldr	r2, [pc, #72]	; (8004ce4 <HAL_TIM_Base_Start_IT+0x94>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d111      	bne.n	8004cc2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b06      	cmp	r3, #6
 8004cae:	d010      	beq.n	8004cd2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2101      	movs	r1, #1
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc0:	e007      	b.n	8004cd2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2101      	movs	r1, #1
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b004      	add	sp, #16
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40014000 	.word	0x40014000

08004ce8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e042      	b.n	8004d80 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	223d      	movs	r2, #61	; 0x3d
 8004cfe:	5c9b      	ldrb	r3, [r3, r2]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d107      	bne.n	8004d16 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	223c      	movs	r2, #60	; 0x3c
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f000 f839 	bl	8004d88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	223d      	movs	r2, #61	; 0x3d
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	0019      	movs	r1, r3
 8004d28:	0010      	movs	r0, r2
 8004d2a:	f000 fc95 	bl	8005658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2246      	movs	r2, #70	; 0x46
 8004d32:	2101      	movs	r1, #1
 8004d34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	223e      	movs	r2, #62	; 0x3e
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	5499      	strb	r1, [r3, r2]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	223f      	movs	r2, #63	; 0x3f
 8004d42:	2101      	movs	r1, #1
 8004d44:	5499      	strb	r1, [r3, r2]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2240      	movs	r2, #64	; 0x40
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	5499      	strb	r1, [r3, r2]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2241      	movs	r2, #65	; 0x41
 8004d52:	2101      	movs	r1, #1
 8004d54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2242      	movs	r2, #66	; 0x42
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	5499      	strb	r1, [r3, r2]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2243      	movs	r2, #67	; 0x43
 8004d62:	2101      	movs	r1, #1
 8004d64:	5499      	strb	r1, [r3, r2]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2244      	movs	r2, #68	; 0x44
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	5499      	strb	r1, [r3, r2]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2245      	movs	r2, #69	; 0x45
 8004d72:	2101      	movs	r1, #1
 8004d74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	223d      	movs	r2, #61	; 0x3d
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	0018      	movs	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b002      	add	sp, #8
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d90:	46c0      	nop			; (mov r8, r8)
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b002      	add	sp, #8
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d108      	bne.n	8004dba <HAL_TIM_PWM_Start+0x22>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	223e      	movs	r2, #62	; 0x3e
 8004dac:	5c9b      	ldrb	r3, [r3, r2]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	1e5a      	subs	r2, r3, #1
 8004db4:	4193      	sbcs	r3, r2
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	e01f      	b.n	8004dfa <HAL_TIM_PWM_Start+0x62>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d108      	bne.n	8004dd2 <HAL_TIM_PWM_Start+0x3a>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	223f      	movs	r2, #63	; 0x3f
 8004dc4:	5c9b      	ldrb	r3, [r3, r2]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	1e5a      	subs	r2, r3, #1
 8004dcc:	4193      	sbcs	r3, r2
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	e013      	b.n	8004dfa <HAL_TIM_PWM_Start+0x62>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d108      	bne.n	8004dea <HAL_TIM_PWM_Start+0x52>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2240      	movs	r2, #64	; 0x40
 8004ddc:	5c9b      	ldrb	r3, [r3, r2]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	1e5a      	subs	r2, r3, #1
 8004de4:	4193      	sbcs	r3, r2
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	e007      	b.n	8004dfa <HAL_TIM_PWM_Start+0x62>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2241      	movs	r2, #65	; 0x41
 8004dee:	5c9b      	ldrb	r3, [r3, r2]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	1e5a      	subs	r2, r3, #1
 8004df6:	4193      	sbcs	r3, r2
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e06e      	b.n	8004ee0 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Start+0x7a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	223e      	movs	r2, #62	; 0x3e
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	5499      	strb	r1, [r3, r2]
 8004e10:	e013      	b.n	8004e3a <HAL_TIM_PWM_Start+0xa2>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_PWM_Start+0x8a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	223f      	movs	r2, #63	; 0x3f
 8004e1c:	2102      	movs	r1, #2
 8004e1e:	5499      	strb	r1, [r3, r2]
 8004e20:	e00b      	b.n	8004e3a <HAL_TIM_PWM_Start+0xa2>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_PWM_Start+0x9a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2240      	movs	r2, #64	; 0x40
 8004e2c:	2102      	movs	r1, #2
 8004e2e:	5499      	strb	r1, [r3, r2]
 8004e30:	e003      	b.n	8004e3a <HAL_TIM_PWM_Start+0xa2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2241      	movs	r2, #65	; 0x41
 8004e36:	2102      	movs	r1, #2
 8004e38:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6839      	ldr	r1, [r7, #0]
 8004e40:	2201      	movs	r2, #1
 8004e42:	0018      	movs	r0, r3
 8004e44:	f000 ff8c 	bl	8005d60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a26      	ldr	r2, [pc, #152]	; (8004ee8 <HAL_TIM_PWM_Start+0x150>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00e      	beq.n	8004e70 <HAL_TIM_PWM_Start+0xd8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a25      	ldr	r2, [pc, #148]	; (8004eec <HAL_TIM_PWM_Start+0x154>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d009      	beq.n	8004e70 <HAL_TIM_PWM_Start+0xd8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a23      	ldr	r2, [pc, #140]	; (8004ef0 <HAL_TIM_PWM_Start+0x158>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d004      	beq.n	8004e70 <HAL_TIM_PWM_Start+0xd8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a22      	ldr	r2, [pc, #136]	; (8004ef4 <HAL_TIM_PWM_Start+0x15c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d101      	bne.n	8004e74 <HAL_TIM_PWM_Start+0xdc>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <HAL_TIM_PWM_Start+0xde>
 8004e74:	2300      	movs	r3, #0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2180      	movs	r1, #128	; 0x80
 8004e86:	0209      	lsls	r1, r1, #8
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <HAL_TIM_PWM_Start+0x150>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_TIM_PWM_Start+0x112>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <HAL_TIM_PWM_Start+0x160>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <HAL_TIM_PWM_Start+0x112>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a11      	ldr	r2, [pc, #68]	; (8004eec <HAL_TIM_PWM_Start+0x154>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d111      	bne.n	8004ece <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b06      	cmp	r3, #6
 8004eba:	d010      	beq.n	8004ede <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ecc:	e007      	b.n	8004ede <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2101      	movs	r1, #1
 8004eda:	430a      	orrs	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b004      	add	sp, #16
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40012c00 	.word	0x40012c00
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800
 8004ef8:	40000400 	.word	0x40000400

08004efc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e090      	b.n	8005032 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	223d      	movs	r2, #61	; 0x3d
 8004f14:	5c9b      	ldrb	r3, [r3, r2]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d107      	bne.n	8004f2c <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	223c      	movs	r2, #60	; 0x3c
 8004f20:	2100      	movs	r1, #0
 8004f22:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	0018      	movs	r0, r3
 8004f28:	f7fe fab6 	bl	8003498 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	223d      	movs	r2, #61	; 0x3d
 8004f30:	2102      	movs	r1, #2
 8004f32:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	493f      	ldr	r1, [pc, #252]	; (800503c <HAL_TIM_Encoder_Init+0x140>)
 8004f40:	400a      	ands	r2, r1
 8004f42:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	0010      	movs	r0, r2
 8004f50:	f000 fb82 	bl	8005658 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	4a31      	ldr	r2, [pc, #196]	; (8005040 <HAL_TIM_Encoder_Init+0x144>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4a2c      	ldr	r2, [pc, #176]	; (8005044 <HAL_TIM_Encoder_Init+0x148>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4a2b      	ldr	r2, [pc, #172]	; (8005048 <HAL_TIM_Encoder_Init+0x14c>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	4313      	orrs	r3, r2
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	011a      	lsls	r2, r3, #4
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	031b      	lsls	r3, r3, #12
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2222      	movs	r2, #34	; 0x22
 8004fca:	4393      	bics	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2288      	movs	r2, #136	; 0x88
 8004fd2:	4393      	bics	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2246      	movs	r2, #70	; 0x46
 8005004:	2101      	movs	r1, #1
 8005006:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	223e      	movs	r2, #62	; 0x3e
 800500c:	2101      	movs	r1, #1
 800500e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	223f      	movs	r2, #63	; 0x3f
 8005014:	2101      	movs	r1, #1
 8005016:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2242      	movs	r2, #66	; 0x42
 800501c:	2101      	movs	r1, #1
 800501e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2243      	movs	r2, #67	; 0x43
 8005024:	2101      	movs	r1, #1
 8005026:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	223d      	movs	r2, #61	; 0x3d
 800502c:	2101      	movs	r1, #1
 800502e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b006      	add	sp, #24
 8005038:	bd80      	pop	{r7, pc}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	ffffbff8 	.word	0xffffbff8
 8005040:	fffffcfc 	.word	0xfffffcfc
 8005044:	fffff3f3 	.word	0xfffff3f3
 8005048:	ffff0f0f 	.word	0xffff0f0f

0800504c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005056:	200f      	movs	r0, #15
 8005058:	183b      	adds	r3, r7, r0
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	213e      	movs	r1, #62	; 0x3e
 800505e:	5c52      	ldrb	r2, [r2, r1]
 8005060:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005062:	230e      	movs	r3, #14
 8005064:	18fb      	adds	r3, r7, r3
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	213f      	movs	r1, #63	; 0x3f
 800506a:	5c52      	ldrb	r2, [r2, r1]
 800506c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800506e:	240d      	movs	r4, #13
 8005070:	193b      	adds	r3, r7, r4
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	2142      	movs	r1, #66	; 0x42
 8005076:	5c52      	ldrb	r2, [r2, r1]
 8005078:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800507a:	230c      	movs	r3, #12
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	2143      	movs	r1, #67	; 0x43
 8005082:	5c52      	ldrb	r2, [r2, r1]
 8005084:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d112      	bne.n	80050b2 <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800508c:	183b      	adds	r3, r7, r0
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d103      	bne.n	800509c <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005094:	193b      	adds	r3, r7, r4
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d001      	beq.n	80050a0 <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e095      	b.n	80051cc <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	223e      	movs	r2, #62	; 0x3e
 80050a4:	2102      	movs	r1, #2
 80050a6:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2242      	movs	r2, #66	; 0x42
 80050ac:	2102      	movs	r1, #2
 80050ae:	5499      	strb	r1, [r3, r2]
 80050b0:	e03d      	b.n	800512e <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d114      	bne.n	80050e2 <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050b8:	230e      	movs	r3, #14
 80050ba:	18fb      	adds	r3, r7, r3
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d104      	bne.n	80050cc <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050c2:	230c      	movs	r3, #12
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d001      	beq.n	80050d0 <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e07d      	b.n	80051cc <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	223f      	movs	r2, #63	; 0x3f
 80050d4:	2102      	movs	r1, #2
 80050d6:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2243      	movs	r2, #67	; 0x43
 80050dc:	2102      	movs	r1, #2
 80050de:	5499      	strb	r1, [r3, r2]
 80050e0:	e025      	b.n	800512e <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050e2:	230f      	movs	r3, #15
 80050e4:	18fb      	adds	r3, r7, r3
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d10e      	bne.n	800510a <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050ec:	230e      	movs	r3, #14
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d109      	bne.n	800510a <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050f6:	230d      	movs	r3, #13
 80050f8:	18fb      	adds	r3, r7, r3
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d104      	bne.n	800510a <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005100:	230c      	movs	r3, #12
 8005102:	18fb      	adds	r3, r7, r3
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d001      	beq.n	800510e <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e05e      	b.n	80051cc <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	223e      	movs	r2, #62	; 0x3e
 8005112:	2102      	movs	r1, #2
 8005114:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	223f      	movs	r2, #63	; 0x3f
 800511a:	2102      	movs	r1, #2
 800511c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2242      	movs	r2, #66	; 0x42
 8005122:	2102      	movs	r1, #2
 8005124:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2243      	movs	r2, #67	; 0x43
 800512a:	2102      	movs	r1, #2
 800512c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_TIM_Encoder_Start_IT+0xf0>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b04      	cmp	r3, #4
 8005138:	d010      	beq.n	800515c <HAL_TIM_Encoder_Start_IT+0x110>
 800513a:	e01f      	b.n	800517c <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2201      	movs	r2, #1
 8005142:	2100      	movs	r1, #0
 8005144:	0018      	movs	r0, r3
 8005146:	f000 fe0b 	bl	8005d60 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2102      	movs	r1, #2
 8005156:	430a      	orrs	r2, r1
 8005158:	60da      	str	r2, [r3, #12]
      break;
 800515a:	e02e      	b.n	80051ba <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2201      	movs	r2, #1
 8005162:	2104      	movs	r1, #4
 8005164:	0018      	movs	r0, r3
 8005166:	f000 fdfb 	bl	8005d60 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2104      	movs	r1, #4
 8005176:	430a      	orrs	r2, r1
 8005178:	60da      	str	r2, [r3, #12]
      break;
 800517a:	e01e      	b.n	80051ba <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2201      	movs	r2, #1
 8005182:	2100      	movs	r1, #0
 8005184:	0018      	movs	r0, r3
 8005186:	f000 fdeb 	bl	8005d60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2201      	movs	r2, #1
 8005190:	2104      	movs	r1, #4
 8005192:	0018      	movs	r0, r3
 8005194:	f000 fde4 	bl	8005d60 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2102      	movs	r1, #2
 80051a4:	430a      	orrs	r2, r1
 80051a6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2104      	movs	r1, #4
 80051b4:	430a      	orrs	r2, r1
 80051b6:	60da      	str	r2, [r3, #12]
      break;
 80051b8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2101      	movs	r1, #1
 80051c6:	430a      	orrs	r2, r1
 80051c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	0018      	movs	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b005      	add	sp, #20
 80051d2:	bd90      	pop	{r4, r7, pc}

080051d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	2202      	movs	r2, #2
 80051e4:	4013      	ands	r3, r2
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d124      	bne.n	8005234 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2202      	movs	r2, #2
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d11d      	bne.n	8005234 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2203      	movs	r2, #3
 80051fe:	4252      	negs	r2, r2
 8005200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2203      	movs	r2, #3
 8005210:	4013      	ands	r3, r2
 8005212:	d004      	beq.n	800521e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	0018      	movs	r0, r3
 8005218:	f000 fa06 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 800521c:	e007      	b.n	800522e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	0018      	movs	r0, r3
 8005222:	f000 f9f9 	bl	8005618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	0018      	movs	r0, r3
 800522a:	f000 fa05 	bl	8005638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2204      	movs	r2, #4
 800523c:	4013      	ands	r3, r2
 800523e:	2b04      	cmp	r3, #4
 8005240:	d125      	bne.n	800528e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	2204      	movs	r2, #4
 800524a:	4013      	ands	r3, r2
 800524c:	2b04      	cmp	r3, #4
 800524e:	d11e      	bne.n	800528e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2205      	movs	r2, #5
 8005256:	4252      	negs	r2, r2
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	23c0      	movs	r3, #192	; 0xc0
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4013      	ands	r3, r2
 800526c:	d004      	beq.n	8005278 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	0018      	movs	r0, r3
 8005272:	f000 f9d9 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 8005276:	e007      	b.n	8005288 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	0018      	movs	r0, r3
 800527c:	f000 f9cc 	bl	8005618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	0018      	movs	r0, r3
 8005284:	f000 f9d8 	bl	8005638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	2208      	movs	r2, #8
 8005296:	4013      	ands	r3, r2
 8005298:	2b08      	cmp	r3, #8
 800529a:	d124      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2208      	movs	r2, #8
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d11d      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2209      	movs	r2, #9
 80052b0:	4252      	negs	r2, r2
 80052b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2204      	movs	r2, #4
 80052b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	2203      	movs	r2, #3
 80052c2:	4013      	ands	r3, r2
 80052c4:	d004      	beq.n	80052d0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f000 f9ad 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 80052ce:	e007      	b.n	80052e0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	0018      	movs	r0, r3
 80052d4:	f000 f9a0 	bl	8005618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	0018      	movs	r0, r3
 80052dc:	f000 f9ac 	bl	8005638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2210      	movs	r2, #16
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d125      	bne.n	8005340 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	2210      	movs	r2, #16
 80052fc:	4013      	ands	r3, r2
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d11e      	bne.n	8005340 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2211      	movs	r2, #17
 8005308:	4252      	negs	r2, r2
 800530a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2208      	movs	r2, #8
 8005310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	23c0      	movs	r3, #192	; 0xc0
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4013      	ands	r3, r2
 800531e:	d004      	beq.n	800532a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	0018      	movs	r0, r3
 8005324:	f000 f980 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 8005328:	e007      	b.n	800533a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	0018      	movs	r0, r3
 800532e:	f000 f973 	bl	8005618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	0018      	movs	r0, r3
 8005336:	f000 f97f 	bl	8005638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2201      	movs	r2, #1
 8005348:	4013      	ands	r3, r2
 800534a:	2b01      	cmp	r3, #1
 800534c:	d10f      	bne.n	800536e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	4013      	ands	r3, r2
 8005358:	2b01      	cmp	r3, #1
 800535a:	d108      	bne.n	800536e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2202      	movs	r2, #2
 8005362:	4252      	negs	r2, r2
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	0018      	movs	r0, r3
 800536a:	f7fd fde0 	bl	8002f2e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2280      	movs	r2, #128	; 0x80
 8005376:	4013      	ands	r3, r2
 8005378:	2b80      	cmp	r3, #128	; 0x80
 800537a:	d10f      	bne.n	800539c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	2280      	movs	r2, #128	; 0x80
 8005384:	4013      	ands	r3, r2
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d108      	bne.n	800539c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2281      	movs	r2, #129	; 0x81
 8005390:	4252      	negs	r2, r2
 8005392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	0018      	movs	r0, r3
 8005398:	f000 fd66 	bl	8005e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2240      	movs	r2, #64	; 0x40
 80053a4:	4013      	ands	r3, r2
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d10f      	bne.n	80053ca <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2240      	movs	r2, #64	; 0x40
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d108      	bne.n	80053ca <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2241      	movs	r2, #65	; 0x41
 80053be:	4252      	negs	r2, r2
 80053c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	0018      	movs	r0, r3
 80053c6:	f000 f93f 	bl	8005648 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2220      	movs	r2, #32
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d10f      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	2220      	movs	r2, #32
 80053e0:	4013      	ands	r3, r2
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d108      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2221      	movs	r2, #33	; 0x21
 80053ec:	4252      	negs	r2, r2
 80053ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	0018      	movs	r0, r3
 80053f4:	f000 fd30 	bl	8005e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053f8:	46c0      	nop			; (mov r8, r8)
 80053fa:	46bd      	mov	sp, r7
 80053fc:	b002      	add	sp, #8
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800540c:	2317      	movs	r3, #23
 800540e:	18fb      	adds	r3, r7, r3
 8005410:	2200      	movs	r2, #0
 8005412:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	223c      	movs	r2, #60	; 0x3c
 8005418:	5c9b      	ldrb	r3, [r3, r2]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_TIM_PWM_ConfigChannel+0x22>
 800541e:	2302      	movs	r3, #2
 8005420:	e0ad      	b.n	800557e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	223c      	movs	r2, #60	; 0x3c
 8005426:	2101      	movs	r1, #1
 8005428:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b0c      	cmp	r3, #12
 800542e:	d100      	bne.n	8005432 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005430:	e076      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b0c      	cmp	r3, #12
 8005436:	d900      	bls.n	800543a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005438:	e095      	b.n	8005566 <HAL_TIM_PWM_ConfigChannel+0x166>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d04e      	beq.n	80054de <HAL_TIM_PWM_ConfigChannel+0xde>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b08      	cmp	r3, #8
 8005444:	d900      	bls.n	8005448 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005446:	e08e      	b.n	8005566 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_TIM_PWM_ConfigChannel+0x56>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b04      	cmp	r3, #4
 8005452:	d021      	beq.n	8005498 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005454:	e087      	b.n	8005566 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	0011      	movs	r1, r2
 800545e:	0018      	movs	r0, r3
 8005460:	f000 f970 	bl	8005744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2108      	movs	r1, #8
 8005470:	430a      	orrs	r2, r1
 8005472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699a      	ldr	r2, [r3, #24]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2104      	movs	r1, #4
 8005480:	438a      	bics	r2, r1
 8005482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6999      	ldr	r1, [r3, #24]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	619a      	str	r2, [r3, #24]
      break;
 8005496:	e06b      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	0011      	movs	r1, r2
 80054a0:	0018      	movs	r0, r3
 80054a2:	f000 f9d7 	bl	8005854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2180      	movs	r1, #128	; 0x80
 80054b2:	0109      	lsls	r1, r1, #4
 80054b4:	430a      	orrs	r2, r1
 80054b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4931      	ldr	r1, [pc, #196]	; (8005588 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80054c4:	400a      	ands	r2, r1
 80054c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6999      	ldr	r1, [r3, #24]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	021a      	lsls	r2, r3, #8
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	619a      	str	r2, [r3, #24]
      break;
 80054dc:	e048      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	0011      	movs	r1, r2
 80054e6:	0018      	movs	r0, r3
 80054e8:	f000 fa38 	bl	800595c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2108      	movs	r1, #8
 80054f8:	430a      	orrs	r2, r1
 80054fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69da      	ldr	r2, [r3, #28]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2104      	movs	r1, #4
 8005508:	438a      	bics	r2, r1
 800550a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69d9      	ldr	r1, [r3, #28]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	61da      	str	r2, [r3, #28]
      break;
 800551e:	e027      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	0011      	movs	r1, r2
 8005528:	0018      	movs	r0, r3
 800552a:	f000 fa9d 	bl	8005a68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69da      	ldr	r2, [r3, #28]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2180      	movs	r1, #128	; 0x80
 800553a:	0109      	lsls	r1, r1, #4
 800553c:	430a      	orrs	r2, r1
 800553e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69da      	ldr	r2, [r3, #28]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	490f      	ldr	r1, [pc, #60]	; (8005588 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800554c:	400a      	ands	r2, r1
 800554e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69d9      	ldr	r1, [r3, #28]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	021a      	lsls	r2, r3, #8
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	61da      	str	r2, [r3, #28]
      break;
 8005564:	e004      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005566:	2317      	movs	r3, #23
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	2201      	movs	r2, #1
 800556c:	701a      	strb	r2, [r3, #0]
      break;
 800556e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	223c      	movs	r2, #60	; 0x3c
 8005574:	2100      	movs	r1, #0
 8005576:	5499      	strb	r1, [r3, r2]

  return status;
 8005578:	2317      	movs	r3, #23
 800557a:	18fb      	adds	r3, r7, r3
 800557c:	781b      	ldrb	r3, [r3, #0]
}
 800557e:	0018      	movs	r0, r3
 8005580:	46bd      	mov	sp, r7
 8005582:	b006      	add	sp, #24
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	fffffbff 	.word	0xfffffbff

0800558c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	223c      	movs	r2, #60	; 0x3c
 800559a:	5c9b      	ldrb	r3, [r3, r2]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e032      	b.n	800560a <HAL_TIM_SlaveConfigSynchro+0x7e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	223c      	movs	r2, #60	; 0x3c
 80055a8:	2101      	movs	r1, #1
 80055aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	223d      	movs	r2, #61	; 0x3d
 80055b0:	2102      	movs	r1, #2
 80055b2:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	0011      	movs	r1, r2
 80055ba:	0018      	movs	r0, r3
 80055bc:	f000 fabe 	bl	8005b3c <TIM_SlaveTimer_SetConfig>
 80055c0:	1e03      	subs	r3, r0, #0
 80055c2:	d009      	beq.n	80055d8 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	223d      	movs	r2, #61	; 0x3d
 80055c8:	2101      	movs	r1, #1
 80055ca:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	223c      	movs	r2, #60	; 0x3c
 80055d0:	2100      	movs	r1, #0
 80055d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e018      	b.n	800560a <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2140      	movs	r1, #64	; 0x40
 80055e4:	438a      	bics	r2, r1
 80055e6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4908      	ldr	r1, [pc, #32]	; (8005614 <HAL_TIM_SlaveConfigSynchro+0x88>)
 80055f4:	400a      	ands	r2, r1
 80055f6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	223d      	movs	r2, #61	; 0x3d
 80055fc:	2101      	movs	r1, #1
 80055fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	223c      	movs	r2, #60	; 0x3c
 8005604:	2100      	movs	r1, #0
 8005606:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	0018      	movs	r0, r3
 800560c:	46bd      	mov	sp, r7
 800560e:	b002      	add	sp, #8
 8005610:	bd80      	pop	{r7, pc}
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	ffffbfff 	.word	0xffffbfff

08005618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005620:	46c0      	nop			; (mov r8, r8)
 8005622:	46bd      	mov	sp, r7
 8005624:	b002      	add	sp, #8
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005630:	46c0      	nop			; (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	b002      	add	sp, #8
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005640:	46c0      	nop			; (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	b002      	add	sp, #8
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005650:	46c0      	nop			; (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	b002      	add	sp, #8
 8005656:	bd80      	pop	{r7, pc}

08005658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a2f      	ldr	r2, [pc, #188]	; (8005728 <TIM_Base_SetConfig+0xd0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_Base_SetConfig+0x20>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a2e      	ldr	r2, [pc, #184]	; (800572c <TIM_Base_SetConfig+0xd4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d108      	bne.n	800568a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2270      	movs	r2, #112	; 0x70
 800567c:	4393      	bics	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a26      	ldr	r2, [pc, #152]	; (8005728 <TIM_Base_SetConfig+0xd0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <TIM_Base_SetConfig+0x62>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a25      	ldr	r2, [pc, #148]	; (800572c <TIM_Base_SetConfig+0xd4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00f      	beq.n	80056ba <TIM_Base_SetConfig+0x62>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a24      	ldr	r2, [pc, #144]	; (8005730 <TIM_Base_SetConfig+0xd8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00b      	beq.n	80056ba <TIM_Base_SetConfig+0x62>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a23      	ldr	r2, [pc, #140]	; (8005734 <TIM_Base_SetConfig+0xdc>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d007      	beq.n	80056ba <TIM_Base_SetConfig+0x62>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a22      	ldr	r2, [pc, #136]	; (8005738 <TIM_Base_SetConfig+0xe0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_Base_SetConfig+0x62>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a21      	ldr	r2, [pc, #132]	; (800573c <TIM_Base_SetConfig+0xe4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d108      	bne.n	80056cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4a20      	ldr	r2, [pc, #128]	; (8005740 <TIM_Base_SetConfig+0xe8>)
 80056be:	4013      	ands	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2280      	movs	r2, #128	; 0x80
 80056d0:	4393      	bics	r3, r2
 80056d2:	001a      	movs	r2, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a0c      	ldr	r2, [pc, #48]	; (8005728 <TIM_Base_SetConfig+0xd0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_Base_SetConfig+0xba>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a0d      	ldr	r2, [pc, #52]	; (8005734 <TIM_Base_SetConfig+0xdc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_Base_SetConfig+0xba>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a0c      	ldr	r2, [pc, #48]	; (8005738 <TIM_Base_SetConfig+0xe0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_Base_SetConfig+0xba>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a0b      	ldr	r2, [pc, #44]	; (800573c <TIM_Base_SetConfig+0xe4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d103      	bne.n	800571a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	615a      	str	r2, [r3, #20]
}
 8005720:	46c0      	nop			; (mov r8, r8)
 8005722:	46bd      	mov	sp, r7
 8005724:	b004      	add	sp, #16
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40000400 	.word	0x40000400
 8005730:	40002000 	.word	0x40002000
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800
 8005740:	fffffcff 	.word	0xfffffcff

08005744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	2201      	movs	r2, #1
 8005754:	4393      	bics	r3, r2
 8005756:	001a      	movs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2270      	movs	r2, #112	; 0x70
 8005772:	4393      	bics	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2203      	movs	r2, #3
 800577a:	4393      	bics	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2202      	movs	r2, #2
 800578c:	4393      	bics	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a27      	ldr	r2, [pc, #156]	; (800583c <TIM_OC1_SetConfig+0xf8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00b      	beq.n	80057ba <TIM_OC1_SetConfig+0x76>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a26      	ldr	r2, [pc, #152]	; (8005840 <TIM_OC1_SetConfig+0xfc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d007      	beq.n	80057ba <TIM_OC1_SetConfig+0x76>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a25      	ldr	r2, [pc, #148]	; (8005844 <TIM_OC1_SetConfig+0x100>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d003      	beq.n	80057ba <TIM_OC1_SetConfig+0x76>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a24      	ldr	r2, [pc, #144]	; (8005848 <TIM_OC1_SetConfig+0x104>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d10c      	bne.n	80057d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2208      	movs	r2, #8
 80057be:	4393      	bics	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2204      	movs	r2, #4
 80057d0:	4393      	bics	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a19      	ldr	r2, [pc, #100]	; (800583c <TIM_OC1_SetConfig+0xf8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00b      	beq.n	80057f4 <TIM_OC1_SetConfig+0xb0>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a18      	ldr	r2, [pc, #96]	; (8005840 <TIM_OC1_SetConfig+0xfc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <TIM_OC1_SetConfig+0xb0>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a17      	ldr	r2, [pc, #92]	; (8005844 <TIM_OC1_SetConfig+0x100>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_OC1_SetConfig+0xb0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a16      	ldr	r2, [pc, #88]	; (8005848 <TIM_OC1_SetConfig+0x104>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d111      	bne.n	8005818 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4a15      	ldr	r2, [pc, #84]	; (800584c <TIM_OC1_SetConfig+0x108>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4a14      	ldr	r2, [pc, #80]	; (8005850 <TIM_OC1_SetConfig+0x10c>)
 8005800:	4013      	ands	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	46bd      	mov	sp, r7
 8005836:	b006      	add	sp, #24
 8005838:	bd80      	pop	{r7, pc}
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	40012c00 	.word	0x40012c00
 8005840:	40014000 	.word	0x40014000
 8005844:	40014400 	.word	0x40014400
 8005848:	40014800 	.word	0x40014800
 800584c:	fffffeff 	.word	0xfffffeff
 8005850:	fffffdff 	.word	0xfffffdff

08005854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	2210      	movs	r2, #16
 8005864:	4393      	bics	r3, r2
 8005866:	001a      	movs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4a2e      	ldr	r2, [pc, #184]	; (800593c <TIM_OC2_SetConfig+0xe8>)
 8005882:	4013      	ands	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a2d      	ldr	r2, [pc, #180]	; (8005940 <TIM_OC2_SetConfig+0xec>)
 800588a:	4013      	ands	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2220      	movs	r2, #32
 800589e:	4393      	bics	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a24      	ldr	r2, [pc, #144]	; (8005944 <TIM_OC2_SetConfig+0xf0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10d      	bne.n	80058d2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2280      	movs	r2, #128	; 0x80
 80058ba:	4393      	bics	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2240      	movs	r2, #64	; 0x40
 80058ce:	4393      	bics	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a1b      	ldr	r2, [pc, #108]	; (8005944 <TIM_OC2_SetConfig+0xf0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <TIM_OC2_SetConfig+0x9e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a1a      	ldr	r2, [pc, #104]	; (8005948 <TIM_OC2_SetConfig+0xf4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_OC2_SetConfig+0x9e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a19      	ldr	r2, [pc, #100]	; (800594c <TIM_OC2_SetConfig+0xf8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_OC2_SetConfig+0x9e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a18      	ldr	r2, [pc, #96]	; (8005950 <TIM_OC2_SetConfig+0xfc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d113      	bne.n	800591a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	4a17      	ldr	r2, [pc, #92]	; (8005954 <TIM_OC2_SetConfig+0x100>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4a16      	ldr	r2, [pc, #88]	; (8005958 <TIM_OC2_SetConfig+0x104>)
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	621a      	str	r2, [r3, #32]
}
 8005934:	46c0      	nop			; (mov r8, r8)
 8005936:	46bd      	mov	sp, r7
 8005938:	b006      	add	sp, #24
 800593a:	bd80      	pop	{r7, pc}
 800593c:	ffff8fff 	.word	0xffff8fff
 8005940:	fffffcff 	.word	0xfffffcff
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800
 8005954:	fffffbff 	.word	0xfffffbff
 8005958:	fffff7ff 	.word	0xfffff7ff

0800595c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	4a35      	ldr	r2, [pc, #212]	; (8005a40 <TIM_OC3_SetConfig+0xe4>)
 800596c:	401a      	ands	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2270      	movs	r2, #112	; 0x70
 8005988:	4393      	bics	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2203      	movs	r2, #3
 8005990:	4393      	bics	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	4a28      	ldr	r2, [pc, #160]	; (8005a44 <TIM_OC3_SetConfig+0xe8>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a24      	ldr	r2, [pc, #144]	; (8005a48 <TIM_OC3_SetConfig+0xec>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d10d      	bne.n	80059d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4a23      	ldr	r2, [pc, #140]	; (8005a4c <TIM_OC3_SetConfig+0xf0>)
 80059be:	4013      	ands	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	021b      	lsls	r3, r3, #8
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <TIM_OC3_SetConfig+0xf4>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a1b      	ldr	r2, [pc, #108]	; (8005a48 <TIM_OC3_SetConfig+0xec>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00b      	beq.n	80059f6 <TIM_OC3_SetConfig+0x9a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <TIM_OC3_SetConfig+0xf8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d007      	beq.n	80059f6 <TIM_OC3_SetConfig+0x9a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <TIM_OC3_SetConfig+0xfc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_OC3_SetConfig+0x9a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a1a      	ldr	r2, [pc, #104]	; (8005a5c <TIM_OC3_SetConfig+0x100>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d113      	bne.n	8005a1e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4a19      	ldr	r2, [pc, #100]	; (8005a60 <TIM_OC3_SetConfig+0x104>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <TIM_OC3_SetConfig+0x108>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	621a      	str	r2, [r3, #32]
}
 8005a38:	46c0      	nop			; (mov r8, r8)
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b006      	add	sp, #24
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	fffffeff 	.word	0xfffffeff
 8005a44:	fffffdff 	.word	0xfffffdff
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	fffff7ff 	.word	0xfffff7ff
 8005a50:	fffffbff 	.word	0xfffffbff
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800
 8005a60:	ffffefff 	.word	0xffffefff
 8005a64:	ffffdfff 	.word	0xffffdfff

08005a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	4a28      	ldr	r2, [pc, #160]	; (8005b18 <TIM_OC4_SetConfig+0xb0>)
 8005a78:	401a      	ands	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a22      	ldr	r2, [pc, #136]	; (8005b1c <TIM_OC4_SetConfig+0xb4>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <TIM_OC4_SetConfig+0xb8>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4a1d      	ldr	r2, [pc, #116]	; (8005b24 <TIM_OC4_SetConfig+0xbc>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	031b      	lsls	r3, r3, #12
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a19      	ldr	r2, [pc, #100]	; (8005b28 <TIM_OC4_SetConfig+0xc0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00b      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x78>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a18      	ldr	r2, [pc, #96]	; (8005b2c <TIM_OC4_SetConfig+0xc4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x78>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a17      	ldr	r2, [pc, #92]	; (8005b30 <TIM_OC4_SetConfig+0xc8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x78>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a16      	ldr	r2, [pc, #88]	; (8005b34 <TIM_OC4_SetConfig+0xcc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d109      	bne.n	8005af4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	4a15      	ldr	r2, [pc, #84]	; (8005b38 <TIM_OC4_SetConfig+0xd0>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	019b      	lsls	r3, r3, #6
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	621a      	str	r2, [r3, #32]
}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b006      	add	sp, #24
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	ffffefff 	.word	0xffffefff
 8005b1c:	ffff8fff 	.word	0xffff8fff
 8005b20:	fffffcff 	.word	0xfffffcff
 8005b24:	ffffdfff 	.word	0xffffdfff
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40014000 	.word	0x40014000
 8005b30:	40014400 	.word	0x40014400
 8005b34:	40014800 	.word	0x40014800
 8005b38:	ffffbfff 	.word	0xffffbfff

08005b3c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b46:	2317      	movs	r3, #23
 8005b48:	18fb      	adds	r3, r7, r3
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	2270      	movs	r2, #112	; 0x70
 8005b5a:	4393      	bics	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2207      	movs	r2, #7
 8005b6c:	4393      	bics	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b70      	cmp	r3, #112	; 0x70
 8005b88:	d015      	beq.n	8005bb6 <TIM_SlaveTimer_SetConfig+0x7a>
 8005b8a:	d900      	bls.n	8005b8e <TIM_SlaveTimer_SetConfig+0x52>
 8005b8c:	e05b      	b.n	8005c46 <TIM_SlaveTimer_SetConfig+0x10a>
 8005b8e:	2b60      	cmp	r3, #96	; 0x60
 8005b90:	d04f      	beq.n	8005c32 <TIM_SlaveTimer_SetConfig+0xf6>
 8005b92:	d858      	bhi.n	8005c46 <TIM_SlaveTimer_SetConfig+0x10a>
 8005b94:	2b50      	cmp	r3, #80	; 0x50
 8005b96:	d042      	beq.n	8005c1e <TIM_SlaveTimer_SetConfig+0xe2>
 8005b98:	d855      	bhi.n	8005c46 <TIM_SlaveTimer_SetConfig+0x10a>
 8005b9a:	2b40      	cmp	r3, #64	; 0x40
 8005b9c:	d016      	beq.n	8005bcc <TIM_SlaveTimer_SetConfig+0x90>
 8005b9e:	d852      	bhi.n	8005c46 <TIM_SlaveTimer_SetConfig+0x10a>
 8005ba0:	2b30      	cmp	r3, #48	; 0x30
 8005ba2:	d055      	beq.n	8005c50 <TIM_SlaveTimer_SetConfig+0x114>
 8005ba4:	d84f      	bhi.n	8005c46 <TIM_SlaveTimer_SetConfig+0x10a>
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d052      	beq.n	8005c50 <TIM_SlaveTimer_SetConfig+0x114>
 8005baa:	d84c      	bhi.n	8005c46 <TIM_SlaveTimer_SetConfig+0x10a>
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d04f      	beq.n	8005c50 <TIM_SlaveTimer_SetConfig+0x114>
 8005bb0:	2b10      	cmp	r3, #16
 8005bb2:	d04d      	beq.n	8005c50 <TIM_SlaveTimer_SetConfig+0x114>
 8005bb4:	e047      	b.n	8005c46 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68d9      	ldr	r1, [r3, #12]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f000 f8ab 	bl	8005d20 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005bca:	e042      	b.n	8005c52 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b05      	cmp	r3, #5
 8005bd2:	d101      	bne.n	8005bd8 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e03f      	b.n	8005c58 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6a1a      	ldr	r2, [r3, #32]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2101      	movs	r1, #1
 8005bec:	438a      	bics	r2, r1
 8005bee:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	22f0      	movs	r2, #240	; 0xf0
 8005bfc:	4393      	bics	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	621a      	str	r2, [r3, #32]
      break;
 8005c1c:	e019      	b.n	8005c52 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	6899      	ldr	r1, [r3, #8]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	001a      	movs	r2, r3
 8005c2c:	f000 f818 	bl	8005c60 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005c30:	e00f      	b.n	8005c52 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6818      	ldr	r0, [r3, #0]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	6899      	ldr	r1, [r3, #8]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	001a      	movs	r2, r3
 8005c40:	f000 f83c 	bl	8005cbc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005c44:	e005      	b.n	8005c52 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005c46:	2317      	movs	r3, #23
 8005c48:	18fb      	adds	r3, r7, r3
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	701a      	strb	r2, [r3, #0]
      break;
 8005c4e:	e000      	b.n	8005c52 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8005c50:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8005c52:	2317      	movs	r3, #23
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	781b      	ldrb	r3, [r3, #0]
}
 8005c58:	0018      	movs	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b006      	add	sp, #24
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	2201      	movs	r2, #1
 8005c78:	4393      	bics	r3, r2
 8005c7a:	001a      	movs	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	22f0      	movs	r2, #240	; 0xf0
 8005c8a:	4393      	bics	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	220a      	movs	r2, #10
 8005c9c:	4393      	bics	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	621a      	str	r2, [r3, #32]
}
 8005cb4:	46c0      	nop			; (mov r8, r8)
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b006      	add	sp, #24
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	2210      	movs	r2, #16
 8005cce:	4393      	bics	r3, r2
 8005cd0:	001a      	movs	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	4a0d      	ldr	r2, [pc, #52]	; (8005d1c <TIM_TI2_ConfigInputStage+0x60>)
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	031b      	lsls	r3, r3, #12
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	22a0      	movs	r2, #160	; 0xa0
 8005cf8:	4393      	bics	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	46bd      	mov	sp, r7
 8005d16:	b006      	add	sp, #24
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	ffff0fff 	.word	0xffff0fff

08005d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	4a09      	ldr	r2, [pc, #36]	; (8005d5c <TIM_ETR_SetConfig+0x3c>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	021a      	lsls	r2, r3, #8
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	609a      	str	r2, [r3, #8]
}
 8005d54:	46c0      	nop			; (mov r8, r8)
 8005d56:	46bd      	mov	sp, r7
 8005d58:	b006      	add	sp, #24
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	ffff00ff 	.word	0xffff00ff

08005d60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	221f      	movs	r2, #31
 8005d70:	4013      	ands	r3, r2
 8005d72:	2201      	movs	r2, #1
 8005d74:	409a      	lsls	r2, r3
 8005d76:	0013      	movs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	43d2      	mvns	r2, r2
 8005d82:	401a      	ands	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a1a      	ldr	r2, [r3, #32]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	211f      	movs	r1, #31
 8005d90:	400b      	ands	r3, r1
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	4099      	lsls	r1, r3
 8005d96:	000b      	movs	r3, r1
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	46c0      	nop			; (mov r8, r8)
 8005da0:	46bd      	mov	sp, r7
 8005da2:	b006      	add	sp, #24
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	223c      	movs	r2, #60	; 0x3c
 8005db6:	5c9b      	ldrb	r3, [r3, r2]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e041      	b.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	223c      	movs	r2, #60	; 0x3c
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	223d      	movs	r2, #61	; 0x3d
 8005dcc:	2102      	movs	r1, #2
 8005dce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2270      	movs	r2, #112	; 0x70
 8005de4:	4393      	bics	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a13      	ldr	r2, [pc, #76]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a11      	ldr	r2, [pc, #68]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a10      	ldr	r2, [pc, #64]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d10c      	bne.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2280      	movs	r2, #128	; 0x80
 8005e1c:	4393      	bics	r3, r2
 8005e1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	223d      	movs	r2, #61	; 0x3d
 8005e36:	2101      	movs	r1, #1
 8005e38:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	223c      	movs	r2, #60	; 0x3c
 8005e3e:	2100      	movs	r1, #0
 8005e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	0018      	movs	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b004      	add	sp, #16
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40012c00 	.word	0x40012c00
 8005e50:	40000400 	.word	0x40000400
 8005e54:	40014000 	.word	0x40014000

08005e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e60:	46c0      	nop			; (mov r8, r8)
 8005e62:	46bd      	mov	sp, r7
 8005e64:	b002      	add	sp, #8
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e70:	46c0      	nop			; (mov r8, r8)
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b002      	add	sp, #8
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e044      	b.n	8005f14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d107      	bne.n	8005ea2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2278      	movs	r2, #120	; 0x78
 8005e96:	2100      	movs	r1, #0
 8005e98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f7fd fb83 	bl	80035a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2224      	movs	r2, #36	; 0x24
 8005ea6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	438a      	bics	r2, r1
 8005eb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 f8d0 	bl	8006060 <UART_SetConfig>
 8005ec0:	0003      	movs	r3, r0
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e024      	b.n	8005f14 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f000 fa1b 	bl	8006310 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	490d      	ldr	r1, [pc, #52]	; (8005f1c <HAL_UART_Init+0xa4>)
 8005ee6:	400a      	ands	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2108      	movs	r1, #8
 8005ef6:	438a      	bics	r2, r1
 8005ef8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2101      	movs	r1, #1
 8005f06:	430a      	orrs	r2, r1
 8005f08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f000 fab3 	bl	8006478 <UART_CheckIdleState>
 8005f12:	0003      	movs	r3, r0
}
 8005f14:	0018      	movs	r0, r3
 8005f16:	46bd      	mov	sp, r7
 8005f18:	b002      	add	sp, #8
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	fffff7ff 	.word	0xfffff7ff

08005f20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	; 0x28
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	603b      	str	r3, [r7, #0]
 8005f2c:	1dbb      	adds	r3, r7, #6
 8005f2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d000      	beq.n	8005f3a <HAL_UART_Transmit+0x1a>
 8005f38:	e08d      	b.n	8006056 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_UART_Transmit+0x28>
 8005f40:	1dbb      	adds	r3, r7, #6
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e085      	b.n	8006058 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	2380      	movs	r3, #128	; 0x80
 8005f52:	015b      	lsls	r3, r3, #5
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d109      	bne.n	8005f6c <HAL_UART_Transmit+0x4c>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2201      	movs	r2, #1
 8005f64:	4013      	ands	r3, r2
 8005f66:	d001      	beq.n	8005f6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e075      	b.n	8006058 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2284      	movs	r2, #132	; 0x84
 8005f70:	2100      	movs	r1, #0
 8005f72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2221      	movs	r2, #33	; 0x21
 8005f78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f7a:	f7fd fced 	bl	8003958 <HAL_GetTick>
 8005f7e:	0003      	movs	r3, r0
 8005f80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	1dba      	adds	r2, r7, #6
 8005f86:	2150      	movs	r1, #80	; 0x50
 8005f88:	8812      	ldrh	r2, [r2, #0]
 8005f8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	1dba      	adds	r2, r7, #6
 8005f90:	2152      	movs	r1, #82	; 0x52
 8005f92:	8812      	ldrh	r2, [r2, #0]
 8005f94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	2380      	movs	r3, #128	; 0x80
 8005f9c:	015b      	lsls	r3, r3, #5
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d108      	bne.n	8005fb4 <HAL_UART_Transmit+0x94>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d104      	bne.n	8005fb4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	e003      	b.n	8005fbc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fbc:	e030      	b.n	8006020 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	0013      	movs	r3, r2
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2180      	movs	r1, #128	; 0x80
 8005fcc:	f000 fafc 	bl	80065c8 <UART_WaitOnFlagUntilTimeout>
 8005fd0:	1e03      	subs	r3, r0, #0
 8005fd2:	d004      	beq.n	8005fde <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e03c      	b.n	8006058 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10b      	bne.n	8005ffc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	881a      	ldrh	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	05d2      	lsls	r2, r2, #23
 8005fee:	0dd2      	lsrs	r2, r2, #23
 8005ff0:	b292      	uxth	r2, r2
 8005ff2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	3302      	adds	r3, #2
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	e008      	b.n	800600e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	781a      	ldrb	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	b292      	uxth	r2, r2
 8006006:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	3301      	adds	r3, #1
 800600c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2252      	movs	r2, #82	; 0x52
 8006012:	5a9b      	ldrh	r3, [r3, r2]
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b299      	uxth	r1, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2252      	movs	r2, #82	; 0x52
 800601e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2252      	movs	r2, #82	; 0x52
 8006024:	5a9b      	ldrh	r3, [r3, r2]
 8006026:	b29b      	uxth	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1c8      	bne.n	8005fbe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	0013      	movs	r3, r2
 8006036:	2200      	movs	r2, #0
 8006038:	2140      	movs	r1, #64	; 0x40
 800603a:	f000 fac5 	bl	80065c8 <UART_WaitOnFlagUntilTimeout>
 800603e:	1e03      	subs	r3, r0, #0
 8006040:	d004      	beq.n	800604c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e005      	b.n	8006058 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	e000      	b.n	8006058 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8006056:	2302      	movs	r3, #2
  }
}
 8006058:	0018      	movs	r0, r3
 800605a:	46bd      	mov	sp, r7
 800605c:	b008      	add	sp, #32
 800605e:	bd80      	pop	{r7, pc}

08006060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b088      	sub	sp, #32
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006068:	231e      	movs	r3, #30
 800606a:	18fb      	adds	r3, r7, r3
 800606c:	2200      	movs	r2, #0
 800606e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	4313      	orrs	r3, r2
 8006086:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a97      	ldr	r2, [pc, #604]	; (80062ec <UART_SetConfig+0x28c>)
 8006090:	4013      	ands	r3, r2
 8006092:	0019      	movs	r1, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	430a      	orrs	r2, r1
 800609c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4a92      	ldr	r2, [pc, #584]	; (80062f0 <UART_SetConfig+0x290>)
 80060a6:	4013      	ands	r3, r2
 80060a8:	0019      	movs	r1, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	4a89      	ldr	r2, [pc, #548]	; (80062f4 <UART_SetConfig+0x294>)
 80060ce:	4013      	ands	r3, r2
 80060d0:	0019      	movs	r1, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	430a      	orrs	r2, r1
 80060da:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a85      	ldr	r2, [pc, #532]	; (80062f8 <UART_SetConfig+0x298>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d127      	bne.n	8006136 <UART_SetConfig+0xd6>
 80060e6:	4b85      	ldr	r3, [pc, #532]	; (80062fc <UART_SetConfig+0x29c>)
 80060e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ea:	2203      	movs	r2, #3
 80060ec:	4013      	ands	r3, r2
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d00d      	beq.n	800610e <UART_SetConfig+0xae>
 80060f2:	d81b      	bhi.n	800612c <UART_SetConfig+0xcc>
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d014      	beq.n	8006122 <UART_SetConfig+0xc2>
 80060f8:	d818      	bhi.n	800612c <UART_SetConfig+0xcc>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <UART_SetConfig+0xa4>
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d00a      	beq.n	8006118 <UART_SetConfig+0xb8>
 8006102:	e013      	b.n	800612c <UART_SetConfig+0xcc>
 8006104:	231f      	movs	r3, #31
 8006106:	18fb      	adds	r3, r7, r3
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	e035      	b.n	800617a <UART_SetConfig+0x11a>
 800610e:	231f      	movs	r3, #31
 8006110:	18fb      	adds	r3, r7, r3
 8006112:	2202      	movs	r2, #2
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e030      	b.n	800617a <UART_SetConfig+0x11a>
 8006118:	231f      	movs	r3, #31
 800611a:	18fb      	adds	r3, r7, r3
 800611c:	2204      	movs	r2, #4
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	e02b      	b.n	800617a <UART_SetConfig+0x11a>
 8006122:	231f      	movs	r3, #31
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	2208      	movs	r2, #8
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	e026      	b.n	800617a <UART_SetConfig+0x11a>
 800612c:	231f      	movs	r3, #31
 800612e:	18fb      	adds	r3, r7, r3
 8006130:	2210      	movs	r2, #16
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	e021      	b.n	800617a <UART_SetConfig+0x11a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a71      	ldr	r2, [pc, #452]	; (8006300 <UART_SetConfig+0x2a0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d104      	bne.n	800614a <UART_SetConfig+0xea>
 8006140:	231f      	movs	r3, #31
 8006142:	18fb      	adds	r3, r7, r3
 8006144:	2200      	movs	r2, #0
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	e017      	b.n	800617a <UART_SetConfig+0x11a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a6d      	ldr	r2, [pc, #436]	; (8006304 <UART_SetConfig+0x2a4>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d104      	bne.n	800615e <UART_SetConfig+0xfe>
 8006154:	231f      	movs	r3, #31
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	2200      	movs	r2, #0
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	e00d      	b.n	800617a <UART_SetConfig+0x11a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a69      	ldr	r2, [pc, #420]	; (8006308 <UART_SetConfig+0x2a8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d104      	bne.n	8006172 <UART_SetConfig+0x112>
 8006168:	231f      	movs	r3, #31
 800616a:	18fb      	adds	r3, r7, r3
 800616c:	2200      	movs	r2, #0
 800616e:	701a      	strb	r2, [r3, #0]
 8006170:	e003      	b.n	800617a <UART_SetConfig+0x11a>
 8006172:	231f      	movs	r3, #31
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	2210      	movs	r2, #16
 8006178:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69da      	ldr	r2, [r3, #28]
 800617e:	2380      	movs	r3, #128	; 0x80
 8006180:	021b      	lsls	r3, r3, #8
 8006182:	429a      	cmp	r2, r3
 8006184:	d15c      	bne.n	8006240 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 8006186:	231f      	movs	r3, #31
 8006188:	18fb      	adds	r3, r7, r3
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b08      	cmp	r3, #8
 800618e:	d015      	beq.n	80061bc <UART_SetConfig+0x15c>
 8006190:	dc18      	bgt.n	80061c4 <UART_SetConfig+0x164>
 8006192:	2b04      	cmp	r3, #4
 8006194:	d00d      	beq.n	80061b2 <UART_SetConfig+0x152>
 8006196:	dc15      	bgt.n	80061c4 <UART_SetConfig+0x164>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <UART_SetConfig+0x142>
 800619c:	2b02      	cmp	r3, #2
 800619e:	d005      	beq.n	80061ac <UART_SetConfig+0x14c>
 80061a0:	e010      	b.n	80061c4 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a2:	f7fe fb1b 	bl	80047dc <HAL_RCC_GetPCLK1Freq>
 80061a6:	0003      	movs	r3, r0
 80061a8:	61bb      	str	r3, [r7, #24]
        break;
 80061aa:	e012      	b.n	80061d2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061ac:	4b57      	ldr	r3, [pc, #348]	; (800630c <UART_SetConfig+0x2ac>)
 80061ae:	61bb      	str	r3, [r7, #24]
        break;
 80061b0:	e00f      	b.n	80061d2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061b2:	f7fe fab1 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 80061b6:	0003      	movs	r3, r0
 80061b8:	61bb      	str	r3, [r7, #24]
        break;
 80061ba:	e00a      	b.n	80061d2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061bc:	2380      	movs	r3, #128	; 0x80
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	61bb      	str	r3, [r7, #24]
        break;
 80061c2:	e006      	b.n	80061d2 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061c8:	231e      	movs	r3, #30
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	2201      	movs	r2, #1
 80061ce:	701a      	strb	r2, [r3, #0]
        break;
 80061d0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d100      	bne.n	80061da <UART_SetConfig+0x17a>
 80061d8:	e07a      	b.n	80062d0 <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	005a      	lsls	r2, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	18d2      	adds	r2, r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	0019      	movs	r1, r3
 80061ec:	0010      	movs	r0, r2
 80061ee:	f7f9 ffa7 	bl	8000140 <__udivsi3>
 80061f2:	0003      	movs	r3, r0
 80061f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b0f      	cmp	r3, #15
 80061fa:	d91c      	bls.n	8006236 <UART_SetConfig+0x1d6>
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	2380      	movs	r3, #128	; 0x80
 8006200:	025b      	lsls	r3, r3, #9
 8006202:	429a      	cmp	r2, r3
 8006204:	d217      	bcs.n	8006236 <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	b29a      	uxth	r2, r3
 800620a:	200e      	movs	r0, #14
 800620c:	183b      	adds	r3, r7, r0
 800620e:	210f      	movs	r1, #15
 8006210:	438a      	bics	r2, r1
 8006212:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	085b      	lsrs	r3, r3, #1
 8006218:	b29b      	uxth	r3, r3
 800621a:	2207      	movs	r2, #7
 800621c:	4013      	ands	r3, r2
 800621e:	b299      	uxth	r1, r3
 8006220:	183b      	adds	r3, r7, r0
 8006222:	183a      	adds	r2, r7, r0
 8006224:	8812      	ldrh	r2, [r2, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	183a      	adds	r2, r7, r0
 8006230:	8812      	ldrh	r2, [r2, #0]
 8006232:	60da      	str	r2, [r3, #12]
 8006234:	e04c      	b.n	80062d0 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8006236:	231e      	movs	r3, #30
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	e047      	b.n	80062d0 <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006240:	231f      	movs	r3, #31
 8006242:	18fb      	adds	r3, r7, r3
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b08      	cmp	r3, #8
 8006248:	d015      	beq.n	8006276 <UART_SetConfig+0x216>
 800624a:	dc18      	bgt.n	800627e <UART_SetConfig+0x21e>
 800624c:	2b04      	cmp	r3, #4
 800624e:	d00d      	beq.n	800626c <UART_SetConfig+0x20c>
 8006250:	dc15      	bgt.n	800627e <UART_SetConfig+0x21e>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <UART_SetConfig+0x1fc>
 8006256:	2b02      	cmp	r3, #2
 8006258:	d005      	beq.n	8006266 <UART_SetConfig+0x206>
 800625a:	e010      	b.n	800627e <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800625c:	f7fe fabe 	bl	80047dc <HAL_RCC_GetPCLK1Freq>
 8006260:	0003      	movs	r3, r0
 8006262:	61bb      	str	r3, [r7, #24]
        break;
 8006264:	e012      	b.n	800628c <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006266:	4b29      	ldr	r3, [pc, #164]	; (800630c <UART_SetConfig+0x2ac>)
 8006268:	61bb      	str	r3, [r7, #24]
        break;
 800626a:	e00f      	b.n	800628c <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800626c:	f7fe fa54 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 8006270:	0003      	movs	r3, r0
 8006272:	61bb      	str	r3, [r7, #24]
        break;
 8006274:	e00a      	b.n	800628c <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006276:	2380      	movs	r3, #128	; 0x80
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	61bb      	str	r3, [r7, #24]
        break;
 800627c:	e006      	b.n	800628c <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006282:	231e      	movs	r3, #30
 8006284:	18fb      	adds	r3, r7, r3
 8006286:	2201      	movs	r2, #1
 8006288:	701a      	strb	r2, [r3, #0]
        break;
 800628a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01e      	beq.n	80062d0 <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	085a      	lsrs	r2, r3, #1
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	18d2      	adds	r2, r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	0019      	movs	r1, r3
 80062a2:	0010      	movs	r0, r2
 80062a4:	f7f9 ff4c 	bl	8000140 <__udivsi3>
 80062a8:	0003      	movs	r3, r0
 80062aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2b0f      	cmp	r3, #15
 80062b0:	d90a      	bls.n	80062c8 <UART_SetConfig+0x268>
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	2380      	movs	r3, #128	; 0x80
 80062b6:	025b      	lsls	r3, r3, #9
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d205      	bcs.n	80062c8 <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	b29a      	uxth	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60da      	str	r2, [r3, #12]
 80062c6:	e003      	b.n	80062d0 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 80062c8:	231e      	movs	r3, #30
 80062ca:	18fb      	adds	r3, r7, r3
 80062cc:	2201      	movs	r2, #1
 80062ce:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80062dc:	231e      	movs	r3, #30
 80062de:	18fb      	adds	r3, r7, r3
 80062e0:	781b      	ldrb	r3, [r3, #0]
}
 80062e2:	0018      	movs	r0, r3
 80062e4:	46bd      	mov	sp, r7
 80062e6:	b008      	add	sp, #32
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	efff69f3 	.word	0xefff69f3
 80062f0:	ffffcfff 	.word	0xffffcfff
 80062f4:	fffff4ff 	.word	0xfffff4ff
 80062f8:	40013800 	.word	0x40013800
 80062fc:	40021000 	.word	0x40021000
 8006300:	40004400 	.word	0x40004400
 8006304:	40004800 	.word	0x40004800
 8006308:	40004c00 	.word	0x40004c00
 800630c:	007a1200 	.word	0x007a1200

08006310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	2201      	movs	r2, #1
 800631e:	4013      	ands	r3, r2
 8006320:	d00b      	beq.n	800633a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	4a4a      	ldr	r2, [pc, #296]	; (8006454 <UART_AdvFeatureConfig+0x144>)
 800632a:	4013      	ands	r3, r2
 800632c:	0019      	movs	r1, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	2202      	movs	r2, #2
 8006340:	4013      	ands	r3, r2
 8006342:	d00b      	beq.n	800635c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4a43      	ldr	r2, [pc, #268]	; (8006458 <UART_AdvFeatureConfig+0x148>)
 800634c:	4013      	ands	r3, r2
 800634e:	0019      	movs	r1, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	2204      	movs	r2, #4
 8006362:	4013      	ands	r3, r2
 8006364:	d00b      	beq.n	800637e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	4a3b      	ldr	r2, [pc, #236]	; (800645c <UART_AdvFeatureConfig+0x14c>)
 800636e:	4013      	ands	r3, r2
 8006370:	0019      	movs	r1, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	2208      	movs	r2, #8
 8006384:	4013      	ands	r3, r2
 8006386:	d00b      	beq.n	80063a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	4a34      	ldr	r2, [pc, #208]	; (8006460 <UART_AdvFeatureConfig+0x150>)
 8006390:	4013      	ands	r3, r2
 8006392:	0019      	movs	r1, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	2210      	movs	r2, #16
 80063a6:	4013      	ands	r3, r2
 80063a8:	d00b      	beq.n	80063c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	4a2c      	ldr	r2, [pc, #176]	; (8006464 <UART_AdvFeatureConfig+0x154>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	0019      	movs	r1, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	2220      	movs	r2, #32
 80063c8:	4013      	ands	r3, r2
 80063ca:	d00b      	beq.n	80063e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	4a25      	ldr	r2, [pc, #148]	; (8006468 <UART_AdvFeatureConfig+0x158>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	0019      	movs	r1, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	2240      	movs	r2, #64	; 0x40
 80063ea:	4013      	ands	r3, r2
 80063ec:	d01d      	beq.n	800642a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	4a1d      	ldr	r2, [pc, #116]	; (800646c <UART_AdvFeatureConfig+0x15c>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	0019      	movs	r1, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800640a:	2380      	movs	r3, #128	; 0x80
 800640c:	035b      	lsls	r3, r3, #13
 800640e:	429a      	cmp	r2, r3
 8006410:	d10b      	bne.n	800642a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4a15      	ldr	r2, [pc, #84]	; (8006470 <UART_AdvFeatureConfig+0x160>)
 800641a:	4013      	ands	r3, r2
 800641c:	0019      	movs	r1, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	2280      	movs	r2, #128	; 0x80
 8006430:	4013      	ands	r3, r2
 8006432:	d00b      	beq.n	800644c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	4a0e      	ldr	r2, [pc, #56]	; (8006474 <UART_AdvFeatureConfig+0x164>)
 800643c:	4013      	ands	r3, r2
 800643e:	0019      	movs	r1, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	605a      	str	r2, [r3, #4]
  }
}
 800644c:	46c0      	nop			; (mov r8, r8)
 800644e:	46bd      	mov	sp, r7
 8006450:	b002      	add	sp, #8
 8006452:	bd80      	pop	{r7, pc}
 8006454:	fffdffff 	.word	0xfffdffff
 8006458:	fffeffff 	.word	0xfffeffff
 800645c:	fffbffff 	.word	0xfffbffff
 8006460:	ffff7fff 	.word	0xffff7fff
 8006464:	ffffefff 	.word	0xffffefff
 8006468:	ffffdfff 	.word	0xffffdfff
 800646c:	ffefffff 	.word	0xffefffff
 8006470:	ff9fffff 	.word	0xff9fffff
 8006474:	fff7ffff 	.word	0xfff7ffff

08006478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b092      	sub	sp, #72	; 0x48
 800647c:	af02      	add	r7, sp, #8
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2284      	movs	r2, #132	; 0x84
 8006484:	2100      	movs	r1, #0
 8006486:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006488:	f7fd fa66 	bl	8003958 <HAL_GetTick>
 800648c:	0003      	movs	r3, r0
 800648e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2208      	movs	r2, #8
 8006498:	4013      	ands	r3, r2
 800649a:	2b08      	cmp	r3, #8
 800649c:	d12c      	bne.n	80064f8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800649e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a0:	2280      	movs	r2, #128	; 0x80
 80064a2:	0391      	lsls	r1, r2, #14
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	4a46      	ldr	r2, [pc, #280]	; (80065c0 <UART_CheckIdleState+0x148>)
 80064a8:	9200      	str	r2, [sp, #0]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f000 f88c 	bl	80065c8 <UART_WaitOnFlagUntilTimeout>
 80064b0:	1e03      	subs	r3, r0, #0
 80064b2:	d021      	beq.n	80064f8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b4:	f3ef 8310 	mrs	r3, PRIMASK
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80064bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80064be:	2301      	movs	r3, #1
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	f383 8810 	msr	PRIMASK, r3
}
 80064c8:	46c0      	nop			; (mov r8, r8)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2180      	movs	r1, #128	; 0x80
 80064d6:	438a      	bics	r2, r1
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	f383 8810 	msr	PRIMASK, r3
}
 80064e4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2278      	movs	r2, #120	; 0x78
 80064f0:	2100      	movs	r1, #0
 80064f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e05f      	b.n	80065b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2204      	movs	r2, #4
 8006500:	4013      	ands	r3, r2
 8006502:	2b04      	cmp	r3, #4
 8006504:	d146      	bne.n	8006594 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006508:	2280      	movs	r2, #128	; 0x80
 800650a:	03d1      	lsls	r1, r2, #15
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	4a2c      	ldr	r2, [pc, #176]	; (80065c0 <UART_CheckIdleState+0x148>)
 8006510:	9200      	str	r2, [sp, #0]
 8006512:	2200      	movs	r2, #0
 8006514:	f000 f858 	bl	80065c8 <UART_WaitOnFlagUntilTimeout>
 8006518:	1e03      	subs	r3, r0, #0
 800651a:	d03b      	beq.n	8006594 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800651c:	f3ef 8310 	mrs	r3, PRIMASK
 8006520:	60fb      	str	r3, [r7, #12]
  return(result);
 8006522:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006524:	637b      	str	r3, [r7, #52]	; 0x34
 8006526:	2301      	movs	r3, #1
 8006528:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f383 8810 	msr	PRIMASK, r3
}
 8006530:	46c0      	nop			; (mov r8, r8)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4921      	ldr	r1, [pc, #132]	; (80065c4 <UART_CheckIdleState+0x14c>)
 800653e:	400a      	ands	r2, r1
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006544:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f383 8810 	msr	PRIMASK, r3
}
 800654c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800654e:	f3ef 8310 	mrs	r3, PRIMASK
 8006552:	61bb      	str	r3, [r7, #24]
  return(result);
 8006554:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006556:	633b      	str	r3, [r7, #48]	; 0x30
 8006558:	2301      	movs	r3, #1
 800655a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	f383 8810 	msr	PRIMASK, r3
}
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2101      	movs	r1, #1
 8006570:	438a      	bics	r2, r1
 8006572:	609a      	str	r2, [r3, #8]
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	f383 8810 	msr	PRIMASK, r3
}
 800657e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2280      	movs	r2, #128	; 0x80
 8006584:	2120      	movs	r1, #32
 8006586:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2278      	movs	r2, #120	; 0x78
 800658c:	2100      	movs	r1, #0
 800658e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e011      	b.n	80065b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2280      	movs	r2, #128	; 0x80
 800659e:	2120      	movs	r1, #32
 80065a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2278      	movs	r2, #120	; 0x78
 80065b2:	2100      	movs	r1, #0
 80065b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	0018      	movs	r0, r3
 80065ba:	46bd      	mov	sp, r7
 80065bc:	b010      	add	sp, #64	; 0x40
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	01ffffff 	.word	0x01ffffff
 80065c4:	fffffedf 	.word	0xfffffedf

080065c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	1dfb      	adds	r3, r7, #7
 80065d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d8:	e04b      	b.n	8006672 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	3301      	adds	r3, #1
 80065de:	d048      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065e0:	f7fd f9ba 	bl	8003958 <HAL_GetTick>
 80065e4:	0002      	movs	r2, r0
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d302      	bcc.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e04b      	b.n	8006692 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2204      	movs	r2, #4
 8006602:	4013      	ands	r3, r2
 8006604:	d035      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	2208      	movs	r2, #8
 800660e:	4013      	ands	r3, r2
 8006610:	2b08      	cmp	r3, #8
 8006612:	d111      	bne.n	8006638 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2208      	movs	r2, #8
 800661a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	0018      	movs	r0, r3
 8006620:	f000 f83c 	bl	800669c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2284      	movs	r2, #132	; 0x84
 8006628:	2108      	movs	r1, #8
 800662a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2278      	movs	r2, #120	; 0x78
 8006630:	2100      	movs	r1, #0
 8006632:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e02c      	b.n	8006692 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69da      	ldr	r2, [r3, #28]
 800663e:	2380      	movs	r3, #128	; 0x80
 8006640:	011b      	lsls	r3, r3, #4
 8006642:	401a      	ands	r2, r3
 8006644:	2380      	movs	r3, #128	; 0x80
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	429a      	cmp	r2, r3
 800664a:	d112      	bne.n	8006672 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2280      	movs	r2, #128	; 0x80
 8006652:	0112      	lsls	r2, r2, #4
 8006654:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	0018      	movs	r0, r3
 800665a:	f000 f81f 	bl	800669c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2284      	movs	r2, #132	; 0x84
 8006662:	2120      	movs	r1, #32
 8006664:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2278      	movs	r2, #120	; 0x78
 800666a:	2100      	movs	r1, #0
 800666c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e00f      	b.n	8006692 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	4013      	ands	r3, r2
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	425a      	negs	r2, r3
 8006682:	4153      	adcs	r3, r2
 8006684:	b2db      	uxtb	r3, r3
 8006686:	001a      	movs	r2, r3
 8006688:	1dfb      	adds	r3, r7, #7
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d0a4      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	0018      	movs	r0, r3
 8006694:	46bd      	mov	sp, r7
 8006696:	b004      	add	sp, #16
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08e      	sub	sp, #56	; 0x38
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066a4:	f3ef 8310 	mrs	r3, PRIMASK
 80066a8:	617b      	str	r3, [r7, #20]
  return(result);
 80066aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
 80066ae:	2301      	movs	r3, #1
 80066b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	f383 8810 	msr	PRIMASK, r3
}
 80066b8:	46c0      	nop			; (mov r8, r8)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4926      	ldr	r1, [pc, #152]	; (8006760 <UART_EndRxTransfer+0xc4>)
 80066c6:	400a      	ands	r2, r1
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	f383 8810 	msr	PRIMASK, r3
}
 80066d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d6:	f3ef 8310 	mrs	r3, PRIMASK
 80066da:	623b      	str	r3, [r7, #32]
  return(result);
 80066dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066de:	633b      	str	r3, [r7, #48]	; 0x30
 80066e0:	2301      	movs	r3, #1
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	f383 8810 	msr	PRIMASK, r3
}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2101      	movs	r1, #1
 80066f8:	438a      	bics	r2, r1
 80066fa:	609a      	str	r2, [r3, #8]
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	f383 8810 	msr	PRIMASK, r3
}
 8006706:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800670c:	2b01      	cmp	r3, #1
 800670e:	d118      	bne.n	8006742 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006710:	f3ef 8310 	mrs	r3, PRIMASK
 8006714:	60bb      	str	r3, [r7, #8]
  return(result);
 8006716:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800671a:	2301      	movs	r3, #1
 800671c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f383 8810 	msr	PRIMASK, r3
}
 8006724:	46c0      	nop			; (mov r8, r8)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2110      	movs	r1, #16
 8006732:	438a      	bics	r2, r1
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f383 8810 	msr	PRIMASK, r3
}
 8006740:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2280      	movs	r2, #128	; 0x80
 8006746:	2120      	movs	r1, #32
 8006748:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006756:	46c0      	nop			; (mov r8, r8)
 8006758:	46bd      	mov	sp, r7
 800675a:	b00e      	add	sp, #56	; 0x38
 800675c:	bd80      	pop	{r7, pc}
 800675e:	46c0      	nop			; (mov r8, r8)
 8006760:	fffffedf 	.word	0xfffffedf

08006764 <__errno>:
 8006764:	4b01      	ldr	r3, [pc, #4]	; (800676c <__errno+0x8>)
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	4770      	bx	lr
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	20000044 	.word	0x20000044

08006770 <__libc_init_array>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	2600      	movs	r6, #0
 8006774:	4d0c      	ldr	r5, [pc, #48]	; (80067a8 <__libc_init_array+0x38>)
 8006776:	4c0d      	ldr	r4, [pc, #52]	; (80067ac <__libc_init_array+0x3c>)
 8006778:	1b64      	subs	r4, r4, r5
 800677a:	10a4      	asrs	r4, r4, #2
 800677c:	42a6      	cmp	r6, r4
 800677e:	d109      	bne.n	8006794 <__libc_init_array+0x24>
 8006780:	2600      	movs	r6, #0
 8006782:	f002 ffbb 	bl	80096fc <_init>
 8006786:	4d0a      	ldr	r5, [pc, #40]	; (80067b0 <__libc_init_array+0x40>)
 8006788:	4c0a      	ldr	r4, [pc, #40]	; (80067b4 <__libc_init_array+0x44>)
 800678a:	1b64      	subs	r4, r4, r5
 800678c:	10a4      	asrs	r4, r4, #2
 800678e:	42a6      	cmp	r6, r4
 8006790:	d105      	bne.n	800679e <__libc_init_array+0x2e>
 8006792:	bd70      	pop	{r4, r5, r6, pc}
 8006794:	00b3      	lsls	r3, r6, #2
 8006796:	58eb      	ldr	r3, [r5, r3]
 8006798:	4798      	blx	r3
 800679a:	3601      	adds	r6, #1
 800679c:	e7ee      	b.n	800677c <__libc_init_array+0xc>
 800679e:	00b3      	lsls	r3, r6, #2
 80067a0:	58eb      	ldr	r3, [r5, r3]
 80067a2:	4798      	blx	r3
 80067a4:	3601      	adds	r6, #1
 80067a6:	e7f2      	b.n	800678e <__libc_init_array+0x1e>
 80067a8:	08009bc4 	.word	0x08009bc4
 80067ac:	08009bc4 	.word	0x08009bc4
 80067b0:	08009bc4 	.word	0x08009bc4
 80067b4:	08009bc8 	.word	0x08009bc8

080067b8 <memset>:
 80067b8:	0003      	movs	r3, r0
 80067ba:	1882      	adds	r2, r0, r2
 80067bc:	4293      	cmp	r3, r2
 80067be:	d100      	bne.n	80067c2 <memset+0xa>
 80067c0:	4770      	bx	lr
 80067c2:	7019      	strb	r1, [r3, #0]
 80067c4:	3301      	adds	r3, #1
 80067c6:	e7f9      	b.n	80067bc <memset+0x4>

080067c8 <__cvt>:
 80067c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ca:	001e      	movs	r6, r3
 80067cc:	2300      	movs	r3, #0
 80067ce:	0014      	movs	r4, r2
 80067d0:	b08b      	sub	sp, #44	; 0x2c
 80067d2:	429e      	cmp	r6, r3
 80067d4:	da04      	bge.n	80067e0 <__cvt+0x18>
 80067d6:	2180      	movs	r1, #128	; 0x80
 80067d8:	0609      	lsls	r1, r1, #24
 80067da:	1873      	adds	r3, r6, r1
 80067dc:	001e      	movs	r6, r3
 80067de:	232d      	movs	r3, #45	; 0x2d
 80067e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80067e4:	7013      	strb	r3, [r2, #0]
 80067e6:	2320      	movs	r3, #32
 80067e8:	2203      	movs	r2, #3
 80067ea:	439f      	bics	r7, r3
 80067ec:	2f46      	cmp	r7, #70	; 0x46
 80067ee:	d007      	beq.n	8006800 <__cvt+0x38>
 80067f0:	003b      	movs	r3, r7
 80067f2:	3b45      	subs	r3, #69	; 0x45
 80067f4:	4259      	negs	r1, r3
 80067f6:	414b      	adcs	r3, r1
 80067f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80067fa:	3a01      	subs	r2, #1
 80067fc:	18cb      	adds	r3, r1, r3
 80067fe:	9310      	str	r3, [sp, #64]	; 0x40
 8006800:	ab09      	add	r3, sp, #36	; 0x24
 8006802:	9304      	str	r3, [sp, #16]
 8006804:	ab08      	add	r3, sp, #32
 8006806:	9303      	str	r3, [sp, #12]
 8006808:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800680a:	9200      	str	r2, [sp, #0]
 800680c:	9302      	str	r3, [sp, #8]
 800680e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006810:	0022      	movs	r2, r4
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	0033      	movs	r3, r6
 8006816:	f000 fcf1 	bl	80071fc <_dtoa_r>
 800681a:	0005      	movs	r5, r0
 800681c:	2f47      	cmp	r7, #71	; 0x47
 800681e:	d102      	bne.n	8006826 <__cvt+0x5e>
 8006820:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006822:	07db      	lsls	r3, r3, #31
 8006824:	d528      	bpl.n	8006878 <__cvt+0xb0>
 8006826:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006828:	18eb      	adds	r3, r5, r3
 800682a:	9307      	str	r3, [sp, #28]
 800682c:	2f46      	cmp	r7, #70	; 0x46
 800682e:	d114      	bne.n	800685a <__cvt+0x92>
 8006830:	782b      	ldrb	r3, [r5, #0]
 8006832:	2b30      	cmp	r3, #48	; 0x30
 8006834:	d10c      	bne.n	8006850 <__cvt+0x88>
 8006836:	2200      	movs	r2, #0
 8006838:	2300      	movs	r3, #0
 800683a:	0020      	movs	r0, r4
 800683c:	0031      	movs	r1, r6
 800683e:	f7f9 fe05 	bl	800044c <__aeabi_dcmpeq>
 8006842:	2800      	cmp	r0, #0
 8006844:	d104      	bne.n	8006850 <__cvt+0x88>
 8006846:	2301      	movs	r3, #1
 8006848:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800684a:	1a9b      	subs	r3, r3, r2
 800684c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006852:	9a07      	ldr	r2, [sp, #28]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	18d3      	adds	r3, r2, r3
 8006858:	9307      	str	r3, [sp, #28]
 800685a:	2200      	movs	r2, #0
 800685c:	2300      	movs	r3, #0
 800685e:	0020      	movs	r0, r4
 8006860:	0031      	movs	r1, r6
 8006862:	f7f9 fdf3 	bl	800044c <__aeabi_dcmpeq>
 8006866:	2800      	cmp	r0, #0
 8006868:	d001      	beq.n	800686e <__cvt+0xa6>
 800686a:	9b07      	ldr	r3, [sp, #28]
 800686c:	9309      	str	r3, [sp, #36]	; 0x24
 800686e:	2230      	movs	r2, #48	; 0x30
 8006870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006872:	9907      	ldr	r1, [sp, #28]
 8006874:	428b      	cmp	r3, r1
 8006876:	d306      	bcc.n	8006886 <__cvt+0xbe>
 8006878:	0028      	movs	r0, r5
 800687a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800687c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800687e:	1b5b      	subs	r3, r3, r5
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	b00b      	add	sp, #44	; 0x2c
 8006884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006886:	1c59      	adds	r1, r3, #1
 8006888:	9109      	str	r1, [sp, #36]	; 0x24
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	e7f0      	b.n	8006870 <__cvt+0xa8>

0800688e <__exponent>:
 800688e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006890:	1c83      	adds	r3, r0, #2
 8006892:	b087      	sub	sp, #28
 8006894:	9303      	str	r3, [sp, #12]
 8006896:	0005      	movs	r5, r0
 8006898:	000c      	movs	r4, r1
 800689a:	232b      	movs	r3, #43	; 0x2b
 800689c:	7002      	strb	r2, [r0, #0]
 800689e:	2900      	cmp	r1, #0
 80068a0:	da01      	bge.n	80068a6 <__exponent+0x18>
 80068a2:	424c      	negs	r4, r1
 80068a4:	3302      	adds	r3, #2
 80068a6:	706b      	strb	r3, [r5, #1]
 80068a8:	2c09      	cmp	r4, #9
 80068aa:	dd31      	ble.n	8006910 <__exponent+0x82>
 80068ac:	270a      	movs	r7, #10
 80068ae:	ab04      	add	r3, sp, #16
 80068b0:	1dde      	adds	r6, r3, #7
 80068b2:	0020      	movs	r0, r4
 80068b4:	0039      	movs	r1, r7
 80068b6:	9601      	str	r6, [sp, #4]
 80068b8:	f7f9 fdb2 	bl	8000420 <__aeabi_idivmod>
 80068bc:	3e01      	subs	r6, #1
 80068be:	3130      	adds	r1, #48	; 0x30
 80068c0:	0020      	movs	r0, r4
 80068c2:	7031      	strb	r1, [r6, #0]
 80068c4:	0039      	movs	r1, r7
 80068c6:	9402      	str	r4, [sp, #8]
 80068c8:	f7f9 fcc4 	bl	8000254 <__divsi3>
 80068cc:	9b02      	ldr	r3, [sp, #8]
 80068ce:	0004      	movs	r4, r0
 80068d0:	2b63      	cmp	r3, #99	; 0x63
 80068d2:	dcee      	bgt.n	80068b2 <__exponent+0x24>
 80068d4:	9b01      	ldr	r3, [sp, #4]
 80068d6:	3430      	adds	r4, #48	; 0x30
 80068d8:	1e9a      	subs	r2, r3, #2
 80068da:	0013      	movs	r3, r2
 80068dc:	9903      	ldr	r1, [sp, #12]
 80068de:	7014      	strb	r4, [r2, #0]
 80068e0:	a804      	add	r0, sp, #16
 80068e2:	3007      	adds	r0, #7
 80068e4:	4298      	cmp	r0, r3
 80068e6:	d80e      	bhi.n	8006906 <__exponent+0x78>
 80068e8:	ab04      	add	r3, sp, #16
 80068ea:	3307      	adds	r3, #7
 80068ec:	2000      	movs	r0, #0
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d804      	bhi.n	80068fc <__exponent+0x6e>
 80068f2:	ab04      	add	r3, sp, #16
 80068f4:	3009      	adds	r0, #9
 80068f6:	18c0      	adds	r0, r0, r3
 80068f8:	9b01      	ldr	r3, [sp, #4]
 80068fa:	1ac0      	subs	r0, r0, r3
 80068fc:	9b03      	ldr	r3, [sp, #12]
 80068fe:	1818      	adds	r0, r3, r0
 8006900:	1b40      	subs	r0, r0, r5
 8006902:	b007      	add	sp, #28
 8006904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006906:	7818      	ldrb	r0, [r3, #0]
 8006908:	3301      	adds	r3, #1
 800690a:	7008      	strb	r0, [r1, #0]
 800690c:	3101      	adds	r1, #1
 800690e:	e7e7      	b.n	80068e0 <__exponent+0x52>
 8006910:	2330      	movs	r3, #48	; 0x30
 8006912:	18e4      	adds	r4, r4, r3
 8006914:	70ab      	strb	r3, [r5, #2]
 8006916:	1d28      	adds	r0, r5, #4
 8006918:	70ec      	strb	r4, [r5, #3]
 800691a:	e7f1      	b.n	8006900 <__exponent+0x72>

0800691c <_printf_float>:
 800691c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800691e:	b095      	sub	sp, #84	; 0x54
 8006920:	000c      	movs	r4, r1
 8006922:	9209      	str	r2, [sp, #36]	; 0x24
 8006924:	001e      	movs	r6, r3
 8006926:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006928:	0007      	movs	r7, r0
 800692a:	f001 fa81 	bl	8007e30 <_localeconv_r>
 800692e:	6803      	ldr	r3, [r0, #0]
 8006930:	0018      	movs	r0, r3
 8006932:	930c      	str	r3, [sp, #48]	; 0x30
 8006934:	f7f9 fbe8 	bl	8000108 <strlen>
 8006938:	2300      	movs	r3, #0
 800693a:	9312      	str	r3, [sp, #72]	; 0x48
 800693c:	7e23      	ldrb	r3, [r4, #24]
 800693e:	2207      	movs	r2, #7
 8006940:	930a      	str	r3, [sp, #40]	; 0x28
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	900e      	str	r0, [sp, #56]	; 0x38
 8006946:	930d      	str	r3, [sp, #52]	; 0x34
 8006948:	990d      	ldr	r1, [sp, #52]	; 0x34
 800694a:	682b      	ldr	r3, [r5, #0]
 800694c:	05c9      	lsls	r1, r1, #23
 800694e:	d547      	bpl.n	80069e0 <_printf_float+0xc4>
 8006950:	189b      	adds	r3, r3, r2
 8006952:	4393      	bics	r3, r2
 8006954:	001a      	movs	r2, r3
 8006956:	3208      	adds	r2, #8
 8006958:	602a      	str	r2, [r5, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	64a2      	str	r2, [r4, #72]	; 0x48
 8006960:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006962:	2201      	movs	r2, #1
 8006964:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006966:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006968:	930b      	str	r3, [sp, #44]	; 0x2c
 800696a:	006b      	lsls	r3, r5, #1
 800696c:	085b      	lsrs	r3, r3, #1
 800696e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006970:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006972:	4ba7      	ldr	r3, [pc, #668]	; (8006c10 <_printf_float+0x2f4>)
 8006974:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006976:	4252      	negs	r2, r2
 8006978:	f7fb fda2 	bl	80024c0 <__aeabi_dcmpun>
 800697c:	2800      	cmp	r0, #0
 800697e:	d131      	bne.n	80069e4 <_printf_float+0xc8>
 8006980:	2201      	movs	r2, #1
 8006982:	4ba3      	ldr	r3, [pc, #652]	; (8006c10 <_printf_float+0x2f4>)
 8006984:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006986:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006988:	4252      	negs	r2, r2
 800698a:	f7f9 fd6f 	bl	800046c <__aeabi_dcmple>
 800698e:	2800      	cmp	r0, #0
 8006990:	d128      	bne.n	80069e4 <_printf_float+0xc8>
 8006992:	2200      	movs	r2, #0
 8006994:	2300      	movs	r3, #0
 8006996:	0029      	movs	r1, r5
 8006998:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800699a:	f7f9 fd5d 	bl	8000458 <__aeabi_dcmplt>
 800699e:	2800      	cmp	r0, #0
 80069a0:	d003      	beq.n	80069aa <_printf_float+0x8e>
 80069a2:	0023      	movs	r3, r4
 80069a4:	222d      	movs	r2, #45	; 0x2d
 80069a6:	3343      	adds	r3, #67	; 0x43
 80069a8:	701a      	strb	r2, [r3, #0]
 80069aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ac:	4d99      	ldr	r5, [pc, #612]	; (8006c14 <_printf_float+0x2f8>)
 80069ae:	2b47      	cmp	r3, #71	; 0x47
 80069b0:	d900      	bls.n	80069b4 <_printf_float+0x98>
 80069b2:	4d99      	ldr	r5, [pc, #612]	; (8006c18 <_printf_float+0x2fc>)
 80069b4:	2303      	movs	r3, #3
 80069b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069b8:	6123      	str	r3, [r4, #16]
 80069ba:	3301      	adds	r3, #1
 80069bc:	439a      	bics	r2, r3
 80069be:	2300      	movs	r3, #0
 80069c0:	6022      	str	r2, [r4, #0]
 80069c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80069c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c6:	0021      	movs	r1, r4
 80069c8:	0038      	movs	r0, r7
 80069ca:	9600      	str	r6, [sp, #0]
 80069cc:	aa13      	add	r2, sp, #76	; 0x4c
 80069ce:	f000 f9e7 	bl	8006da0 <_printf_common>
 80069d2:	1c43      	adds	r3, r0, #1
 80069d4:	d000      	beq.n	80069d8 <_printf_float+0xbc>
 80069d6:	e0a2      	b.n	8006b1e <_printf_float+0x202>
 80069d8:	2001      	movs	r0, #1
 80069da:	4240      	negs	r0, r0
 80069dc:	b015      	add	sp, #84	; 0x54
 80069de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069e0:	3307      	adds	r3, #7
 80069e2:	e7b6      	b.n	8006952 <_printf_float+0x36>
 80069e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069e6:	002b      	movs	r3, r5
 80069e8:	0010      	movs	r0, r2
 80069ea:	0029      	movs	r1, r5
 80069ec:	f7fb fd68 	bl	80024c0 <__aeabi_dcmpun>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d00b      	beq.n	8006a0c <_printf_float+0xf0>
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	da03      	bge.n	8006a00 <_printf_float+0xe4>
 80069f8:	0023      	movs	r3, r4
 80069fa:	222d      	movs	r2, #45	; 0x2d
 80069fc:	3343      	adds	r3, #67	; 0x43
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a02:	4d86      	ldr	r5, [pc, #536]	; (8006c1c <_printf_float+0x300>)
 8006a04:	2b47      	cmp	r3, #71	; 0x47
 8006a06:	d9d5      	bls.n	80069b4 <_printf_float+0x98>
 8006a08:	4d85      	ldr	r5, [pc, #532]	; (8006c20 <_printf_float+0x304>)
 8006a0a:	e7d3      	b.n	80069b4 <_printf_float+0x98>
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a10:	6863      	ldr	r3, [r4, #4]
 8006a12:	4391      	bics	r1, r2
 8006a14:	910f      	str	r1, [sp, #60]	; 0x3c
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	d149      	bne.n	8006aae <_printf_float+0x192>
 8006a1a:	3307      	adds	r3, #7
 8006a1c:	6063      	str	r3, [r4, #4]
 8006a1e:	2380      	movs	r3, #128	; 0x80
 8006a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	4313      	orrs	r3, r2
 8006a26:	2200      	movs	r2, #0
 8006a28:	9206      	str	r2, [sp, #24]
 8006a2a:	aa12      	add	r2, sp, #72	; 0x48
 8006a2c:	9205      	str	r2, [sp, #20]
 8006a2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a30:	a908      	add	r1, sp, #32
 8006a32:	9204      	str	r2, [sp, #16]
 8006a34:	aa11      	add	r2, sp, #68	; 0x44
 8006a36:	9203      	str	r2, [sp, #12]
 8006a38:	2223      	movs	r2, #35	; 0x23
 8006a3a:	6023      	str	r3, [r4, #0]
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	6863      	ldr	r3, [r4, #4]
 8006a40:	1852      	adds	r2, r2, r1
 8006a42:	9202      	str	r2, [sp, #8]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	0038      	movs	r0, r7
 8006a48:	002b      	movs	r3, r5
 8006a4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a4c:	f7ff febc 	bl	80067c8 <__cvt>
 8006a50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a52:	0005      	movs	r5, r0
 8006a54:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006a56:	2b47      	cmp	r3, #71	; 0x47
 8006a58:	d108      	bne.n	8006a6c <_printf_float+0x150>
 8006a5a:	1ccb      	adds	r3, r1, #3
 8006a5c:	db02      	blt.n	8006a64 <_printf_float+0x148>
 8006a5e:	6863      	ldr	r3, [r4, #4]
 8006a60:	4299      	cmp	r1, r3
 8006a62:	dd48      	ble.n	8006af6 <_printf_float+0x1da>
 8006a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a66:	3b02      	subs	r3, #2
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6e:	2b65      	cmp	r3, #101	; 0x65
 8006a70:	d824      	bhi.n	8006abc <_printf_float+0x1a0>
 8006a72:	0020      	movs	r0, r4
 8006a74:	001a      	movs	r2, r3
 8006a76:	3901      	subs	r1, #1
 8006a78:	3050      	adds	r0, #80	; 0x50
 8006a7a:	9111      	str	r1, [sp, #68]	; 0x44
 8006a7c:	f7ff ff07 	bl	800688e <__exponent>
 8006a80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a82:	900b      	str	r0, [sp, #44]	; 0x2c
 8006a84:	1813      	adds	r3, r2, r0
 8006a86:	6123      	str	r3, [r4, #16]
 8006a88:	2a01      	cmp	r2, #1
 8006a8a:	dc02      	bgt.n	8006a92 <_printf_float+0x176>
 8006a8c:	6822      	ldr	r2, [r4, #0]
 8006a8e:	07d2      	lsls	r2, r2, #31
 8006a90:	d501      	bpl.n	8006a96 <_printf_float+0x17a>
 8006a92:	3301      	adds	r3, #1
 8006a94:	6123      	str	r3, [r4, #16]
 8006a96:	2323      	movs	r3, #35	; 0x23
 8006a98:	aa08      	add	r2, sp, #32
 8006a9a:	189b      	adds	r3, r3, r2
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d100      	bne.n	8006aa4 <_printf_float+0x188>
 8006aa2:	e78f      	b.n	80069c4 <_printf_float+0xa8>
 8006aa4:	0023      	movs	r3, r4
 8006aa6:	222d      	movs	r2, #45	; 0x2d
 8006aa8:	3343      	adds	r3, #67	; 0x43
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	e78a      	b.n	80069c4 <_printf_float+0xa8>
 8006aae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ab0:	2a47      	cmp	r2, #71	; 0x47
 8006ab2:	d1b4      	bne.n	8006a1e <_printf_float+0x102>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1b2      	bne.n	8006a1e <_printf_float+0x102>
 8006ab8:	3301      	adds	r3, #1
 8006aba:	e7af      	b.n	8006a1c <_printf_float+0x100>
 8006abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006abe:	2b66      	cmp	r3, #102	; 0x66
 8006ac0:	d11b      	bne.n	8006afa <_printf_float+0x1de>
 8006ac2:	6863      	ldr	r3, [r4, #4]
 8006ac4:	2900      	cmp	r1, #0
 8006ac6:	dd0d      	ble.n	8006ae4 <_printf_float+0x1c8>
 8006ac8:	6121      	str	r1, [r4, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d102      	bne.n	8006ad4 <_printf_float+0x1b8>
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	07d2      	lsls	r2, r2, #31
 8006ad2:	d502      	bpl.n	8006ada <_printf_float+0x1be>
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	1859      	adds	r1, r3, r1
 8006ad8:	6121      	str	r1, [r4, #16]
 8006ada:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006adc:	65a3      	str	r3, [r4, #88]	; 0x58
 8006ade:	2300      	movs	r3, #0
 8006ae0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ae2:	e7d8      	b.n	8006a96 <_printf_float+0x17a>
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d103      	bne.n	8006af0 <_printf_float+0x1d4>
 8006ae8:	2201      	movs	r2, #1
 8006aea:	6821      	ldr	r1, [r4, #0]
 8006aec:	4211      	tst	r1, r2
 8006aee:	d000      	beq.n	8006af2 <_printf_float+0x1d6>
 8006af0:	1c9a      	adds	r2, r3, #2
 8006af2:	6122      	str	r2, [r4, #16]
 8006af4:	e7f1      	b.n	8006ada <_printf_float+0x1be>
 8006af6:	2367      	movs	r3, #103	; 0x67
 8006af8:	930a      	str	r3, [sp, #40]	; 0x28
 8006afa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006afe:	4293      	cmp	r3, r2
 8006b00:	db06      	blt.n	8006b10 <_printf_float+0x1f4>
 8006b02:	6822      	ldr	r2, [r4, #0]
 8006b04:	6123      	str	r3, [r4, #16]
 8006b06:	07d2      	lsls	r2, r2, #31
 8006b08:	d5e7      	bpl.n	8006ada <_printf_float+0x1be>
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	6123      	str	r3, [r4, #16]
 8006b0e:	e7e4      	b.n	8006ada <_printf_float+0x1be>
 8006b10:	2101      	movs	r1, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	dc01      	bgt.n	8006b1a <_printf_float+0x1fe>
 8006b16:	1849      	adds	r1, r1, r1
 8006b18:	1ac9      	subs	r1, r1, r3
 8006b1a:	1852      	adds	r2, r2, r1
 8006b1c:	e7e9      	b.n	8006af2 <_printf_float+0x1d6>
 8006b1e:	6822      	ldr	r2, [r4, #0]
 8006b20:	0553      	lsls	r3, r2, #21
 8006b22:	d407      	bmi.n	8006b34 <_printf_float+0x218>
 8006b24:	6923      	ldr	r3, [r4, #16]
 8006b26:	002a      	movs	r2, r5
 8006b28:	0038      	movs	r0, r7
 8006b2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b2c:	47b0      	blx	r6
 8006b2e:	1c43      	adds	r3, r0, #1
 8006b30:	d128      	bne.n	8006b84 <_printf_float+0x268>
 8006b32:	e751      	b.n	80069d8 <_printf_float+0xbc>
 8006b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b36:	2b65      	cmp	r3, #101	; 0x65
 8006b38:	d800      	bhi.n	8006b3c <_printf_float+0x220>
 8006b3a:	e0e1      	b.n	8006d00 <_printf_float+0x3e4>
 8006b3c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006b3e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006b40:	2200      	movs	r2, #0
 8006b42:	2300      	movs	r3, #0
 8006b44:	f7f9 fc82 	bl	800044c <__aeabi_dcmpeq>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d031      	beq.n	8006bb0 <_printf_float+0x294>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	0038      	movs	r0, r7
 8006b50:	4a34      	ldr	r2, [pc, #208]	; (8006c24 <_printf_float+0x308>)
 8006b52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b54:	47b0      	blx	r6
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	d100      	bne.n	8006b5c <_printf_float+0x240>
 8006b5a:	e73d      	b.n	80069d8 <_printf_float+0xbc>
 8006b5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b60:	4293      	cmp	r3, r2
 8006b62:	db02      	blt.n	8006b6a <_printf_float+0x24e>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	07db      	lsls	r3, r3, #31
 8006b68:	d50c      	bpl.n	8006b84 <_printf_float+0x268>
 8006b6a:	0038      	movs	r0, r7
 8006b6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b72:	47b0      	blx	r6
 8006b74:	2500      	movs	r5, #0
 8006b76:	1c43      	adds	r3, r0, #1
 8006b78:	d100      	bne.n	8006b7c <_printf_float+0x260>
 8006b7a:	e72d      	b.n	80069d8 <_printf_float+0xbc>
 8006b7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	42ab      	cmp	r3, r5
 8006b82:	dc0a      	bgt.n	8006b9a <_printf_float+0x27e>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	079b      	lsls	r3, r3, #30
 8006b88:	d500      	bpl.n	8006b8c <_printf_float+0x270>
 8006b8a:	e106      	b.n	8006d9a <_printf_float+0x47e>
 8006b8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b8e:	68e0      	ldr	r0, [r4, #12]
 8006b90:	4298      	cmp	r0, r3
 8006b92:	db00      	blt.n	8006b96 <_printf_float+0x27a>
 8006b94:	e722      	b.n	80069dc <_printf_float+0xc0>
 8006b96:	0018      	movs	r0, r3
 8006b98:	e720      	b.n	80069dc <_printf_float+0xc0>
 8006b9a:	0022      	movs	r2, r4
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	0038      	movs	r0, r7
 8006ba0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ba2:	321a      	adds	r2, #26
 8006ba4:	47b0      	blx	r6
 8006ba6:	1c43      	adds	r3, r0, #1
 8006ba8:	d100      	bne.n	8006bac <_printf_float+0x290>
 8006baa:	e715      	b.n	80069d8 <_printf_float+0xbc>
 8006bac:	3501      	adds	r5, #1
 8006bae:	e7e5      	b.n	8006b7c <_printf_float+0x260>
 8006bb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	dc38      	bgt.n	8006c28 <_printf_float+0x30c>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	0038      	movs	r0, r7
 8006bba:	4a1a      	ldr	r2, [pc, #104]	; (8006c24 <_printf_float+0x308>)
 8006bbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bbe:	47b0      	blx	r6
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	d100      	bne.n	8006bc6 <_printf_float+0x2aa>
 8006bc4:	e708      	b.n	80069d8 <_printf_float+0xbc>
 8006bc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	d102      	bne.n	8006bd4 <_printf_float+0x2b8>
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	07db      	lsls	r3, r3, #31
 8006bd2:	d5d7      	bpl.n	8006b84 <_printf_float+0x268>
 8006bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bd6:	0038      	movs	r0, r7
 8006bd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bdc:	47b0      	blx	r6
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	d100      	bne.n	8006be4 <_printf_float+0x2c8>
 8006be2:	e6f9      	b.n	80069d8 <_printf_float+0xbc>
 8006be4:	2300      	movs	r3, #0
 8006be6:	930a      	str	r3, [sp, #40]	; 0x28
 8006be8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bec:	425b      	negs	r3, r3
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	dc01      	bgt.n	8006bf6 <_printf_float+0x2da>
 8006bf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bf4:	e797      	b.n	8006b26 <_printf_float+0x20a>
 8006bf6:	0022      	movs	r2, r4
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	0038      	movs	r0, r7
 8006bfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bfe:	321a      	adds	r2, #26
 8006c00:	47b0      	blx	r6
 8006c02:	1c43      	adds	r3, r0, #1
 8006c04:	d100      	bne.n	8006c08 <_printf_float+0x2ec>
 8006c06:	e6e7      	b.n	80069d8 <_printf_float+0xbc>
 8006c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	e7eb      	b.n	8006be6 <_printf_float+0x2ca>
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	7fefffff 	.word	0x7fefffff
 8006c14:	080097f0 	.word	0x080097f0
 8006c18:	080097f4 	.word	0x080097f4
 8006c1c:	080097f8 	.word	0x080097f8
 8006c20:	080097fc 	.word	0x080097fc
 8006c24:	08009800 	.word	0x08009800
 8006c28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c2c:	920a      	str	r2, [sp, #40]	; 0x28
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	dd00      	ble.n	8006c34 <_printf_float+0x318>
 8006c32:	930a      	str	r3, [sp, #40]	; 0x28
 8006c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	dc3c      	bgt.n	8006cb4 <_printf_float+0x398>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	930d      	str	r3, [sp, #52]	; 0x34
 8006c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c40:	43db      	mvns	r3, r3
 8006c42:	17db      	asrs	r3, r3, #31
 8006c44:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c4e:	4013      	ands	r3, r2
 8006c50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c56:	4293      	cmp	r3, r2
 8006c58:	dc34      	bgt.n	8006cc4 <_printf_float+0x3a8>
 8006c5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	db3d      	blt.n	8006cde <_printf_float+0x3c2>
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	07db      	lsls	r3, r3, #31
 8006c66:	d43a      	bmi.n	8006cde <_printf_float+0x3c2>
 8006c68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c6c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	1a52      	subs	r2, r2, r1
 8006c72:	920a      	str	r2, [sp, #40]	; 0x28
 8006c74:	429a      	cmp	r2, r3
 8006c76:	dd00      	ble.n	8006c7a <_printf_float+0x35e>
 8006c78:	930a      	str	r3, [sp, #40]	; 0x28
 8006c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dc36      	bgt.n	8006cee <_printf_float+0x3d2>
 8006c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c82:	2500      	movs	r5, #0
 8006c84:	43db      	mvns	r3, r3
 8006c86:	17db      	asrs	r3, r3, #31
 8006c88:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c90:	1a9b      	subs	r3, r3, r2
 8006c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c94:	400a      	ands	r2, r1
 8006c96:	1a9b      	subs	r3, r3, r2
 8006c98:	42ab      	cmp	r3, r5
 8006c9a:	dc00      	bgt.n	8006c9e <_printf_float+0x382>
 8006c9c:	e772      	b.n	8006b84 <_printf_float+0x268>
 8006c9e:	0022      	movs	r2, r4
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	0038      	movs	r0, r7
 8006ca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ca6:	321a      	adds	r2, #26
 8006ca8:	47b0      	blx	r6
 8006caa:	1c43      	adds	r3, r0, #1
 8006cac:	d100      	bne.n	8006cb0 <_printf_float+0x394>
 8006cae:	e693      	b.n	80069d8 <_printf_float+0xbc>
 8006cb0:	3501      	adds	r5, #1
 8006cb2:	e7ea      	b.n	8006c8a <_printf_float+0x36e>
 8006cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb6:	002a      	movs	r2, r5
 8006cb8:	0038      	movs	r0, r7
 8006cba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cbc:	47b0      	blx	r6
 8006cbe:	1c43      	adds	r3, r0, #1
 8006cc0:	d1bb      	bne.n	8006c3a <_printf_float+0x31e>
 8006cc2:	e689      	b.n	80069d8 <_printf_float+0xbc>
 8006cc4:	0022      	movs	r2, r4
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	0038      	movs	r0, r7
 8006cca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ccc:	321a      	adds	r2, #26
 8006cce:	47b0      	blx	r6
 8006cd0:	1c43      	adds	r3, r0, #1
 8006cd2:	d100      	bne.n	8006cd6 <_printf_float+0x3ba>
 8006cd4:	e680      	b.n	80069d8 <_printf_float+0xbc>
 8006cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cd8:	3301      	adds	r3, #1
 8006cda:	930d      	str	r3, [sp, #52]	; 0x34
 8006cdc:	e7b3      	b.n	8006c46 <_printf_float+0x32a>
 8006cde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ce0:	0038      	movs	r0, r7
 8006ce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ce6:	47b0      	blx	r6
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d1bd      	bne.n	8006c68 <_printf_float+0x34c>
 8006cec:	e674      	b.n	80069d8 <_printf_float+0xbc>
 8006cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cf0:	0038      	movs	r0, r7
 8006cf2:	18ea      	adds	r2, r5, r3
 8006cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf8:	47b0      	blx	r6
 8006cfa:	1c43      	adds	r3, r0, #1
 8006cfc:	d1c0      	bne.n	8006c80 <_printf_float+0x364>
 8006cfe:	e66b      	b.n	80069d8 <_printf_float+0xbc>
 8006d00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	dc02      	bgt.n	8006d0c <_printf_float+0x3f0>
 8006d06:	2301      	movs	r3, #1
 8006d08:	421a      	tst	r2, r3
 8006d0a:	d034      	beq.n	8006d76 <_printf_float+0x45a>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	002a      	movs	r2, r5
 8006d10:	0038      	movs	r0, r7
 8006d12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d14:	47b0      	blx	r6
 8006d16:	1c43      	adds	r3, r0, #1
 8006d18:	d100      	bne.n	8006d1c <_printf_float+0x400>
 8006d1a:	e65d      	b.n	80069d8 <_printf_float+0xbc>
 8006d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d1e:	0038      	movs	r0, r7
 8006d20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d24:	47b0      	blx	r6
 8006d26:	1c43      	adds	r3, r0, #1
 8006d28:	d100      	bne.n	8006d2c <_printf_float+0x410>
 8006d2a:	e655      	b.n	80069d8 <_printf_float+0xbc>
 8006d2c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006d2e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006d30:	2200      	movs	r2, #0
 8006d32:	2300      	movs	r3, #0
 8006d34:	f7f9 fb8a 	bl	800044c <__aeabi_dcmpeq>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d11a      	bne.n	8006d72 <_printf_float+0x456>
 8006d3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d3e:	1c6a      	adds	r2, r5, #1
 8006d40:	3b01      	subs	r3, #1
 8006d42:	0038      	movs	r0, r7
 8006d44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d46:	47b0      	blx	r6
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d10e      	bne.n	8006d6a <_printf_float+0x44e>
 8006d4c:	e644      	b.n	80069d8 <_printf_float+0xbc>
 8006d4e:	0022      	movs	r2, r4
 8006d50:	2301      	movs	r3, #1
 8006d52:	0038      	movs	r0, r7
 8006d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d56:	321a      	adds	r2, #26
 8006d58:	47b0      	blx	r6
 8006d5a:	1c43      	adds	r3, r0, #1
 8006d5c:	d100      	bne.n	8006d60 <_printf_float+0x444>
 8006d5e:	e63b      	b.n	80069d8 <_printf_float+0xbc>
 8006d60:	3501      	adds	r5, #1
 8006d62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d64:	3b01      	subs	r3, #1
 8006d66:	42ab      	cmp	r3, r5
 8006d68:	dcf1      	bgt.n	8006d4e <_printf_float+0x432>
 8006d6a:	0022      	movs	r2, r4
 8006d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d6e:	3250      	adds	r2, #80	; 0x50
 8006d70:	e6da      	b.n	8006b28 <_printf_float+0x20c>
 8006d72:	2500      	movs	r5, #0
 8006d74:	e7f5      	b.n	8006d62 <_printf_float+0x446>
 8006d76:	002a      	movs	r2, r5
 8006d78:	e7e3      	b.n	8006d42 <_printf_float+0x426>
 8006d7a:	0022      	movs	r2, r4
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	0038      	movs	r0, r7
 8006d80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d82:	3219      	adds	r2, #25
 8006d84:	47b0      	blx	r6
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	d100      	bne.n	8006d8c <_printf_float+0x470>
 8006d8a:	e625      	b.n	80069d8 <_printf_float+0xbc>
 8006d8c:	3501      	adds	r5, #1
 8006d8e:	68e3      	ldr	r3, [r4, #12]
 8006d90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d92:	1a9b      	subs	r3, r3, r2
 8006d94:	42ab      	cmp	r3, r5
 8006d96:	dcf0      	bgt.n	8006d7a <_printf_float+0x45e>
 8006d98:	e6f8      	b.n	8006b8c <_printf_float+0x270>
 8006d9a:	2500      	movs	r5, #0
 8006d9c:	e7f7      	b.n	8006d8e <_printf_float+0x472>
 8006d9e:	46c0      	nop			; (mov r8, r8)

08006da0 <_printf_common>:
 8006da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006da2:	0015      	movs	r5, r2
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	688a      	ldr	r2, [r1, #8]
 8006da8:	690b      	ldr	r3, [r1, #16]
 8006daa:	000c      	movs	r4, r1
 8006dac:	9000      	str	r0, [sp, #0]
 8006dae:	4293      	cmp	r3, r2
 8006db0:	da00      	bge.n	8006db4 <_printf_common+0x14>
 8006db2:	0013      	movs	r3, r2
 8006db4:	0022      	movs	r2, r4
 8006db6:	602b      	str	r3, [r5, #0]
 8006db8:	3243      	adds	r2, #67	; 0x43
 8006dba:	7812      	ldrb	r2, [r2, #0]
 8006dbc:	2a00      	cmp	r2, #0
 8006dbe:	d001      	beq.n	8006dc4 <_printf_common+0x24>
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	602b      	str	r3, [r5, #0]
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	069b      	lsls	r3, r3, #26
 8006dc8:	d502      	bpl.n	8006dd0 <_printf_common+0x30>
 8006dca:	682b      	ldr	r3, [r5, #0]
 8006dcc:	3302      	adds	r3, #2
 8006dce:	602b      	str	r3, [r5, #0]
 8006dd0:	6822      	ldr	r2, [r4, #0]
 8006dd2:	2306      	movs	r3, #6
 8006dd4:	0017      	movs	r7, r2
 8006dd6:	401f      	ands	r7, r3
 8006dd8:	421a      	tst	r2, r3
 8006dda:	d027      	beq.n	8006e2c <_printf_common+0x8c>
 8006ddc:	0023      	movs	r3, r4
 8006dde:	3343      	adds	r3, #67	; 0x43
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	1e5a      	subs	r2, r3, #1
 8006de4:	4193      	sbcs	r3, r2
 8006de6:	6822      	ldr	r2, [r4, #0]
 8006de8:	0692      	lsls	r2, r2, #26
 8006dea:	d430      	bmi.n	8006e4e <_printf_common+0xae>
 8006dec:	0022      	movs	r2, r4
 8006dee:	9901      	ldr	r1, [sp, #4]
 8006df0:	9800      	ldr	r0, [sp, #0]
 8006df2:	9e08      	ldr	r6, [sp, #32]
 8006df4:	3243      	adds	r2, #67	; 0x43
 8006df6:	47b0      	blx	r6
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d025      	beq.n	8006e48 <_printf_common+0xa8>
 8006dfc:	2306      	movs	r3, #6
 8006dfe:	6820      	ldr	r0, [r4, #0]
 8006e00:	682a      	ldr	r2, [r5, #0]
 8006e02:	68e1      	ldr	r1, [r4, #12]
 8006e04:	2500      	movs	r5, #0
 8006e06:	4003      	ands	r3, r0
 8006e08:	2b04      	cmp	r3, #4
 8006e0a:	d103      	bne.n	8006e14 <_printf_common+0x74>
 8006e0c:	1a8d      	subs	r5, r1, r2
 8006e0e:	43eb      	mvns	r3, r5
 8006e10:	17db      	asrs	r3, r3, #31
 8006e12:	401d      	ands	r5, r3
 8006e14:	68a3      	ldr	r3, [r4, #8]
 8006e16:	6922      	ldr	r2, [r4, #16]
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	dd01      	ble.n	8006e20 <_printf_common+0x80>
 8006e1c:	1a9b      	subs	r3, r3, r2
 8006e1e:	18ed      	adds	r5, r5, r3
 8006e20:	2700      	movs	r7, #0
 8006e22:	42bd      	cmp	r5, r7
 8006e24:	d120      	bne.n	8006e68 <_printf_common+0xc8>
 8006e26:	2000      	movs	r0, #0
 8006e28:	e010      	b.n	8006e4c <_printf_common+0xac>
 8006e2a:	3701      	adds	r7, #1
 8006e2c:	68e3      	ldr	r3, [r4, #12]
 8006e2e:	682a      	ldr	r2, [r5, #0]
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	42bb      	cmp	r3, r7
 8006e34:	ddd2      	ble.n	8006ddc <_printf_common+0x3c>
 8006e36:	0022      	movs	r2, r4
 8006e38:	2301      	movs	r3, #1
 8006e3a:	9901      	ldr	r1, [sp, #4]
 8006e3c:	9800      	ldr	r0, [sp, #0]
 8006e3e:	9e08      	ldr	r6, [sp, #32]
 8006e40:	3219      	adds	r2, #25
 8006e42:	47b0      	blx	r6
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d1f0      	bne.n	8006e2a <_printf_common+0x8a>
 8006e48:	2001      	movs	r0, #1
 8006e4a:	4240      	negs	r0, r0
 8006e4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e4e:	2030      	movs	r0, #48	; 0x30
 8006e50:	18e1      	adds	r1, r4, r3
 8006e52:	3143      	adds	r1, #67	; 0x43
 8006e54:	7008      	strb	r0, [r1, #0]
 8006e56:	0021      	movs	r1, r4
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	3145      	adds	r1, #69	; 0x45
 8006e5c:	7809      	ldrb	r1, [r1, #0]
 8006e5e:	18a2      	adds	r2, r4, r2
 8006e60:	3243      	adds	r2, #67	; 0x43
 8006e62:	3302      	adds	r3, #2
 8006e64:	7011      	strb	r1, [r2, #0]
 8006e66:	e7c1      	b.n	8006dec <_printf_common+0x4c>
 8006e68:	0022      	movs	r2, r4
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	9901      	ldr	r1, [sp, #4]
 8006e6e:	9800      	ldr	r0, [sp, #0]
 8006e70:	9e08      	ldr	r6, [sp, #32]
 8006e72:	321a      	adds	r2, #26
 8006e74:	47b0      	blx	r6
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	d0e6      	beq.n	8006e48 <_printf_common+0xa8>
 8006e7a:	3701      	adds	r7, #1
 8006e7c:	e7d1      	b.n	8006e22 <_printf_common+0x82>
	...

08006e80 <_printf_i>:
 8006e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e82:	b08b      	sub	sp, #44	; 0x2c
 8006e84:	9206      	str	r2, [sp, #24]
 8006e86:	000a      	movs	r2, r1
 8006e88:	3243      	adds	r2, #67	; 0x43
 8006e8a:	9307      	str	r3, [sp, #28]
 8006e8c:	9005      	str	r0, [sp, #20]
 8006e8e:	9204      	str	r2, [sp, #16]
 8006e90:	7e0a      	ldrb	r2, [r1, #24]
 8006e92:	000c      	movs	r4, r1
 8006e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e96:	2a78      	cmp	r2, #120	; 0x78
 8006e98:	d807      	bhi.n	8006eaa <_printf_i+0x2a>
 8006e9a:	2a62      	cmp	r2, #98	; 0x62
 8006e9c:	d809      	bhi.n	8006eb2 <_printf_i+0x32>
 8006e9e:	2a00      	cmp	r2, #0
 8006ea0:	d100      	bne.n	8006ea4 <_printf_i+0x24>
 8006ea2:	e0c1      	b.n	8007028 <_printf_i+0x1a8>
 8006ea4:	2a58      	cmp	r2, #88	; 0x58
 8006ea6:	d100      	bne.n	8006eaa <_printf_i+0x2a>
 8006ea8:	e08c      	b.n	8006fc4 <_printf_i+0x144>
 8006eaa:	0026      	movs	r6, r4
 8006eac:	3642      	adds	r6, #66	; 0x42
 8006eae:	7032      	strb	r2, [r6, #0]
 8006eb0:	e022      	b.n	8006ef8 <_printf_i+0x78>
 8006eb2:	0010      	movs	r0, r2
 8006eb4:	3863      	subs	r0, #99	; 0x63
 8006eb6:	2815      	cmp	r0, #21
 8006eb8:	d8f7      	bhi.n	8006eaa <_printf_i+0x2a>
 8006eba:	f7f9 f937 	bl	800012c <__gnu_thumb1_case_shi>
 8006ebe:	0016      	.short	0x0016
 8006ec0:	fff6001f 	.word	0xfff6001f
 8006ec4:	fff6fff6 	.word	0xfff6fff6
 8006ec8:	001ffff6 	.word	0x001ffff6
 8006ecc:	fff6fff6 	.word	0xfff6fff6
 8006ed0:	fff6fff6 	.word	0xfff6fff6
 8006ed4:	003600a8 	.word	0x003600a8
 8006ed8:	fff6009a 	.word	0xfff6009a
 8006edc:	00b9fff6 	.word	0x00b9fff6
 8006ee0:	0036fff6 	.word	0x0036fff6
 8006ee4:	fff6fff6 	.word	0xfff6fff6
 8006ee8:	009e      	.short	0x009e
 8006eea:	0026      	movs	r6, r4
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	3642      	adds	r6, #66	; 0x42
 8006ef0:	1d11      	adds	r1, r2, #4
 8006ef2:	6019      	str	r1, [r3, #0]
 8006ef4:	6813      	ldr	r3, [r2, #0]
 8006ef6:	7033      	strb	r3, [r6, #0]
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e0a7      	b.n	800704c <_printf_i+0x1cc>
 8006efc:	6808      	ldr	r0, [r1, #0]
 8006efe:	6819      	ldr	r1, [r3, #0]
 8006f00:	1d0a      	adds	r2, r1, #4
 8006f02:	0605      	lsls	r5, r0, #24
 8006f04:	d50b      	bpl.n	8006f1e <_printf_i+0x9e>
 8006f06:	680d      	ldr	r5, [r1, #0]
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	2d00      	cmp	r5, #0
 8006f0c:	da03      	bge.n	8006f16 <_printf_i+0x96>
 8006f0e:	232d      	movs	r3, #45	; 0x2d
 8006f10:	9a04      	ldr	r2, [sp, #16]
 8006f12:	426d      	negs	r5, r5
 8006f14:	7013      	strb	r3, [r2, #0]
 8006f16:	4b61      	ldr	r3, [pc, #388]	; (800709c <_printf_i+0x21c>)
 8006f18:	270a      	movs	r7, #10
 8006f1a:	9303      	str	r3, [sp, #12]
 8006f1c:	e01b      	b.n	8006f56 <_printf_i+0xd6>
 8006f1e:	680d      	ldr	r5, [r1, #0]
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	0641      	lsls	r1, r0, #25
 8006f24:	d5f1      	bpl.n	8006f0a <_printf_i+0x8a>
 8006f26:	b22d      	sxth	r5, r5
 8006f28:	e7ef      	b.n	8006f0a <_printf_i+0x8a>
 8006f2a:	680d      	ldr	r5, [r1, #0]
 8006f2c:	6819      	ldr	r1, [r3, #0]
 8006f2e:	1d08      	adds	r0, r1, #4
 8006f30:	6018      	str	r0, [r3, #0]
 8006f32:	062e      	lsls	r6, r5, #24
 8006f34:	d501      	bpl.n	8006f3a <_printf_i+0xba>
 8006f36:	680d      	ldr	r5, [r1, #0]
 8006f38:	e003      	b.n	8006f42 <_printf_i+0xc2>
 8006f3a:	066d      	lsls	r5, r5, #25
 8006f3c:	d5fb      	bpl.n	8006f36 <_printf_i+0xb6>
 8006f3e:	680d      	ldr	r5, [r1, #0]
 8006f40:	b2ad      	uxth	r5, r5
 8006f42:	4b56      	ldr	r3, [pc, #344]	; (800709c <_printf_i+0x21c>)
 8006f44:	2708      	movs	r7, #8
 8006f46:	9303      	str	r3, [sp, #12]
 8006f48:	2a6f      	cmp	r2, #111	; 0x6f
 8006f4a:	d000      	beq.n	8006f4e <_printf_i+0xce>
 8006f4c:	3702      	adds	r7, #2
 8006f4e:	0023      	movs	r3, r4
 8006f50:	2200      	movs	r2, #0
 8006f52:	3343      	adds	r3, #67	; 0x43
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	6863      	ldr	r3, [r4, #4]
 8006f58:	60a3      	str	r3, [r4, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	db03      	blt.n	8006f66 <_printf_i+0xe6>
 8006f5e:	2204      	movs	r2, #4
 8006f60:	6821      	ldr	r1, [r4, #0]
 8006f62:	4391      	bics	r1, r2
 8006f64:	6021      	str	r1, [r4, #0]
 8006f66:	2d00      	cmp	r5, #0
 8006f68:	d102      	bne.n	8006f70 <_printf_i+0xf0>
 8006f6a:	9e04      	ldr	r6, [sp, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00c      	beq.n	8006f8a <_printf_i+0x10a>
 8006f70:	9e04      	ldr	r6, [sp, #16]
 8006f72:	0028      	movs	r0, r5
 8006f74:	0039      	movs	r1, r7
 8006f76:	f7f9 f969 	bl	800024c <__aeabi_uidivmod>
 8006f7a:	9b03      	ldr	r3, [sp, #12]
 8006f7c:	3e01      	subs	r6, #1
 8006f7e:	5c5b      	ldrb	r3, [r3, r1]
 8006f80:	7033      	strb	r3, [r6, #0]
 8006f82:	002b      	movs	r3, r5
 8006f84:	0005      	movs	r5, r0
 8006f86:	429f      	cmp	r7, r3
 8006f88:	d9f3      	bls.n	8006f72 <_printf_i+0xf2>
 8006f8a:	2f08      	cmp	r7, #8
 8006f8c:	d109      	bne.n	8006fa2 <_printf_i+0x122>
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	07db      	lsls	r3, r3, #31
 8006f92:	d506      	bpl.n	8006fa2 <_printf_i+0x122>
 8006f94:	6863      	ldr	r3, [r4, #4]
 8006f96:	6922      	ldr	r2, [r4, #16]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	dc02      	bgt.n	8006fa2 <_printf_i+0x122>
 8006f9c:	2330      	movs	r3, #48	; 0x30
 8006f9e:	3e01      	subs	r6, #1
 8006fa0:	7033      	strb	r3, [r6, #0]
 8006fa2:	9b04      	ldr	r3, [sp, #16]
 8006fa4:	1b9b      	subs	r3, r3, r6
 8006fa6:	6123      	str	r3, [r4, #16]
 8006fa8:	9b07      	ldr	r3, [sp, #28]
 8006faa:	0021      	movs	r1, r4
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	9805      	ldr	r0, [sp, #20]
 8006fb0:	9b06      	ldr	r3, [sp, #24]
 8006fb2:	aa09      	add	r2, sp, #36	; 0x24
 8006fb4:	f7ff fef4 	bl	8006da0 <_printf_common>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d14c      	bne.n	8007056 <_printf_i+0x1d6>
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	4240      	negs	r0, r0
 8006fc0:	b00b      	add	sp, #44	; 0x2c
 8006fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc4:	3145      	adds	r1, #69	; 0x45
 8006fc6:	700a      	strb	r2, [r1, #0]
 8006fc8:	4a34      	ldr	r2, [pc, #208]	; (800709c <_printf_i+0x21c>)
 8006fca:	9203      	str	r2, [sp, #12]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	6821      	ldr	r1, [r4, #0]
 8006fd0:	ca20      	ldmia	r2!, {r5}
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	0608      	lsls	r0, r1, #24
 8006fd6:	d516      	bpl.n	8007006 <_printf_i+0x186>
 8006fd8:	07cb      	lsls	r3, r1, #31
 8006fda:	d502      	bpl.n	8006fe2 <_printf_i+0x162>
 8006fdc:	2320      	movs	r3, #32
 8006fde:	4319      	orrs	r1, r3
 8006fe0:	6021      	str	r1, [r4, #0]
 8006fe2:	2710      	movs	r7, #16
 8006fe4:	2d00      	cmp	r5, #0
 8006fe6:	d1b2      	bne.n	8006f4e <_printf_i+0xce>
 8006fe8:	2320      	movs	r3, #32
 8006fea:	6822      	ldr	r2, [r4, #0]
 8006fec:	439a      	bics	r2, r3
 8006fee:	6022      	str	r2, [r4, #0]
 8006ff0:	e7ad      	b.n	8006f4e <_printf_i+0xce>
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	6809      	ldr	r1, [r1, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	6022      	str	r2, [r4, #0]
 8006ffa:	0022      	movs	r2, r4
 8006ffc:	2178      	movs	r1, #120	; 0x78
 8006ffe:	3245      	adds	r2, #69	; 0x45
 8007000:	7011      	strb	r1, [r2, #0]
 8007002:	4a27      	ldr	r2, [pc, #156]	; (80070a0 <_printf_i+0x220>)
 8007004:	e7e1      	b.n	8006fca <_printf_i+0x14a>
 8007006:	0648      	lsls	r0, r1, #25
 8007008:	d5e6      	bpl.n	8006fd8 <_printf_i+0x158>
 800700a:	b2ad      	uxth	r5, r5
 800700c:	e7e4      	b.n	8006fd8 <_printf_i+0x158>
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	680d      	ldr	r5, [r1, #0]
 8007012:	1d10      	adds	r0, r2, #4
 8007014:	6949      	ldr	r1, [r1, #20]
 8007016:	6018      	str	r0, [r3, #0]
 8007018:	6813      	ldr	r3, [r2, #0]
 800701a:	062e      	lsls	r6, r5, #24
 800701c:	d501      	bpl.n	8007022 <_printf_i+0x1a2>
 800701e:	6019      	str	r1, [r3, #0]
 8007020:	e002      	b.n	8007028 <_printf_i+0x1a8>
 8007022:	066d      	lsls	r5, r5, #25
 8007024:	d5fb      	bpl.n	800701e <_printf_i+0x19e>
 8007026:	8019      	strh	r1, [r3, #0]
 8007028:	2300      	movs	r3, #0
 800702a:	9e04      	ldr	r6, [sp, #16]
 800702c:	6123      	str	r3, [r4, #16]
 800702e:	e7bb      	b.n	8006fa8 <_printf_i+0x128>
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	1d11      	adds	r1, r2, #4
 8007034:	6019      	str	r1, [r3, #0]
 8007036:	6816      	ldr	r6, [r2, #0]
 8007038:	2100      	movs	r1, #0
 800703a:	0030      	movs	r0, r6
 800703c:	6862      	ldr	r2, [r4, #4]
 800703e:	f000 ff05 	bl	8007e4c <memchr>
 8007042:	2800      	cmp	r0, #0
 8007044:	d001      	beq.n	800704a <_printf_i+0x1ca>
 8007046:	1b80      	subs	r0, r0, r6
 8007048:	6060      	str	r0, [r4, #4]
 800704a:	6863      	ldr	r3, [r4, #4]
 800704c:	6123      	str	r3, [r4, #16]
 800704e:	2300      	movs	r3, #0
 8007050:	9a04      	ldr	r2, [sp, #16]
 8007052:	7013      	strb	r3, [r2, #0]
 8007054:	e7a8      	b.n	8006fa8 <_printf_i+0x128>
 8007056:	6923      	ldr	r3, [r4, #16]
 8007058:	0032      	movs	r2, r6
 800705a:	9906      	ldr	r1, [sp, #24]
 800705c:	9805      	ldr	r0, [sp, #20]
 800705e:	9d07      	ldr	r5, [sp, #28]
 8007060:	47a8      	blx	r5
 8007062:	1c43      	adds	r3, r0, #1
 8007064:	d0aa      	beq.n	8006fbc <_printf_i+0x13c>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	079b      	lsls	r3, r3, #30
 800706a:	d415      	bmi.n	8007098 <_printf_i+0x218>
 800706c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800706e:	68e0      	ldr	r0, [r4, #12]
 8007070:	4298      	cmp	r0, r3
 8007072:	daa5      	bge.n	8006fc0 <_printf_i+0x140>
 8007074:	0018      	movs	r0, r3
 8007076:	e7a3      	b.n	8006fc0 <_printf_i+0x140>
 8007078:	0022      	movs	r2, r4
 800707a:	2301      	movs	r3, #1
 800707c:	9906      	ldr	r1, [sp, #24]
 800707e:	9805      	ldr	r0, [sp, #20]
 8007080:	9e07      	ldr	r6, [sp, #28]
 8007082:	3219      	adds	r2, #25
 8007084:	47b0      	blx	r6
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	d098      	beq.n	8006fbc <_printf_i+0x13c>
 800708a:	3501      	adds	r5, #1
 800708c:	68e3      	ldr	r3, [r4, #12]
 800708e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007090:	1a9b      	subs	r3, r3, r2
 8007092:	42ab      	cmp	r3, r5
 8007094:	dcf0      	bgt.n	8007078 <_printf_i+0x1f8>
 8007096:	e7e9      	b.n	800706c <_printf_i+0x1ec>
 8007098:	2500      	movs	r5, #0
 800709a:	e7f7      	b.n	800708c <_printf_i+0x20c>
 800709c:	08009802 	.word	0x08009802
 80070a0:	08009813 	.word	0x08009813

080070a4 <siprintf>:
 80070a4:	b40e      	push	{r1, r2, r3}
 80070a6:	b500      	push	{lr}
 80070a8:	490b      	ldr	r1, [pc, #44]	; (80070d8 <siprintf+0x34>)
 80070aa:	b09c      	sub	sp, #112	; 0x70
 80070ac:	ab1d      	add	r3, sp, #116	; 0x74
 80070ae:	9002      	str	r0, [sp, #8]
 80070b0:	9006      	str	r0, [sp, #24]
 80070b2:	9107      	str	r1, [sp, #28]
 80070b4:	9104      	str	r1, [sp, #16]
 80070b6:	4809      	ldr	r0, [pc, #36]	; (80070dc <siprintf+0x38>)
 80070b8:	4909      	ldr	r1, [pc, #36]	; (80070e0 <siprintf+0x3c>)
 80070ba:	cb04      	ldmia	r3!, {r2}
 80070bc:	9105      	str	r1, [sp, #20]
 80070be:	6800      	ldr	r0, [r0, #0]
 80070c0:	a902      	add	r1, sp, #8
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	f001 fbe2 	bl	800888c <_svfiprintf_r>
 80070c8:	2300      	movs	r3, #0
 80070ca:	9a02      	ldr	r2, [sp, #8]
 80070cc:	7013      	strb	r3, [r2, #0]
 80070ce:	b01c      	add	sp, #112	; 0x70
 80070d0:	bc08      	pop	{r3}
 80070d2:	b003      	add	sp, #12
 80070d4:	4718      	bx	r3
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	7fffffff 	.word	0x7fffffff
 80070dc:	20000044 	.word	0x20000044
 80070e0:	ffff0208 	.word	0xffff0208

080070e4 <quorem>:
 80070e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e6:	0006      	movs	r6, r0
 80070e8:	690b      	ldr	r3, [r1, #16]
 80070ea:	6932      	ldr	r2, [r6, #16]
 80070ec:	b087      	sub	sp, #28
 80070ee:	2000      	movs	r0, #0
 80070f0:	9103      	str	r1, [sp, #12]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	db65      	blt.n	80071c2 <quorem+0xde>
 80070f6:	3b01      	subs	r3, #1
 80070f8:	009c      	lsls	r4, r3, #2
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	000b      	movs	r3, r1
 80070fe:	3314      	adds	r3, #20
 8007100:	9305      	str	r3, [sp, #20]
 8007102:	191b      	adds	r3, r3, r4
 8007104:	9304      	str	r3, [sp, #16]
 8007106:	0033      	movs	r3, r6
 8007108:	3314      	adds	r3, #20
 800710a:	9302      	str	r3, [sp, #8]
 800710c:	191c      	adds	r4, r3, r4
 800710e:	9b04      	ldr	r3, [sp, #16]
 8007110:	6827      	ldr	r7, [r4, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	0038      	movs	r0, r7
 8007116:	1c5d      	adds	r5, r3, #1
 8007118:	0029      	movs	r1, r5
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	f7f9 f810 	bl	8000140 <__udivsi3>
 8007120:	9001      	str	r0, [sp, #4]
 8007122:	42af      	cmp	r7, r5
 8007124:	d324      	bcc.n	8007170 <quorem+0x8c>
 8007126:	2500      	movs	r5, #0
 8007128:	46ac      	mov	ip, r5
 800712a:	9802      	ldr	r0, [sp, #8]
 800712c:	9f05      	ldr	r7, [sp, #20]
 800712e:	cf08      	ldmia	r7!, {r3}
 8007130:	9a01      	ldr	r2, [sp, #4]
 8007132:	b299      	uxth	r1, r3
 8007134:	4351      	muls	r1, r2
 8007136:	0c1b      	lsrs	r3, r3, #16
 8007138:	4353      	muls	r3, r2
 800713a:	1949      	adds	r1, r1, r5
 800713c:	0c0a      	lsrs	r2, r1, #16
 800713e:	189b      	adds	r3, r3, r2
 8007140:	6802      	ldr	r2, [r0, #0]
 8007142:	b289      	uxth	r1, r1
 8007144:	b292      	uxth	r2, r2
 8007146:	4462      	add	r2, ip
 8007148:	1a52      	subs	r2, r2, r1
 800714a:	6801      	ldr	r1, [r0, #0]
 800714c:	0c1d      	lsrs	r5, r3, #16
 800714e:	0c09      	lsrs	r1, r1, #16
 8007150:	b29b      	uxth	r3, r3
 8007152:	1acb      	subs	r3, r1, r3
 8007154:	1411      	asrs	r1, r2, #16
 8007156:	185b      	adds	r3, r3, r1
 8007158:	1419      	asrs	r1, r3, #16
 800715a:	b292      	uxth	r2, r2
 800715c:	041b      	lsls	r3, r3, #16
 800715e:	431a      	orrs	r2, r3
 8007160:	9b04      	ldr	r3, [sp, #16]
 8007162:	468c      	mov	ip, r1
 8007164:	c004      	stmia	r0!, {r2}
 8007166:	42bb      	cmp	r3, r7
 8007168:	d2e1      	bcs.n	800712e <quorem+0x4a>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d030      	beq.n	80071d2 <quorem+0xee>
 8007170:	0030      	movs	r0, r6
 8007172:	9903      	ldr	r1, [sp, #12]
 8007174:	f001 f902 	bl	800837c <__mcmp>
 8007178:	2800      	cmp	r0, #0
 800717a:	db21      	blt.n	80071c0 <quorem+0xdc>
 800717c:	0030      	movs	r0, r6
 800717e:	2400      	movs	r4, #0
 8007180:	9b01      	ldr	r3, [sp, #4]
 8007182:	9903      	ldr	r1, [sp, #12]
 8007184:	3301      	adds	r3, #1
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	3014      	adds	r0, #20
 800718a:	3114      	adds	r1, #20
 800718c:	6803      	ldr	r3, [r0, #0]
 800718e:	c920      	ldmia	r1!, {r5}
 8007190:	b29a      	uxth	r2, r3
 8007192:	1914      	adds	r4, r2, r4
 8007194:	b2aa      	uxth	r2, r5
 8007196:	1aa2      	subs	r2, r4, r2
 8007198:	0c1b      	lsrs	r3, r3, #16
 800719a:	0c2d      	lsrs	r5, r5, #16
 800719c:	1414      	asrs	r4, r2, #16
 800719e:	1b5b      	subs	r3, r3, r5
 80071a0:	191b      	adds	r3, r3, r4
 80071a2:	141c      	asrs	r4, r3, #16
 80071a4:	b292      	uxth	r2, r2
 80071a6:	041b      	lsls	r3, r3, #16
 80071a8:	4313      	orrs	r3, r2
 80071aa:	c008      	stmia	r0!, {r3}
 80071ac:	9b04      	ldr	r3, [sp, #16]
 80071ae:	428b      	cmp	r3, r1
 80071b0:	d2ec      	bcs.n	800718c <quorem+0xa8>
 80071b2:	9b00      	ldr	r3, [sp, #0]
 80071b4:	9a02      	ldr	r2, [sp, #8]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	18d3      	adds	r3, r2, r3
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	2a00      	cmp	r2, #0
 80071be:	d015      	beq.n	80071ec <quorem+0x108>
 80071c0:	9801      	ldr	r0, [sp, #4]
 80071c2:	b007      	add	sp, #28
 80071c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d106      	bne.n	80071da <quorem+0xf6>
 80071cc:	9b00      	ldr	r3, [sp, #0]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	9b02      	ldr	r3, [sp, #8]
 80071d4:	3c04      	subs	r4, #4
 80071d6:	42a3      	cmp	r3, r4
 80071d8:	d3f5      	bcc.n	80071c6 <quorem+0xe2>
 80071da:	9b00      	ldr	r3, [sp, #0]
 80071dc:	6133      	str	r3, [r6, #16]
 80071de:	e7c7      	b.n	8007170 <quorem+0x8c>
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	2a00      	cmp	r2, #0
 80071e4:	d106      	bne.n	80071f4 <quorem+0x110>
 80071e6:	9a00      	ldr	r2, [sp, #0]
 80071e8:	3a01      	subs	r2, #1
 80071ea:	9200      	str	r2, [sp, #0]
 80071ec:	9a02      	ldr	r2, [sp, #8]
 80071ee:	3b04      	subs	r3, #4
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d3f5      	bcc.n	80071e0 <quorem+0xfc>
 80071f4:	9b00      	ldr	r3, [sp, #0]
 80071f6:	6133      	str	r3, [r6, #16]
 80071f8:	e7e2      	b.n	80071c0 <quorem+0xdc>
	...

080071fc <_dtoa_r>:
 80071fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071fe:	b09d      	sub	sp, #116	; 0x74
 8007200:	9202      	str	r2, [sp, #8]
 8007202:	9303      	str	r3, [sp, #12]
 8007204:	9b02      	ldr	r3, [sp, #8]
 8007206:	9c03      	ldr	r4, [sp, #12]
 8007208:	9308      	str	r3, [sp, #32]
 800720a:	9409      	str	r4, [sp, #36]	; 0x24
 800720c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800720e:	0007      	movs	r7, r0
 8007210:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007212:	2c00      	cmp	r4, #0
 8007214:	d10e      	bne.n	8007234 <_dtoa_r+0x38>
 8007216:	2010      	movs	r0, #16
 8007218:	f000 fe0e 	bl	8007e38 <malloc>
 800721c:	1e02      	subs	r2, r0, #0
 800721e:	6278      	str	r0, [r7, #36]	; 0x24
 8007220:	d104      	bne.n	800722c <_dtoa_r+0x30>
 8007222:	21ea      	movs	r1, #234	; 0xea
 8007224:	4bc7      	ldr	r3, [pc, #796]	; (8007544 <_dtoa_r+0x348>)
 8007226:	48c8      	ldr	r0, [pc, #800]	; (8007548 <_dtoa_r+0x34c>)
 8007228:	f001 fc42 	bl	8008ab0 <__assert_func>
 800722c:	6044      	str	r4, [r0, #4]
 800722e:	6084      	str	r4, [r0, #8]
 8007230:	6004      	str	r4, [r0, #0]
 8007232:	60c4      	str	r4, [r0, #12]
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	6819      	ldr	r1, [r3, #0]
 8007238:	2900      	cmp	r1, #0
 800723a:	d00a      	beq.n	8007252 <_dtoa_r+0x56>
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	2301      	movs	r3, #1
 8007240:	4093      	lsls	r3, r2
 8007242:	604a      	str	r2, [r1, #4]
 8007244:	608b      	str	r3, [r1, #8]
 8007246:	0038      	movs	r0, r7
 8007248:	f000 fe58 	bl	8007efc <_Bfree>
 800724c:	2200      	movs	r2, #0
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	9b03      	ldr	r3, [sp, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	da20      	bge.n	800729a <_dtoa_r+0x9e>
 8007258:	2301      	movs	r3, #1
 800725a:	602b      	str	r3, [r5, #0]
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	085b      	lsrs	r3, r3, #1
 8007262:	9309      	str	r3, [sp, #36]	; 0x24
 8007264:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007266:	4bb9      	ldr	r3, [pc, #740]	; (800754c <_dtoa_r+0x350>)
 8007268:	4ab8      	ldr	r2, [pc, #736]	; (800754c <_dtoa_r+0x350>)
 800726a:	402b      	ands	r3, r5
 800726c:	4293      	cmp	r3, r2
 800726e:	d117      	bne.n	80072a0 <_dtoa_r+0xa4>
 8007270:	4bb7      	ldr	r3, [pc, #732]	; (8007550 <_dtoa_r+0x354>)
 8007272:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007274:	0328      	lsls	r0, r5, #12
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	9b02      	ldr	r3, [sp, #8]
 800727a:	0b00      	lsrs	r0, r0, #12
 800727c:	4318      	orrs	r0, r3
 800727e:	d101      	bne.n	8007284 <_dtoa_r+0x88>
 8007280:	f000 fdbf 	bl	8007e02 <_dtoa_r+0xc06>
 8007284:	48b3      	ldr	r0, [pc, #716]	; (8007554 <_dtoa_r+0x358>)
 8007286:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007288:	9006      	str	r0, [sp, #24]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <_dtoa_r+0x98>
 800728e:	4bb2      	ldr	r3, [pc, #712]	; (8007558 <_dtoa_r+0x35c>)
 8007290:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	9806      	ldr	r0, [sp, #24]
 8007296:	b01d      	add	sp, #116	; 0x74
 8007298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800729a:	2300      	movs	r3, #0
 800729c:	602b      	str	r3, [r5, #0]
 800729e:	e7e1      	b.n	8007264 <_dtoa_r+0x68>
 80072a0:	9b08      	ldr	r3, [sp, #32]
 80072a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80072a4:	9312      	str	r3, [sp, #72]	; 0x48
 80072a6:	9413      	str	r4, [sp, #76]	; 0x4c
 80072a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80072aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80072ac:	2200      	movs	r2, #0
 80072ae:	2300      	movs	r3, #0
 80072b0:	f7f9 f8cc 	bl	800044c <__aeabi_dcmpeq>
 80072b4:	1e04      	subs	r4, r0, #0
 80072b6:	d009      	beq.n	80072cc <_dtoa_r+0xd0>
 80072b8:	2301      	movs	r3, #1
 80072ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	4ba7      	ldr	r3, [pc, #668]	; (800755c <_dtoa_r+0x360>)
 80072c0:	9306      	str	r3, [sp, #24]
 80072c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0e5      	beq.n	8007294 <_dtoa_r+0x98>
 80072c8:	4ba5      	ldr	r3, [pc, #660]	; (8007560 <_dtoa_r+0x364>)
 80072ca:	e7e1      	b.n	8007290 <_dtoa_r+0x94>
 80072cc:	ab1a      	add	r3, sp, #104	; 0x68
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	ab1b      	add	r3, sp, #108	; 0x6c
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	0038      	movs	r0, r7
 80072d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072da:	f001 f903 	bl	80084e4 <__d2b>
 80072de:	006e      	lsls	r6, r5, #1
 80072e0:	9005      	str	r0, [sp, #20]
 80072e2:	0d76      	lsrs	r6, r6, #21
 80072e4:	d100      	bne.n	80072e8 <_dtoa_r+0xec>
 80072e6:	e07c      	b.n	80073e2 <_dtoa_r+0x1e6>
 80072e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80072ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80072ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072ee:	4a9d      	ldr	r2, [pc, #628]	; (8007564 <_dtoa_r+0x368>)
 80072f0:	031b      	lsls	r3, r3, #12
 80072f2:	0b1b      	lsrs	r3, r3, #12
 80072f4:	431a      	orrs	r2, r3
 80072f6:	0011      	movs	r1, r2
 80072f8:	4b9b      	ldr	r3, [pc, #620]	; (8007568 <_dtoa_r+0x36c>)
 80072fa:	9418      	str	r4, [sp, #96]	; 0x60
 80072fc:	18f6      	adds	r6, r6, r3
 80072fe:	2200      	movs	r2, #0
 8007300:	4b9a      	ldr	r3, [pc, #616]	; (800756c <_dtoa_r+0x370>)
 8007302:	f7fa fd4b 	bl	8001d9c <__aeabi_dsub>
 8007306:	4a9a      	ldr	r2, [pc, #616]	; (8007570 <_dtoa_r+0x374>)
 8007308:	4b9a      	ldr	r3, [pc, #616]	; (8007574 <_dtoa_r+0x378>)
 800730a:	f7fa fadb 	bl	80018c4 <__aeabi_dmul>
 800730e:	4a9a      	ldr	r2, [pc, #616]	; (8007578 <_dtoa_r+0x37c>)
 8007310:	4b9a      	ldr	r3, [pc, #616]	; (800757c <_dtoa_r+0x380>)
 8007312:	f7f9 fb99 	bl	8000a48 <__aeabi_dadd>
 8007316:	0004      	movs	r4, r0
 8007318:	0030      	movs	r0, r6
 800731a:	000d      	movs	r5, r1
 800731c:	f7fb f924 	bl	8002568 <__aeabi_i2d>
 8007320:	4a97      	ldr	r2, [pc, #604]	; (8007580 <_dtoa_r+0x384>)
 8007322:	4b98      	ldr	r3, [pc, #608]	; (8007584 <_dtoa_r+0x388>)
 8007324:	f7fa face 	bl	80018c4 <__aeabi_dmul>
 8007328:	0002      	movs	r2, r0
 800732a:	000b      	movs	r3, r1
 800732c:	0020      	movs	r0, r4
 800732e:	0029      	movs	r1, r5
 8007330:	f7f9 fb8a 	bl	8000a48 <__aeabi_dadd>
 8007334:	0004      	movs	r4, r0
 8007336:	000d      	movs	r5, r1
 8007338:	f7fb f8e0 	bl	80024fc <__aeabi_d2iz>
 800733c:	2200      	movs	r2, #0
 800733e:	9002      	str	r0, [sp, #8]
 8007340:	2300      	movs	r3, #0
 8007342:	0020      	movs	r0, r4
 8007344:	0029      	movs	r1, r5
 8007346:	f7f9 f887 	bl	8000458 <__aeabi_dcmplt>
 800734a:	2800      	cmp	r0, #0
 800734c:	d00b      	beq.n	8007366 <_dtoa_r+0x16a>
 800734e:	9802      	ldr	r0, [sp, #8]
 8007350:	f7fb f90a 	bl	8002568 <__aeabi_i2d>
 8007354:	002b      	movs	r3, r5
 8007356:	0022      	movs	r2, r4
 8007358:	f7f9 f878 	bl	800044c <__aeabi_dcmpeq>
 800735c:	4243      	negs	r3, r0
 800735e:	4158      	adcs	r0, r3
 8007360:	9b02      	ldr	r3, [sp, #8]
 8007362:	1a1b      	subs	r3, r3, r0
 8007364:	9302      	str	r3, [sp, #8]
 8007366:	2301      	movs	r3, #1
 8007368:	9316      	str	r3, [sp, #88]	; 0x58
 800736a:	9b02      	ldr	r3, [sp, #8]
 800736c:	2b16      	cmp	r3, #22
 800736e:	d80f      	bhi.n	8007390 <_dtoa_r+0x194>
 8007370:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007372:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007374:	00da      	lsls	r2, r3, #3
 8007376:	4b84      	ldr	r3, [pc, #528]	; (8007588 <_dtoa_r+0x38c>)
 8007378:	189b      	adds	r3, r3, r2
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f7f9 f86b 	bl	8000458 <__aeabi_dcmplt>
 8007382:	2800      	cmp	r0, #0
 8007384:	d049      	beq.n	800741a <_dtoa_r+0x21e>
 8007386:	9b02      	ldr	r3, [sp, #8]
 8007388:	3b01      	subs	r3, #1
 800738a:	9302      	str	r3, [sp, #8]
 800738c:	2300      	movs	r3, #0
 800738e:	9316      	str	r3, [sp, #88]	; 0x58
 8007390:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007392:	1b9e      	subs	r6, r3, r6
 8007394:	2300      	movs	r3, #0
 8007396:	930a      	str	r3, [sp, #40]	; 0x28
 8007398:	0033      	movs	r3, r6
 800739a:	3b01      	subs	r3, #1
 800739c:	930d      	str	r3, [sp, #52]	; 0x34
 800739e:	d504      	bpl.n	80073aa <_dtoa_r+0x1ae>
 80073a0:	2301      	movs	r3, #1
 80073a2:	1b9b      	subs	r3, r3, r6
 80073a4:	930a      	str	r3, [sp, #40]	; 0x28
 80073a6:	2300      	movs	r3, #0
 80073a8:	930d      	str	r3, [sp, #52]	; 0x34
 80073aa:	9b02      	ldr	r3, [sp, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	db36      	blt.n	800741e <_dtoa_r+0x222>
 80073b0:	9a02      	ldr	r2, [sp, #8]
 80073b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073b4:	4694      	mov	ip, r2
 80073b6:	4463      	add	r3, ip
 80073b8:	930d      	str	r3, [sp, #52]	; 0x34
 80073ba:	2300      	movs	r3, #0
 80073bc:	9215      	str	r2, [sp, #84]	; 0x54
 80073be:	930e      	str	r3, [sp, #56]	; 0x38
 80073c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073c2:	2401      	movs	r4, #1
 80073c4:	2b09      	cmp	r3, #9
 80073c6:	d864      	bhi.n	8007492 <_dtoa_r+0x296>
 80073c8:	2b05      	cmp	r3, #5
 80073ca:	dd02      	ble.n	80073d2 <_dtoa_r+0x1d6>
 80073cc:	2400      	movs	r4, #0
 80073ce:	3b04      	subs	r3, #4
 80073d0:	9322      	str	r3, [sp, #136]	; 0x88
 80073d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073d4:	1e98      	subs	r0, r3, #2
 80073d6:	2803      	cmp	r0, #3
 80073d8:	d864      	bhi.n	80074a4 <_dtoa_r+0x2a8>
 80073da:	f7f8 fe9d 	bl	8000118 <__gnu_thumb1_case_uqi>
 80073de:	3829      	.short	0x3829
 80073e0:	5836      	.short	0x5836
 80073e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80073e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80073e6:	189e      	adds	r6, r3, r2
 80073e8:	4b68      	ldr	r3, [pc, #416]	; (800758c <_dtoa_r+0x390>)
 80073ea:	18f2      	adds	r2, r6, r3
 80073ec:	2a20      	cmp	r2, #32
 80073ee:	dd0f      	ble.n	8007410 <_dtoa_r+0x214>
 80073f0:	2340      	movs	r3, #64	; 0x40
 80073f2:	1a9b      	subs	r3, r3, r2
 80073f4:	409d      	lsls	r5, r3
 80073f6:	4b66      	ldr	r3, [pc, #408]	; (8007590 <_dtoa_r+0x394>)
 80073f8:	9802      	ldr	r0, [sp, #8]
 80073fa:	18f3      	adds	r3, r6, r3
 80073fc:	40d8      	lsrs	r0, r3
 80073fe:	4328      	orrs	r0, r5
 8007400:	f7fb f8e2 	bl	80025c8 <__aeabi_ui2d>
 8007404:	2301      	movs	r3, #1
 8007406:	4c63      	ldr	r4, [pc, #396]	; (8007594 <_dtoa_r+0x398>)
 8007408:	3e01      	subs	r6, #1
 800740a:	1909      	adds	r1, r1, r4
 800740c:	9318      	str	r3, [sp, #96]	; 0x60
 800740e:	e776      	b.n	80072fe <_dtoa_r+0x102>
 8007410:	2320      	movs	r3, #32
 8007412:	9802      	ldr	r0, [sp, #8]
 8007414:	1a9b      	subs	r3, r3, r2
 8007416:	4098      	lsls	r0, r3
 8007418:	e7f2      	b.n	8007400 <_dtoa_r+0x204>
 800741a:	9016      	str	r0, [sp, #88]	; 0x58
 800741c:	e7b8      	b.n	8007390 <_dtoa_r+0x194>
 800741e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007420:	9a02      	ldr	r2, [sp, #8]
 8007422:	1a9b      	subs	r3, r3, r2
 8007424:	930a      	str	r3, [sp, #40]	; 0x28
 8007426:	4253      	negs	r3, r2
 8007428:	930e      	str	r3, [sp, #56]	; 0x38
 800742a:	2300      	movs	r3, #0
 800742c:	9315      	str	r3, [sp, #84]	; 0x54
 800742e:	e7c7      	b.n	80073c0 <_dtoa_r+0x1c4>
 8007430:	2300      	movs	r3, #0
 8007432:	930f      	str	r3, [sp, #60]	; 0x3c
 8007434:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007436:	930c      	str	r3, [sp, #48]	; 0x30
 8007438:	9307      	str	r3, [sp, #28]
 800743a:	2b00      	cmp	r3, #0
 800743c:	dc13      	bgt.n	8007466 <_dtoa_r+0x26a>
 800743e:	2301      	movs	r3, #1
 8007440:	001a      	movs	r2, r3
 8007442:	930c      	str	r3, [sp, #48]	; 0x30
 8007444:	9307      	str	r3, [sp, #28]
 8007446:	9223      	str	r2, [sp, #140]	; 0x8c
 8007448:	e00d      	b.n	8007466 <_dtoa_r+0x26a>
 800744a:	2301      	movs	r3, #1
 800744c:	e7f1      	b.n	8007432 <_dtoa_r+0x236>
 800744e:	2300      	movs	r3, #0
 8007450:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007452:	930f      	str	r3, [sp, #60]	; 0x3c
 8007454:	4694      	mov	ip, r2
 8007456:	9b02      	ldr	r3, [sp, #8]
 8007458:	4463      	add	r3, ip
 800745a:	930c      	str	r3, [sp, #48]	; 0x30
 800745c:	3301      	adds	r3, #1
 800745e:	9307      	str	r3, [sp, #28]
 8007460:	2b00      	cmp	r3, #0
 8007462:	dc00      	bgt.n	8007466 <_dtoa_r+0x26a>
 8007464:	2301      	movs	r3, #1
 8007466:	2200      	movs	r2, #0
 8007468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800746a:	6042      	str	r2, [r0, #4]
 800746c:	3204      	adds	r2, #4
 800746e:	0015      	movs	r5, r2
 8007470:	3514      	adds	r5, #20
 8007472:	6841      	ldr	r1, [r0, #4]
 8007474:	429d      	cmp	r5, r3
 8007476:	d919      	bls.n	80074ac <_dtoa_r+0x2b0>
 8007478:	0038      	movs	r0, r7
 800747a:	f000 fcfb 	bl	8007e74 <_Balloc>
 800747e:	9006      	str	r0, [sp, #24]
 8007480:	2800      	cmp	r0, #0
 8007482:	d117      	bne.n	80074b4 <_dtoa_r+0x2b8>
 8007484:	21d5      	movs	r1, #213	; 0xd5
 8007486:	0002      	movs	r2, r0
 8007488:	4b43      	ldr	r3, [pc, #268]	; (8007598 <_dtoa_r+0x39c>)
 800748a:	0049      	lsls	r1, r1, #1
 800748c:	e6cb      	b.n	8007226 <_dtoa_r+0x2a>
 800748e:	2301      	movs	r3, #1
 8007490:	e7de      	b.n	8007450 <_dtoa_r+0x254>
 8007492:	2300      	movs	r3, #0
 8007494:	940f      	str	r4, [sp, #60]	; 0x3c
 8007496:	9322      	str	r3, [sp, #136]	; 0x88
 8007498:	3b01      	subs	r3, #1
 800749a:	930c      	str	r3, [sp, #48]	; 0x30
 800749c:	9307      	str	r3, [sp, #28]
 800749e:	2200      	movs	r2, #0
 80074a0:	3313      	adds	r3, #19
 80074a2:	e7d0      	b.n	8007446 <_dtoa_r+0x24a>
 80074a4:	2301      	movs	r3, #1
 80074a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80074a8:	3b02      	subs	r3, #2
 80074aa:	e7f6      	b.n	800749a <_dtoa_r+0x29e>
 80074ac:	3101      	adds	r1, #1
 80074ae:	6041      	str	r1, [r0, #4]
 80074b0:	0052      	lsls	r2, r2, #1
 80074b2:	e7dc      	b.n	800746e <_dtoa_r+0x272>
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	9a06      	ldr	r2, [sp, #24]
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	9b07      	ldr	r3, [sp, #28]
 80074bc:	2b0e      	cmp	r3, #14
 80074be:	d900      	bls.n	80074c2 <_dtoa_r+0x2c6>
 80074c0:	e0eb      	b.n	800769a <_dtoa_r+0x49e>
 80074c2:	2c00      	cmp	r4, #0
 80074c4:	d100      	bne.n	80074c8 <_dtoa_r+0x2cc>
 80074c6:	e0e8      	b.n	800769a <_dtoa_r+0x49e>
 80074c8:	9b02      	ldr	r3, [sp, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	dd68      	ble.n	80075a0 <_dtoa_r+0x3a4>
 80074ce:	001a      	movs	r2, r3
 80074d0:	210f      	movs	r1, #15
 80074d2:	4b2d      	ldr	r3, [pc, #180]	; (8007588 <_dtoa_r+0x38c>)
 80074d4:	400a      	ands	r2, r1
 80074d6:	00d2      	lsls	r2, r2, #3
 80074d8:	189b      	adds	r3, r3, r2
 80074da:	681d      	ldr	r5, [r3, #0]
 80074dc:	685e      	ldr	r6, [r3, #4]
 80074de:	9b02      	ldr	r3, [sp, #8]
 80074e0:	111c      	asrs	r4, r3, #4
 80074e2:	2302      	movs	r3, #2
 80074e4:	9310      	str	r3, [sp, #64]	; 0x40
 80074e6:	9b02      	ldr	r3, [sp, #8]
 80074e8:	05db      	lsls	r3, r3, #23
 80074ea:	d50b      	bpl.n	8007504 <_dtoa_r+0x308>
 80074ec:	4b2b      	ldr	r3, [pc, #172]	; (800759c <_dtoa_r+0x3a0>)
 80074ee:	400c      	ands	r4, r1
 80074f0:	6a1a      	ldr	r2, [r3, #32]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80074f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80074f8:	f7f9 fde2 	bl	80010c0 <__aeabi_ddiv>
 80074fc:	2303      	movs	r3, #3
 80074fe:	9008      	str	r0, [sp, #32]
 8007500:	9109      	str	r1, [sp, #36]	; 0x24
 8007502:	9310      	str	r3, [sp, #64]	; 0x40
 8007504:	4b25      	ldr	r3, [pc, #148]	; (800759c <_dtoa_r+0x3a0>)
 8007506:	9314      	str	r3, [sp, #80]	; 0x50
 8007508:	2c00      	cmp	r4, #0
 800750a:	d108      	bne.n	800751e <_dtoa_r+0x322>
 800750c:	9808      	ldr	r0, [sp, #32]
 800750e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007510:	002a      	movs	r2, r5
 8007512:	0033      	movs	r3, r6
 8007514:	f7f9 fdd4 	bl	80010c0 <__aeabi_ddiv>
 8007518:	9008      	str	r0, [sp, #32]
 800751a:	9109      	str	r1, [sp, #36]	; 0x24
 800751c:	e05c      	b.n	80075d8 <_dtoa_r+0x3dc>
 800751e:	2301      	movs	r3, #1
 8007520:	421c      	tst	r4, r3
 8007522:	d00b      	beq.n	800753c <_dtoa_r+0x340>
 8007524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007526:	0028      	movs	r0, r5
 8007528:	3301      	adds	r3, #1
 800752a:	9310      	str	r3, [sp, #64]	; 0x40
 800752c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800752e:	0031      	movs	r1, r6
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f7fa f9c6 	bl	80018c4 <__aeabi_dmul>
 8007538:	0005      	movs	r5, r0
 800753a:	000e      	movs	r6, r1
 800753c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800753e:	1064      	asrs	r4, r4, #1
 8007540:	3308      	adds	r3, #8
 8007542:	e7e0      	b.n	8007506 <_dtoa_r+0x30a>
 8007544:	08009831 	.word	0x08009831
 8007548:	08009848 	.word	0x08009848
 800754c:	7ff00000 	.word	0x7ff00000
 8007550:	0000270f 	.word	0x0000270f
 8007554:	0800982d 	.word	0x0800982d
 8007558:	08009830 	.word	0x08009830
 800755c:	08009800 	.word	0x08009800
 8007560:	08009801 	.word	0x08009801
 8007564:	3ff00000 	.word	0x3ff00000
 8007568:	fffffc01 	.word	0xfffffc01
 800756c:	3ff80000 	.word	0x3ff80000
 8007570:	636f4361 	.word	0x636f4361
 8007574:	3fd287a7 	.word	0x3fd287a7
 8007578:	8b60c8b3 	.word	0x8b60c8b3
 800757c:	3fc68a28 	.word	0x3fc68a28
 8007580:	509f79fb 	.word	0x509f79fb
 8007584:	3fd34413 	.word	0x3fd34413
 8007588:	08009938 	.word	0x08009938
 800758c:	00000432 	.word	0x00000432
 8007590:	00000412 	.word	0x00000412
 8007594:	fe100000 	.word	0xfe100000
 8007598:	080098a3 	.word	0x080098a3
 800759c:	08009910 	.word	0x08009910
 80075a0:	2302      	movs	r3, #2
 80075a2:	9310      	str	r3, [sp, #64]	; 0x40
 80075a4:	9b02      	ldr	r3, [sp, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d016      	beq.n	80075d8 <_dtoa_r+0x3dc>
 80075aa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80075ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80075ae:	425c      	negs	r4, r3
 80075b0:	230f      	movs	r3, #15
 80075b2:	4ab6      	ldr	r2, [pc, #728]	; (800788c <_dtoa_r+0x690>)
 80075b4:	4023      	ands	r3, r4
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	18d3      	adds	r3, r2, r3
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f7fa f981 	bl	80018c4 <__aeabi_dmul>
 80075c2:	2601      	movs	r6, #1
 80075c4:	2300      	movs	r3, #0
 80075c6:	9008      	str	r0, [sp, #32]
 80075c8:	9109      	str	r1, [sp, #36]	; 0x24
 80075ca:	4db1      	ldr	r5, [pc, #708]	; (8007890 <_dtoa_r+0x694>)
 80075cc:	1124      	asrs	r4, r4, #4
 80075ce:	2c00      	cmp	r4, #0
 80075d0:	d000      	beq.n	80075d4 <_dtoa_r+0x3d8>
 80075d2:	e094      	b.n	80076fe <_dtoa_r+0x502>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d19f      	bne.n	8007518 <_dtoa_r+0x31c>
 80075d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d100      	bne.n	80075e0 <_dtoa_r+0x3e4>
 80075de:	e09b      	b.n	8007718 <_dtoa_r+0x51c>
 80075e0:	9c08      	ldr	r4, [sp, #32]
 80075e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80075e4:	2200      	movs	r2, #0
 80075e6:	0020      	movs	r0, r4
 80075e8:	0029      	movs	r1, r5
 80075ea:	4baa      	ldr	r3, [pc, #680]	; (8007894 <_dtoa_r+0x698>)
 80075ec:	f7f8 ff34 	bl	8000458 <__aeabi_dcmplt>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d100      	bne.n	80075f6 <_dtoa_r+0x3fa>
 80075f4:	e090      	b.n	8007718 <_dtoa_r+0x51c>
 80075f6:	9b07      	ldr	r3, [sp, #28]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d100      	bne.n	80075fe <_dtoa_r+0x402>
 80075fc:	e08c      	b.n	8007718 <_dtoa_r+0x51c>
 80075fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007600:	2b00      	cmp	r3, #0
 8007602:	dd46      	ble.n	8007692 <_dtoa_r+0x496>
 8007604:	9b02      	ldr	r3, [sp, #8]
 8007606:	2200      	movs	r2, #0
 8007608:	0020      	movs	r0, r4
 800760a:	0029      	movs	r1, r5
 800760c:	1e5e      	subs	r6, r3, #1
 800760e:	4ba2      	ldr	r3, [pc, #648]	; (8007898 <_dtoa_r+0x69c>)
 8007610:	f7fa f958 	bl	80018c4 <__aeabi_dmul>
 8007614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007616:	9008      	str	r0, [sp, #32]
 8007618:	9109      	str	r1, [sp, #36]	; 0x24
 800761a:	3301      	adds	r3, #1
 800761c:	9310      	str	r3, [sp, #64]	; 0x40
 800761e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007620:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007622:	9c08      	ldr	r4, [sp, #32]
 8007624:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007626:	9314      	str	r3, [sp, #80]	; 0x50
 8007628:	f7fa ff9e 	bl	8002568 <__aeabi_i2d>
 800762c:	0022      	movs	r2, r4
 800762e:	002b      	movs	r3, r5
 8007630:	f7fa f948 	bl	80018c4 <__aeabi_dmul>
 8007634:	2200      	movs	r2, #0
 8007636:	4b99      	ldr	r3, [pc, #612]	; (800789c <_dtoa_r+0x6a0>)
 8007638:	f7f9 fa06 	bl	8000a48 <__aeabi_dadd>
 800763c:	9010      	str	r0, [sp, #64]	; 0x40
 800763e:	9111      	str	r1, [sp, #68]	; 0x44
 8007640:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007642:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007644:	9208      	str	r2, [sp, #32]
 8007646:	9309      	str	r3, [sp, #36]	; 0x24
 8007648:	4a95      	ldr	r2, [pc, #596]	; (80078a0 <_dtoa_r+0x6a4>)
 800764a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800764c:	4694      	mov	ip, r2
 800764e:	4463      	add	r3, ip
 8007650:	9317      	str	r3, [sp, #92]	; 0x5c
 8007652:	9309      	str	r3, [sp, #36]	; 0x24
 8007654:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007656:	2b00      	cmp	r3, #0
 8007658:	d161      	bne.n	800771e <_dtoa_r+0x522>
 800765a:	2200      	movs	r2, #0
 800765c:	0020      	movs	r0, r4
 800765e:	0029      	movs	r1, r5
 8007660:	4b90      	ldr	r3, [pc, #576]	; (80078a4 <_dtoa_r+0x6a8>)
 8007662:	f7fa fb9b 	bl	8001d9c <__aeabi_dsub>
 8007666:	9a08      	ldr	r2, [sp, #32]
 8007668:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800766a:	0004      	movs	r4, r0
 800766c:	000d      	movs	r5, r1
 800766e:	f7f8 ff07 	bl	8000480 <__aeabi_dcmpgt>
 8007672:	2800      	cmp	r0, #0
 8007674:	d000      	beq.n	8007678 <_dtoa_r+0x47c>
 8007676:	e2af      	b.n	8007bd8 <_dtoa_r+0x9dc>
 8007678:	488b      	ldr	r0, [pc, #556]	; (80078a8 <_dtoa_r+0x6ac>)
 800767a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800767c:	4684      	mov	ip, r0
 800767e:	4461      	add	r1, ip
 8007680:	000b      	movs	r3, r1
 8007682:	0020      	movs	r0, r4
 8007684:	0029      	movs	r1, r5
 8007686:	9a08      	ldr	r2, [sp, #32]
 8007688:	f7f8 fee6 	bl	8000458 <__aeabi_dcmplt>
 800768c:	2800      	cmp	r0, #0
 800768e:	d000      	beq.n	8007692 <_dtoa_r+0x496>
 8007690:	e29f      	b.n	8007bd2 <_dtoa_r+0x9d6>
 8007692:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007694:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007696:	9308      	str	r3, [sp, #32]
 8007698:	9409      	str	r4, [sp, #36]	; 0x24
 800769a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800769c:	2b00      	cmp	r3, #0
 800769e:	da00      	bge.n	80076a2 <_dtoa_r+0x4a6>
 80076a0:	e172      	b.n	8007988 <_dtoa_r+0x78c>
 80076a2:	9a02      	ldr	r2, [sp, #8]
 80076a4:	2a0e      	cmp	r2, #14
 80076a6:	dd00      	ble.n	80076aa <_dtoa_r+0x4ae>
 80076a8:	e16e      	b.n	8007988 <_dtoa_r+0x78c>
 80076aa:	4b78      	ldr	r3, [pc, #480]	; (800788c <_dtoa_r+0x690>)
 80076ac:	00d2      	lsls	r2, r2, #3
 80076ae:	189b      	adds	r3, r3, r2
 80076b0:	685c      	ldr	r4, [r3, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	930a      	str	r3, [sp, #40]	; 0x28
 80076b6:	940b      	str	r4, [sp, #44]	; 0x2c
 80076b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	db00      	blt.n	80076c0 <_dtoa_r+0x4c4>
 80076be:	e0f7      	b.n	80078b0 <_dtoa_r+0x6b4>
 80076c0:	9b07      	ldr	r3, [sp, #28]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dd00      	ble.n	80076c8 <_dtoa_r+0x4cc>
 80076c6:	e0f3      	b.n	80078b0 <_dtoa_r+0x6b4>
 80076c8:	d000      	beq.n	80076cc <_dtoa_r+0x4d0>
 80076ca:	e282      	b.n	8007bd2 <_dtoa_r+0x9d6>
 80076cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80076ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076d0:	2200      	movs	r2, #0
 80076d2:	4b74      	ldr	r3, [pc, #464]	; (80078a4 <_dtoa_r+0x6a8>)
 80076d4:	f7fa f8f6 	bl	80018c4 <__aeabi_dmul>
 80076d8:	9a08      	ldr	r2, [sp, #32]
 80076da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076dc:	f7f8 feda 	bl	8000494 <__aeabi_dcmpge>
 80076e0:	9e07      	ldr	r6, [sp, #28]
 80076e2:	0035      	movs	r5, r6
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d000      	beq.n	80076ea <_dtoa_r+0x4ee>
 80076e8:	e259      	b.n	8007b9e <_dtoa_r+0x9a2>
 80076ea:	9b06      	ldr	r3, [sp, #24]
 80076ec:	9a06      	ldr	r2, [sp, #24]
 80076ee:	3301      	adds	r3, #1
 80076f0:	9308      	str	r3, [sp, #32]
 80076f2:	2331      	movs	r3, #49	; 0x31
 80076f4:	7013      	strb	r3, [r2, #0]
 80076f6:	9b02      	ldr	r3, [sp, #8]
 80076f8:	3301      	adds	r3, #1
 80076fa:	9302      	str	r3, [sp, #8]
 80076fc:	e254      	b.n	8007ba8 <_dtoa_r+0x9ac>
 80076fe:	4234      	tst	r4, r6
 8007700:	d007      	beq.n	8007712 <_dtoa_r+0x516>
 8007702:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007704:	3301      	adds	r3, #1
 8007706:	9310      	str	r3, [sp, #64]	; 0x40
 8007708:	682a      	ldr	r2, [r5, #0]
 800770a:	686b      	ldr	r3, [r5, #4]
 800770c:	f7fa f8da 	bl	80018c4 <__aeabi_dmul>
 8007710:	0033      	movs	r3, r6
 8007712:	1064      	asrs	r4, r4, #1
 8007714:	3508      	adds	r5, #8
 8007716:	e75a      	b.n	80075ce <_dtoa_r+0x3d2>
 8007718:	9e02      	ldr	r6, [sp, #8]
 800771a:	9b07      	ldr	r3, [sp, #28]
 800771c:	e780      	b.n	8007620 <_dtoa_r+0x424>
 800771e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007720:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007722:	1e5a      	subs	r2, r3, #1
 8007724:	4b59      	ldr	r3, [pc, #356]	; (800788c <_dtoa_r+0x690>)
 8007726:	00d2      	lsls	r2, r2, #3
 8007728:	189b      	adds	r3, r3, r2
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2900      	cmp	r1, #0
 8007730:	d051      	beq.n	80077d6 <_dtoa_r+0x5da>
 8007732:	2000      	movs	r0, #0
 8007734:	495d      	ldr	r1, [pc, #372]	; (80078ac <_dtoa_r+0x6b0>)
 8007736:	f7f9 fcc3 	bl	80010c0 <__aeabi_ddiv>
 800773a:	9a08      	ldr	r2, [sp, #32]
 800773c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800773e:	f7fa fb2d 	bl	8001d9c <__aeabi_dsub>
 8007742:	9a06      	ldr	r2, [sp, #24]
 8007744:	9b06      	ldr	r3, [sp, #24]
 8007746:	4694      	mov	ip, r2
 8007748:	9317      	str	r3, [sp, #92]	; 0x5c
 800774a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800774c:	9010      	str	r0, [sp, #64]	; 0x40
 800774e:	9111      	str	r1, [sp, #68]	; 0x44
 8007750:	4463      	add	r3, ip
 8007752:	9319      	str	r3, [sp, #100]	; 0x64
 8007754:	0029      	movs	r1, r5
 8007756:	0020      	movs	r0, r4
 8007758:	f7fa fed0 	bl	80024fc <__aeabi_d2iz>
 800775c:	9014      	str	r0, [sp, #80]	; 0x50
 800775e:	f7fa ff03 	bl	8002568 <__aeabi_i2d>
 8007762:	0002      	movs	r2, r0
 8007764:	000b      	movs	r3, r1
 8007766:	0020      	movs	r0, r4
 8007768:	0029      	movs	r1, r5
 800776a:	f7fa fb17 	bl	8001d9c <__aeabi_dsub>
 800776e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007770:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007772:	3301      	adds	r3, #1
 8007774:	9308      	str	r3, [sp, #32]
 8007776:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007778:	0004      	movs	r4, r0
 800777a:	3330      	adds	r3, #48	; 0x30
 800777c:	7013      	strb	r3, [r2, #0]
 800777e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007780:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007782:	000d      	movs	r5, r1
 8007784:	f7f8 fe68 	bl	8000458 <__aeabi_dcmplt>
 8007788:	2800      	cmp	r0, #0
 800778a:	d175      	bne.n	8007878 <_dtoa_r+0x67c>
 800778c:	0022      	movs	r2, r4
 800778e:	002b      	movs	r3, r5
 8007790:	2000      	movs	r0, #0
 8007792:	4940      	ldr	r1, [pc, #256]	; (8007894 <_dtoa_r+0x698>)
 8007794:	f7fa fb02 	bl	8001d9c <__aeabi_dsub>
 8007798:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800779a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800779c:	f7f8 fe5c 	bl	8000458 <__aeabi_dcmplt>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d000      	beq.n	80077a6 <_dtoa_r+0x5aa>
 80077a4:	e0d2      	b.n	800794c <_dtoa_r+0x750>
 80077a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077a8:	9a08      	ldr	r2, [sp, #32]
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d100      	bne.n	80077b0 <_dtoa_r+0x5b4>
 80077ae:	e770      	b.n	8007692 <_dtoa_r+0x496>
 80077b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80077b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80077b4:	2200      	movs	r2, #0
 80077b6:	4b38      	ldr	r3, [pc, #224]	; (8007898 <_dtoa_r+0x69c>)
 80077b8:	f7fa f884 	bl	80018c4 <__aeabi_dmul>
 80077bc:	4b36      	ldr	r3, [pc, #216]	; (8007898 <_dtoa_r+0x69c>)
 80077be:	9010      	str	r0, [sp, #64]	; 0x40
 80077c0:	9111      	str	r1, [sp, #68]	; 0x44
 80077c2:	2200      	movs	r2, #0
 80077c4:	0020      	movs	r0, r4
 80077c6:	0029      	movs	r1, r5
 80077c8:	f7fa f87c 	bl	80018c4 <__aeabi_dmul>
 80077cc:	9b08      	ldr	r3, [sp, #32]
 80077ce:	0004      	movs	r4, r0
 80077d0:	000d      	movs	r5, r1
 80077d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80077d4:	e7be      	b.n	8007754 <_dtoa_r+0x558>
 80077d6:	9808      	ldr	r0, [sp, #32]
 80077d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077da:	f7fa f873 	bl	80018c4 <__aeabi_dmul>
 80077de:	9a06      	ldr	r2, [sp, #24]
 80077e0:	9b06      	ldr	r3, [sp, #24]
 80077e2:	4694      	mov	ip, r2
 80077e4:	9308      	str	r3, [sp, #32]
 80077e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077e8:	9010      	str	r0, [sp, #64]	; 0x40
 80077ea:	9111      	str	r1, [sp, #68]	; 0x44
 80077ec:	4463      	add	r3, ip
 80077ee:	9319      	str	r3, [sp, #100]	; 0x64
 80077f0:	0029      	movs	r1, r5
 80077f2:	0020      	movs	r0, r4
 80077f4:	f7fa fe82 	bl	80024fc <__aeabi_d2iz>
 80077f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80077fa:	f7fa feb5 	bl	8002568 <__aeabi_i2d>
 80077fe:	0002      	movs	r2, r0
 8007800:	000b      	movs	r3, r1
 8007802:	0020      	movs	r0, r4
 8007804:	0029      	movs	r1, r5
 8007806:	f7fa fac9 	bl	8001d9c <__aeabi_dsub>
 800780a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800780c:	9a08      	ldr	r2, [sp, #32]
 800780e:	3330      	adds	r3, #48	; 0x30
 8007810:	7013      	strb	r3, [r2, #0]
 8007812:	0013      	movs	r3, r2
 8007814:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007816:	3301      	adds	r3, #1
 8007818:	0004      	movs	r4, r0
 800781a:	000d      	movs	r5, r1
 800781c:	9308      	str	r3, [sp, #32]
 800781e:	4293      	cmp	r3, r2
 8007820:	d12c      	bne.n	800787c <_dtoa_r+0x680>
 8007822:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007824:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007826:	9a06      	ldr	r2, [sp, #24]
 8007828:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800782a:	4694      	mov	ip, r2
 800782c:	4463      	add	r3, ip
 800782e:	2200      	movs	r2, #0
 8007830:	9308      	str	r3, [sp, #32]
 8007832:	4b1e      	ldr	r3, [pc, #120]	; (80078ac <_dtoa_r+0x6b0>)
 8007834:	f7f9 f908 	bl	8000a48 <__aeabi_dadd>
 8007838:	0002      	movs	r2, r0
 800783a:	000b      	movs	r3, r1
 800783c:	0020      	movs	r0, r4
 800783e:	0029      	movs	r1, r5
 8007840:	f7f8 fe1e 	bl	8000480 <__aeabi_dcmpgt>
 8007844:	2800      	cmp	r0, #0
 8007846:	d000      	beq.n	800784a <_dtoa_r+0x64e>
 8007848:	e080      	b.n	800794c <_dtoa_r+0x750>
 800784a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800784c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800784e:	2000      	movs	r0, #0
 8007850:	4916      	ldr	r1, [pc, #88]	; (80078ac <_dtoa_r+0x6b0>)
 8007852:	f7fa faa3 	bl	8001d9c <__aeabi_dsub>
 8007856:	0002      	movs	r2, r0
 8007858:	000b      	movs	r3, r1
 800785a:	0020      	movs	r0, r4
 800785c:	0029      	movs	r1, r5
 800785e:	f7f8 fdfb 	bl	8000458 <__aeabi_dcmplt>
 8007862:	2800      	cmp	r0, #0
 8007864:	d100      	bne.n	8007868 <_dtoa_r+0x66c>
 8007866:	e714      	b.n	8007692 <_dtoa_r+0x496>
 8007868:	9b08      	ldr	r3, [sp, #32]
 800786a:	001a      	movs	r2, r3
 800786c:	3a01      	subs	r2, #1
 800786e:	9208      	str	r2, [sp, #32]
 8007870:	7812      	ldrb	r2, [r2, #0]
 8007872:	2a30      	cmp	r2, #48	; 0x30
 8007874:	d0f8      	beq.n	8007868 <_dtoa_r+0x66c>
 8007876:	9308      	str	r3, [sp, #32]
 8007878:	9602      	str	r6, [sp, #8]
 800787a:	e055      	b.n	8007928 <_dtoa_r+0x72c>
 800787c:	2200      	movs	r2, #0
 800787e:	4b06      	ldr	r3, [pc, #24]	; (8007898 <_dtoa_r+0x69c>)
 8007880:	f7fa f820 	bl	80018c4 <__aeabi_dmul>
 8007884:	0004      	movs	r4, r0
 8007886:	000d      	movs	r5, r1
 8007888:	e7b2      	b.n	80077f0 <_dtoa_r+0x5f4>
 800788a:	46c0      	nop			; (mov r8, r8)
 800788c:	08009938 	.word	0x08009938
 8007890:	08009910 	.word	0x08009910
 8007894:	3ff00000 	.word	0x3ff00000
 8007898:	40240000 	.word	0x40240000
 800789c:	401c0000 	.word	0x401c0000
 80078a0:	fcc00000 	.word	0xfcc00000
 80078a4:	40140000 	.word	0x40140000
 80078a8:	7cc00000 	.word	0x7cc00000
 80078ac:	3fe00000 	.word	0x3fe00000
 80078b0:	9b07      	ldr	r3, [sp, #28]
 80078b2:	9e06      	ldr	r6, [sp, #24]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	199b      	adds	r3, r3, r6
 80078b8:	930c      	str	r3, [sp, #48]	; 0x30
 80078ba:	9c08      	ldr	r4, [sp, #32]
 80078bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80078be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078c2:	0020      	movs	r0, r4
 80078c4:	0029      	movs	r1, r5
 80078c6:	f7f9 fbfb 	bl	80010c0 <__aeabi_ddiv>
 80078ca:	f7fa fe17 	bl	80024fc <__aeabi_d2iz>
 80078ce:	9007      	str	r0, [sp, #28]
 80078d0:	f7fa fe4a 	bl	8002568 <__aeabi_i2d>
 80078d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078d8:	f7f9 fff4 	bl	80018c4 <__aeabi_dmul>
 80078dc:	0002      	movs	r2, r0
 80078de:	000b      	movs	r3, r1
 80078e0:	0020      	movs	r0, r4
 80078e2:	0029      	movs	r1, r5
 80078e4:	f7fa fa5a 	bl	8001d9c <__aeabi_dsub>
 80078e8:	0033      	movs	r3, r6
 80078ea:	9a07      	ldr	r2, [sp, #28]
 80078ec:	3601      	adds	r6, #1
 80078ee:	3230      	adds	r2, #48	; 0x30
 80078f0:	701a      	strb	r2, [r3, #0]
 80078f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078f4:	9608      	str	r6, [sp, #32]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d139      	bne.n	800796e <_dtoa_r+0x772>
 80078fa:	0002      	movs	r2, r0
 80078fc:	000b      	movs	r3, r1
 80078fe:	f7f9 f8a3 	bl	8000a48 <__aeabi_dadd>
 8007902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007906:	0004      	movs	r4, r0
 8007908:	000d      	movs	r5, r1
 800790a:	f7f8 fdb9 	bl	8000480 <__aeabi_dcmpgt>
 800790e:	2800      	cmp	r0, #0
 8007910:	d11b      	bne.n	800794a <_dtoa_r+0x74e>
 8007912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007916:	0020      	movs	r0, r4
 8007918:	0029      	movs	r1, r5
 800791a:	f7f8 fd97 	bl	800044c <__aeabi_dcmpeq>
 800791e:	2800      	cmp	r0, #0
 8007920:	d002      	beq.n	8007928 <_dtoa_r+0x72c>
 8007922:	9b07      	ldr	r3, [sp, #28]
 8007924:	07db      	lsls	r3, r3, #31
 8007926:	d410      	bmi.n	800794a <_dtoa_r+0x74e>
 8007928:	0038      	movs	r0, r7
 800792a:	9905      	ldr	r1, [sp, #20]
 800792c:	f000 fae6 	bl	8007efc <_Bfree>
 8007930:	2300      	movs	r3, #0
 8007932:	9a08      	ldr	r2, [sp, #32]
 8007934:	9802      	ldr	r0, [sp, #8]
 8007936:	7013      	strb	r3, [r2, #0]
 8007938:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800793a:	3001      	adds	r0, #1
 800793c:	6018      	str	r0, [r3, #0]
 800793e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007940:	2b00      	cmp	r3, #0
 8007942:	d100      	bne.n	8007946 <_dtoa_r+0x74a>
 8007944:	e4a6      	b.n	8007294 <_dtoa_r+0x98>
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	e4a4      	b.n	8007294 <_dtoa_r+0x98>
 800794a:	9e02      	ldr	r6, [sp, #8]
 800794c:	9b08      	ldr	r3, [sp, #32]
 800794e:	9308      	str	r3, [sp, #32]
 8007950:	3b01      	subs	r3, #1
 8007952:	781a      	ldrb	r2, [r3, #0]
 8007954:	2a39      	cmp	r2, #57	; 0x39
 8007956:	d106      	bne.n	8007966 <_dtoa_r+0x76a>
 8007958:	9a06      	ldr	r2, [sp, #24]
 800795a:	429a      	cmp	r2, r3
 800795c:	d1f7      	bne.n	800794e <_dtoa_r+0x752>
 800795e:	2230      	movs	r2, #48	; 0x30
 8007960:	9906      	ldr	r1, [sp, #24]
 8007962:	3601      	adds	r6, #1
 8007964:	700a      	strb	r2, [r1, #0]
 8007966:	781a      	ldrb	r2, [r3, #0]
 8007968:	3201      	adds	r2, #1
 800796a:	701a      	strb	r2, [r3, #0]
 800796c:	e784      	b.n	8007878 <_dtoa_r+0x67c>
 800796e:	2200      	movs	r2, #0
 8007970:	4baa      	ldr	r3, [pc, #680]	; (8007c1c <_dtoa_r+0xa20>)
 8007972:	f7f9 ffa7 	bl	80018c4 <__aeabi_dmul>
 8007976:	2200      	movs	r2, #0
 8007978:	2300      	movs	r3, #0
 800797a:	0004      	movs	r4, r0
 800797c:	000d      	movs	r5, r1
 800797e:	f7f8 fd65 	bl	800044c <__aeabi_dcmpeq>
 8007982:	2800      	cmp	r0, #0
 8007984:	d09b      	beq.n	80078be <_dtoa_r+0x6c2>
 8007986:	e7cf      	b.n	8007928 <_dtoa_r+0x72c>
 8007988:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800798a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800798c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800798e:	2d00      	cmp	r5, #0
 8007990:	d012      	beq.n	80079b8 <_dtoa_r+0x7bc>
 8007992:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007994:	2a01      	cmp	r2, #1
 8007996:	dc66      	bgt.n	8007a66 <_dtoa_r+0x86a>
 8007998:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800799a:	2a00      	cmp	r2, #0
 800799c:	d05d      	beq.n	8007a5a <_dtoa_r+0x85e>
 800799e:	4aa0      	ldr	r2, [pc, #640]	; (8007c20 <_dtoa_r+0xa24>)
 80079a0:	189b      	adds	r3, r3, r2
 80079a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079a4:	2101      	movs	r1, #1
 80079a6:	18d2      	adds	r2, r2, r3
 80079a8:	920a      	str	r2, [sp, #40]	; 0x28
 80079aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079ac:	0038      	movs	r0, r7
 80079ae:	18d3      	adds	r3, r2, r3
 80079b0:	930d      	str	r3, [sp, #52]	; 0x34
 80079b2:	f000 fb53 	bl	800805c <__i2b>
 80079b6:	0005      	movs	r5, r0
 80079b8:	2c00      	cmp	r4, #0
 80079ba:	dd0e      	ble.n	80079da <_dtoa_r+0x7de>
 80079bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079be:	2b00      	cmp	r3, #0
 80079c0:	dd0b      	ble.n	80079da <_dtoa_r+0x7de>
 80079c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079c4:	0023      	movs	r3, r4
 80079c6:	4294      	cmp	r4, r2
 80079c8:	dd00      	ble.n	80079cc <_dtoa_r+0x7d0>
 80079ca:	0013      	movs	r3, r2
 80079cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ce:	1ae4      	subs	r4, r4, r3
 80079d0:	1ad2      	subs	r2, r2, r3
 80079d2:	920a      	str	r2, [sp, #40]	; 0x28
 80079d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	930d      	str	r3, [sp, #52]	; 0x34
 80079da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01f      	beq.n	8007a20 <_dtoa_r+0x824>
 80079e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d054      	beq.n	8007a90 <_dtoa_r+0x894>
 80079e6:	2e00      	cmp	r6, #0
 80079e8:	dd11      	ble.n	8007a0e <_dtoa_r+0x812>
 80079ea:	0029      	movs	r1, r5
 80079ec:	0032      	movs	r2, r6
 80079ee:	0038      	movs	r0, r7
 80079f0:	f000 fbfa 	bl	80081e8 <__pow5mult>
 80079f4:	9a05      	ldr	r2, [sp, #20]
 80079f6:	0001      	movs	r1, r0
 80079f8:	0005      	movs	r5, r0
 80079fa:	0038      	movs	r0, r7
 80079fc:	f000 fb44 	bl	8008088 <__multiply>
 8007a00:	9905      	ldr	r1, [sp, #20]
 8007a02:	9014      	str	r0, [sp, #80]	; 0x50
 8007a04:	0038      	movs	r0, r7
 8007a06:	f000 fa79 	bl	8007efc <_Bfree>
 8007a0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a0c:	9305      	str	r3, [sp, #20]
 8007a0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a10:	1b9a      	subs	r2, r3, r6
 8007a12:	42b3      	cmp	r3, r6
 8007a14:	d004      	beq.n	8007a20 <_dtoa_r+0x824>
 8007a16:	0038      	movs	r0, r7
 8007a18:	9905      	ldr	r1, [sp, #20]
 8007a1a:	f000 fbe5 	bl	80081e8 <__pow5mult>
 8007a1e:	9005      	str	r0, [sp, #20]
 8007a20:	2101      	movs	r1, #1
 8007a22:	0038      	movs	r0, r7
 8007a24:	f000 fb1a 	bl	800805c <__i2b>
 8007a28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a2a:	0006      	movs	r6, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	dd31      	ble.n	8007a94 <_dtoa_r+0x898>
 8007a30:	001a      	movs	r2, r3
 8007a32:	0001      	movs	r1, r0
 8007a34:	0038      	movs	r0, r7
 8007a36:	f000 fbd7 	bl	80081e8 <__pow5mult>
 8007a3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a3c:	0006      	movs	r6, r0
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	dd2d      	ble.n	8007a9e <_dtoa_r+0x8a2>
 8007a42:	2300      	movs	r3, #0
 8007a44:	930e      	str	r3, [sp, #56]	; 0x38
 8007a46:	6933      	ldr	r3, [r6, #16]
 8007a48:	3303      	adds	r3, #3
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	18f3      	adds	r3, r6, r3
 8007a4e:	6858      	ldr	r0, [r3, #4]
 8007a50:	f000 fabc 	bl	8007fcc <__hi0bits>
 8007a54:	2320      	movs	r3, #32
 8007a56:	1a18      	subs	r0, r3, r0
 8007a58:	e039      	b.n	8007ace <_dtoa_r+0x8d2>
 8007a5a:	2336      	movs	r3, #54	; 0x36
 8007a5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a5e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007a60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a62:	1a9b      	subs	r3, r3, r2
 8007a64:	e79d      	b.n	80079a2 <_dtoa_r+0x7a6>
 8007a66:	9b07      	ldr	r3, [sp, #28]
 8007a68:	1e5e      	subs	r6, r3, #1
 8007a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a6c:	42b3      	cmp	r3, r6
 8007a6e:	db07      	blt.n	8007a80 <_dtoa_r+0x884>
 8007a70:	1b9e      	subs	r6, r3, r6
 8007a72:	9b07      	ldr	r3, [sp, #28]
 8007a74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	da93      	bge.n	80079a2 <_dtoa_r+0x7a6>
 8007a7a:	1ae4      	subs	r4, r4, r3
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	e790      	b.n	80079a2 <_dtoa_r+0x7a6>
 8007a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007a84:	1af3      	subs	r3, r6, r3
 8007a86:	18d3      	adds	r3, r2, r3
 8007a88:	960e      	str	r6, [sp, #56]	; 0x38
 8007a8a:	9315      	str	r3, [sp, #84]	; 0x54
 8007a8c:	2600      	movs	r6, #0
 8007a8e:	e7f0      	b.n	8007a72 <_dtoa_r+0x876>
 8007a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a92:	e7c0      	b.n	8007a16 <_dtoa_r+0x81a>
 8007a94:	2300      	movs	r3, #0
 8007a96:	930e      	str	r3, [sp, #56]	; 0x38
 8007a98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	dc13      	bgt.n	8007ac6 <_dtoa_r+0x8ca>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	930e      	str	r3, [sp, #56]	; 0x38
 8007aa2:	9b08      	ldr	r3, [sp, #32]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10e      	bne.n	8007ac6 <_dtoa_r+0x8ca>
 8007aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aaa:	031b      	lsls	r3, r3, #12
 8007aac:	d10b      	bne.n	8007ac6 <_dtoa_r+0x8ca>
 8007aae:	4b5d      	ldr	r3, [pc, #372]	; (8007c24 <_dtoa_r+0xa28>)
 8007ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab2:	4213      	tst	r3, r2
 8007ab4:	d007      	beq.n	8007ac6 <_dtoa_r+0x8ca>
 8007ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab8:	3301      	adds	r3, #1
 8007aba:	930a      	str	r3, [sp, #40]	; 0x28
 8007abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007abe:	3301      	adds	r3, #1
 8007ac0:	930d      	str	r3, [sp, #52]	; 0x34
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ac8:	2001      	movs	r0, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1bb      	bne.n	8007a46 <_dtoa_r+0x84a>
 8007ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ad0:	221f      	movs	r2, #31
 8007ad2:	1818      	adds	r0, r3, r0
 8007ad4:	0003      	movs	r3, r0
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	4210      	tst	r0, r2
 8007ada:	d046      	beq.n	8007b6a <_dtoa_r+0x96e>
 8007adc:	3201      	adds	r2, #1
 8007ade:	1ad2      	subs	r2, r2, r3
 8007ae0:	2a04      	cmp	r2, #4
 8007ae2:	dd3f      	ble.n	8007b64 <_dtoa_r+0x968>
 8007ae4:	221c      	movs	r2, #28
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aea:	18e4      	adds	r4, r4, r3
 8007aec:	18d2      	adds	r2, r2, r3
 8007aee:	920a      	str	r2, [sp, #40]	; 0x28
 8007af0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007af2:	18d3      	adds	r3, r2, r3
 8007af4:	930d      	str	r3, [sp, #52]	; 0x34
 8007af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	dd05      	ble.n	8007b08 <_dtoa_r+0x90c>
 8007afc:	001a      	movs	r2, r3
 8007afe:	0038      	movs	r0, r7
 8007b00:	9905      	ldr	r1, [sp, #20]
 8007b02:	f000 fbcd 	bl	80082a0 <__lshift>
 8007b06:	9005      	str	r0, [sp, #20]
 8007b08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	dd05      	ble.n	8007b1a <_dtoa_r+0x91e>
 8007b0e:	0031      	movs	r1, r6
 8007b10:	001a      	movs	r2, r3
 8007b12:	0038      	movs	r0, r7
 8007b14:	f000 fbc4 	bl	80082a0 <__lshift>
 8007b18:	0006      	movs	r6, r0
 8007b1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d026      	beq.n	8007b6e <_dtoa_r+0x972>
 8007b20:	0031      	movs	r1, r6
 8007b22:	9805      	ldr	r0, [sp, #20]
 8007b24:	f000 fc2a 	bl	800837c <__mcmp>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	da20      	bge.n	8007b6e <_dtoa_r+0x972>
 8007b2c:	9b02      	ldr	r3, [sp, #8]
 8007b2e:	220a      	movs	r2, #10
 8007b30:	3b01      	subs	r3, #1
 8007b32:	9302      	str	r3, [sp, #8]
 8007b34:	0038      	movs	r0, r7
 8007b36:	2300      	movs	r3, #0
 8007b38:	9905      	ldr	r1, [sp, #20]
 8007b3a:	f000 fa03 	bl	8007f44 <__multadd>
 8007b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b40:	9005      	str	r0, [sp, #20]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d100      	bne.n	8007b48 <_dtoa_r+0x94c>
 8007b46:	e166      	b.n	8007e16 <_dtoa_r+0xc1a>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	0029      	movs	r1, r5
 8007b4c:	220a      	movs	r2, #10
 8007b4e:	0038      	movs	r0, r7
 8007b50:	f000 f9f8 	bl	8007f44 <__multadd>
 8007b54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b56:	0005      	movs	r5, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	dc47      	bgt.n	8007bec <_dtoa_r+0x9f0>
 8007b5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	dc0d      	bgt.n	8007b7e <_dtoa_r+0x982>
 8007b62:	e043      	b.n	8007bec <_dtoa_r+0x9f0>
 8007b64:	2a04      	cmp	r2, #4
 8007b66:	d0c6      	beq.n	8007af6 <_dtoa_r+0x8fa>
 8007b68:	0013      	movs	r3, r2
 8007b6a:	331c      	adds	r3, #28
 8007b6c:	e7bc      	b.n	8007ae8 <_dtoa_r+0x8ec>
 8007b6e:	9b07      	ldr	r3, [sp, #28]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	dc35      	bgt.n	8007be0 <_dtoa_r+0x9e4>
 8007b74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	dd32      	ble.n	8007be0 <_dtoa_r+0x9e4>
 8007b7a:	9b07      	ldr	r3, [sp, #28]
 8007b7c:	930c      	str	r3, [sp, #48]	; 0x30
 8007b7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10c      	bne.n	8007b9e <_dtoa_r+0x9a2>
 8007b84:	0031      	movs	r1, r6
 8007b86:	2205      	movs	r2, #5
 8007b88:	0038      	movs	r0, r7
 8007b8a:	f000 f9db 	bl	8007f44 <__multadd>
 8007b8e:	0006      	movs	r6, r0
 8007b90:	0001      	movs	r1, r0
 8007b92:	9805      	ldr	r0, [sp, #20]
 8007b94:	f000 fbf2 	bl	800837c <__mcmp>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	dd00      	ble.n	8007b9e <_dtoa_r+0x9a2>
 8007b9c:	e5a5      	b.n	80076ea <_dtoa_r+0x4ee>
 8007b9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ba0:	43db      	mvns	r3, r3
 8007ba2:	9302      	str	r3, [sp, #8]
 8007ba4:	9b06      	ldr	r3, [sp, #24]
 8007ba6:	9308      	str	r3, [sp, #32]
 8007ba8:	2400      	movs	r4, #0
 8007baa:	0031      	movs	r1, r6
 8007bac:	0038      	movs	r0, r7
 8007bae:	f000 f9a5 	bl	8007efc <_Bfree>
 8007bb2:	2d00      	cmp	r5, #0
 8007bb4:	d100      	bne.n	8007bb8 <_dtoa_r+0x9bc>
 8007bb6:	e6b7      	b.n	8007928 <_dtoa_r+0x72c>
 8007bb8:	2c00      	cmp	r4, #0
 8007bba:	d005      	beq.n	8007bc8 <_dtoa_r+0x9cc>
 8007bbc:	42ac      	cmp	r4, r5
 8007bbe:	d003      	beq.n	8007bc8 <_dtoa_r+0x9cc>
 8007bc0:	0021      	movs	r1, r4
 8007bc2:	0038      	movs	r0, r7
 8007bc4:	f000 f99a 	bl	8007efc <_Bfree>
 8007bc8:	0029      	movs	r1, r5
 8007bca:	0038      	movs	r0, r7
 8007bcc:	f000 f996 	bl	8007efc <_Bfree>
 8007bd0:	e6aa      	b.n	8007928 <_dtoa_r+0x72c>
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	0035      	movs	r5, r6
 8007bd6:	e7e2      	b.n	8007b9e <_dtoa_r+0x9a2>
 8007bd8:	9602      	str	r6, [sp, #8]
 8007bda:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007bdc:	0035      	movs	r5, r6
 8007bde:	e584      	b.n	80076ea <_dtoa_r+0x4ee>
 8007be0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d100      	bne.n	8007be8 <_dtoa_r+0x9ec>
 8007be6:	e0ce      	b.n	8007d86 <_dtoa_r+0xb8a>
 8007be8:	9b07      	ldr	r3, [sp, #28]
 8007bea:	930c      	str	r3, [sp, #48]	; 0x30
 8007bec:	2c00      	cmp	r4, #0
 8007bee:	dd05      	ble.n	8007bfc <_dtoa_r+0xa00>
 8007bf0:	0029      	movs	r1, r5
 8007bf2:	0022      	movs	r2, r4
 8007bf4:	0038      	movs	r0, r7
 8007bf6:	f000 fb53 	bl	80082a0 <__lshift>
 8007bfa:	0005      	movs	r5, r0
 8007bfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bfe:	0028      	movs	r0, r5
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d022      	beq.n	8007c4a <_dtoa_r+0xa4e>
 8007c04:	0038      	movs	r0, r7
 8007c06:	6869      	ldr	r1, [r5, #4]
 8007c08:	f000 f934 	bl	8007e74 <_Balloc>
 8007c0c:	1e04      	subs	r4, r0, #0
 8007c0e:	d10f      	bne.n	8007c30 <_dtoa_r+0xa34>
 8007c10:	0002      	movs	r2, r0
 8007c12:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <_dtoa_r+0xa2c>)
 8007c14:	4905      	ldr	r1, [pc, #20]	; (8007c2c <_dtoa_r+0xa30>)
 8007c16:	f7ff fb06 	bl	8007226 <_dtoa_r+0x2a>
 8007c1a:	46c0      	nop			; (mov r8, r8)
 8007c1c:	40240000 	.word	0x40240000
 8007c20:	00000433 	.word	0x00000433
 8007c24:	7ff00000 	.word	0x7ff00000
 8007c28:	080098a3 	.word	0x080098a3
 8007c2c:	000002ea 	.word	0x000002ea
 8007c30:	0029      	movs	r1, r5
 8007c32:	692b      	ldr	r3, [r5, #16]
 8007c34:	310c      	adds	r1, #12
 8007c36:	1c9a      	adds	r2, r3, #2
 8007c38:	0092      	lsls	r2, r2, #2
 8007c3a:	300c      	adds	r0, #12
 8007c3c:	f000 f911 	bl	8007e62 <memcpy>
 8007c40:	2201      	movs	r2, #1
 8007c42:	0021      	movs	r1, r4
 8007c44:	0038      	movs	r0, r7
 8007c46:	f000 fb2b 	bl	80082a0 <__lshift>
 8007c4a:	9b06      	ldr	r3, [sp, #24]
 8007c4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c50:	3b01      	subs	r3, #1
 8007c52:	189b      	adds	r3, r3, r2
 8007c54:	2201      	movs	r2, #1
 8007c56:	002c      	movs	r4, r5
 8007c58:	0005      	movs	r5, r0
 8007c5a:	9314      	str	r3, [sp, #80]	; 0x50
 8007c5c:	9b08      	ldr	r3, [sp, #32]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c62:	0031      	movs	r1, r6
 8007c64:	9805      	ldr	r0, [sp, #20]
 8007c66:	f7ff fa3d 	bl	80070e4 <quorem>
 8007c6a:	0003      	movs	r3, r0
 8007c6c:	0021      	movs	r1, r4
 8007c6e:	3330      	adds	r3, #48	; 0x30
 8007c70:	900d      	str	r0, [sp, #52]	; 0x34
 8007c72:	9805      	ldr	r0, [sp, #20]
 8007c74:	9307      	str	r3, [sp, #28]
 8007c76:	f000 fb81 	bl	800837c <__mcmp>
 8007c7a:	002a      	movs	r2, r5
 8007c7c:	900e      	str	r0, [sp, #56]	; 0x38
 8007c7e:	0031      	movs	r1, r6
 8007c80:	0038      	movs	r0, r7
 8007c82:	f000 fb97 	bl	80083b4 <__mdiff>
 8007c86:	68c3      	ldr	r3, [r0, #12]
 8007c88:	9008      	str	r0, [sp, #32]
 8007c8a:	9310      	str	r3, [sp, #64]	; 0x40
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	930c      	str	r3, [sp, #48]	; 0x30
 8007c90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d104      	bne.n	8007ca0 <_dtoa_r+0xaa4>
 8007c96:	0001      	movs	r1, r0
 8007c98:	9805      	ldr	r0, [sp, #20]
 8007c9a:	f000 fb6f 	bl	800837c <__mcmp>
 8007c9e:	900c      	str	r0, [sp, #48]	; 0x30
 8007ca0:	0038      	movs	r0, r7
 8007ca2:	9908      	ldr	r1, [sp, #32]
 8007ca4:	f000 f92a 	bl	8007efc <_Bfree>
 8007ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007caa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cac:	3301      	adds	r3, #1
 8007cae:	9308      	str	r3, [sp, #32]
 8007cb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	d10c      	bne.n	8007cd4 <_dtoa_r+0xad8>
 8007cba:	9b07      	ldr	r3, [sp, #28]
 8007cbc:	2b39      	cmp	r3, #57	; 0x39
 8007cbe:	d026      	beq.n	8007d0e <_dtoa_r+0xb12>
 8007cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dd02      	ble.n	8007ccc <_dtoa_r+0xad0>
 8007cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cc8:	3331      	adds	r3, #49	; 0x31
 8007cca:	9307      	str	r3, [sp, #28]
 8007ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cce:	9a07      	ldr	r2, [sp, #28]
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	e76a      	b.n	8007baa <_dtoa_r+0x9ae>
 8007cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	db04      	blt.n	8007ce4 <_dtoa_r+0xae8>
 8007cda:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	d11f      	bne.n	8007d24 <_dtoa_r+0xb28>
 8007ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	ddf0      	ble.n	8007ccc <_dtoa_r+0xad0>
 8007cea:	9905      	ldr	r1, [sp, #20]
 8007cec:	2201      	movs	r2, #1
 8007cee:	0038      	movs	r0, r7
 8007cf0:	f000 fad6 	bl	80082a0 <__lshift>
 8007cf4:	0031      	movs	r1, r6
 8007cf6:	9005      	str	r0, [sp, #20]
 8007cf8:	f000 fb40 	bl	800837c <__mcmp>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	dc03      	bgt.n	8007d08 <_dtoa_r+0xb0c>
 8007d00:	d1e4      	bne.n	8007ccc <_dtoa_r+0xad0>
 8007d02:	9b07      	ldr	r3, [sp, #28]
 8007d04:	07db      	lsls	r3, r3, #31
 8007d06:	d5e1      	bpl.n	8007ccc <_dtoa_r+0xad0>
 8007d08:	9b07      	ldr	r3, [sp, #28]
 8007d0a:	2b39      	cmp	r3, #57	; 0x39
 8007d0c:	d1db      	bne.n	8007cc6 <_dtoa_r+0xaca>
 8007d0e:	2339      	movs	r3, #57	; 0x39
 8007d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d12:	7013      	strb	r3, [r2, #0]
 8007d14:	9b08      	ldr	r3, [sp, #32]
 8007d16:	9308      	str	r3, [sp, #32]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	781a      	ldrb	r2, [r3, #0]
 8007d1c:	2a39      	cmp	r2, #57	; 0x39
 8007d1e:	d068      	beq.n	8007df2 <_dtoa_r+0xbf6>
 8007d20:	3201      	adds	r2, #1
 8007d22:	e7d5      	b.n	8007cd0 <_dtoa_r+0xad4>
 8007d24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	dd07      	ble.n	8007d3a <_dtoa_r+0xb3e>
 8007d2a:	9b07      	ldr	r3, [sp, #28]
 8007d2c:	2b39      	cmp	r3, #57	; 0x39
 8007d2e:	d0ee      	beq.n	8007d0e <_dtoa_r+0xb12>
 8007d30:	9b07      	ldr	r3, [sp, #28]
 8007d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d34:	3301      	adds	r3, #1
 8007d36:	7013      	strb	r3, [r2, #0]
 8007d38:	e737      	b.n	8007baa <_dtoa_r+0x9ae>
 8007d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3c:	9a07      	ldr	r2, [sp, #28]
 8007d3e:	701a      	strb	r2, [r3, #0]
 8007d40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d03e      	beq.n	8007dc6 <_dtoa_r+0xbca>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	220a      	movs	r2, #10
 8007d4c:	9905      	ldr	r1, [sp, #20]
 8007d4e:	0038      	movs	r0, r7
 8007d50:	f000 f8f8 	bl	8007f44 <__multadd>
 8007d54:	2300      	movs	r3, #0
 8007d56:	9005      	str	r0, [sp, #20]
 8007d58:	220a      	movs	r2, #10
 8007d5a:	0021      	movs	r1, r4
 8007d5c:	0038      	movs	r0, r7
 8007d5e:	42ac      	cmp	r4, r5
 8007d60:	d106      	bne.n	8007d70 <_dtoa_r+0xb74>
 8007d62:	f000 f8ef 	bl	8007f44 <__multadd>
 8007d66:	0004      	movs	r4, r0
 8007d68:	0005      	movs	r5, r0
 8007d6a:	9b08      	ldr	r3, [sp, #32]
 8007d6c:	930a      	str	r3, [sp, #40]	; 0x28
 8007d6e:	e778      	b.n	8007c62 <_dtoa_r+0xa66>
 8007d70:	f000 f8e8 	bl	8007f44 <__multadd>
 8007d74:	0029      	movs	r1, r5
 8007d76:	0004      	movs	r4, r0
 8007d78:	2300      	movs	r3, #0
 8007d7a:	220a      	movs	r2, #10
 8007d7c:	0038      	movs	r0, r7
 8007d7e:	f000 f8e1 	bl	8007f44 <__multadd>
 8007d82:	0005      	movs	r5, r0
 8007d84:	e7f1      	b.n	8007d6a <_dtoa_r+0xb6e>
 8007d86:	9b07      	ldr	r3, [sp, #28]
 8007d88:	930c      	str	r3, [sp, #48]	; 0x30
 8007d8a:	2400      	movs	r4, #0
 8007d8c:	0031      	movs	r1, r6
 8007d8e:	9805      	ldr	r0, [sp, #20]
 8007d90:	f7ff f9a8 	bl	80070e4 <quorem>
 8007d94:	9b06      	ldr	r3, [sp, #24]
 8007d96:	3030      	adds	r0, #48	; 0x30
 8007d98:	5518      	strb	r0, [r3, r4]
 8007d9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d9c:	3401      	adds	r4, #1
 8007d9e:	9007      	str	r0, [sp, #28]
 8007da0:	42a3      	cmp	r3, r4
 8007da2:	dd07      	ble.n	8007db4 <_dtoa_r+0xbb8>
 8007da4:	2300      	movs	r3, #0
 8007da6:	220a      	movs	r2, #10
 8007da8:	0038      	movs	r0, r7
 8007daa:	9905      	ldr	r1, [sp, #20]
 8007dac:	f000 f8ca 	bl	8007f44 <__multadd>
 8007db0:	9005      	str	r0, [sp, #20]
 8007db2:	e7eb      	b.n	8007d8c <_dtoa_r+0xb90>
 8007db4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007db6:	2001      	movs	r0, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	dd00      	ble.n	8007dbe <_dtoa_r+0xbc2>
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	2400      	movs	r4, #0
 8007dc0:	9b06      	ldr	r3, [sp, #24]
 8007dc2:	181b      	adds	r3, r3, r0
 8007dc4:	9308      	str	r3, [sp, #32]
 8007dc6:	9905      	ldr	r1, [sp, #20]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	0038      	movs	r0, r7
 8007dcc:	f000 fa68 	bl	80082a0 <__lshift>
 8007dd0:	0031      	movs	r1, r6
 8007dd2:	9005      	str	r0, [sp, #20]
 8007dd4:	f000 fad2 	bl	800837c <__mcmp>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	dc9b      	bgt.n	8007d14 <_dtoa_r+0xb18>
 8007ddc:	d102      	bne.n	8007de4 <_dtoa_r+0xbe8>
 8007dde:	9b07      	ldr	r3, [sp, #28]
 8007de0:	07db      	lsls	r3, r3, #31
 8007de2:	d497      	bmi.n	8007d14 <_dtoa_r+0xb18>
 8007de4:	9b08      	ldr	r3, [sp, #32]
 8007de6:	9308      	str	r3, [sp, #32]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	781a      	ldrb	r2, [r3, #0]
 8007dec:	2a30      	cmp	r2, #48	; 0x30
 8007dee:	d0fa      	beq.n	8007de6 <_dtoa_r+0xbea>
 8007df0:	e6db      	b.n	8007baa <_dtoa_r+0x9ae>
 8007df2:	9a06      	ldr	r2, [sp, #24]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d18e      	bne.n	8007d16 <_dtoa_r+0xb1a>
 8007df8:	9b02      	ldr	r3, [sp, #8]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	9302      	str	r3, [sp, #8]
 8007dfe:	2331      	movs	r3, #49	; 0x31
 8007e00:	e799      	b.n	8007d36 <_dtoa_r+0xb3a>
 8007e02:	4b09      	ldr	r3, [pc, #36]	; (8007e28 <_dtoa_r+0xc2c>)
 8007e04:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007e06:	9306      	str	r3, [sp, #24]
 8007e08:	4b08      	ldr	r3, [pc, #32]	; (8007e2c <_dtoa_r+0xc30>)
 8007e0a:	2a00      	cmp	r2, #0
 8007e0c:	d001      	beq.n	8007e12 <_dtoa_r+0xc16>
 8007e0e:	f7ff fa3f 	bl	8007290 <_dtoa_r+0x94>
 8007e12:	f7ff fa3f 	bl	8007294 <_dtoa_r+0x98>
 8007e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	dcb6      	bgt.n	8007d8a <_dtoa_r+0xb8e>
 8007e1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	dd00      	ble.n	8007e24 <_dtoa_r+0xc28>
 8007e22:	e6ac      	b.n	8007b7e <_dtoa_r+0x982>
 8007e24:	e7b1      	b.n	8007d8a <_dtoa_r+0xb8e>
 8007e26:	46c0      	nop			; (mov r8, r8)
 8007e28:	08009824 	.word	0x08009824
 8007e2c:	0800982c 	.word	0x0800982c

08007e30 <_localeconv_r>:
 8007e30:	4800      	ldr	r0, [pc, #0]	; (8007e34 <_localeconv_r+0x4>)
 8007e32:	4770      	bx	lr
 8007e34:	20000198 	.word	0x20000198

08007e38 <malloc>:
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	4b03      	ldr	r3, [pc, #12]	; (8007e48 <malloc+0x10>)
 8007e3c:	0001      	movs	r1, r0
 8007e3e:	6818      	ldr	r0, [r3, #0]
 8007e40:	f000 fc4c 	bl	80086dc <_malloc_r>
 8007e44:	bd10      	pop	{r4, pc}
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	20000044 	.word	0x20000044

08007e4c <memchr>:
 8007e4c:	b2c9      	uxtb	r1, r1
 8007e4e:	1882      	adds	r2, r0, r2
 8007e50:	4290      	cmp	r0, r2
 8007e52:	d101      	bne.n	8007e58 <memchr+0xc>
 8007e54:	2000      	movs	r0, #0
 8007e56:	4770      	bx	lr
 8007e58:	7803      	ldrb	r3, [r0, #0]
 8007e5a:	428b      	cmp	r3, r1
 8007e5c:	d0fb      	beq.n	8007e56 <memchr+0xa>
 8007e5e:	3001      	adds	r0, #1
 8007e60:	e7f6      	b.n	8007e50 <memchr+0x4>

08007e62 <memcpy>:
 8007e62:	2300      	movs	r3, #0
 8007e64:	b510      	push	{r4, lr}
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d100      	bne.n	8007e6c <memcpy+0xa>
 8007e6a:	bd10      	pop	{r4, pc}
 8007e6c:	5ccc      	ldrb	r4, [r1, r3]
 8007e6e:	54c4      	strb	r4, [r0, r3]
 8007e70:	3301      	adds	r3, #1
 8007e72:	e7f8      	b.n	8007e66 <memcpy+0x4>

08007e74 <_Balloc>:
 8007e74:	b570      	push	{r4, r5, r6, lr}
 8007e76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e78:	0006      	movs	r6, r0
 8007e7a:	000c      	movs	r4, r1
 8007e7c:	2d00      	cmp	r5, #0
 8007e7e:	d10e      	bne.n	8007e9e <_Balloc+0x2a>
 8007e80:	2010      	movs	r0, #16
 8007e82:	f7ff ffd9 	bl	8007e38 <malloc>
 8007e86:	1e02      	subs	r2, r0, #0
 8007e88:	6270      	str	r0, [r6, #36]	; 0x24
 8007e8a:	d104      	bne.n	8007e96 <_Balloc+0x22>
 8007e8c:	2166      	movs	r1, #102	; 0x66
 8007e8e:	4b19      	ldr	r3, [pc, #100]	; (8007ef4 <_Balloc+0x80>)
 8007e90:	4819      	ldr	r0, [pc, #100]	; (8007ef8 <_Balloc+0x84>)
 8007e92:	f000 fe0d 	bl	8008ab0 <__assert_func>
 8007e96:	6045      	str	r5, [r0, #4]
 8007e98:	6085      	str	r5, [r0, #8]
 8007e9a:	6005      	str	r5, [r0, #0]
 8007e9c:	60c5      	str	r5, [r0, #12]
 8007e9e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007ea0:	68eb      	ldr	r3, [r5, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d013      	beq.n	8007ece <_Balloc+0x5a>
 8007ea6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007ea8:	00a2      	lsls	r2, r4, #2
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	189b      	adds	r3, r3, r2
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d118      	bne.n	8007ee6 <_Balloc+0x72>
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	000d      	movs	r5, r1
 8007eb8:	40a5      	lsls	r5, r4
 8007eba:	1d6a      	adds	r2, r5, #5
 8007ebc:	0030      	movs	r0, r6
 8007ebe:	0092      	lsls	r2, r2, #2
 8007ec0:	f000 fb74 	bl	80085ac <_calloc_r>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d00c      	beq.n	8007ee2 <_Balloc+0x6e>
 8007ec8:	6044      	str	r4, [r0, #4]
 8007eca:	6085      	str	r5, [r0, #8]
 8007ecc:	e00d      	b.n	8007eea <_Balloc+0x76>
 8007ece:	2221      	movs	r2, #33	; 0x21
 8007ed0:	2104      	movs	r1, #4
 8007ed2:	0030      	movs	r0, r6
 8007ed4:	f000 fb6a 	bl	80085ac <_calloc_r>
 8007ed8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007eda:	60e8      	str	r0, [r5, #12]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1e1      	bne.n	8007ea6 <_Balloc+0x32>
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	bd70      	pop	{r4, r5, r6, pc}
 8007ee6:	6802      	ldr	r2, [r0, #0]
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	2300      	movs	r3, #0
 8007eec:	6103      	str	r3, [r0, #16]
 8007eee:	60c3      	str	r3, [r0, #12]
 8007ef0:	e7f8      	b.n	8007ee4 <_Balloc+0x70>
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	08009831 	.word	0x08009831
 8007ef8:	080098b4 	.word	0x080098b4

08007efc <_Bfree>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f00:	0005      	movs	r5, r0
 8007f02:	000c      	movs	r4, r1
 8007f04:	2e00      	cmp	r6, #0
 8007f06:	d10e      	bne.n	8007f26 <_Bfree+0x2a>
 8007f08:	2010      	movs	r0, #16
 8007f0a:	f7ff ff95 	bl	8007e38 <malloc>
 8007f0e:	1e02      	subs	r2, r0, #0
 8007f10:	6268      	str	r0, [r5, #36]	; 0x24
 8007f12:	d104      	bne.n	8007f1e <_Bfree+0x22>
 8007f14:	218a      	movs	r1, #138	; 0x8a
 8007f16:	4b09      	ldr	r3, [pc, #36]	; (8007f3c <_Bfree+0x40>)
 8007f18:	4809      	ldr	r0, [pc, #36]	; (8007f40 <_Bfree+0x44>)
 8007f1a:	f000 fdc9 	bl	8008ab0 <__assert_func>
 8007f1e:	6046      	str	r6, [r0, #4]
 8007f20:	6086      	str	r6, [r0, #8]
 8007f22:	6006      	str	r6, [r0, #0]
 8007f24:	60c6      	str	r6, [r0, #12]
 8007f26:	2c00      	cmp	r4, #0
 8007f28:	d007      	beq.n	8007f3a <_Bfree+0x3e>
 8007f2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f2c:	6862      	ldr	r2, [r4, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	0092      	lsls	r2, r2, #2
 8007f32:	189b      	adds	r3, r3, r2
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	6022      	str	r2, [r4, #0]
 8007f38:	601c      	str	r4, [r3, #0]
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	08009831 	.word	0x08009831
 8007f40:	080098b4 	.word	0x080098b4

08007f44 <__multadd>:
 8007f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f46:	000e      	movs	r6, r1
 8007f48:	9001      	str	r0, [sp, #4]
 8007f4a:	000c      	movs	r4, r1
 8007f4c:	001d      	movs	r5, r3
 8007f4e:	2000      	movs	r0, #0
 8007f50:	690f      	ldr	r7, [r1, #16]
 8007f52:	3614      	adds	r6, #20
 8007f54:	6833      	ldr	r3, [r6, #0]
 8007f56:	3001      	adds	r0, #1
 8007f58:	b299      	uxth	r1, r3
 8007f5a:	4351      	muls	r1, r2
 8007f5c:	0c1b      	lsrs	r3, r3, #16
 8007f5e:	4353      	muls	r3, r2
 8007f60:	1949      	adds	r1, r1, r5
 8007f62:	0c0d      	lsrs	r5, r1, #16
 8007f64:	195b      	adds	r3, r3, r5
 8007f66:	0c1d      	lsrs	r5, r3, #16
 8007f68:	b289      	uxth	r1, r1
 8007f6a:	041b      	lsls	r3, r3, #16
 8007f6c:	185b      	adds	r3, r3, r1
 8007f6e:	c608      	stmia	r6!, {r3}
 8007f70:	4287      	cmp	r7, r0
 8007f72:	dcef      	bgt.n	8007f54 <__multadd+0x10>
 8007f74:	2d00      	cmp	r5, #0
 8007f76:	d022      	beq.n	8007fbe <__multadd+0x7a>
 8007f78:	68a3      	ldr	r3, [r4, #8]
 8007f7a:	42bb      	cmp	r3, r7
 8007f7c:	dc19      	bgt.n	8007fb2 <__multadd+0x6e>
 8007f7e:	6863      	ldr	r3, [r4, #4]
 8007f80:	9801      	ldr	r0, [sp, #4]
 8007f82:	1c59      	adds	r1, r3, #1
 8007f84:	f7ff ff76 	bl	8007e74 <_Balloc>
 8007f88:	1e06      	subs	r6, r0, #0
 8007f8a:	d105      	bne.n	8007f98 <__multadd+0x54>
 8007f8c:	0002      	movs	r2, r0
 8007f8e:	21b5      	movs	r1, #181	; 0xb5
 8007f90:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <__multadd+0x80>)
 8007f92:	480d      	ldr	r0, [pc, #52]	; (8007fc8 <__multadd+0x84>)
 8007f94:	f000 fd8c 	bl	8008ab0 <__assert_func>
 8007f98:	0021      	movs	r1, r4
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	310c      	adds	r1, #12
 8007f9e:	1c9a      	adds	r2, r3, #2
 8007fa0:	0092      	lsls	r2, r2, #2
 8007fa2:	300c      	adds	r0, #12
 8007fa4:	f7ff ff5d 	bl	8007e62 <memcpy>
 8007fa8:	0021      	movs	r1, r4
 8007faa:	9801      	ldr	r0, [sp, #4]
 8007fac:	f7ff ffa6 	bl	8007efc <_Bfree>
 8007fb0:	0034      	movs	r4, r6
 8007fb2:	1d3b      	adds	r3, r7, #4
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	18e3      	adds	r3, r4, r3
 8007fb8:	605d      	str	r5, [r3, #4]
 8007fba:	1c7b      	adds	r3, r7, #1
 8007fbc:	6123      	str	r3, [r4, #16]
 8007fbe:	0020      	movs	r0, r4
 8007fc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007fc2:	46c0      	nop			; (mov r8, r8)
 8007fc4:	080098a3 	.word	0x080098a3
 8007fc8:	080098b4 	.word	0x080098b4

08007fcc <__hi0bits>:
 8007fcc:	0003      	movs	r3, r0
 8007fce:	0c02      	lsrs	r2, r0, #16
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	4282      	cmp	r2, r0
 8007fd4:	d101      	bne.n	8007fda <__hi0bits+0xe>
 8007fd6:	041b      	lsls	r3, r3, #16
 8007fd8:	3010      	adds	r0, #16
 8007fda:	0e1a      	lsrs	r2, r3, #24
 8007fdc:	d101      	bne.n	8007fe2 <__hi0bits+0x16>
 8007fde:	3008      	adds	r0, #8
 8007fe0:	021b      	lsls	r3, r3, #8
 8007fe2:	0f1a      	lsrs	r2, r3, #28
 8007fe4:	d101      	bne.n	8007fea <__hi0bits+0x1e>
 8007fe6:	3004      	adds	r0, #4
 8007fe8:	011b      	lsls	r3, r3, #4
 8007fea:	0f9a      	lsrs	r2, r3, #30
 8007fec:	d101      	bne.n	8007ff2 <__hi0bits+0x26>
 8007fee:	3002      	adds	r0, #2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	db03      	blt.n	8007ffe <__hi0bits+0x32>
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	d400      	bmi.n	8007ffe <__hi0bits+0x32>
 8007ffc:	2020      	movs	r0, #32
 8007ffe:	4770      	bx	lr

08008000 <__lo0bits>:
 8008000:	6803      	ldr	r3, [r0, #0]
 8008002:	0002      	movs	r2, r0
 8008004:	2107      	movs	r1, #7
 8008006:	0018      	movs	r0, r3
 8008008:	4008      	ands	r0, r1
 800800a:	420b      	tst	r3, r1
 800800c:	d00d      	beq.n	800802a <__lo0bits+0x2a>
 800800e:	3906      	subs	r1, #6
 8008010:	2000      	movs	r0, #0
 8008012:	420b      	tst	r3, r1
 8008014:	d105      	bne.n	8008022 <__lo0bits+0x22>
 8008016:	3002      	adds	r0, #2
 8008018:	4203      	tst	r3, r0
 800801a:	d003      	beq.n	8008024 <__lo0bits+0x24>
 800801c:	40cb      	lsrs	r3, r1
 800801e:	0008      	movs	r0, r1
 8008020:	6013      	str	r3, [r2, #0]
 8008022:	4770      	bx	lr
 8008024:	089b      	lsrs	r3, r3, #2
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	e7fb      	b.n	8008022 <__lo0bits+0x22>
 800802a:	b299      	uxth	r1, r3
 800802c:	2900      	cmp	r1, #0
 800802e:	d101      	bne.n	8008034 <__lo0bits+0x34>
 8008030:	2010      	movs	r0, #16
 8008032:	0c1b      	lsrs	r3, r3, #16
 8008034:	b2d9      	uxtb	r1, r3
 8008036:	2900      	cmp	r1, #0
 8008038:	d101      	bne.n	800803e <__lo0bits+0x3e>
 800803a:	3008      	adds	r0, #8
 800803c:	0a1b      	lsrs	r3, r3, #8
 800803e:	0719      	lsls	r1, r3, #28
 8008040:	d101      	bne.n	8008046 <__lo0bits+0x46>
 8008042:	3004      	adds	r0, #4
 8008044:	091b      	lsrs	r3, r3, #4
 8008046:	0799      	lsls	r1, r3, #30
 8008048:	d101      	bne.n	800804e <__lo0bits+0x4e>
 800804a:	3002      	adds	r0, #2
 800804c:	089b      	lsrs	r3, r3, #2
 800804e:	07d9      	lsls	r1, r3, #31
 8008050:	d4e9      	bmi.n	8008026 <__lo0bits+0x26>
 8008052:	3001      	adds	r0, #1
 8008054:	085b      	lsrs	r3, r3, #1
 8008056:	d1e6      	bne.n	8008026 <__lo0bits+0x26>
 8008058:	2020      	movs	r0, #32
 800805a:	e7e2      	b.n	8008022 <__lo0bits+0x22>

0800805c <__i2b>:
 800805c:	b510      	push	{r4, lr}
 800805e:	000c      	movs	r4, r1
 8008060:	2101      	movs	r1, #1
 8008062:	f7ff ff07 	bl	8007e74 <_Balloc>
 8008066:	2800      	cmp	r0, #0
 8008068:	d106      	bne.n	8008078 <__i2b+0x1c>
 800806a:	21a0      	movs	r1, #160	; 0xa0
 800806c:	0002      	movs	r2, r0
 800806e:	4b04      	ldr	r3, [pc, #16]	; (8008080 <__i2b+0x24>)
 8008070:	4804      	ldr	r0, [pc, #16]	; (8008084 <__i2b+0x28>)
 8008072:	0049      	lsls	r1, r1, #1
 8008074:	f000 fd1c 	bl	8008ab0 <__assert_func>
 8008078:	2301      	movs	r3, #1
 800807a:	6144      	str	r4, [r0, #20]
 800807c:	6103      	str	r3, [r0, #16]
 800807e:	bd10      	pop	{r4, pc}
 8008080:	080098a3 	.word	0x080098a3
 8008084:	080098b4 	.word	0x080098b4

08008088 <__multiply>:
 8008088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800808a:	690b      	ldr	r3, [r1, #16]
 800808c:	0014      	movs	r4, r2
 800808e:	6912      	ldr	r2, [r2, #16]
 8008090:	000d      	movs	r5, r1
 8008092:	b089      	sub	sp, #36	; 0x24
 8008094:	4293      	cmp	r3, r2
 8008096:	da01      	bge.n	800809c <__multiply+0x14>
 8008098:	0025      	movs	r5, r4
 800809a:	000c      	movs	r4, r1
 800809c:	692f      	ldr	r7, [r5, #16]
 800809e:	6926      	ldr	r6, [r4, #16]
 80080a0:	6869      	ldr	r1, [r5, #4]
 80080a2:	19bb      	adds	r3, r7, r6
 80080a4:	9302      	str	r3, [sp, #8]
 80080a6:	68ab      	ldr	r3, [r5, #8]
 80080a8:	19ba      	adds	r2, r7, r6
 80080aa:	4293      	cmp	r3, r2
 80080ac:	da00      	bge.n	80080b0 <__multiply+0x28>
 80080ae:	3101      	adds	r1, #1
 80080b0:	f7ff fee0 	bl	8007e74 <_Balloc>
 80080b4:	9001      	str	r0, [sp, #4]
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d106      	bne.n	80080c8 <__multiply+0x40>
 80080ba:	215e      	movs	r1, #94	; 0x5e
 80080bc:	0002      	movs	r2, r0
 80080be:	4b48      	ldr	r3, [pc, #288]	; (80081e0 <__multiply+0x158>)
 80080c0:	4848      	ldr	r0, [pc, #288]	; (80081e4 <__multiply+0x15c>)
 80080c2:	31ff      	adds	r1, #255	; 0xff
 80080c4:	f000 fcf4 	bl	8008ab0 <__assert_func>
 80080c8:	9b01      	ldr	r3, [sp, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	3314      	adds	r3, #20
 80080ce:	469c      	mov	ip, r3
 80080d0:	19bb      	adds	r3, r7, r6
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4463      	add	r3, ip
 80080d6:	9303      	str	r3, [sp, #12]
 80080d8:	4663      	mov	r3, ip
 80080da:	9903      	ldr	r1, [sp, #12]
 80080dc:	428b      	cmp	r3, r1
 80080de:	d32c      	bcc.n	800813a <__multiply+0xb2>
 80080e0:	002b      	movs	r3, r5
 80080e2:	0022      	movs	r2, r4
 80080e4:	3314      	adds	r3, #20
 80080e6:	00bf      	lsls	r7, r7, #2
 80080e8:	3214      	adds	r2, #20
 80080ea:	9306      	str	r3, [sp, #24]
 80080ec:	00b6      	lsls	r6, r6, #2
 80080ee:	19db      	adds	r3, r3, r7
 80080f0:	9304      	str	r3, [sp, #16]
 80080f2:	1993      	adds	r3, r2, r6
 80080f4:	9307      	str	r3, [sp, #28]
 80080f6:	2304      	movs	r3, #4
 80080f8:	9305      	str	r3, [sp, #20]
 80080fa:	002b      	movs	r3, r5
 80080fc:	9904      	ldr	r1, [sp, #16]
 80080fe:	3315      	adds	r3, #21
 8008100:	9200      	str	r2, [sp, #0]
 8008102:	4299      	cmp	r1, r3
 8008104:	d305      	bcc.n	8008112 <__multiply+0x8a>
 8008106:	1b4b      	subs	r3, r1, r5
 8008108:	3b15      	subs	r3, #21
 800810a:	089b      	lsrs	r3, r3, #2
 800810c:	3301      	adds	r3, #1
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	9305      	str	r3, [sp, #20]
 8008112:	9b07      	ldr	r3, [sp, #28]
 8008114:	9a00      	ldr	r2, [sp, #0]
 8008116:	429a      	cmp	r2, r3
 8008118:	d311      	bcc.n	800813e <__multiply+0xb6>
 800811a:	9b02      	ldr	r3, [sp, #8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	dd06      	ble.n	800812e <__multiply+0xa6>
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	3b04      	subs	r3, #4
 8008124:	9303      	str	r3, [sp, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d053      	beq.n	80081d6 <__multiply+0x14e>
 800812e:	9b01      	ldr	r3, [sp, #4]
 8008130:	9a02      	ldr	r2, [sp, #8]
 8008132:	0018      	movs	r0, r3
 8008134:	611a      	str	r2, [r3, #16]
 8008136:	b009      	add	sp, #36	; 0x24
 8008138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800813a:	c304      	stmia	r3!, {r2}
 800813c:	e7cd      	b.n	80080da <__multiply+0x52>
 800813e:	9b00      	ldr	r3, [sp, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	b298      	uxth	r0, r3
 8008144:	2800      	cmp	r0, #0
 8008146:	d01b      	beq.n	8008180 <__multiply+0xf8>
 8008148:	4667      	mov	r7, ip
 800814a:	2400      	movs	r4, #0
 800814c:	9e06      	ldr	r6, [sp, #24]
 800814e:	ce02      	ldmia	r6!, {r1}
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	b28b      	uxth	r3, r1
 8008154:	4343      	muls	r3, r0
 8008156:	b292      	uxth	r2, r2
 8008158:	189b      	adds	r3, r3, r2
 800815a:	191b      	adds	r3, r3, r4
 800815c:	0c0c      	lsrs	r4, r1, #16
 800815e:	4344      	muls	r4, r0
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	0c11      	lsrs	r1, r2, #16
 8008164:	1861      	adds	r1, r4, r1
 8008166:	0c1c      	lsrs	r4, r3, #16
 8008168:	1909      	adds	r1, r1, r4
 800816a:	0c0c      	lsrs	r4, r1, #16
 800816c:	b29b      	uxth	r3, r3
 800816e:	0409      	lsls	r1, r1, #16
 8008170:	430b      	orrs	r3, r1
 8008172:	c708      	stmia	r7!, {r3}
 8008174:	9b04      	ldr	r3, [sp, #16]
 8008176:	42b3      	cmp	r3, r6
 8008178:	d8e9      	bhi.n	800814e <__multiply+0xc6>
 800817a:	4663      	mov	r3, ip
 800817c:	9a05      	ldr	r2, [sp, #20]
 800817e:	509c      	str	r4, [r3, r2]
 8008180:	9b00      	ldr	r3, [sp, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	0c1e      	lsrs	r6, r3, #16
 8008186:	d020      	beq.n	80081ca <__multiply+0x142>
 8008188:	4663      	mov	r3, ip
 800818a:	002c      	movs	r4, r5
 800818c:	4660      	mov	r0, ip
 800818e:	2700      	movs	r7, #0
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3414      	adds	r4, #20
 8008194:	6822      	ldr	r2, [r4, #0]
 8008196:	b29b      	uxth	r3, r3
 8008198:	b291      	uxth	r1, r2
 800819a:	4371      	muls	r1, r6
 800819c:	6802      	ldr	r2, [r0, #0]
 800819e:	0c12      	lsrs	r2, r2, #16
 80081a0:	1889      	adds	r1, r1, r2
 80081a2:	19cf      	adds	r7, r1, r7
 80081a4:	0439      	lsls	r1, r7, #16
 80081a6:	430b      	orrs	r3, r1
 80081a8:	6003      	str	r3, [r0, #0]
 80081aa:	cc02      	ldmia	r4!, {r1}
 80081ac:	6843      	ldr	r3, [r0, #4]
 80081ae:	0c09      	lsrs	r1, r1, #16
 80081b0:	4371      	muls	r1, r6
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	0c3f      	lsrs	r7, r7, #16
 80081b6:	18cb      	adds	r3, r1, r3
 80081b8:	9a04      	ldr	r2, [sp, #16]
 80081ba:	19db      	adds	r3, r3, r7
 80081bc:	0c1f      	lsrs	r7, r3, #16
 80081be:	3004      	adds	r0, #4
 80081c0:	42a2      	cmp	r2, r4
 80081c2:	d8e7      	bhi.n	8008194 <__multiply+0x10c>
 80081c4:	4662      	mov	r2, ip
 80081c6:	9905      	ldr	r1, [sp, #20]
 80081c8:	5053      	str	r3, [r2, r1]
 80081ca:	9b00      	ldr	r3, [sp, #0]
 80081cc:	3304      	adds	r3, #4
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	2304      	movs	r3, #4
 80081d2:	449c      	add	ip, r3
 80081d4:	e79d      	b.n	8008112 <__multiply+0x8a>
 80081d6:	9b02      	ldr	r3, [sp, #8]
 80081d8:	3b01      	subs	r3, #1
 80081da:	9302      	str	r3, [sp, #8]
 80081dc:	e79d      	b.n	800811a <__multiply+0x92>
 80081de:	46c0      	nop			; (mov r8, r8)
 80081e0:	080098a3 	.word	0x080098a3
 80081e4:	080098b4 	.word	0x080098b4

080081e8 <__pow5mult>:
 80081e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ea:	2303      	movs	r3, #3
 80081ec:	0015      	movs	r5, r2
 80081ee:	0007      	movs	r7, r0
 80081f0:	000e      	movs	r6, r1
 80081f2:	401a      	ands	r2, r3
 80081f4:	421d      	tst	r5, r3
 80081f6:	d008      	beq.n	800820a <__pow5mult+0x22>
 80081f8:	4925      	ldr	r1, [pc, #148]	; (8008290 <__pow5mult+0xa8>)
 80081fa:	3a01      	subs	r2, #1
 80081fc:	0092      	lsls	r2, r2, #2
 80081fe:	5852      	ldr	r2, [r2, r1]
 8008200:	2300      	movs	r3, #0
 8008202:	0031      	movs	r1, r6
 8008204:	f7ff fe9e 	bl	8007f44 <__multadd>
 8008208:	0006      	movs	r6, r0
 800820a:	10ad      	asrs	r5, r5, #2
 800820c:	d03d      	beq.n	800828a <__pow5mult+0xa2>
 800820e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008210:	2c00      	cmp	r4, #0
 8008212:	d10f      	bne.n	8008234 <__pow5mult+0x4c>
 8008214:	2010      	movs	r0, #16
 8008216:	f7ff fe0f 	bl	8007e38 <malloc>
 800821a:	1e02      	subs	r2, r0, #0
 800821c:	6278      	str	r0, [r7, #36]	; 0x24
 800821e:	d105      	bne.n	800822c <__pow5mult+0x44>
 8008220:	21d7      	movs	r1, #215	; 0xd7
 8008222:	4b1c      	ldr	r3, [pc, #112]	; (8008294 <__pow5mult+0xac>)
 8008224:	481c      	ldr	r0, [pc, #112]	; (8008298 <__pow5mult+0xb0>)
 8008226:	0049      	lsls	r1, r1, #1
 8008228:	f000 fc42 	bl	8008ab0 <__assert_func>
 800822c:	6044      	str	r4, [r0, #4]
 800822e:	6084      	str	r4, [r0, #8]
 8008230:	6004      	str	r4, [r0, #0]
 8008232:	60c4      	str	r4, [r0, #12]
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	689c      	ldr	r4, [r3, #8]
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	2c00      	cmp	r4, #0
 800823c:	d108      	bne.n	8008250 <__pow5mult+0x68>
 800823e:	0038      	movs	r0, r7
 8008240:	4916      	ldr	r1, [pc, #88]	; (800829c <__pow5mult+0xb4>)
 8008242:	f7ff ff0b 	bl	800805c <__i2b>
 8008246:	9b01      	ldr	r3, [sp, #4]
 8008248:	0004      	movs	r4, r0
 800824a:	6098      	str	r0, [r3, #8]
 800824c:	2300      	movs	r3, #0
 800824e:	6003      	str	r3, [r0, #0]
 8008250:	2301      	movs	r3, #1
 8008252:	421d      	tst	r5, r3
 8008254:	d00a      	beq.n	800826c <__pow5mult+0x84>
 8008256:	0031      	movs	r1, r6
 8008258:	0022      	movs	r2, r4
 800825a:	0038      	movs	r0, r7
 800825c:	f7ff ff14 	bl	8008088 <__multiply>
 8008260:	0031      	movs	r1, r6
 8008262:	9001      	str	r0, [sp, #4]
 8008264:	0038      	movs	r0, r7
 8008266:	f7ff fe49 	bl	8007efc <_Bfree>
 800826a:	9e01      	ldr	r6, [sp, #4]
 800826c:	106d      	asrs	r5, r5, #1
 800826e:	d00c      	beq.n	800828a <__pow5mult+0xa2>
 8008270:	6820      	ldr	r0, [r4, #0]
 8008272:	2800      	cmp	r0, #0
 8008274:	d107      	bne.n	8008286 <__pow5mult+0x9e>
 8008276:	0022      	movs	r2, r4
 8008278:	0021      	movs	r1, r4
 800827a:	0038      	movs	r0, r7
 800827c:	f7ff ff04 	bl	8008088 <__multiply>
 8008280:	2300      	movs	r3, #0
 8008282:	6020      	str	r0, [r4, #0]
 8008284:	6003      	str	r3, [r0, #0]
 8008286:	0004      	movs	r4, r0
 8008288:	e7e2      	b.n	8008250 <__pow5mult+0x68>
 800828a:	0030      	movs	r0, r6
 800828c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	08009a00 	.word	0x08009a00
 8008294:	08009831 	.word	0x08009831
 8008298:	080098b4 	.word	0x080098b4
 800829c:	00000271 	.word	0x00000271

080082a0 <__lshift>:
 80082a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082a2:	000c      	movs	r4, r1
 80082a4:	0017      	movs	r7, r2
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	1155      	asrs	r5, r2, #5
 80082aa:	b087      	sub	sp, #28
 80082ac:	18eb      	adds	r3, r5, r3
 80082ae:	9302      	str	r3, [sp, #8]
 80082b0:	3301      	adds	r3, #1
 80082b2:	9301      	str	r3, [sp, #4]
 80082b4:	6849      	ldr	r1, [r1, #4]
 80082b6:	68a3      	ldr	r3, [r4, #8]
 80082b8:	9004      	str	r0, [sp, #16]
 80082ba:	9a01      	ldr	r2, [sp, #4]
 80082bc:	4293      	cmp	r3, r2
 80082be:	db10      	blt.n	80082e2 <__lshift+0x42>
 80082c0:	9804      	ldr	r0, [sp, #16]
 80082c2:	f7ff fdd7 	bl	8007e74 <_Balloc>
 80082c6:	2300      	movs	r3, #0
 80082c8:	0002      	movs	r2, r0
 80082ca:	0006      	movs	r6, r0
 80082cc:	0019      	movs	r1, r3
 80082ce:	3214      	adds	r2, #20
 80082d0:	4298      	cmp	r0, r3
 80082d2:	d10c      	bne.n	80082ee <__lshift+0x4e>
 80082d4:	21da      	movs	r1, #218	; 0xda
 80082d6:	0002      	movs	r2, r0
 80082d8:	4b26      	ldr	r3, [pc, #152]	; (8008374 <__lshift+0xd4>)
 80082da:	4827      	ldr	r0, [pc, #156]	; (8008378 <__lshift+0xd8>)
 80082dc:	31ff      	adds	r1, #255	; 0xff
 80082de:	f000 fbe7 	bl	8008ab0 <__assert_func>
 80082e2:	3101      	adds	r1, #1
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	e7e8      	b.n	80082ba <__lshift+0x1a>
 80082e8:	0098      	lsls	r0, r3, #2
 80082ea:	5011      	str	r1, [r2, r0]
 80082ec:	3301      	adds	r3, #1
 80082ee:	42ab      	cmp	r3, r5
 80082f0:	dbfa      	blt.n	80082e8 <__lshift+0x48>
 80082f2:	43eb      	mvns	r3, r5
 80082f4:	17db      	asrs	r3, r3, #31
 80082f6:	401d      	ands	r5, r3
 80082f8:	211f      	movs	r1, #31
 80082fa:	0023      	movs	r3, r4
 80082fc:	0038      	movs	r0, r7
 80082fe:	00ad      	lsls	r5, r5, #2
 8008300:	1955      	adds	r5, r2, r5
 8008302:	6922      	ldr	r2, [r4, #16]
 8008304:	3314      	adds	r3, #20
 8008306:	0092      	lsls	r2, r2, #2
 8008308:	4008      	ands	r0, r1
 800830a:	4684      	mov	ip, r0
 800830c:	189a      	adds	r2, r3, r2
 800830e:	420f      	tst	r7, r1
 8008310:	d02a      	beq.n	8008368 <__lshift+0xc8>
 8008312:	3101      	adds	r1, #1
 8008314:	1a09      	subs	r1, r1, r0
 8008316:	9105      	str	r1, [sp, #20]
 8008318:	2100      	movs	r1, #0
 800831a:	9503      	str	r5, [sp, #12]
 800831c:	4667      	mov	r7, ip
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	40b8      	lsls	r0, r7
 8008322:	4301      	orrs	r1, r0
 8008324:	9803      	ldr	r0, [sp, #12]
 8008326:	c002      	stmia	r0!, {r1}
 8008328:	cb02      	ldmia	r3!, {r1}
 800832a:	9003      	str	r0, [sp, #12]
 800832c:	9805      	ldr	r0, [sp, #20]
 800832e:	40c1      	lsrs	r1, r0
 8008330:	429a      	cmp	r2, r3
 8008332:	d8f3      	bhi.n	800831c <__lshift+0x7c>
 8008334:	0020      	movs	r0, r4
 8008336:	3015      	adds	r0, #21
 8008338:	2304      	movs	r3, #4
 800833a:	4282      	cmp	r2, r0
 800833c:	d304      	bcc.n	8008348 <__lshift+0xa8>
 800833e:	1b13      	subs	r3, r2, r4
 8008340:	3b15      	subs	r3, #21
 8008342:	089b      	lsrs	r3, r3, #2
 8008344:	3301      	adds	r3, #1
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	50e9      	str	r1, [r5, r3]
 800834a:	2900      	cmp	r1, #0
 800834c:	d002      	beq.n	8008354 <__lshift+0xb4>
 800834e:	9b02      	ldr	r3, [sp, #8]
 8008350:	3302      	adds	r3, #2
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	9b01      	ldr	r3, [sp, #4]
 8008356:	9804      	ldr	r0, [sp, #16]
 8008358:	3b01      	subs	r3, #1
 800835a:	0021      	movs	r1, r4
 800835c:	6133      	str	r3, [r6, #16]
 800835e:	f7ff fdcd 	bl	8007efc <_Bfree>
 8008362:	0030      	movs	r0, r6
 8008364:	b007      	add	sp, #28
 8008366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008368:	cb02      	ldmia	r3!, {r1}
 800836a:	c502      	stmia	r5!, {r1}
 800836c:	429a      	cmp	r2, r3
 800836e:	d8fb      	bhi.n	8008368 <__lshift+0xc8>
 8008370:	e7f0      	b.n	8008354 <__lshift+0xb4>
 8008372:	46c0      	nop			; (mov r8, r8)
 8008374:	080098a3 	.word	0x080098a3
 8008378:	080098b4 	.word	0x080098b4

0800837c <__mcmp>:
 800837c:	6902      	ldr	r2, [r0, #16]
 800837e:	690b      	ldr	r3, [r1, #16]
 8008380:	b530      	push	{r4, r5, lr}
 8008382:	0004      	movs	r4, r0
 8008384:	1ad0      	subs	r0, r2, r3
 8008386:	429a      	cmp	r2, r3
 8008388:	d10d      	bne.n	80083a6 <__mcmp+0x2a>
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	3414      	adds	r4, #20
 800838e:	3114      	adds	r1, #20
 8008390:	18e2      	adds	r2, r4, r3
 8008392:	18c9      	adds	r1, r1, r3
 8008394:	3a04      	subs	r2, #4
 8008396:	3904      	subs	r1, #4
 8008398:	6815      	ldr	r5, [r2, #0]
 800839a:	680b      	ldr	r3, [r1, #0]
 800839c:	429d      	cmp	r5, r3
 800839e:	d003      	beq.n	80083a8 <__mcmp+0x2c>
 80083a0:	2001      	movs	r0, #1
 80083a2:	429d      	cmp	r5, r3
 80083a4:	d303      	bcc.n	80083ae <__mcmp+0x32>
 80083a6:	bd30      	pop	{r4, r5, pc}
 80083a8:	4294      	cmp	r4, r2
 80083aa:	d3f3      	bcc.n	8008394 <__mcmp+0x18>
 80083ac:	e7fb      	b.n	80083a6 <__mcmp+0x2a>
 80083ae:	4240      	negs	r0, r0
 80083b0:	e7f9      	b.n	80083a6 <__mcmp+0x2a>
	...

080083b4 <__mdiff>:
 80083b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083b6:	000e      	movs	r6, r1
 80083b8:	0007      	movs	r7, r0
 80083ba:	0011      	movs	r1, r2
 80083bc:	0030      	movs	r0, r6
 80083be:	b087      	sub	sp, #28
 80083c0:	0014      	movs	r4, r2
 80083c2:	f7ff ffdb 	bl	800837c <__mcmp>
 80083c6:	1e05      	subs	r5, r0, #0
 80083c8:	d110      	bne.n	80083ec <__mdiff+0x38>
 80083ca:	0001      	movs	r1, r0
 80083cc:	0038      	movs	r0, r7
 80083ce:	f7ff fd51 	bl	8007e74 <_Balloc>
 80083d2:	1e02      	subs	r2, r0, #0
 80083d4:	d104      	bne.n	80083e0 <__mdiff+0x2c>
 80083d6:	4b40      	ldr	r3, [pc, #256]	; (80084d8 <__mdiff+0x124>)
 80083d8:	4940      	ldr	r1, [pc, #256]	; (80084dc <__mdiff+0x128>)
 80083da:	4841      	ldr	r0, [pc, #260]	; (80084e0 <__mdiff+0x12c>)
 80083dc:	f000 fb68 	bl	8008ab0 <__assert_func>
 80083e0:	2301      	movs	r3, #1
 80083e2:	6145      	str	r5, [r0, #20]
 80083e4:	6103      	str	r3, [r0, #16]
 80083e6:	0010      	movs	r0, r2
 80083e8:	b007      	add	sp, #28
 80083ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083ec:	2301      	movs	r3, #1
 80083ee:	9301      	str	r3, [sp, #4]
 80083f0:	2800      	cmp	r0, #0
 80083f2:	db04      	blt.n	80083fe <__mdiff+0x4a>
 80083f4:	0023      	movs	r3, r4
 80083f6:	0034      	movs	r4, r6
 80083f8:	001e      	movs	r6, r3
 80083fa:	2300      	movs	r3, #0
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	0038      	movs	r0, r7
 8008400:	6861      	ldr	r1, [r4, #4]
 8008402:	f7ff fd37 	bl	8007e74 <_Balloc>
 8008406:	1e02      	subs	r2, r0, #0
 8008408:	d103      	bne.n	8008412 <__mdiff+0x5e>
 800840a:	2190      	movs	r1, #144	; 0x90
 800840c:	4b32      	ldr	r3, [pc, #200]	; (80084d8 <__mdiff+0x124>)
 800840e:	0089      	lsls	r1, r1, #2
 8008410:	e7e3      	b.n	80083da <__mdiff+0x26>
 8008412:	9b01      	ldr	r3, [sp, #4]
 8008414:	2700      	movs	r7, #0
 8008416:	60c3      	str	r3, [r0, #12]
 8008418:	6920      	ldr	r0, [r4, #16]
 800841a:	3414      	adds	r4, #20
 800841c:	9401      	str	r4, [sp, #4]
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	0084      	lsls	r4, r0, #2
 8008422:	191b      	adds	r3, r3, r4
 8008424:	0034      	movs	r4, r6
 8008426:	9302      	str	r3, [sp, #8]
 8008428:	6933      	ldr	r3, [r6, #16]
 800842a:	3414      	adds	r4, #20
 800842c:	0099      	lsls	r1, r3, #2
 800842e:	1863      	adds	r3, r4, r1
 8008430:	9303      	str	r3, [sp, #12]
 8008432:	0013      	movs	r3, r2
 8008434:	3314      	adds	r3, #20
 8008436:	469c      	mov	ip, r3
 8008438:	9305      	str	r3, [sp, #20]
 800843a:	9b01      	ldr	r3, [sp, #4]
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	9b04      	ldr	r3, [sp, #16]
 8008440:	cc02      	ldmia	r4!, {r1}
 8008442:	cb20      	ldmia	r3!, {r5}
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	b2ab      	uxth	r3, r5
 8008448:	19df      	adds	r7, r3, r7
 800844a:	b28b      	uxth	r3, r1
 800844c:	1afb      	subs	r3, r7, r3
 800844e:	0c09      	lsrs	r1, r1, #16
 8008450:	0c2d      	lsrs	r5, r5, #16
 8008452:	1a6d      	subs	r5, r5, r1
 8008454:	1419      	asrs	r1, r3, #16
 8008456:	186d      	adds	r5, r5, r1
 8008458:	4661      	mov	r1, ip
 800845a:	142f      	asrs	r7, r5, #16
 800845c:	b29b      	uxth	r3, r3
 800845e:	042d      	lsls	r5, r5, #16
 8008460:	432b      	orrs	r3, r5
 8008462:	c108      	stmia	r1!, {r3}
 8008464:	9b03      	ldr	r3, [sp, #12]
 8008466:	468c      	mov	ip, r1
 8008468:	42a3      	cmp	r3, r4
 800846a:	d8e8      	bhi.n	800843e <__mdiff+0x8a>
 800846c:	0031      	movs	r1, r6
 800846e:	9c03      	ldr	r4, [sp, #12]
 8008470:	3115      	adds	r1, #21
 8008472:	2304      	movs	r3, #4
 8008474:	428c      	cmp	r4, r1
 8008476:	d304      	bcc.n	8008482 <__mdiff+0xce>
 8008478:	1ba3      	subs	r3, r4, r6
 800847a:	3b15      	subs	r3, #21
 800847c:	089b      	lsrs	r3, r3, #2
 800847e:	3301      	adds	r3, #1
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	9901      	ldr	r1, [sp, #4]
 8008484:	18cc      	adds	r4, r1, r3
 8008486:	9905      	ldr	r1, [sp, #20]
 8008488:	0026      	movs	r6, r4
 800848a:	18cb      	adds	r3, r1, r3
 800848c:	469c      	mov	ip, r3
 800848e:	9902      	ldr	r1, [sp, #8]
 8008490:	428e      	cmp	r6, r1
 8008492:	d310      	bcc.n	80084b6 <__mdiff+0x102>
 8008494:	9e02      	ldr	r6, [sp, #8]
 8008496:	1ee1      	subs	r1, r4, #3
 8008498:	2500      	movs	r5, #0
 800849a:	428e      	cmp	r6, r1
 800849c:	d304      	bcc.n	80084a8 <__mdiff+0xf4>
 800849e:	0031      	movs	r1, r6
 80084a0:	3103      	adds	r1, #3
 80084a2:	1b0c      	subs	r4, r1, r4
 80084a4:	08a4      	lsrs	r4, r4, #2
 80084a6:	00a5      	lsls	r5, r4, #2
 80084a8:	195b      	adds	r3, r3, r5
 80084aa:	3b04      	subs	r3, #4
 80084ac:	6819      	ldr	r1, [r3, #0]
 80084ae:	2900      	cmp	r1, #0
 80084b0:	d00f      	beq.n	80084d2 <__mdiff+0x11e>
 80084b2:	6110      	str	r0, [r2, #16]
 80084b4:	e797      	b.n	80083e6 <__mdiff+0x32>
 80084b6:	ce02      	ldmia	r6!, {r1}
 80084b8:	b28d      	uxth	r5, r1
 80084ba:	19ed      	adds	r5, r5, r7
 80084bc:	0c0f      	lsrs	r7, r1, #16
 80084be:	1429      	asrs	r1, r5, #16
 80084c0:	1879      	adds	r1, r7, r1
 80084c2:	140f      	asrs	r7, r1, #16
 80084c4:	b2ad      	uxth	r5, r5
 80084c6:	0409      	lsls	r1, r1, #16
 80084c8:	430d      	orrs	r5, r1
 80084ca:	4661      	mov	r1, ip
 80084cc:	c120      	stmia	r1!, {r5}
 80084ce:	468c      	mov	ip, r1
 80084d0:	e7dd      	b.n	800848e <__mdiff+0xda>
 80084d2:	3801      	subs	r0, #1
 80084d4:	e7e9      	b.n	80084aa <__mdiff+0xf6>
 80084d6:	46c0      	nop			; (mov r8, r8)
 80084d8:	080098a3 	.word	0x080098a3
 80084dc:	00000232 	.word	0x00000232
 80084e0:	080098b4 	.word	0x080098b4

080084e4 <__d2b>:
 80084e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084e6:	2101      	movs	r1, #1
 80084e8:	0014      	movs	r4, r2
 80084ea:	001e      	movs	r6, r3
 80084ec:	9f08      	ldr	r7, [sp, #32]
 80084ee:	f7ff fcc1 	bl	8007e74 <_Balloc>
 80084f2:	1e05      	subs	r5, r0, #0
 80084f4:	d105      	bne.n	8008502 <__d2b+0x1e>
 80084f6:	0002      	movs	r2, r0
 80084f8:	4b26      	ldr	r3, [pc, #152]	; (8008594 <__d2b+0xb0>)
 80084fa:	4927      	ldr	r1, [pc, #156]	; (8008598 <__d2b+0xb4>)
 80084fc:	4827      	ldr	r0, [pc, #156]	; (800859c <__d2b+0xb8>)
 80084fe:	f000 fad7 	bl	8008ab0 <__assert_func>
 8008502:	0333      	lsls	r3, r6, #12
 8008504:	0076      	lsls	r6, r6, #1
 8008506:	0b1b      	lsrs	r3, r3, #12
 8008508:	0d76      	lsrs	r6, r6, #21
 800850a:	d124      	bne.n	8008556 <__d2b+0x72>
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	2c00      	cmp	r4, #0
 8008510:	d027      	beq.n	8008562 <__d2b+0x7e>
 8008512:	4668      	mov	r0, sp
 8008514:	9400      	str	r4, [sp, #0]
 8008516:	f7ff fd73 	bl	8008000 <__lo0bits>
 800851a:	9c00      	ldr	r4, [sp, #0]
 800851c:	2800      	cmp	r0, #0
 800851e:	d01e      	beq.n	800855e <__d2b+0x7a>
 8008520:	9b01      	ldr	r3, [sp, #4]
 8008522:	2120      	movs	r1, #32
 8008524:	001a      	movs	r2, r3
 8008526:	1a09      	subs	r1, r1, r0
 8008528:	408a      	lsls	r2, r1
 800852a:	40c3      	lsrs	r3, r0
 800852c:	4322      	orrs	r2, r4
 800852e:	616a      	str	r2, [r5, #20]
 8008530:	9301      	str	r3, [sp, #4]
 8008532:	9c01      	ldr	r4, [sp, #4]
 8008534:	61ac      	str	r4, [r5, #24]
 8008536:	1e63      	subs	r3, r4, #1
 8008538:	419c      	sbcs	r4, r3
 800853a:	3401      	adds	r4, #1
 800853c:	612c      	str	r4, [r5, #16]
 800853e:	2e00      	cmp	r6, #0
 8008540:	d018      	beq.n	8008574 <__d2b+0x90>
 8008542:	4b17      	ldr	r3, [pc, #92]	; (80085a0 <__d2b+0xbc>)
 8008544:	18f6      	adds	r6, r6, r3
 8008546:	2335      	movs	r3, #53	; 0x35
 8008548:	1836      	adds	r6, r6, r0
 800854a:	1a18      	subs	r0, r3, r0
 800854c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800854e:	603e      	str	r6, [r7, #0]
 8008550:	6018      	str	r0, [r3, #0]
 8008552:	0028      	movs	r0, r5
 8008554:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008556:	2280      	movs	r2, #128	; 0x80
 8008558:	0352      	lsls	r2, r2, #13
 800855a:	4313      	orrs	r3, r2
 800855c:	e7d6      	b.n	800850c <__d2b+0x28>
 800855e:	616c      	str	r4, [r5, #20]
 8008560:	e7e7      	b.n	8008532 <__d2b+0x4e>
 8008562:	a801      	add	r0, sp, #4
 8008564:	f7ff fd4c 	bl	8008000 <__lo0bits>
 8008568:	2401      	movs	r4, #1
 800856a:	9b01      	ldr	r3, [sp, #4]
 800856c:	612c      	str	r4, [r5, #16]
 800856e:	616b      	str	r3, [r5, #20]
 8008570:	3020      	adds	r0, #32
 8008572:	e7e4      	b.n	800853e <__d2b+0x5a>
 8008574:	4b0b      	ldr	r3, [pc, #44]	; (80085a4 <__d2b+0xc0>)
 8008576:	18c0      	adds	r0, r0, r3
 8008578:	4b0b      	ldr	r3, [pc, #44]	; (80085a8 <__d2b+0xc4>)
 800857a:	6038      	str	r0, [r7, #0]
 800857c:	18e3      	adds	r3, r4, r3
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	18eb      	adds	r3, r5, r3
 8008582:	6958      	ldr	r0, [r3, #20]
 8008584:	f7ff fd22 	bl	8007fcc <__hi0bits>
 8008588:	0164      	lsls	r4, r4, #5
 800858a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858c:	1a24      	subs	r4, r4, r0
 800858e:	601c      	str	r4, [r3, #0]
 8008590:	e7df      	b.n	8008552 <__d2b+0x6e>
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	080098a3 	.word	0x080098a3
 8008598:	0000030a 	.word	0x0000030a
 800859c:	080098b4 	.word	0x080098b4
 80085a0:	fffffbcd 	.word	0xfffffbcd
 80085a4:	fffffbce 	.word	0xfffffbce
 80085a8:	3fffffff 	.word	0x3fffffff

080085ac <_calloc_r>:
 80085ac:	b570      	push	{r4, r5, r6, lr}
 80085ae:	0c13      	lsrs	r3, r2, #16
 80085b0:	0c0d      	lsrs	r5, r1, #16
 80085b2:	d11e      	bne.n	80085f2 <_calloc_r+0x46>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10c      	bne.n	80085d2 <_calloc_r+0x26>
 80085b8:	b289      	uxth	r1, r1
 80085ba:	b294      	uxth	r4, r2
 80085bc:	434c      	muls	r4, r1
 80085be:	0021      	movs	r1, r4
 80085c0:	f000 f88c 	bl	80086dc <_malloc_r>
 80085c4:	1e05      	subs	r5, r0, #0
 80085c6:	d01b      	beq.n	8008600 <_calloc_r+0x54>
 80085c8:	0022      	movs	r2, r4
 80085ca:	2100      	movs	r1, #0
 80085cc:	f7fe f8f4 	bl	80067b8 <memset>
 80085d0:	e016      	b.n	8008600 <_calloc_r+0x54>
 80085d2:	1c1d      	adds	r5, r3, #0
 80085d4:	1c0b      	adds	r3, r1, #0
 80085d6:	b292      	uxth	r2, r2
 80085d8:	b289      	uxth	r1, r1
 80085da:	b29c      	uxth	r4, r3
 80085dc:	4351      	muls	r1, r2
 80085de:	b2ab      	uxth	r3, r5
 80085e0:	4363      	muls	r3, r4
 80085e2:	0c0c      	lsrs	r4, r1, #16
 80085e4:	191c      	adds	r4, r3, r4
 80085e6:	0c22      	lsrs	r2, r4, #16
 80085e8:	d107      	bne.n	80085fa <_calloc_r+0x4e>
 80085ea:	0424      	lsls	r4, r4, #16
 80085ec:	b289      	uxth	r1, r1
 80085ee:	430c      	orrs	r4, r1
 80085f0:	e7e5      	b.n	80085be <_calloc_r+0x12>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <_calloc_r+0x4e>
 80085f6:	1c13      	adds	r3, r2, #0
 80085f8:	e7ed      	b.n	80085d6 <_calloc_r+0x2a>
 80085fa:	230c      	movs	r3, #12
 80085fc:	2500      	movs	r5, #0
 80085fe:	6003      	str	r3, [r0, #0]
 8008600:	0028      	movs	r0, r5
 8008602:	bd70      	pop	{r4, r5, r6, pc}

08008604 <_free_r>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	0005      	movs	r5, r0
 8008608:	2900      	cmp	r1, #0
 800860a:	d010      	beq.n	800862e <_free_r+0x2a>
 800860c:	1f0c      	subs	r4, r1, #4
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	da00      	bge.n	8008616 <_free_r+0x12>
 8008614:	18e4      	adds	r4, r4, r3
 8008616:	0028      	movs	r0, r5
 8008618:	f000 fa9e 	bl	8008b58 <__malloc_lock>
 800861c:	4a1d      	ldr	r2, [pc, #116]	; (8008694 <_free_r+0x90>)
 800861e:	6813      	ldr	r3, [r2, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d105      	bne.n	8008630 <_free_r+0x2c>
 8008624:	6063      	str	r3, [r4, #4]
 8008626:	6014      	str	r4, [r2, #0]
 8008628:	0028      	movs	r0, r5
 800862a:	f000 fa9d 	bl	8008b68 <__malloc_unlock>
 800862e:	bd70      	pop	{r4, r5, r6, pc}
 8008630:	42a3      	cmp	r3, r4
 8008632:	d908      	bls.n	8008646 <_free_r+0x42>
 8008634:	6821      	ldr	r1, [r4, #0]
 8008636:	1860      	adds	r0, r4, r1
 8008638:	4283      	cmp	r3, r0
 800863a:	d1f3      	bne.n	8008624 <_free_r+0x20>
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	1841      	adds	r1, r0, r1
 8008642:	6021      	str	r1, [r4, #0]
 8008644:	e7ee      	b.n	8008624 <_free_r+0x20>
 8008646:	001a      	movs	r2, r3
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <_free_r+0x4e>
 800864e:	42a3      	cmp	r3, r4
 8008650:	d9f9      	bls.n	8008646 <_free_r+0x42>
 8008652:	6811      	ldr	r1, [r2, #0]
 8008654:	1850      	adds	r0, r2, r1
 8008656:	42a0      	cmp	r0, r4
 8008658:	d10b      	bne.n	8008672 <_free_r+0x6e>
 800865a:	6820      	ldr	r0, [r4, #0]
 800865c:	1809      	adds	r1, r1, r0
 800865e:	1850      	adds	r0, r2, r1
 8008660:	6011      	str	r1, [r2, #0]
 8008662:	4283      	cmp	r3, r0
 8008664:	d1e0      	bne.n	8008628 <_free_r+0x24>
 8008666:	6818      	ldr	r0, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	1841      	adds	r1, r0, r1
 800866c:	6011      	str	r1, [r2, #0]
 800866e:	6053      	str	r3, [r2, #4]
 8008670:	e7da      	b.n	8008628 <_free_r+0x24>
 8008672:	42a0      	cmp	r0, r4
 8008674:	d902      	bls.n	800867c <_free_r+0x78>
 8008676:	230c      	movs	r3, #12
 8008678:	602b      	str	r3, [r5, #0]
 800867a:	e7d5      	b.n	8008628 <_free_r+0x24>
 800867c:	6821      	ldr	r1, [r4, #0]
 800867e:	1860      	adds	r0, r4, r1
 8008680:	4283      	cmp	r3, r0
 8008682:	d103      	bne.n	800868c <_free_r+0x88>
 8008684:	6818      	ldr	r0, [r3, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	1841      	adds	r1, r0, r1
 800868a:	6021      	str	r1, [r4, #0]
 800868c:	6063      	str	r3, [r4, #4]
 800868e:	6054      	str	r4, [r2, #4]
 8008690:	e7ca      	b.n	8008628 <_free_r+0x24>
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	200005b4 	.word	0x200005b4

08008698 <sbrk_aligned>:
 8008698:	b570      	push	{r4, r5, r6, lr}
 800869a:	4e0f      	ldr	r6, [pc, #60]	; (80086d8 <sbrk_aligned+0x40>)
 800869c:	000d      	movs	r5, r1
 800869e:	6831      	ldr	r1, [r6, #0]
 80086a0:	0004      	movs	r4, r0
 80086a2:	2900      	cmp	r1, #0
 80086a4:	d102      	bne.n	80086ac <sbrk_aligned+0x14>
 80086a6:	f000 f9f1 	bl	8008a8c <_sbrk_r>
 80086aa:	6030      	str	r0, [r6, #0]
 80086ac:	0029      	movs	r1, r5
 80086ae:	0020      	movs	r0, r4
 80086b0:	f000 f9ec 	bl	8008a8c <_sbrk_r>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d00a      	beq.n	80086ce <sbrk_aligned+0x36>
 80086b8:	2303      	movs	r3, #3
 80086ba:	1cc5      	adds	r5, r0, #3
 80086bc:	439d      	bics	r5, r3
 80086be:	42a8      	cmp	r0, r5
 80086c0:	d007      	beq.n	80086d2 <sbrk_aligned+0x3a>
 80086c2:	1a29      	subs	r1, r5, r0
 80086c4:	0020      	movs	r0, r4
 80086c6:	f000 f9e1 	bl	8008a8c <_sbrk_r>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	d101      	bne.n	80086d2 <sbrk_aligned+0x3a>
 80086ce:	2501      	movs	r5, #1
 80086d0:	426d      	negs	r5, r5
 80086d2:	0028      	movs	r0, r5
 80086d4:	bd70      	pop	{r4, r5, r6, pc}
 80086d6:	46c0      	nop			; (mov r8, r8)
 80086d8:	200005b8 	.word	0x200005b8

080086dc <_malloc_r>:
 80086dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086de:	2203      	movs	r2, #3
 80086e0:	1ccb      	adds	r3, r1, #3
 80086e2:	4393      	bics	r3, r2
 80086e4:	3308      	adds	r3, #8
 80086e6:	0006      	movs	r6, r0
 80086e8:	001f      	movs	r7, r3
 80086ea:	2b0c      	cmp	r3, #12
 80086ec:	d232      	bcs.n	8008754 <_malloc_r+0x78>
 80086ee:	270c      	movs	r7, #12
 80086f0:	42b9      	cmp	r1, r7
 80086f2:	d831      	bhi.n	8008758 <_malloc_r+0x7c>
 80086f4:	0030      	movs	r0, r6
 80086f6:	f000 fa2f 	bl	8008b58 <__malloc_lock>
 80086fa:	4d32      	ldr	r5, [pc, #200]	; (80087c4 <_malloc_r+0xe8>)
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	001c      	movs	r4, r3
 8008700:	2c00      	cmp	r4, #0
 8008702:	d12e      	bne.n	8008762 <_malloc_r+0x86>
 8008704:	0039      	movs	r1, r7
 8008706:	0030      	movs	r0, r6
 8008708:	f7ff ffc6 	bl	8008698 <sbrk_aligned>
 800870c:	0004      	movs	r4, r0
 800870e:	1c43      	adds	r3, r0, #1
 8008710:	d11e      	bne.n	8008750 <_malloc_r+0x74>
 8008712:	682c      	ldr	r4, [r5, #0]
 8008714:	0025      	movs	r5, r4
 8008716:	2d00      	cmp	r5, #0
 8008718:	d14a      	bne.n	80087b0 <_malloc_r+0xd4>
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	0029      	movs	r1, r5
 800871e:	18e3      	adds	r3, r4, r3
 8008720:	0030      	movs	r0, r6
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	f000 f9b2 	bl	8008a8c <_sbrk_r>
 8008728:	9b01      	ldr	r3, [sp, #4]
 800872a:	4283      	cmp	r3, r0
 800872c:	d143      	bne.n	80087b6 <_malloc_r+0xda>
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	3703      	adds	r7, #3
 8008732:	1aff      	subs	r7, r7, r3
 8008734:	2303      	movs	r3, #3
 8008736:	439f      	bics	r7, r3
 8008738:	3708      	adds	r7, #8
 800873a:	2f0c      	cmp	r7, #12
 800873c:	d200      	bcs.n	8008740 <_malloc_r+0x64>
 800873e:	270c      	movs	r7, #12
 8008740:	0039      	movs	r1, r7
 8008742:	0030      	movs	r0, r6
 8008744:	f7ff ffa8 	bl	8008698 <sbrk_aligned>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d034      	beq.n	80087b6 <_malloc_r+0xda>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	19df      	adds	r7, r3, r7
 8008750:	6027      	str	r7, [r4, #0]
 8008752:	e013      	b.n	800877c <_malloc_r+0xa0>
 8008754:	2b00      	cmp	r3, #0
 8008756:	dacb      	bge.n	80086f0 <_malloc_r+0x14>
 8008758:	230c      	movs	r3, #12
 800875a:	2500      	movs	r5, #0
 800875c:	6033      	str	r3, [r6, #0]
 800875e:	0028      	movs	r0, r5
 8008760:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008762:	6822      	ldr	r2, [r4, #0]
 8008764:	1bd1      	subs	r1, r2, r7
 8008766:	d420      	bmi.n	80087aa <_malloc_r+0xce>
 8008768:	290b      	cmp	r1, #11
 800876a:	d917      	bls.n	800879c <_malloc_r+0xc0>
 800876c:	19e2      	adds	r2, r4, r7
 800876e:	6027      	str	r7, [r4, #0]
 8008770:	42a3      	cmp	r3, r4
 8008772:	d111      	bne.n	8008798 <_malloc_r+0xbc>
 8008774:	602a      	str	r2, [r5, #0]
 8008776:	6863      	ldr	r3, [r4, #4]
 8008778:	6011      	str	r1, [r2, #0]
 800877a:	6053      	str	r3, [r2, #4]
 800877c:	0030      	movs	r0, r6
 800877e:	0025      	movs	r5, r4
 8008780:	f000 f9f2 	bl	8008b68 <__malloc_unlock>
 8008784:	2207      	movs	r2, #7
 8008786:	350b      	adds	r5, #11
 8008788:	1d23      	adds	r3, r4, #4
 800878a:	4395      	bics	r5, r2
 800878c:	1aea      	subs	r2, r5, r3
 800878e:	429d      	cmp	r5, r3
 8008790:	d0e5      	beq.n	800875e <_malloc_r+0x82>
 8008792:	1b5b      	subs	r3, r3, r5
 8008794:	50a3      	str	r3, [r4, r2]
 8008796:	e7e2      	b.n	800875e <_malloc_r+0x82>
 8008798:	605a      	str	r2, [r3, #4]
 800879a:	e7ec      	b.n	8008776 <_malloc_r+0x9a>
 800879c:	6862      	ldr	r2, [r4, #4]
 800879e:	42a3      	cmp	r3, r4
 80087a0:	d101      	bne.n	80087a6 <_malloc_r+0xca>
 80087a2:	602a      	str	r2, [r5, #0]
 80087a4:	e7ea      	b.n	800877c <_malloc_r+0xa0>
 80087a6:	605a      	str	r2, [r3, #4]
 80087a8:	e7e8      	b.n	800877c <_malloc_r+0xa0>
 80087aa:	0023      	movs	r3, r4
 80087ac:	6864      	ldr	r4, [r4, #4]
 80087ae:	e7a7      	b.n	8008700 <_malloc_r+0x24>
 80087b0:	002c      	movs	r4, r5
 80087b2:	686d      	ldr	r5, [r5, #4]
 80087b4:	e7af      	b.n	8008716 <_malloc_r+0x3a>
 80087b6:	230c      	movs	r3, #12
 80087b8:	0030      	movs	r0, r6
 80087ba:	6033      	str	r3, [r6, #0]
 80087bc:	f000 f9d4 	bl	8008b68 <__malloc_unlock>
 80087c0:	e7cd      	b.n	800875e <_malloc_r+0x82>
 80087c2:	46c0      	nop			; (mov r8, r8)
 80087c4:	200005b4 	.word	0x200005b4

080087c8 <__ssputs_r>:
 80087c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ca:	688e      	ldr	r6, [r1, #8]
 80087cc:	b085      	sub	sp, #20
 80087ce:	0007      	movs	r7, r0
 80087d0:	000c      	movs	r4, r1
 80087d2:	9203      	str	r2, [sp, #12]
 80087d4:	9301      	str	r3, [sp, #4]
 80087d6:	429e      	cmp	r6, r3
 80087d8:	d83c      	bhi.n	8008854 <__ssputs_r+0x8c>
 80087da:	2390      	movs	r3, #144	; 0x90
 80087dc:	898a      	ldrh	r2, [r1, #12]
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	421a      	tst	r2, r3
 80087e2:	d034      	beq.n	800884e <__ssputs_r+0x86>
 80087e4:	6909      	ldr	r1, [r1, #16]
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	6960      	ldr	r0, [r4, #20]
 80087ea:	1a5b      	subs	r3, r3, r1
 80087ec:	9302      	str	r3, [sp, #8]
 80087ee:	2303      	movs	r3, #3
 80087f0:	4343      	muls	r3, r0
 80087f2:	0fdd      	lsrs	r5, r3, #31
 80087f4:	18ed      	adds	r5, r5, r3
 80087f6:	9b01      	ldr	r3, [sp, #4]
 80087f8:	9802      	ldr	r0, [sp, #8]
 80087fa:	3301      	adds	r3, #1
 80087fc:	181b      	adds	r3, r3, r0
 80087fe:	106d      	asrs	r5, r5, #1
 8008800:	42ab      	cmp	r3, r5
 8008802:	d900      	bls.n	8008806 <__ssputs_r+0x3e>
 8008804:	001d      	movs	r5, r3
 8008806:	0553      	lsls	r3, r2, #21
 8008808:	d532      	bpl.n	8008870 <__ssputs_r+0xa8>
 800880a:	0029      	movs	r1, r5
 800880c:	0038      	movs	r0, r7
 800880e:	f7ff ff65 	bl	80086dc <_malloc_r>
 8008812:	1e06      	subs	r6, r0, #0
 8008814:	d109      	bne.n	800882a <__ssputs_r+0x62>
 8008816:	230c      	movs	r3, #12
 8008818:	603b      	str	r3, [r7, #0]
 800881a:	2340      	movs	r3, #64	; 0x40
 800881c:	2001      	movs	r0, #1
 800881e:	89a2      	ldrh	r2, [r4, #12]
 8008820:	4240      	negs	r0, r0
 8008822:	4313      	orrs	r3, r2
 8008824:	81a3      	strh	r3, [r4, #12]
 8008826:	b005      	add	sp, #20
 8008828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800882a:	9a02      	ldr	r2, [sp, #8]
 800882c:	6921      	ldr	r1, [r4, #16]
 800882e:	f7ff fb18 	bl	8007e62 <memcpy>
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	4a14      	ldr	r2, [pc, #80]	; (8008888 <__ssputs_r+0xc0>)
 8008836:	401a      	ands	r2, r3
 8008838:	2380      	movs	r3, #128	; 0x80
 800883a:	4313      	orrs	r3, r2
 800883c:	81a3      	strh	r3, [r4, #12]
 800883e:	9b02      	ldr	r3, [sp, #8]
 8008840:	6126      	str	r6, [r4, #16]
 8008842:	18f6      	adds	r6, r6, r3
 8008844:	6026      	str	r6, [r4, #0]
 8008846:	6165      	str	r5, [r4, #20]
 8008848:	9e01      	ldr	r6, [sp, #4]
 800884a:	1aed      	subs	r5, r5, r3
 800884c:	60a5      	str	r5, [r4, #8]
 800884e:	9b01      	ldr	r3, [sp, #4]
 8008850:	429e      	cmp	r6, r3
 8008852:	d900      	bls.n	8008856 <__ssputs_r+0x8e>
 8008854:	9e01      	ldr	r6, [sp, #4]
 8008856:	0032      	movs	r2, r6
 8008858:	9903      	ldr	r1, [sp, #12]
 800885a:	6820      	ldr	r0, [r4, #0]
 800885c:	f000 f968 	bl	8008b30 <memmove>
 8008860:	68a3      	ldr	r3, [r4, #8]
 8008862:	2000      	movs	r0, #0
 8008864:	1b9b      	subs	r3, r3, r6
 8008866:	60a3      	str	r3, [r4, #8]
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	199e      	adds	r6, r3, r6
 800886c:	6026      	str	r6, [r4, #0]
 800886e:	e7da      	b.n	8008826 <__ssputs_r+0x5e>
 8008870:	002a      	movs	r2, r5
 8008872:	0038      	movs	r0, r7
 8008874:	f000 f980 	bl	8008b78 <_realloc_r>
 8008878:	1e06      	subs	r6, r0, #0
 800887a:	d1e0      	bne.n	800883e <__ssputs_r+0x76>
 800887c:	0038      	movs	r0, r7
 800887e:	6921      	ldr	r1, [r4, #16]
 8008880:	f7ff fec0 	bl	8008604 <_free_r>
 8008884:	e7c7      	b.n	8008816 <__ssputs_r+0x4e>
 8008886:	46c0      	nop			; (mov r8, r8)
 8008888:	fffffb7f 	.word	0xfffffb7f

0800888c <_svfiprintf_r>:
 800888c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800888e:	b0a1      	sub	sp, #132	; 0x84
 8008890:	9003      	str	r0, [sp, #12]
 8008892:	001d      	movs	r5, r3
 8008894:	898b      	ldrh	r3, [r1, #12]
 8008896:	000f      	movs	r7, r1
 8008898:	0016      	movs	r6, r2
 800889a:	061b      	lsls	r3, r3, #24
 800889c:	d511      	bpl.n	80088c2 <_svfiprintf_r+0x36>
 800889e:	690b      	ldr	r3, [r1, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10e      	bne.n	80088c2 <_svfiprintf_r+0x36>
 80088a4:	2140      	movs	r1, #64	; 0x40
 80088a6:	f7ff ff19 	bl	80086dc <_malloc_r>
 80088aa:	6038      	str	r0, [r7, #0]
 80088ac:	6138      	str	r0, [r7, #16]
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d105      	bne.n	80088be <_svfiprintf_r+0x32>
 80088b2:	230c      	movs	r3, #12
 80088b4:	9a03      	ldr	r2, [sp, #12]
 80088b6:	3801      	subs	r0, #1
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	b021      	add	sp, #132	; 0x84
 80088bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088be:	2340      	movs	r3, #64	; 0x40
 80088c0:	617b      	str	r3, [r7, #20]
 80088c2:	2300      	movs	r3, #0
 80088c4:	ac08      	add	r4, sp, #32
 80088c6:	6163      	str	r3, [r4, #20]
 80088c8:	3320      	adds	r3, #32
 80088ca:	7663      	strb	r3, [r4, #25]
 80088cc:	3310      	adds	r3, #16
 80088ce:	76a3      	strb	r3, [r4, #26]
 80088d0:	9507      	str	r5, [sp, #28]
 80088d2:	0035      	movs	r5, r6
 80088d4:	782b      	ldrb	r3, [r5, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <_svfiprintf_r+0x52>
 80088da:	2b25      	cmp	r3, #37	; 0x25
 80088dc:	d147      	bne.n	800896e <_svfiprintf_r+0xe2>
 80088de:	1bab      	subs	r3, r5, r6
 80088e0:	9305      	str	r3, [sp, #20]
 80088e2:	42b5      	cmp	r5, r6
 80088e4:	d00c      	beq.n	8008900 <_svfiprintf_r+0x74>
 80088e6:	0032      	movs	r2, r6
 80088e8:	0039      	movs	r1, r7
 80088ea:	9803      	ldr	r0, [sp, #12]
 80088ec:	f7ff ff6c 	bl	80087c8 <__ssputs_r>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d100      	bne.n	80088f6 <_svfiprintf_r+0x6a>
 80088f4:	e0ae      	b.n	8008a54 <_svfiprintf_r+0x1c8>
 80088f6:	6962      	ldr	r2, [r4, #20]
 80088f8:	9b05      	ldr	r3, [sp, #20]
 80088fa:	4694      	mov	ip, r2
 80088fc:	4463      	add	r3, ip
 80088fe:	6163      	str	r3, [r4, #20]
 8008900:	782b      	ldrb	r3, [r5, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d100      	bne.n	8008908 <_svfiprintf_r+0x7c>
 8008906:	e0a5      	b.n	8008a54 <_svfiprintf_r+0x1c8>
 8008908:	2201      	movs	r2, #1
 800890a:	2300      	movs	r3, #0
 800890c:	4252      	negs	r2, r2
 800890e:	6062      	str	r2, [r4, #4]
 8008910:	a904      	add	r1, sp, #16
 8008912:	3254      	adds	r2, #84	; 0x54
 8008914:	1852      	adds	r2, r2, r1
 8008916:	1c6e      	adds	r6, r5, #1
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	60e3      	str	r3, [r4, #12]
 800891c:	60a3      	str	r3, [r4, #8]
 800891e:	7013      	strb	r3, [r2, #0]
 8008920:	65a3      	str	r3, [r4, #88]	; 0x58
 8008922:	2205      	movs	r2, #5
 8008924:	7831      	ldrb	r1, [r6, #0]
 8008926:	4854      	ldr	r0, [pc, #336]	; (8008a78 <_svfiprintf_r+0x1ec>)
 8008928:	f7ff fa90 	bl	8007e4c <memchr>
 800892c:	1c75      	adds	r5, r6, #1
 800892e:	2800      	cmp	r0, #0
 8008930:	d11f      	bne.n	8008972 <_svfiprintf_r+0xe6>
 8008932:	6822      	ldr	r2, [r4, #0]
 8008934:	06d3      	lsls	r3, r2, #27
 8008936:	d504      	bpl.n	8008942 <_svfiprintf_r+0xb6>
 8008938:	2353      	movs	r3, #83	; 0x53
 800893a:	a904      	add	r1, sp, #16
 800893c:	185b      	adds	r3, r3, r1
 800893e:	2120      	movs	r1, #32
 8008940:	7019      	strb	r1, [r3, #0]
 8008942:	0713      	lsls	r3, r2, #28
 8008944:	d504      	bpl.n	8008950 <_svfiprintf_r+0xc4>
 8008946:	2353      	movs	r3, #83	; 0x53
 8008948:	a904      	add	r1, sp, #16
 800894a:	185b      	adds	r3, r3, r1
 800894c:	212b      	movs	r1, #43	; 0x2b
 800894e:	7019      	strb	r1, [r3, #0]
 8008950:	7833      	ldrb	r3, [r6, #0]
 8008952:	2b2a      	cmp	r3, #42	; 0x2a
 8008954:	d016      	beq.n	8008984 <_svfiprintf_r+0xf8>
 8008956:	0035      	movs	r5, r6
 8008958:	2100      	movs	r1, #0
 800895a:	200a      	movs	r0, #10
 800895c:	68e3      	ldr	r3, [r4, #12]
 800895e:	782a      	ldrb	r2, [r5, #0]
 8008960:	1c6e      	adds	r6, r5, #1
 8008962:	3a30      	subs	r2, #48	; 0x30
 8008964:	2a09      	cmp	r2, #9
 8008966:	d94e      	bls.n	8008a06 <_svfiprintf_r+0x17a>
 8008968:	2900      	cmp	r1, #0
 800896a:	d111      	bne.n	8008990 <_svfiprintf_r+0x104>
 800896c:	e017      	b.n	800899e <_svfiprintf_r+0x112>
 800896e:	3501      	adds	r5, #1
 8008970:	e7b0      	b.n	80088d4 <_svfiprintf_r+0x48>
 8008972:	4b41      	ldr	r3, [pc, #260]	; (8008a78 <_svfiprintf_r+0x1ec>)
 8008974:	6822      	ldr	r2, [r4, #0]
 8008976:	1ac0      	subs	r0, r0, r3
 8008978:	2301      	movs	r3, #1
 800897a:	4083      	lsls	r3, r0
 800897c:	4313      	orrs	r3, r2
 800897e:	002e      	movs	r6, r5
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	e7ce      	b.n	8008922 <_svfiprintf_r+0x96>
 8008984:	9b07      	ldr	r3, [sp, #28]
 8008986:	1d19      	adds	r1, r3, #4
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	9107      	str	r1, [sp, #28]
 800898c:	2b00      	cmp	r3, #0
 800898e:	db01      	blt.n	8008994 <_svfiprintf_r+0x108>
 8008990:	930b      	str	r3, [sp, #44]	; 0x2c
 8008992:	e004      	b.n	800899e <_svfiprintf_r+0x112>
 8008994:	425b      	negs	r3, r3
 8008996:	60e3      	str	r3, [r4, #12]
 8008998:	2302      	movs	r3, #2
 800899a:	4313      	orrs	r3, r2
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	782b      	ldrb	r3, [r5, #0]
 80089a0:	2b2e      	cmp	r3, #46	; 0x2e
 80089a2:	d10a      	bne.n	80089ba <_svfiprintf_r+0x12e>
 80089a4:	786b      	ldrb	r3, [r5, #1]
 80089a6:	2b2a      	cmp	r3, #42	; 0x2a
 80089a8:	d135      	bne.n	8008a16 <_svfiprintf_r+0x18a>
 80089aa:	9b07      	ldr	r3, [sp, #28]
 80089ac:	3502      	adds	r5, #2
 80089ae:	1d1a      	adds	r2, r3, #4
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	9207      	str	r2, [sp, #28]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	db2b      	blt.n	8008a10 <_svfiprintf_r+0x184>
 80089b8:	9309      	str	r3, [sp, #36]	; 0x24
 80089ba:	4e30      	ldr	r6, [pc, #192]	; (8008a7c <_svfiprintf_r+0x1f0>)
 80089bc:	2203      	movs	r2, #3
 80089be:	0030      	movs	r0, r6
 80089c0:	7829      	ldrb	r1, [r5, #0]
 80089c2:	f7ff fa43 	bl	8007e4c <memchr>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d006      	beq.n	80089d8 <_svfiprintf_r+0x14c>
 80089ca:	2340      	movs	r3, #64	; 0x40
 80089cc:	1b80      	subs	r0, r0, r6
 80089ce:	4083      	lsls	r3, r0
 80089d0:	6822      	ldr	r2, [r4, #0]
 80089d2:	3501      	adds	r5, #1
 80089d4:	4313      	orrs	r3, r2
 80089d6:	6023      	str	r3, [r4, #0]
 80089d8:	7829      	ldrb	r1, [r5, #0]
 80089da:	2206      	movs	r2, #6
 80089dc:	4828      	ldr	r0, [pc, #160]	; (8008a80 <_svfiprintf_r+0x1f4>)
 80089de:	1c6e      	adds	r6, r5, #1
 80089e0:	7621      	strb	r1, [r4, #24]
 80089e2:	f7ff fa33 	bl	8007e4c <memchr>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d03c      	beq.n	8008a64 <_svfiprintf_r+0x1d8>
 80089ea:	4b26      	ldr	r3, [pc, #152]	; (8008a84 <_svfiprintf_r+0x1f8>)
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d125      	bne.n	8008a3c <_svfiprintf_r+0x1b0>
 80089f0:	2207      	movs	r2, #7
 80089f2:	9b07      	ldr	r3, [sp, #28]
 80089f4:	3307      	adds	r3, #7
 80089f6:	4393      	bics	r3, r2
 80089f8:	3308      	adds	r3, #8
 80089fa:	9307      	str	r3, [sp, #28]
 80089fc:	6963      	ldr	r3, [r4, #20]
 80089fe:	9a04      	ldr	r2, [sp, #16]
 8008a00:	189b      	adds	r3, r3, r2
 8008a02:	6163      	str	r3, [r4, #20]
 8008a04:	e765      	b.n	80088d2 <_svfiprintf_r+0x46>
 8008a06:	4343      	muls	r3, r0
 8008a08:	0035      	movs	r5, r6
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	189b      	adds	r3, r3, r2
 8008a0e:	e7a6      	b.n	800895e <_svfiprintf_r+0xd2>
 8008a10:	2301      	movs	r3, #1
 8008a12:	425b      	negs	r3, r3
 8008a14:	e7d0      	b.n	80089b8 <_svfiprintf_r+0x12c>
 8008a16:	2300      	movs	r3, #0
 8008a18:	200a      	movs	r0, #10
 8008a1a:	001a      	movs	r2, r3
 8008a1c:	3501      	adds	r5, #1
 8008a1e:	6063      	str	r3, [r4, #4]
 8008a20:	7829      	ldrb	r1, [r5, #0]
 8008a22:	1c6e      	adds	r6, r5, #1
 8008a24:	3930      	subs	r1, #48	; 0x30
 8008a26:	2909      	cmp	r1, #9
 8008a28:	d903      	bls.n	8008a32 <_svfiprintf_r+0x1a6>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d0c5      	beq.n	80089ba <_svfiprintf_r+0x12e>
 8008a2e:	9209      	str	r2, [sp, #36]	; 0x24
 8008a30:	e7c3      	b.n	80089ba <_svfiprintf_r+0x12e>
 8008a32:	4342      	muls	r2, r0
 8008a34:	0035      	movs	r5, r6
 8008a36:	2301      	movs	r3, #1
 8008a38:	1852      	adds	r2, r2, r1
 8008a3a:	e7f1      	b.n	8008a20 <_svfiprintf_r+0x194>
 8008a3c:	ab07      	add	r3, sp, #28
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	003a      	movs	r2, r7
 8008a42:	0021      	movs	r1, r4
 8008a44:	4b10      	ldr	r3, [pc, #64]	; (8008a88 <_svfiprintf_r+0x1fc>)
 8008a46:	9803      	ldr	r0, [sp, #12]
 8008a48:	f7fd ff68 	bl	800691c <_printf_float>
 8008a4c:	9004      	str	r0, [sp, #16]
 8008a4e:	9b04      	ldr	r3, [sp, #16]
 8008a50:	3301      	adds	r3, #1
 8008a52:	d1d3      	bne.n	80089fc <_svfiprintf_r+0x170>
 8008a54:	89bb      	ldrh	r3, [r7, #12]
 8008a56:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008a58:	065b      	lsls	r3, r3, #25
 8008a5a:	d400      	bmi.n	8008a5e <_svfiprintf_r+0x1d2>
 8008a5c:	e72d      	b.n	80088ba <_svfiprintf_r+0x2e>
 8008a5e:	2001      	movs	r0, #1
 8008a60:	4240      	negs	r0, r0
 8008a62:	e72a      	b.n	80088ba <_svfiprintf_r+0x2e>
 8008a64:	ab07      	add	r3, sp, #28
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	003a      	movs	r2, r7
 8008a6a:	0021      	movs	r1, r4
 8008a6c:	4b06      	ldr	r3, [pc, #24]	; (8008a88 <_svfiprintf_r+0x1fc>)
 8008a6e:	9803      	ldr	r0, [sp, #12]
 8008a70:	f7fe fa06 	bl	8006e80 <_printf_i>
 8008a74:	e7ea      	b.n	8008a4c <_svfiprintf_r+0x1c0>
 8008a76:	46c0      	nop			; (mov r8, r8)
 8008a78:	08009a0c 	.word	0x08009a0c
 8008a7c:	08009a12 	.word	0x08009a12
 8008a80:	08009a16 	.word	0x08009a16
 8008a84:	0800691d 	.word	0x0800691d
 8008a88:	080087c9 	.word	0x080087c9

08008a8c <_sbrk_r>:
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	b570      	push	{r4, r5, r6, lr}
 8008a90:	4d06      	ldr	r5, [pc, #24]	; (8008aac <_sbrk_r+0x20>)
 8008a92:	0004      	movs	r4, r0
 8008a94:	0008      	movs	r0, r1
 8008a96:	602b      	str	r3, [r5, #0]
 8008a98:	f7fa fe9e 	bl	80037d8 <_sbrk>
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	d103      	bne.n	8008aa8 <_sbrk_r+0x1c>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d000      	beq.n	8008aa8 <_sbrk_r+0x1c>
 8008aa6:	6023      	str	r3, [r4, #0]
 8008aa8:	bd70      	pop	{r4, r5, r6, pc}
 8008aaa:	46c0      	nop			; (mov r8, r8)
 8008aac:	200005bc 	.word	0x200005bc

08008ab0 <__assert_func>:
 8008ab0:	b530      	push	{r4, r5, lr}
 8008ab2:	0014      	movs	r4, r2
 8008ab4:	001a      	movs	r2, r3
 8008ab6:	4b09      	ldr	r3, [pc, #36]	; (8008adc <__assert_func+0x2c>)
 8008ab8:	0005      	movs	r5, r0
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	b085      	sub	sp, #20
 8008abe:	68d8      	ldr	r0, [r3, #12]
 8008ac0:	4b07      	ldr	r3, [pc, #28]	; (8008ae0 <__assert_func+0x30>)
 8008ac2:	2c00      	cmp	r4, #0
 8008ac4:	d101      	bne.n	8008aca <__assert_func+0x1a>
 8008ac6:	4b07      	ldr	r3, [pc, #28]	; (8008ae4 <__assert_func+0x34>)
 8008ac8:	001c      	movs	r4, r3
 8008aca:	9301      	str	r3, [sp, #4]
 8008acc:	9100      	str	r1, [sp, #0]
 8008ace:	002b      	movs	r3, r5
 8008ad0:	4905      	ldr	r1, [pc, #20]	; (8008ae8 <__assert_func+0x38>)
 8008ad2:	9402      	str	r4, [sp, #8]
 8008ad4:	f000 f80a 	bl	8008aec <fiprintf>
 8008ad8:	f000 faba 	bl	8009050 <abort>
 8008adc:	20000044 	.word	0x20000044
 8008ae0:	08009a1d 	.word	0x08009a1d
 8008ae4:	08009a58 	.word	0x08009a58
 8008ae8:	08009a2a 	.word	0x08009a2a

08008aec <fiprintf>:
 8008aec:	b40e      	push	{r1, r2, r3}
 8008aee:	b503      	push	{r0, r1, lr}
 8008af0:	0001      	movs	r1, r0
 8008af2:	ab03      	add	r3, sp, #12
 8008af4:	4804      	ldr	r0, [pc, #16]	; (8008b08 <fiprintf+0x1c>)
 8008af6:	cb04      	ldmia	r3!, {r2}
 8008af8:	6800      	ldr	r0, [r0, #0]
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	f000 f892 	bl	8008c24 <_vfiprintf_r>
 8008b00:	b002      	add	sp, #8
 8008b02:	bc08      	pop	{r3}
 8008b04:	b003      	add	sp, #12
 8008b06:	4718      	bx	r3
 8008b08:	20000044 	.word	0x20000044

08008b0c <__ascii_mbtowc>:
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	d100      	bne.n	8008b14 <__ascii_mbtowc+0x8>
 8008b12:	a901      	add	r1, sp, #4
 8008b14:	1e10      	subs	r0, r2, #0
 8008b16:	d006      	beq.n	8008b26 <__ascii_mbtowc+0x1a>
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d006      	beq.n	8008b2a <__ascii_mbtowc+0x1e>
 8008b1c:	7813      	ldrb	r3, [r2, #0]
 8008b1e:	600b      	str	r3, [r1, #0]
 8008b20:	7810      	ldrb	r0, [r2, #0]
 8008b22:	1e43      	subs	r3, r0, #1
 8008b24:	4198      	sbcs	r0, r3
 8008b26:	b002      	add	sp, #8
 8008b28:	4770      	bx	lr
 8008b2a:	2002      	movs	r0, #2
 8008b2c:	4240      	negs	r0, r0
 8008b2e:	e7fa      	b.n	8008b26 <__ascii_mbtowc+0x1a>

08008b30 <memmove>:
 8008b30:	b510      	push	{r4, lr}
 8008b32:	4288      	cmp	r0, r1
 8008b34:	d902      	bls.n	8008b3c <memmove+0xc>
 8008b36:	188b      	adds	r3, r1, r2
 8008b38:	4298      	cmp	r0, r3
 8008b3a:	d303      	bcc.n	8008b44 <memmove+0x14>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	e007      	b.n	8008b50 <memmove+0x20>
 8008b40:	5c8b      	ldrb	r3, [r1, r2]
 8008b42:	5483      	strb	r3, [r0, r2]
 8008b44:	3a01      	subs	r2, #1
 8008b46:	d2fb      	bcs.n	8008b40 <memmove+0x10>
 8008b48:	bd10      	pop	{r4, pc}
 8008b4a:	5ccc      	ldrb	r4, [r1, r3]
 8008b4c:	54c4      	strb	r4, [r0, r3]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d1fa      	bne.n	8008b4a <memmove+0x1a>
 8008b54:	e7f8      	b.n	8008b48 <memmove+0x18>
	...

08008b58 <__malloc_lock>:
 8008b58:	b510      	push	{r4, lr}
 8008b5a:	4802      	ldr	r0, [pc, #8]	; (8008b64 <__malloc_lock+0xc>)
 8008b5c:	f000 fc4f 	bl	80093fe <__retarget_lock_acquire_recursive>
 8008b60:	bd10      	pop	{r4, pc}
 8008b62:	46c0      	nop			; (mov r8, r8)
 8008b64:	200005c0 	.word	0x200005c0

08008b68 <__malloc_unlock>:
 8008b68:	b510      	push	{r4, lr}
 8008b6a:	4802      	ldr	r0, [pc, #8]	; (8008b74 <__malloc_unlock+0xc>)
 8008b6c:	f000 fc48 	bl	8009400 <__retarget_lock_release_recursive>
 8008b70:	bd10      	pop	{r4, pc}
 8008b72:	46c0      	nop			; (mov r8, r8)
 8008b74:	200005c0 	.word	0x200005c0

08008b78 <_realloc_r>:
 8008b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b7a:	0007      	movs	r7, r0
 8008b7c:	000e      	movs	r6, r1
 8008b7e:	0014      	movs	r4, r2
 8008b80:	2900      	cmp	r1, #0
 8008b82:	d105      	bne.n	8008b90 <_realloc_r+0x18>
 8008b84:	0011      	movs	r1, r2
 8008b86:	f7ff fda9 	bl	80086dc <_malloc_r>
 8008b8a:	0005      	movs	r5, r0
 8008b8c:	0028      	movs	r0, r5
 8008b8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b90:	2a00      	cmp	r2, #0
 8008b92:	d103      	bne.n	8008b9c <_realloc_r+0x24>
 8008b94:	f7ff fd36 	bl	8008604 <_free_r>
 8008b98:	0025      	movs	r5, r4
 8008b9a:	e7f7      	b.n	8008b8c <_realloc_r+0x14>
 8008b9c:	f000 fc9e 	bl	80094dc <_malloc_usable_size_r>
 8008ba0:	9001      	str	r0, [sp, #4]
 8008ba2:	4284      	cmp	r4, r0
 8008ba4:	d803      	bhi.n	8008bae <_realloc_r+0x36>
 8008ba6:	0035      	movs	r5, r6
 8008ba8:	0843      	lsrs	r3, r0, #1
 8008baa:	42a3      	cmp	r3, r4
 8008bac:	d3ee      	bcc.n	8008b8c <_realloc_r+0x14>
 8008bae:	0021      	movs	r1, r4
 8008bb0:	0038      	movs	r0, r7
 8008bb2:	f7ff fd93 	bl	80086dc <_malloc_r>
 8008bb6:	1e05      	subs	r5, r0, #0
 8008bb8:	d0e8      	beq.n	8008b8c <_realloc_r+0x14>
 8008bba:	9b01      	ldr	r3, [sp, #4]
 8008bbc:	0022      	movs	r2, r4
 8008bbe:	429c      	cmp	r4, r3
 8008bc0:	d900      	bls.n	8008bc4 <_realloc_r+0x4c>
 8008bc2:	001a      	movs	r2, r3
 8008bc4:	0031      	movs	r1, r6
 8008bc6:	0028      	movs	r0, r5
 8008bc8:	f7ff f94b 	bl	8007e62 <memcpy>
 8008bcc:	0031      	movs	r1, r6
 8008bce:	0038      	movs	r0, r7
 8008bd0:	f7ff fd18 	bl	8008604 <_free_r>
 8008bd4:	e7da      	b.n	8008b8c <_realloc_r+0x14>

08008bd6 <__sfputc_r>:
 8008bd6:	6893      	ldr	r3, [r2, #8]
 8008bd8:	b510      	push	{r4, lr}
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	6093      	str	r3, [r2, #8]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	da04      	bge.n	8008bec <__sfputc_r+0x16>
 8008be2:	6994      	ldr	r4, [r2, #24]
 8008be4:	42a3      	cmp	r3, r4
 8008be6:	db07      	blt.n	8008bf8 <__sfputc_r+0x22>
 8008be8:	290a      	cmp	r1, #10
 8008bea:	d005      	beq.n	8008bf8 <__sfputc_r+0x22>
 8008bec:	6813      	ldr	r3, [r2, #0]
 8008bee:	1c58      	adds	r0, r3, #1
 8008bf0:	6010      	str	r0, [r2, #0]
 8008bf2:	7019      	strb	r1, [r3, #0]
 8008bf4:	0008      	movs	r0, r1
 8008bf6:	bd10      	pop	{r4, pc}
 8008bf8:	f000 f94e 	bl	8008e98 <__swbuf_r>
 8008bfc:	0001      	movs	r1, r0
 8008bfe:	e7f9      	b.n	8008bf4 <__sfputc_r+0x1e>

08008c00 <__sfputs_r>:
 8008c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c02:	0006      	movs	r6, r0
 8008c04:	000f      	movs	r7, r1
 8008c06:	0014      	movs	r4, r2
 8008c08:	18d5      	adds	r5, r2, r3
 8008c0a:	42ac      	cmp	r4, r5
 8008c0c:	d101      	bne.n	8008c12 <__sfputs_r+0x12>
 8008c0e:	2000      	movs	r0, #0
 8008c10:	e007      	b.n	8008c22 <__sfputs_r+0x22>
 8008c12:	7821      	ldrb	r1, [r4, #0]
 8008c14:	003a      	movs	r2, r7
 8008c16:	0030      	movs	r0, r6
 8008c18:	f7ff ffdd 	bl	8008bd6 <__sfputc_r>
 8008c1c:	3401      	adds	r4, #1
 8008c1e:	1c43      	adds	r3, r0, #1
 8008c20:	d1f3      	bne.n	8008c0a <__sfputs_r+0xa>
 8008c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c24 <_vfiprintf_r>:
 8008c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c26:	b0a1      	sub	sp, #132	; 0x84
 8008c28:	0006      	movs	r6, r0
 8008c2a:	000c      	movs	r4, r1
 8008c2c:	001f      	movs	r7, r3
 8008c2e:	9203      	str	r2, [sp, #12]
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d004      	beq.n	8008c3e <_vfiprintf_r+0x1a>
 8008c34:	6983      	ldr	r3, [r0, #24]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <_vfiprintf_r+0x1a>
 8008c3a:	f000 fb3f 	bl	80092bc <__sinit>
 8008c3e:	4b8e      	ldr	r3, [pc, #568]	; (8008e78 <_vfiprintf_r+0x254>)
 8008c40:	429c      	cmp	r4, r3
 8008c42:	d11c      	bne.n	8008c7e <_vfiprintf_r+0x5a>
 8008c44:	6874      	ldr	r4, [r6, #4]
 8008c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c48:	07db      	lsls	r3, r3, #31
 8008c4a:	d405      	bmi.n	8008c58 <_vfiprintf_r+0x34>
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	059b      	lsls	r3, r3, #22
 8008c50:	d402      	bmi.n	8008c58 <_vfiprintf_r+0x34>
 8008c52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c54:	f000 fbd3 	bl	80093fe <__retarget_lock_acquire_recursive>
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	071b      	lsls	r3, r3, #28
 8008c5c:	d502      	bpl.n	8008c64 <_vfiprintf_r+0x40>
 8008c5e:	6923      	ldr	r3, [r4, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d11d      	bne.n	8008ca0 <_vfiprintf_r+0x7c>
 8008c64:	0021      	movs	r1, r4
 8008c66:	0030      	movs	r0, r6
 8008c68:	f000 f97a 	bl	8008f60 <__swsetup_r>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d017      	beq.n	8008ca0 <_vfiprintf_r+0x7c>
 8008c70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c72:	07db      	lsls	r3, r3, #31
 8008c74:	d50d      	bpl.n	8008c92 <_vfiprintf_r+0x6e>
 8008c76:	2001      	movs	r0, #1
 8008c78:	4240      	negs	r0, r0
 8008c7a:	b021      	add	sp, #132	; 0x84
 8008c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c7e:	4b7f      	ldr	r3, [pc, #508]	; (8008e7c <_vfiprintf_r+0x258>)
 8008c80:	429c      	cmp	r4, r3
 8008c82:	d101      	bne.n	8008c88 <_vfiprintf_r+0x64>
 8008c84:	68b4      	ldr	r4, [r6, #8]
 8008c86:	e7de      	b.n	8008c46 <_vfiprintf_r+0x22>
 8008c88:	4b7d      	ldr	r3, [pc, #500]	; (8008e80 <_vfiprintf_r+0x25c>)
 8008c8a:	429c      	cmp	r4, r3
 8008c8c:	d1db      	bne.n	8008c46 <_vfiprintf_r+0x22>
 8008c8e:	68f4      	ldr	r4, [r6, #12]
 8008c90:	e7d9      	b.n	8008c46 <_vfiprintf_r+0x22>
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	059b      	lsls	r3, r3, #22
 8008c96:	d4ee      	bmi.n	8008c76 <_vfiprintf_r+0x52>
 8008c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c9a:	f000 fbb1 	bl	8009400 <__retarget_lock_release_recursive>
 8008c9e:	e7ea      	b.n	8008c76 <_vfiprintf_r+0x52>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	ad08      	add	r5, sp, #32
 8008ca4:	616b      	str	r3, [r5, #20]
 8008ca6:	3320      	adds	r3, #32
 8008ca8:	766b      	strb	r3, [r5, #25]
 8008caa:	3310      	adds	r3, #16
 8008cac:	76ab      	strb	r3, [r5, #26]
 8008cae:	9707      	str	r7, [sp, #28]
 8008cb0:	9f03      	ldr	r7, [sp, #12]
 8008cb2:	783b      	ldrb	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <_vfiprintf_r+0x98>
 8008cb8:	2b25      	cmp	r3, #37	; 0x25
 8008cba:	d14e      	bne.n	8008d5a <_vfiprintf_r+0x136>
 8008cbc:	9b03      	ldr	r3, [sp, #12]
 8008cbe:	1afb      	subs	r3, r7, r3
 8008cc0:	9305      	str	r3, [sp, #20]
 8008cc2:	9b03      	ldr	r3, [sp, #12]
 8008cc4:	429f      	cmp	r7, r3
 8008cc6:	d00d      	beq.n	8008ce4 <_vfiprintf_r+0xc0>
 8008cc8:	9b05      	ldr	r3, [sp, #20]
 8008cca:	0021      	movs	r1, r4
 8008ccc:	0030      	movs	r0, r6
 8008cce:	9a03      	ldr	r2, [sp, #12]
 8008cd0:	f7ff ff96 	bl	8008c00 <__sfputs_r>
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	d100      	bne.n	8008cda <_vfiprintf_r+0xb6>
 8008cd8:	e0b5      	b.n	8008e46 <_vfiprintf_r+0x222>
 8008cda:	696a      	ldr	r2, [r5, #20]
 8008cdc:	9b05      	ldr	r3, [sp, #20]
 8008cde:	4694      	mov	ip, r2
 8008ce0:	4463      	add	r3, ip
 8008ce2:	616b      	str	r3, [r5, #20]
 8008ce4:	783b      	ldrb	r3, [r7, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d100      	bne.n	8008cec <_vfiprintf_r+0xc8>
 8008cea:	e0ac      	b.n	8008e46 <_vfiprintf_r+0x222>
 8008cec:	2201      	movs	r2, #1
 8008cee:	1c7b      	adds	r3, r7, #1
 8008cf0:	9303      	str	r3, [sp, #12]
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	4252      	negs	r2, r2
 8008cf6:	606a      	str	r2, [r5, #4]
 8008cf8:	a904      	add	r1, sp, #16
 8008cfa:	3254      	adds	r2, #84	; 0x54
 8008cfc:	1852      	adds	r2, r2, r1
 8008cfe:	602b      	str	r3, [r5, #0]
 8008d00:	60eb      	str	r3, [r5, #12]
 8008d02:	60ab      	str	r3, [r5, #8]
 8008d04:	7013      	strb	r3, [r2, #0]
 8008d06:	65ab      	str	r3, [r5, #88]	; 0x58
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	2205      	movs	r2, #5
 8008d0c:	7819      	ldrb	r1, [r3, #0]
 8008d0e:	485d      	ldr	r0, [pc, #372]	; (8008e84 <_vfiprintf_r+0x260>)
 8008d10:	f7ff f89c 	bl	8007e4c <memchr>
 8008d14:	9b03      	ldr	r3, [sp, #12]
 8008d16:	1c5f      	adds	r7, r3, #1
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d120      	bne.n	8008d5e <_vfiprintf_r+0x13a>
 8008d1c:	682a      	ldr	r2, [r5, #0]
 8008d1e:	06d3      	lsls	r3, r2, #27
 8008d20:	d504      	bpl.n	8008d2c <_vfiprintf_r+0x108>
 8008d22:	2353      	movs	r3, #83	; 0x53
 8008d24:	a904      	add	r1, sp, #16
 8008d26:	185b      	adds	r3, r3, r1
 8008d28:	2120      	movs	r1, #32
 8008d2a:	7019      	strb	r1, [r3, #0]
 8008d2c:	0713      	lsls	r3, r2, #28
 8008d2e:	d504      	bpl.n	8008d3a <_vfiprintf_r+0x116>
 8008d30:	2353      	movs	r3, #83	; 0x53
 8008d32:	a904      	add	r1, sp, #16
 8008d34:	185b      	adds	r3, r3, r1
 8008d36:	212b      	movs	r1, #43	; 0x2b
 8008d38:	7019      	strb	r1, [r3, #0]
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d40:	d016      	beq.n	8008d70 <_vfiprintf_r+0x14c>
 8008d42:	2100      	movs	r1, #0
 8008d44:	68eb      	ldr	r3, [r5, #12]
 8008d46:	9f03      	ldr	r7, [sp, #12]
 8008d48:	783a      	ldrb	r2, [r7, #0]
 8008d4a:	1c78      	adds	r0, r7, #1
 8008d4c:	3a30      	subs	r2, #48	; 0x30
 8008d4e:	4684      	mov	ip, r0
 8008d50:	2a09      	cmp	r2, #9
 8008d52:	d94f      	bls.n	8008df4 <_vfiprintf_r+0x1d0>
 8008d54:	2900      	cmp	r1, #0
 8008d56:	d111      	bne.n	8008d7c <_vfiprintf_r+0x158>
 8008d58:	e017      	b.n	8008d8a <_vfiprintf_r+0x166>
 8008d5a:	3701      	adds	r7, #1
 8008d5c:	e7a9      	b.n	8008cb2 <_vfiprintf_r+0x8e>
 8008d5e:	4b49      	ldr	r3, [pc, #292]	; (8008e84 <_vfiprintf_r+0x260>)
 8008d60:	682a      	ldr	r2, [r5, #0]
 8008d62:	1ac0      	subs	r0, r0, r3
 8008d64:	2301      	movs	r3, #1
 8008d66:	4083      	lsls	r3, r0
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	602b      	str	r3, [r5, #0]
 8008d6c:	9703      	str	r7, [sp, #12]
 8008d6e:	e7cb      	b.n	8008d08 <_vfiprintf_r+0xe4>
 8008d70:	9b07      	ldr	r3, [sp, #28]
 8008d72:	1d19      	adds	r1, r3, #4
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	9107      	str	r1, [sp, #28]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	db01      	blt.n	8008d80 <_vfiprintf_r+0x15c>
 8008d7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d7e:	e004      	b.n	8008d8a <_vfiprintf_r+0x166>
 8008d80:	425b      	negs	r3, r3
 8008d82:	60eb      	str	r3, [r5, #12]
 8008d84:	2302      	movs	r3, #2
 8008d86:	4313      	orrs	r3, r2
 8008d88:	602b      	str	r3, [r5, #0]
 8008d8a:	783b      	ldrb	r3, [r7, #0]
 8008d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d8e:	d10a      	bne.n	8008da6 <_vfiprintf_r+0x182>
 8008d90:	787b      	ldrb	r3, [r7, #1]
 8008d92:	2b2a      	cmp	r3, #42	; 0x2a
 8008d94:	d137      	bne.n	8008e06 <_vfiprintf_r+0x1e2>
 8008d96:	9b07      	ldr	r3, [sp, #28]
 8008d98:	3702      	adds	r7, #2
 8008d9a:	1d1a      	adds	r2, r3, #4
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	9207      	str	r2, [sp, #28]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	db2d      	blt.n	8008e00 <_vfiprintf_r+0x1dc>
 8008da4:	9309      	str	r3, [sp, #36]	; 0x24
 8008da6:	2203      	movs	r2, #3
 8008da8:	7839      	ldrb	r1, [r7, #0]
 8008daa:	4837      	ldr	r0, [pc, #220]	; (8008e88 <_vfiprintf_r+0x264>)
 8008dac:	f7ff f84e 	bl	8007e4c <memchr>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d007      	beq.n	8008dc4 <_vfiprintf_r+0x1a0>
 8008db4:	4b34      	ldr	r3, [pc, #208]	; (8008e88 <_vfiprintf_r+0x264>)
 8008db6:	682a      	ldr	r2, [r5, #0]
 8008db8:	1ac0      	subs	r0, r0, r3
 8008dba:	2340      	movs	r3, #64	; 0x40
 8008dbc:	4083      	lsls	r3, r0
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	3701      	adds	r7, #1
 8008dc2:	602b      	str	r3, [r5, #0]
 8008dc4:	7839      	ldrb	r1, [r7, #0]
 8008dc6:	1c7b      	adds	r3, r7, #1
 8008dc8:	2206      	movs	r2, #6
 8008dca:	4830      	ldr	r0, [pc, #192]	; (8008e8c <_vfiprintf_r+0x268>)
 8008dcc:	9303      	str	r3, [sp, #12]
 8008dce:	7629      	strb	r1, [r5, #24]
 8008dd0:	f7ff f83c 	bl	8007e4c <memchr>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d045      	beq.n	8008e64 <_vfiprintf_r+0x240>
 8008dd8:	4b2d      	ldr	r3, [pc, #180]	; (8008e90 <_vfiprintf_r+0x26c>)
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d127      	bne.n	8008e2e <_vfiprintf_r+0x20a>
 8008dde:	2207      	movs	r2, #7
 8008de0:	9b07      	ldr	r3, [sp, #28]
 8008de2:	3307      	adds	r3, #7
 8008de4:	4393      	bics	r3, r2
 8008de6:	3308      	adds	r3, #8
 8008de8:	9307      	str	r3, [sp, #28]
 8008dea:	696b      	ldr	r3, [r5, #20]
 8008dec:	9a04      	ldr	r2, [sp, #16]
 8008dee:	189b      	adds	r3, r3, r2
 8008df0:	616b      	str	r3, [r5, #20]
 8008df2:	e75d      	b.n	8008cb0 <_vfiprintf_r+0x8c>
 8008df4:	210a      	movs	r1, #10
 8008df6:	434b      	muls	r3, r1
 8008df8:	4667      	mov	r7, ip
 8008dfa:	189b      	adds	r3, r3, r2
 8008dfc:	3909      	subs	r1, #9
 8008dfe:	e7a3      	b.n	8008d48 <_vfiprintf_r+0x124>
 8008e00:	2301      	movs	r3, #1
 8008e02:	425b      	negs	r3, r3
 8008e04:	e7ce      	b.n	8008da4 <_vfiprintf_r+0x180>
 8008e06:	2300      	movs	r3, #0
 8008e08:	001a      	movs	r2, r3
 8008e0a:	3701      	adds	r7, #1
 8008e0c:	606b      	str	r3, [r5, #4]
 8008e0e:	7839      	ldrb	r1, [r7, #0]
 8008e10:	1c78      	adds	r0, r7, #1
 8008e12:	3930      	subs	r1, #48	; 0x30
 8008e14:	4684      	mov	ip, r0
 8008e16:	2909      	cmp	r1, #9
 8008e18:	d903      	bls.n	8008e22 <_vfiprintf_r+0x1fe>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0c3      	beq.n	8008da6 <_vfiprintf_r+0x182>
 8008e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8008e20:	e7c1      	b.n	8008da6 <_vfiprintf_r+0x182>
 8008e22:	230a      	movs	r3, #10
 8008e24:	435a      	muls	r2, r3
 8008e26:	4667      	mov	r7, ip
 8008e28:	1852      	adds	r2, r2, r1
 8008e2a:	3b09      	subs	r3, #9
 8008e2c:	e7ef      	b.n	8008e0e <_vfiprintf_r+0x1ea>
 8008e2e:	ab07      	add	r3, sp, #28
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	0022      	movs	r2, r4
 8008e34:	0029      	movs	r1, r5
 8008e36:	0030      	movs	r0, r6
 8008e38:	4b16      	ldr	r3, [pc, #88]	; (8008e94 <_vfiprintf_r+0x270>)
 8008e3a:	f7fd fd6f 	bl	800691c <_printf_float>
 8008e3e:	9004      	str	r0, [sp, #16]
 8008e40:	9b04      	ldr	r3, [sp, #16]
 8008e42:	3301      	adds	r3, #1
 8008e44:	d1d1      	bne.n	8008dea <_vfiprintf_r+0x1c6>
 8008e46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e48:	07db      	lsls	r3, r3, #31
 8008e4a:	d405      	bmi.n	8008e58 <_vfiprintf_r+0x234>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	059b      	lsls	r3, r3, #22
 8008e50:	d402      	bmi.n	8008e58 <_vfiprintf_r+0x234>
 8008e52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e54:	f000 fad4 	bl	8009400 <__retarget_lock_release_recursive>
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	065b      	lsls	r3, r3, #25
 8008e5c:	d500      	bpl.n	8008e60 <_vfiprintf_r+0x23c>
 8008e5e:	e70a      	b.n	8008c76 <_vfiprintf_r+0x52>
 8008e60:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008e62:	e70a      	b.n	8008c7a <_vfiprintf_r+0x56>
 8008e64:	ab07      	add	r3, sp, #28
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	0022      	movs	r2, r4
 8008e6a:	0029      	movs	r1, r5
 8008e6c:	0030      	movs	r0, r6
 8008e6e:	4b09      	ldr	r3, [pc, #36]	; (8008e94 <_vfiprintf_r+0x270>)
 8008e70:	f7fe f806 	bl	8006e80 <_printf_i>
 8008e74:	e7e3      	b.n	8008e3e <_vfiprintf_r+0x21a>
 8008e76:	46c0      	nop			; (mov r8, r8)
 8008e78:	08009b84 	.word	0x08009b84
 8008e7c:	08009ba4 	.word	0x08009ba4
 8008e80:	08009b64 	.word	0x08009b64
 8008e84:	08009a0c 	.word	0x08009a0c
 8008e88:	08009a12 	.word	0x08009a12
 8008e8c:	08009a16 	.word	0x08009a16
 8008e90:	0800691d 	.word	0x0800691d
 8008e94:	08008c01 	.word	0x08008c01

08008e98 <__swbuf_r>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	0005      	movs	r5, r0
 8008e9c:	000e      	movs	r6, r1
 8008e9e:	0014      	movs	r4, r2
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d004      	beq.n	8008eae <__swbuf_r+0x16>
 8008ea4:	6983      	ldr	r3, [r0, #24]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <__swbuf_r+0x16>
 8008eaa:	f000 fa07 	bl	80092bc <__sinit>
 8008eae:	4b22      	ldr	r3, [pc, #136]	; (8008f38 <__swbuf_r+0xa0>)
 8008eb0:	429c      	cmp	r4, r3
 8008eb2:	d12e      	bne.n	8008f12 <__swbuf_r+0x7a>
 8008eb4:	686c      	ldr	r4, [r5, #4]
 8008eb6:	69a3      	ldr	r3, [r4, #24]
 8008eb8:	60a3      	str	r3, [r4, #8]
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	071b      	lsls	r3, r3, #28
 8008ebe:	d532      	bpl.n	8008f26 <__swbuf_r+0x8e>
 8008ec0:	6923      	ldr	r3, [r4, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d02f      	beq.n	8008f26 <__swbuf_r+0x8e>
 8008ec6:	6823      	ldr	r3, [r4, #0]
 8008ec8:	6922      	ldr	r2, [r4, #16]
 8008eca:	b2f7      	uxtb	r7, r6
 8008ecc:	1a98      	subs	r0, r3, r2
 8008ece:	6963      	ldr	r3, [r4, #20]
 8008ed0:	b2f6      	uxtb	r6, r6
 8008ed2:	4283      	cmp	r3, r0
 8008ed4:	dc05      	bgt.n	8008ee2 <__swbuf_r+0x4a>
 8008ed6:	0021      	movs	r1, r4
 8008ed8:	0028      	movs	r0, r5
 8008eda:	f000 f94d 	bl	8009178 <_fflush_r>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d127      	bne.n	8008f32 <__swbuf_r+0x9a>
 8008ee2:	68a3      	ldr	r3, [r4, #8]
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	60a3      	str	r3, [r4, #8]
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	6022      	str	r2, [r4, #0]
 8008ef0:	701f      	strb	r7, [r3, #0]
 8008ef2:	6963      	ldr	r3, [r4, #20]
 8008ef4:	4283      	cmp	r3, r0
 8008ef6:	d004      	beq.n	8008f02 <__swbuf_r+0x6a>
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	07db      	lsls	r3, r3, #31
 8008efc:	d507      	bpl.n	8008f0e <__swbuf_r+0x76>
 8008efe:	2e0a      	cmp	r6, #10
 8008f00:	d105      	bne.n	8008f0e <__swbuf_r+0x76>
 8008f02:	0021      	movs	r1, r4
 8008f04:	0028      	movs	r0, r5
 8008f06:	f000 f937 	bl	8009178 <_fflush_r>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d111      	bne.n	8008f32 <__swbuf_r+0x9a>
 8008f0e:	0030      	movs	r0, r6
 8008f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f12:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <__swbuf_r+0xa4>)
 8008f14:	429c      	cmp	r4, r3
 8008f16:	d101      	bne.n	8008f1c <__swbuf_r+0x84>
 8008f18:	68ac      	ldr	r4, [r5, #8]
 8008f1a:	e7cc      	b.n	8008eb6 <__swbuf_r+0x1e>
 8008f1c:	4b08      	ldr	r3, [pc, #32]	; (8008f40 <__swbuf_r+0xa8>)
 8008f1e:	429c      	cmp	r4, r3
 8008f20:	d1c9      	bne.n	8008eb6 <__swbuf_r+0x1e>
 8008f22:	68ec      	ldr	r4, [r5, #12]
 8008f24:	e7c7      	b.n	8008eb6 <__swbuf_r+0x1e>
 8008f26:	0021      	movs	r1, r4
 8008f28:	0028      	movs	r0, r5
 8008f2a:	f000 f819 	bl	8008f60 <__swsetup_r>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d0c9      	beq.n	8008ec6 <__swbuf_r+0x2e>
 8008f32:	2601      	movs	r6, #1
 8008f34:	4276      	negs	r6, r6
 8008f36:	e7ea      	b.n	8008f0e <__swbuf_r+0x76>
 8008f38:	08009b84 	.word	0x08009b84
 8008f3c:	08009ba4 	.word	0x08009ba4
 8008f40:	08009b64 	.word	0x08009b64

08008f44 <__ascii_wctomb>:
 8008f44:	0003      	movs	r3, r0
 8008f46:	1e08      	subs	r0, r1, #0
 8008f48:	d005      	beq.n	8008f56 <__ascii_wctomb+0x12>
 8008f4a:	2aff      	cmp	r2, #255	; 0xff
 8008f4c:	d904      	bls.n	8008f58 <__ascii_wctomb+0x14>
 8008f4e:	228a      	movs	r2, #138	; 0x8a
 8008f50:	2001      	movs	r0, #1
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	4240      	negs	r0, r0
 8008f56:	4770      	bx	lr
 8008f58:	2001      	movs	r0, #1
 8008f5a:	700a      	strb	r2, [r1, #0]
 8008f5c:	e7fb      	b.n	8008f56 <__ascii_wctomb+0x12>
	...

08008f60 <__swsetup_r>:
 8008f60:	4b37      	ldr	r3, [pc, #220]	; (8009040 <__swsetup_r+0xe0>)
 8008f62:	b570      	push	{r4, r5, r6, lr}
 8008f64:	681d      	ldr	r5, [r3, #0]
 8008f66:	0006      	movs	r6, r0
 8008f68:	000c      	movs	r4, r1
 8008f6a:	2d00      	cmp	r5, #0
 8008f6c:	d005      	beq.n	8008f7a <__swsetup_r+0x1a>
 8008f6e:	69ab      	ldr	r3, [r5, #24]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d102      	bne.n	8008f7a <__swsetup_r+0x1a>
 8008f74:	0028      	movs	r0, r5
 8008f76:	f000 f9a1 	bl	80092bc <__sinit>
 8008f7a:	4b32      	ldr	r3, [pc, #200]	; (8009044 <__swsetup_r+0xe4>)
 8008f7c:	429c      	cmp	r4, r3
 8008f7e:	d10f      	bne.n	8008fa0 <__swsetup_r+0x40>
 8008f80:	686c      	ldr	r4, [r5, #4]
 8008f82:	230c      	movs	r3, #12
 8008f84:	5ee2      	ldrsh	r2, [r4, r3]
 8008f86:	b293      	uxth	r3, r2
 8008f88:	0711      	lsls	r1, r2, #28
 8008f8a:	d42d      	bmi.n	8008fe8 <__swsetup_r+0x88>
 8008f8c:	06d9      	lsls	r1, r3, #27
 8008f8e:	d411      	bmi.n	8008fb4 <__swsetup_r+0x54>
 8008f90:	2309      	movs	r3, #9
 8008f92:	2001      	movs	r0, #1
 8008f94:	6033      	str	r3, [r6, #0]
 8008f96:	3337      	adds	r3, #55	; 0x37
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	81a3      	strh	r3, [r4, #12]
 8008f9c:	4240      	negs	r0, r0
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}
 8008fa0:	4b29      	ldr	r3, [pc, #164]	; (8009048 <__swsetup_r+0xe8>)
 8008fa2:	429c      	cmp	r4, r3
 8008fa4:	d101      	bne.n	8008faa <__swsetup_r+0x4a>
 8008fa6:	68ac      	ldr	r4, [r5, #8]
 8008fa8:	e7eb      	b.n	8008f82 <__swsetup_r+0x22>
 8008faa:	4b28      	ldr	r3, [pc, #160]	; (800904c <__swsetup_r+0xec>)
 8008fac:	429c      	cmp	r4, r3
 8008fae:	d1e8      	bne.n	8008f82 <__swsetup_r+0x22>
 8008fb0:	68ec      	ldr	r4, [r5, #12]
 8008fb2:	e7e6      	b.n	8008f82 <__swsetup_r+0x22>
 8008fb4:	075b      	lsls	r3, r3, #29
 8008fb6:	d513      	bpl.n	8008fe0 <__swsetup_r+0x80>
 8008fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fba:	2900      	cmp	r1, #0
 8008fbc:	d008      	beq.n	8008fd0 <__swsetup_r+0x70>
 8008fbe:	0023      	movs	r3, r4
 8008fc0:	3344      	adds	r3, #68	; 0x44
 8008fc2:	4299      	cmp	r1, r3
 8008fc4:	d002      	beq.n	8008fcc <__swsetup_r+0x6c>
 8008fc6:	0030      	movs	r0, r6
 8008fc8:	f7ff fb1c 	bl	8008604 <_free_r>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	6363      	str	r3, [r4, #52]	; 0x34
 8008fd0:	2224      	movs	r2, #36	; 0x24
 8008fd2:	89a3      	ldrh	r3, [r4, #12]
 8008fd4:	4393      	bics	r3, r2
 8008fd6:	81a3      	strh	r3, [r4, #12]
 8008fd8:	2300      	movs	r3, #0
 8008fda:	6063      	str	r3, [r4, #4]
 8008fdc:	6923      	ldr	r3, [r4, #16]
 8008fde:	6023      	str	r3, [r4, #0]
 8008fe0:	2308      	movs	r3, #8
 8008fe2:	89a2      	ldrh	r2, [r4, #12]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	81a3      	strh	r3, [r4, #12]
 8008fe8:	6923      	ldr	r3, [r4, #16]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10b      	bne.n	8009006 <__swsetup_r+0xa6>
 8008fee:	21a0      	movs	r1, #160	; 0xa0
 8008ff0:	2280      	movs	r2, #128	; 0x80
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	0089      	lsls	r1, r1, #2
 8008ff6:	0092      	lsls	r2, r2, #2
 8008ff8:	400b      	ands	r3, r1
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d003      	beq.n	8009006 <__swsetup_r+0xa6>
 8008ffe:	0021      	movs	r1, r4
 8009000:	0030      	movs	r0, r6
 8009002:	f000 fa27 	bl	8009454 <__smakebuf_r>
 8009006:	220c      	movs	r2, #12
 8009008:	5ea3      	ldrsh	r3, [r4, r2]
 800900a:	2001      	movs	r0, #1
 800900c:	001a      	movs	r2, r3
 800900e:	b299      	uxth	r1, r3
 8009010:	4002      	ands	r2, r0
 8009012:	4203      	tst	r3, r0
 8009014:	d00f      	beq.n	8009036 <__swsetup_r+0xd6>
 8009016:	2200      	movs	r2, #0
 8009018:	60a2      	str	r2, [r4, #8]
 800901a:	6962      	ldr	r2, [r4, #20]
 800901c:	4252      	negs	r2, r2
 800901e:	61a2      	str	r2, [r4, #24]
 8009020:	2000      	movs	r0, #0
 8009022:	6922      	ldr	r2, [r4, #16]
 8009024:	4282      	cmp	r2, r0
 8009026:	d1ba      	bne.n	8008f9e <__swsetup_r+0x3e>
 8009028:	060a      	lsls	r2, r1, #24
 800902a:	d5b8      	bpl.n	8008f9e <__swsetup_r+0x3e>
 800902c:	2240      	movs	r2, #64	; 0x40
 800902e:	4313      	orrs	r3, r2
 8009030:	81a3      	strh	r3, [r4, #12]
 8009032:	3801      	subs	r0, #1
 8009034:	e7b3      	b.n	8008f9e <__swsetup_r+0x3e>
 8009036:	0788      	lsls	r0, r1, #30
 8009038:	d400      	bmi.n	800903c <__swsetup_r+0xdc>
 800903a:	6962      	ldr	r2, [r4, #20]
 800903c:	60a2      	str	r2, [r4, #8]
 800903e:	e7ef      	b.n	8009020 <__swsetup_r+0xc0>
 8009040:	20000044 	.word	0x20000044
 8009044:	08009b84 	.word	0x08009b84
 8009048:	08009ba4 	.word	0x08009ba4
 800904c:	08009b64 	.word	0x08009b64

08009050 <abort>:
 8009050:	2006      	movs	r0, #6
 8009052:	b510      	push	{r4, lr}
 8009054:	f000 fa74 	bl	8009540 <raise>
 8009058:	2001      	movs	r0, #1
 800905a:	f7fa fb4b 	bl	80036f4 <_exit>
	...

08009060 <__sflush_r>:
 8009060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009062:	898b      	ldrh	r3, [r1, #12]
 8009064:	0005      	movs	r5, r0
 8009066:	000c      	movs	r4, r1
 8009068:	071a      	lsls	r2, r3, #28
 800906a:	d45f      	bmi.n	800912c <__sflush_r+0xcc>
 800906c:	684a      	ldr	r2, [r1, #4]
 800906e:	2a00      	cmp	r2, #0
 8009070:	dc04      	bgt.n	800907c <__sflush_r+0x1c>
 8009072:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009074:	2a00      	cmp	r2, #0
 8009076:	dc01      	bgt.n	800907c <__sflush_r+0x1c>
 8009078:	2000      	movs	r0, #0
 800907a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800907c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800907e:	2f00      	cmp	r7, #0
 8009080:	d0fa      	beq.n	8009078 <__sflush_r+0x18>
 8009082:	2200      	movs	r2, #0
 8009084:	2180      	movs	r1, #128	; 0x80
 8009086:	682e      	ldr	r6, [r5, #0]
 8009088:	602a      	str	r2, [r5, #0]
 800908a:	001a      	movs	r2, r3
 800908c:	0149      	lsls	r1, r1, #5
 800908e:	400a      	ands	r2, r1
 8009090:	420b      	tst	r3, r1
 8009092:	d034      	beq.n	80090fe <__sflush_r+0x9e>
 8009094:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	075b      	lsls	r3, r3, #29
 800909a:	d506      	bpl.n	80090aa <__sflush_r+0x4a>
 800909c:	6863      	ldr	r3, [r4, #4]
 800909e:	1ac0      	subs	r0, r0, r3
 80090a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <__sflush_r+0x4a>
 80090a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090a8:	1ac0      	subs	r0, r0, r3
 80090aa:	0002      	movs	r2, r0
 80090ac:	6a21      	ldr	r1, [r4, #32]
 80090ae:	2300      	movs	r3, #0
 80090b0:	0028      	movs	r0, r5
 80090b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80090b4:	47b8      	blx	r7
 80090b6:	89a1      	ldrh	r1, [r4, #12]
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d106      	bne.n	80090ca <__sflush_r+0x6a>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	2b1d      	cmp	r3, #29
 80090c0:	d831      	bhi.n	8009126 <__sflush_r+0xc6>
 80090c2:	4a2c      	ldr	r2, [pc, #176]	; (8009174 <__sflush_r+0x114>)
 80090c4:	40da      	lsrs	r2, r3
 80090c6:	07d3      	lsls	r3, r2, #31
 80090c8:	d52d      	bpl.n	8009126 <__sflush_r+0xc6>
 80090ca:	2300      	movs	r3, #0
 80090cc:	6063      	str	r3, [r4, #4]
 80090ce:	6923      	ldr	r3, [r4, #16]
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	04cb      	lsls	r3, r1, #19
 80090d4:	d505      	bpl.n	80090e2 <__sflush_r+0x82>
 80090d6:	1c43      	adds	r3, r0, #1
 80090d8:	d102      	bne.n	80090e0 <__sflush_r+0x80>
 80090da:	682b      	ldr	r3, [r5, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d100      	bne.n	80090e2 <__sflush_r+0x82>
 80090e0:	6560      	str	r0, [r4, #84]	; 0x54
 80090e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090e4:	602e      	str	r6, [r5, #0]
 80090e6:	2900      	cmp	r1, #0
 80090e8:	d0c6      	beq.n	8009078 <__sflush_r+0x18>
 80090ea:	0023      	movs	r3, r4
 80090ec:	3344      	adds	r3, #68	; 0x44
 80090ee:	4299      	cmp	r1, r3
 80090f0:	d002      	beq.n	80090f8 <__sflush_r+0x98>
 80090f2:	0028      	movs	r0, r5
 80090f4:	f7ff fa86 	bl	8008604 <_free_r>
 80090f8:	2000      	movs	r0, #0
 80090fa:	6360      	str	r0, [r4, #52]	; 0x34
 80090fc:	e7bd      	b.n	800907a <__sflush_r+0x1a>
 80090fe:	2301      	movs	r3, #1
 8009100:	0028      	movs	r0, r5
 8009102:	6a21      	ldr	r1, [r4, #32]
 8009104:	47b8      	blx	r7
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	d1c5      	bne.n	8009096 <__sflush_r+0x36>
 800910a:	682b      	ldr	r3, [r5, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d0c2      	beq.n	8009096 <__sflush_r+0x36>
 8009110:	2b1d      	cmp	r3, #29
 8009112:	d001      	beq.n	8009118 <__sflush_r+0xb8>
 8009114:	2b16      	cmp	r3, #22
 8009116:	d101      	bne.n	800911c <__sflush_r+0xbc>
 8009118:	602e      	str	r6, [r5, #0]
 800911a:	e7ad      	b.n	8009078 <__sflush_r+0x18>
 800911c:	2340      	movs	r3, #64	; 0x40
 800911e:	89a2      	ldrh	r2, [r4, #12]
 8009120:	4313      	orrs	r3, r2
 8009122:	81a3      	strh	r3, [r4, #12]
 8009124:	e7a9      	b.n	800907a <__sflush_r+0x1a>
 8009126:	2340      	movs	r3, #64	; 0x40
 8009128:	430b      	orrs	r3, r1
 800912a:	e7fa      	b.n	8009122 <__sflush_r+0xc2>
 800912c:	690f      	ldr	r7, [r1, #16]
 800912e:	2f00      	cmp	r7, #0
 8009130:	d0a2      	beq.n	8009078 <__sflush_r+0x18>
 8009132:	680a      	ldr	r2, [r1, #0]
 8009134:	600f      	str	r7, [r1, #0]
 8009136:	1bd2      	subs	r2, r2, r7
 8009138:	9201      	str	r2, [sp, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	079b      	lsls	r3, r3, #30
 800913e:	d100      	bne.n	8009142 <__sflush_r+0xe2>
 8009140:	694a      	ldr	r2, [r1, #20]
 8009142:	60a2      	str	r2, [r4, #8]
 8009144:	9b01      	ldr	r3, [sp, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	dc00      	bgt.n	800914c <__sflush_r+0xec>
 800914a:	e795      	b.n	8009078 <__sflush_r+0x18>
 800914c:	003a      	movs	r2, r7
 800914e:	0028      	movs	r0, r5
 8009150:	9b01      	ldr	r3, [sp, #4]
 8009152:	6a21      	ldr	r1, [r4, #32]
 8009154:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009156:	47b0      	blx	r6
 8009158:	2800      	cmp	r0, #0
 800915a:	dc06      	bgt.n	800916a <__sflush_r+0x10a>
 800915c:	2340      	movs	r3, #64	; 0x40
 800915e:	2001      	movs	r0, #1
 8009160:	89a2      	ldrh	r2, [r4, #12]
 8009162:	4240      	negs	r0, r0
 8009164:	4313      	orrs	r3, r2
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	e787      	b.n	800907a <__sflush_r+0x1a>
 800916a:	9b01      	ldr	r3, [sp, #4]
 800916c:	183f      	adds	r7, r7, r0
 800916e:	1a1b      	subs	r3, r3, r0
 8009170:	9301      	str	r3, [sp, #4]
 8009172:	e7e7      	b.n	8009144 <__sflush_r+0xe4>
 8009174:	20400001 	.word	0x20400001

08009178 <_fflush_r>:
 8009178:	690b      	ldr	r3, [r1, #16]
 800917a:	b570      	push	{r4, r5, r6, lr}
 800917c:	0005      	movs	r5, r0
 800917e:	000c      	movs	r4, r1
 8009180:	2b00      	cmp	r3, #0
 8009182:	d102      	bne.n	800918a <_fflush_r+0x12>
 8009184:	2500      	movs	r5, #0
 8009186:	0028      	movs	r0, r5
 8009188:	bd70      	pop	{r4, r5, r6, pc}
 800918a:	2800      	cmp	r0, #0
 800918c:	d004      	beq.n	8009198 <_fflush_r+0x20>
 800918e:	6983      	ldr	r3, [r0, #24]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <_fflush_r+0x20>
 8009194:	f000 f892 	bl	80092bc <__sinit>
 8009198:	4b14      	ldr	r3, [pc, #80]	; (80091ec <_fflush_r+0x74>)
 800919a:	429c      	cmp	r4, r3
 800919c:	d11b      	bne.n	80091d6 <_fflush_r+0x5e>
 800919e:	686c      	ldr	r4, [r5, #4]
 80091a0:	220c      	movs	r2, #12
 80091a2:	5ea3      	ldrsh	r3, [r4, r2]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0ed      	beq.n	8009184 <_fflush_r+0xc>
 80091a8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091aa:	07d2      	lsls	r2, r2, #31
 80091ac:	d404      	bmi.n	80091b8 <_fflush_r+0x40>
 80091ae:	059b      	lsls	r3, r3, #22
 80091b0:	d402      	bmi.n	80091b8 <_fflush_r+0x40>
 80091b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091b4:	f000 f923 	bl	80093fe <__retarget_lock_acquire_recursive>
 80091b8:	0028      	movs	r0, r5
 80091ba:	0021      	movs	r1, r4
 80091bc:	f7ff ff50 	bl	8009060 <__sflush_r>
 80091c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091c2:	0005      	movs	r5, r0
 80091c4:	07db      	lsls	r3, r3, #31
 80091c6:	d4de      	bmi.n	8009186 <_fflush_r+0xe>
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	059b      	lsls	r3, r3, #22
 80091cc:	d4db      	bmi.n	8009186 <_fflush_r+0xe>
 80091ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091d0:	f000 f916 	bl	8009400 <__retarget_lock_release_recursive>
 80091d4:	e7d7      	b.n	8009186 <_fflush_r+0xe>
 80091d6:	4b06      	ldr	r3, [pc, #24]	; (80091f0 <_fflush_r+0x78>)
 80091d8:	429c      	cmp	r4, r3
 80091da:	d101      	bne.n	80091e0 <_fflush_r+0x68>
 80091dc:	68ac      	ldr	r4, [r5, #8]
 80091de:	e7df      	b.n	80091a0 <_fflush_r+0x28>
 80091e0:	4b04      	ldr	r3, [pc, #16]	; (80091f4 <_fflush_r+0x7c>)
 80091e2:	429c      	cmp	r4, r3
 80091e4:	d1dc      	bne.n	80091a0 <_fflush_r+0x28>
 80091e6:	68ec      	ldr	r4, [r5, #12]
 80091e8:	e7da      	b.n	80091a0 <_fflush_r+0x28>
 80091ea:	46c0      	nop			; (mov r8, r8)
 80091ec:	08009b84 	.word	0x08009b84
 80091f0:	08009ba4 	.word	0x08009ba4
 80091f4:	08009b64 	.word	0x08009b64

080091f8 <std>:
 80091f8:	2300      	movs	r3, #0
 80091fa:	b510      	push	{r4, lr}
 80091fc:	0004      	movs	r4, r0
 80091fe:	6003      	str	r3, [r0, #0]
 8009200:	6043      	str	r3, [r0, #4]
 8009202:	6083      	str	r3, [r0, #8]
 8009204:	8181      	strh	r1, [r0, #12]
 8009206:	6643      	str	r3, [r0, #100]	; 0x64
 8009208:	0019      	movs	r1, r3
 800920a:	81c2      	strh	r2, [r0, #14]
 800920c:	6103      	str	r3, [r0, #16]
 800920e:	6143      	str	r3, [r0, #20]
 8009210:	6183      	str	r3, [r0, #24]
 8009212:	2208      	movs	r2, #8
 8009214:	305c      	adds	r0, #92	; 0x5c
 8009216:	f7fd facf 	bl	80067b8 <memset>
 800921a:	4b05      	ldr	r3, [pc, #20]	; (8009230 <std+0x38>)
 800921c:	6224      	str	r4, [r4, #32]
 800921e:	6263      	str	r3, [r4, #36]	; 0x24
 8009220:	4b04      	ldr	r3, [pc, #16]	; (8009234 <std+0x3c>)
 8009222:	62a3      	str	r3, [r4, #40]	; 0x28
 8009224:	4b04      	ldr	r3, [pc, #16]	; (8009238 <std+0x40>)
 8009226:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009228:	4b04      	ldr	r3, [pc, #16]	; (800923c <std+0x44>)
 800922a:	6323      	str	r3, [r4, #48]	; 0x30
 800922c:	bd10      	pop	{r4, pc}
 800922e:	46c0      	nop			; (mov r8, r8)
 8009230:	08009581 	.word	0x08009581
 8009234:	080095a9 	.word	0x080095a9
 8009238:	080095e1 	.word	0x080095e1
 800923c:	0800960d 	.word	0x0800960d

08009240 <_cleanup_r>:
 8009240:	b510      	push	{r4, lr}
 8009242:	4902      	ldr	r1, [pc, #8]	; (800924c <_cleanup_r+0xc>)
 8009244:	f000 f8ba 	bl	80093bc <_fwalk_reent>
 8009248:	bd10      	pop	{r4, pc}
 800924a:	46c0      	nop			; (mov r8, r8)
 800924c:	08009179 	.word	0x08009179

08009250 <__sfmoreglue>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	2568      	movs	r5, #104	; 0x68
 8009254:	1e4a      	subs	r2, r1, #1
 8009256:	4355      	muls	r5, r2
 8009258:	000e      	movs	r6, r1
 800925a:	0029      	movs	r1, r5
 800925c:	3174      	adds	r1, #116	; 0x74
 800925e:	f7ff fa3d 	bl	80086dc <_malloc_r>
 8009262:	1e04      	subs	r4, r0, #0
 8009264:	d008      	beq.n	8009278 <__sfmoreglue+0x28>
 8009266:	2100      	movs	r1, #0
 8009268:	002a      	movs	r2, r5
 800926a:	6001      	str	r1, [r0, #0]
 800926c:	6046      	str	r6, [r0, #4]
 800926e:	300c      	adds	r0, #12
 8009270:	60a0      	str	r0, [r4, #8]
 8009272:	3268      	adds	r2, #104	; 0x68
 8009274:	f7fd faa0 	bl	80067b8 <memset>
 8009278:	0020      	movs	r0, r4
 800927a:	bd70      	pop	{r4, r5, r6, pc}

0800927c <__sfp_lock_acquire>:
 800927c:	b510      	push	{r4, lr}
 800927e:	4802      	ldr	r0, [pc, #8]	; (8009288 <__sfp_lock_acquire+0xc>)
 8009280:	f000 f8bd 	bl	80093fe <__retarget_lock_acquire_recursive>
 8009284:	bd10      	pop	{r4, pc}
 8009286:	46c0      	nop			; (mov r8, r8)
 8009288:	200005c1 	.word	0x200005c1

0800928c <__sfp_lock_release>:
 800928c:	b510      	push	{r4, lr}
 800928e:	4802      	ldr	r0, [pc, #8]	; (8009298 <__sfp_lock_release+0xc>)
 8009290:	f000 f8b6 	bl	8009400 <__retarget_lock_release_recursive>
 8009294:	bd10      	pop	{r4, pc}
 8009296:	46c0      	nop			; (mov r8, r8)
 8009298:	200005c1 	.word	0x200005c1

0800929c <__sinit_lock_acquire>:
 800929c:	b510      	push	{r4, lr}
 800929e:	4802      	ldr	r0, [pc, #8]	; (80092a8 <__sinit_lock_acquire+0xc>)
 80092a0:	f000 f8ad 	bl	80093fe <__retarget_lock_acquire_recursive>
 80092a4:	bd10      	pop	{r4, pc}
 80092a6:	46c0      	nop			; (mov r8, r8)
 80092a8:	200005c2 	.word	0x200005c2

080092ac <__sinit_lock_release>:
 80092ac:	b510      	push	{r4, lr}
 80092ae:	4802      	ldr	r0, [pc, #8]	; (80092b8 <__sinit_lock_release+0xc>)
 80092b0:	f000 f8a6 	bl	8009400 <__retarget_lock_release_recursive>
 80092b4:	bd10      	pop	{r4, pc}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	200005c2 	.word	0x200005c2

080092bc <__sinit>:
 80092bc:	b513      	push	{r0, r1, r4, lr}
 80092be:	0004      	movs	r4, r0
 80092c0:	f7ff ffec 	bl	800929c <__sinit_lock_acquire>
 80092c4:	69a3      	ldr	r3, [r4, #24]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <__sinit+0x14>
 80092ca:	f7ff ffef 	bl	80092ac <__sinit_lock_release>
 80092ce:	bd13      	pop	{r0, r1, r4, pc}
 80092d0:	64a3      	str	r3, [r4, #72]	; 0x48
 80092d2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80092d4:	6523      	str	r3, [r4, #80]	; 0x50
 80092d6:	4b13      	ldr	r3, [pc, #76]	; (8009324 <__sinit+0x68>)
 80092d8:	4a13      	ldr	r2, [pc, #76]	; (8009328 <__sinit+0x6c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80092de:	9301      	str	r3, [sp, #4]
 80092e0:	42a3      	cmp	r3, r4
 80092e2:	d101      	bne.n	80092e8 <__sinit+0x2c>
 80092e4:	2301      	movs	r3, #1
 80092e6:	61a3      	str	r3, [r4, #24]
 80092e8:	0020      	movs	r0, r4
 80092ea:	f000 f81f 	bl	800932c <__sfp>
 80092ee:	6060      	str	r0, [r4, #4]
 80092f0:	0020      	movs	r0, r4
 80092f2:	f000 f81b 	bl	800932c <__sfp>
 80092f6:	60a0      	str	r0, [r4, #8]
 80092f8:	0020      	movs	r0, r4
 80092fa:	f000 f817 	bl	800932c <__sfp>
 80092fe:	2200      	movs	r2, #0
 8009300:	2104      	movs	r1, #4
 8009302:	60e0      	str	r0, [r4, #12]
 8009304:	6860      	ldr	r0, [r4, #4]
 8009306:	f7ff ff77 	bl	80091f8 <std>
 800930a:	2201      	movs	r2, #1
 800930c:	2109      	movs	r1, #9
 800930e:	68a0      	ldr	r0, [r4, #8]
 8009310:	f7ff ff72 	bl	80091f8 <std>
 8009314:	2202      	movs	r2, #2
 8009316:	2112      	movs	r1, #18
 8009318:	68e0      	ldr	r0, [r4, #12]
 800931a:	f7ff ff6d 	bl	80091f8 <std>
 800931e:	2301      	movs	r3, #1
 8009320:	61a3      	str	r3, [r4, #24]
 8009322:	e7d2      	b.n	80092ca <__sinit+0xe>
 8009324:	080097ec 	.word	0x080097ec
 8009328:	08009241 	.word	0x08009241

0800932c <__sfp>:
 800932c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932e:	0007      	movs	r7, r0
 8009330:	f7ff ffa4 	bl	800927c <__sfp_lock_acquire>
 8009334:	4b1f      	ldr	r3, [pc, #124]	; (80093b4 <__sfp+0x88>)
 8009336:	681e      	ldr	r6, [r3, #0]
 8009338:	69b3      	ldr	r3, [r6, #24]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d102      	bne.n	8009344 <__sfp+0x18>
 800933e:	0030      	movs	r0, r6
 8009340:	f7ff ffbc 	bl	80092bc <__sinit>
 8009344:	3648      	adds	r6, #72	; 0x48
 8009346:	68b4      	ldr	r4, [r6, #8]
 8009348:	6873      	ldr	r3, [r6, #4]
 800934a:	3b01      	subs	r3, #1
 800934c:	d504      	bpl.n	8009358 <__sfp+0x2c>
 800934e:	6833      	ldr	r3, [r6, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d022      	beq.n	800939a <__sfp+0x6e>
 8009354:	6836      	ldr	r6, [r6, #0]
 8009356:	e7f6      	b.n	8009346 <__sfp+0x1a>
 8009358:	220c      	movs	r2, #12
 800935a:	5ea5      	ldrsh	r5, [r4, r2]
 800935c:	2d00      	cmp	r5, #0
 800935e:	d11a      	bne.n	8009396 <__sfp+0x6a>
 8009360:	0020      	movs	r0, r4
 8009362:	4b15      	ldr	r3, [pc, #84]	; (80093b8 <__sfp+0x8c>)
 8009364:	3058      	adds	r0, #88	; 0x58
 8009366:	60e3      	str	r3, [r4, #12]
 8009368:	6665      	str	r5, [r4, #100]	; 0x64
 800936a:	f000 f847 	bl	80093fc <__retarget_lock_init_recursive>
 800936e:	f7ff ff8d 	bl	800928c <__sfp_lock_release>
 8009372:	0020      	movs	r0, r4
 8009374:	2208      	movs	r2, #8
 8009376:	0029      	movs	r1, r5
 8009378:	6025      	str	r5, [r4, #0]
 800937a:	60a5      	str	r5, [r4, #8]
 800937c:	6065      	str	r5, [r4, #4]
 800937e:	6125      	str	r5, [r4, #16]
 8009380:	6165      	str	r5, [r4, #20]
 8009382:	61a5      	str	r5, [r4, #24]
 8009384:	305c      	adds	r0, #92	; 0x5c
 8009386:	f7fd fa17 	bl	80067b8 <memset>
 800938a:	6365      	str	r5, [r4, #52]	; 0x34
 800938c:	63a5      	str	r5, [r4, #56]	; 0x38
 800938e:	64a5      	str	r5, [r4, #72]	; 0x48
 8009390:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009392:	0020      	movs	r0, r4
 8009394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009396:	3468      	adds	r4, #104	; 0x68
 8009398:	e7d7      	b.n	800934a <__sfp+0x1e>
 800939a:	2104      	movs	r1, #4
 800939c:	0038      	movs	r0, r7
 800939e:	f7ff ff57 	bl	8009250 <__sfmoreglue>
 80093a2:	1e04      	subs	r4, r0, #0
 80093a4:	6030      	str	r0, [r6, #0]
 80093a6:	d1d5      	bne.n	8009354 <__sfp+0x28>
 80093a8:	f7ff ff70 	bl	800928c <__sfp_lock_release>
 80093ac:	230c      	movs	r3, #12
 80093ae:	603b      	str	r3, [r7, #0]
 80093b0:	e7ef      	b.n	8009392 <__sfp+0x66>
 80093b2:	46c0      	nop			; (mov r8, r8)
 80093b4:	080097ec 	.word	0x080097ec
 80093b8:	ffff0001 	.word	0xffff0001

080093bc <_fwalk_reent>:
 80093bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093be:	0004      	movs	r4, r0
 80093c0:	0006      	movs	r6, r0
 80093c2:	2700      	movs	r7, #0
 80093c4:	9101      	str	r1, [sp, #4]
 80093c6:	3448      	adds	r4, #72	; 0x48
 80093c8:	6863      	ldr	r3, [r4, #4]
 80093ca:	68a5      	ldr	r5, [r4, #8]
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	9b00      	ldr	r3, [sp, #0]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	d504      	bpl.n	80093e0 <_fwalk_reent+0x24>
 80093d6:	6824      	ldr	r4, [r4, #0]
 80093d8:	2c00      	cmp	r4, #0
 80093da:	d1f5      	bne.n	80093c8 <_fwalk_reent+0xc>
 80093dc:	0038      	movs	r0, r7
 80093de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80093e0:	89ab      	ldrh	r3, [r5, #12]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d908      	bls.n	80093f8 <_fwalk_reent+0x3c>
 80093e6:	220e      	movs	r2, #14
 80093e8:	5eab      	ldrsh	r3, [r5, r2]
 80093ea:	3301      	adds	r3, #1
 80093ec:	d004      	beq.n	80093f8 <_fwalk_reent+0x3c>
 80093ee:	0029      	movs	r1, r5
 80093f0:	0030      	movs	r0, r6
 80093f2:	9b01      	ldr	r3, [sp, #4]
 80093f4:	4798      	blx	r3
 80093f6:	4307      	orrs	r7, r0
 80093f8:	3568      	adds	r5, #104	; 0x68
 80093fa:	e7e8      	b.n	80093ce <_fwalk_reent+0x12>

080093fc <__retarget_lock_init_recursive>:
 80093fc:	4770      	bx	lr

080093fe <__retarget_lock_acquire_recursive>:
 80093fe:	4770      	bx	lr

08009400 <__retarget_lock_release_recursive>:
 8009400:	4770      	bx	lr
	...

08009404 <__swhatbuf_r>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	000e      	movs	r6, r1
 8009408:	001d      	movs	r5, r3
 800940a:	230e      	movs	r3, #14
 800940c:	5ec9      	ldrsh	r1, [r1, r3]
 800940e:	0014      	movs	r4, r2
 8009410:	b096      	sub	sp, #88	; 0x58
 8009412:	2900      	cmp	r1, #0
 8009414:	da08      	bge.n	8009428 <__swhatbuf_r+0x24>
 8009416:	220c      	movs	r2, #12
 8009418:	5eb3      	ldrsh	r3, [r6, r2]
 800941a:	2200      	movs	r2, #0
 800941c:	602a      	str	r2, [r5, #0]
 800941e:	061b      	lsls	r3, r3, #24
 8009420:	d411      	bmi.n	8009446 <__swhatbuf_r+0x42>
 8009422:	2380      	movs	r3, #128	; 0x80
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	e00f      	b.n	8009448 <__swhatbuf_r+0x44>
 8009428:	466a      	mov	r2, sp
 800942a:	f000 f91b 	bl	8009664 <_fstat_r>
 800942e:	2800      	cmp	r0, #0
 8009430:	dbf1      	blt.n	8009416 <__swhatbuf_r+0x12>
 8009432:	23f0      	movs	r3, #240	; 0xf0
 8009434:	9901      	ldr	r1, [sp, #4]
 8009436:	021b      	lsls	r3, r3, #8
 8009438:	4019      	ands	r1, r3
 800943a:	4b05      	ldr	r3, [pc, #20]	; (8009450 <__swhatbuf_r+0x4c>)
 800943c:	18c9      	adds	r1, r1, r3
 800943e:	424b      	negs	r3, r1
 8009440:	4159      	adcs	r1, r3
 8009442:	6029      	str	r1, [r5, #0]
 8009444:	e7ed      	b.n	8009422 <__swhatbuf_r+0x1e>
 8009446:	2340      	movs	r3, #64	; 0x40
 8009448:	2000      	movs	r0, #0
 800944a:	6023      	str	r3, [r4, #0]
 800944c:	b016      	add	sp, #88	; 0x58
 800944e:	bd70      	pop	{r4, r5, r6, pc}
 8009450:	ffffe000 	.word	0xffffe000

08009454 <__smakebuf_r>:
 8009454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009456:	2602      	movs	r6, #2
 8009458:	898b      	ldrh	r3, [r1, #12]
 800945a:	0005      	movs	r5, r0
 800945c:	000c      	movs	r4, r1
 800945e:	4233      	tst	r3, r6
 8009460:	d006      	beq.n	8009470 <__smakebuf_r+0x1c>
 8009462:	0023      	movs	r3, r4
 8009464:	3347      	adds	r3, #71	; 0x47
 8009466:	6023      	str	r3, [r4, #0]
 8009468:	6123      	str	r3, [r4, #16]
 800946a:	2301      	movs	r3, #1
 800946c:	6163      	str	r3, [r4, #20]
 800946e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009470:	466a      	mov	r2, sp
 8009472:	ab01      	add	r3, sp, #4
 8009474:	f7ff ffc6 	bl	8009404 <__swhatbuf_r>
 8009478:	9900      	ldr	r1, [sp, #0]
 800947a:	0007      	movs	r7, r0
 800947c:	0028      	movs	r0, r5
 800947e:	f7ff f92d 	bl	80086dc <_malloc_r>
 8009482:	2800      	cmp	r0, #0
 8009484:	d108      	bne.n	8009498 <__smakebuf_r+0x44>
 8009486:	220c      	movs	r2, #12
 8009488:	5ea3      	ldrsh	r3, [r4, r2]
 800948a:	059a      	lsls	r2, r3, #22
 800948c:	d4ef      	bmi.n	800946e <__smakebuf_r+0x1a>
 800948e:	2203      	movs	r2, #3
 8009490:	4393      	bics	r3, r2
 8009492:	431e      	orrs	r6, r3
 8009494:	81a6      	strh	r6, [r4, #12]
 8009496:	e7e4      	b.n	8009462 <__smakebuf_r+0xe>
 8009498:	4b0f      	ldr	r3, [pc, #60]	; (80094d8 <__smakebuf_r+0x84>)
 800949a:	62ab      	str	r3, [r5, #40]	; 0x28
 800949c:	2380      	movs	r3, #128	; 0x80
 800949e:	89a2      	ldrh	r2, [r4, #12]
 80094a0:	6020      	str	r0, [r4, #0]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	81a3      	strh	r3, [r4, #12]
 80094a6:	9b00      	ldr	r3, [sp, #0]
 80094a8:	6120      	str	r0, [r4, #16]
 80094aa:	6163      	str	r3, [r4, #20]
 80094ac:	9b01      	ldr	r3, [sp, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00d      	beq.n	80094ce <__smakebuf_r+0x7a>
 80094b2:	0028      	movs	r0, r5
 80094b4:	230e      	movs	r3, #14
 80094b6:	5ee1      	ldrsh	r1, [r4, r3]
 80094b8:	f000 f8e6 	bl	8009688 <_isatty_r>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d006      	beq.n	80094ce <__smakebuf_r+0x7a>
 80094c0:	2203      	movs	r2, #3
 80094c2:	89a3      	ldrh	r3, [r4, #12]
 80094c4:	4393      	bics	r3, r2
 80094c6:	001a      	movs	r2, r3
 80094c8:	2301      	movs	r3, #1
 80094ca:	4313      	orrs	r3, r2
 80094cc:	81a3      	strh	r3, [r4, #12]
 80094ce:	89a0      	ldrh	r0, [r4, #12]
 80094d0:	4307      	orrs	r7, r0
 80094d2:	81a7      	strh	r7, [r4, #12]
 80094d4:	e7cb      	b.n	800946e <__smakebuf_r+0x1a>
 80094d6:	46c0      	nop			; (mov r8, r8)
 80094d8:	08009241 	.word	0x08009241

080094dc <_malloc_usable_size_r>:
 80094dc:	1f0b      	subs	r3, r1, #4
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	1f18      	subs	r0, r3, #4
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	da01      	bge.n	80094ea <_malloc_usable_size_r+0xe>
 80094e6:	580b      	ldr	r3, [r1, r0]
 80094e8:	18c0      	adds	r0, r0, r3
 80094ea:	4770      	bx	lr

080094ec <_raise_r>:
 80094ec:	b570      	push	{r4, r5, r6, lr}
 80094ee:	0004      	movs	r4, r0
 80094f0:	000d      	movs	r5, r1
 80094f2:	291f      	cmp	r1, #31
 80094f4:	d904      	bls.n	8009500 <_raise_r+0x14>
 80094f6:	2316      	movs	r3, #22
 80094f8:	6003      	str	r3, [r0, #0]
 80094fa:	2001      	movs	r0, #1
 80094fc:	4240      	negs	r0, r0
 80094fe:	bd70      	pop	{r4, r5, r6, pc}
 8009500:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009502:	2b00      	cmp	r3, #0
 8009504:	d004      	beq.n	8009510 <_raise_r+0x24>
 8009506:	008a      	lsls	r2, r1, #2
 8009508:	189b      	adds	r3, r3, r2
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	2a00      	cmp	r2, #0
 800950e:	d108      	bne.n	8009522 <_raise_r+0x36>
 8009510:	0020      	movs	r0, r4
 8009512:	f000 f831 	bl	8009578 <_getpid_r>
 8009516:	002a      	movs	r2, r5
 8009518:	0001      	movs	r1, r0
 800951a:	0020      	movs	r0, r4
 800951c:	f000 f81a 	bl	8009554 <_kill_r>
 8009520:	e7ed      	b.n	80094fe <_raise_r+0x12>
 8009522:	2000      	movs	r0, #0
 8009524:	2a01      	cmp	r2, #1
 8009526:	d0ea      	beq.n	80094fe <_raise_r+0x12>
 8009528:	1c51      	adds	r1, r2, #1
 800952a:	d103      	bne.n	8009534 <_raise_r+0x48>
 800952c:	2316      	movs	r3, #22
 800952e:	3001      	adds	r0, #1
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	e7e4      	b.n	80094fe <_raise_r+0x12>
 8009534:	2400      	movs	r4, #0
 8009536:	0028      	movs	r0, r5
 8009538:	601c      	str	r4, [r3, #0]
 800953a:	4790      	blx	r2
 800953c:	0020      	movs	r0, r4
 800953e:	e7de      	b.n	80094fe <_raise_r+0x12>

08009540 <raise>:
 8009540:	b510      	push	{r4, lr}
 8009542:	4b03      	ldr	r3, [pc, #12]	; (8009550 <raise+0x10>)
 8009544:	0001      	movs	r1, r0
 8009546:	6818      	ldr	r0, [r3, #0]
 8009548:	f7ff ffd0 	bl	80094ec <_raise_r>
 800954c:	bd10      	pop	{r4, pc}
 800954e:	46c0      	nop			; (mov r8, r8)
 8009550:	20000044 	.word	0x20000044

08009554 <_kill_r>:
 8009554:	2300      	movs	r3, #0
 8009556:	b570      	push	{r4, r5, r6, lr}
 8009558:	4d06      	ldr	r5, [pc, #24]	; (8009574 <_kill_r+0x20>)
 800955a:	0004      	movs	r4, r0
 800955c:	0008      	movs	r0, r1
 800955e:	0011      	movs	r1, r2
 8009560:	602b      	str	r3, [r5, #0]
 8009562:	f7fa f8b7 	bl	80036d4 <_kill>
 8009566:	1c43      	adds	r3, r0, #1
 8009568:	d103      	bne.n	8009572 <_kill_r+0x1e>
 800956a:	682b      	ldr	r3, [r5, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d000      	beq.n	8009572 <_kill_r+0x1e>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	bd70      	pop	{r4, r5, r6, pc}
 8009574:	200005bc 	.word	0x200005bc

08009578 <_getpid_r>:
 8009578:	b510      	push	{r4, lr}
 800957a:	f7fa f8a5 	bl	80036c8 <_getpid>
 800957e:	bd10      	pop	{r4, pc}

08009580 <__sread>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	000c      	movs	r4, r1
 8009584:	250e      	movs	r5, #14
 8009586:	5f49      	ldrsh	r1, [r1, r5]
 8009588:	f000 f8a4 	bl	80096d4 <_read_r>
 800958c:	2800      	cmp	r0, #0
 800958e:	db03      	blt.n	8009598 <__sread+0x18>
 8009590:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009592:	181b      	adds	r3, r3, r0
 8009594:	6563      	str	r3, [r4, #84]	; 0x54
 8009596:	bd70      	pop	{r4, r5, r6, pc}
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	4a02      	ldr	r2, [pc, #8]	; (80095a4 <__sread+0x24>)
 800959c:	4013      	ands	r3, r2
 800959e:	81a3      	strh	r3, [r4, #12]
 80095a0:	e7f9      	b.n	8009596 <__sread+0x16>
 80095a2:	46c0      	nop			; (mov r8, r8)
 80095a4:	ffffefff 	.word	0xffffefff

080095a8 <__swrite>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	001f      	movs	r7, r3
 80095ac:	898b      	ldrh	r3, [r1, #12]
 80095ae:	0005      	movs	r5, r0
 80095b0:	000c      	movs	r4, r1
 80095b2:	0016      	movs	r6, r2
 80095b4:	05db      	lsls	r3, r3, #23
 80095b6:	d505      	bpl.n	80095c4 <__swrite+0x1c>
 80095b8:	230e      	movs	r3, #14
 80095ba:	5ec9      	ldrsh	r1, [r1, r3]
 80095bc:	2200      	movs	r2, #0
 80095be:	2302      	movs	r3, #2
 80095c0:	f000 f874 	bl	80096ac <_lseek_r>
 80095c4:	89a3      	ldrh	r3, [r4, #12]
 80095c6:	4a05      	ldr	r2, [pc, #20]	; (80095dc <__swrite+0x34>)
 80095c8:	0028      	movs	r0, r5
 80095ca:	4013      	ands	r3, r2
 80095cc:	81a3      	strh	r3, [r4, #12]
 80095ce:	0032      	movs	r2, r6
 80095d0:	230e      	movs	r3, #14
 80095d2:	5ee1      	ldrsh	r1, [r4, r3]
 80095d4:	003b      	movs	r3, r7
 80095d6:	f000 f81f 	bl	8009618 <_write_r>
 80095da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095dc:	ffffefff 	.word	0xffffefff

080095e0 <__sseek>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	000c      	movs	r4, r1
 80095e4:	250e      	movs	r5, #14
 80095e6:	5f49      	ldrsh	r1, [r1, r5]
 80095e8:	f000 f860 	bl	80096ac <_lseek_r>
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	1c42      	adds	r2, r0, #1
 80095f0:	d103      	bne.n	80095fa <__sseek+0x1a>
 80095f2:	4a05      	ldr	r2, [pc, #20]	; (8009608 <__sseek+0x28>)
 80095f4:	4013      	ands	r3, r2
 80095f6:	81a3      	strh	r3, [r4, #12]
 80095f8:	bd70      	pop	{r4, r5, r6, pc}
 80095fa:	2280      	movs	r2, #128	; 0x80
 80095fc:	0152      	lsls	r2, r2, #5
 80095fe:	4313      	orrs	r3, r2
 8009600:	81a3      	strh	r3, [r4, #12]
 8009602:	6560      	str	r0, [r4, #84]	; 0x54
 8009604:	e7f8      	b.n	80095f8 <__sseek+0x18>
 8009606:	46c0      	nop			; (mov r8, r8)
 8009608:	ffffefff 	.word	0xffffefff

0800960c <__sclose>:
 800960c:	b510      	push	{r4, lr}
 800960e:	230e      	movs	r3, #14
 8009610:	5ec9      	ldrsh	r1, [r1, r3]
 8009612:	f000 f815 	bl	8009640 <_close_r>
 8009616:	bd10      	pop	{r4, pc}

08009618 <_write_r>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	0004      	movs	r4, r0
 800961c:	0008      	movs	r0, r1
 800961e:	0011      	movs	r1, r2
 8009620:	001a      	movs	r2, r3
 8009622:	2300      	movs	r3, #0
 8009624:	4d05      	ldr	r5, [pc, #20]	; (800963c <_write_r+0x24>)
 8009626:	602b      	str	r3, [r5, #0]
 8009628:	f7fa f88d 	bl	8003746 <_write>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d103      	bne.n	8009638 <_write_r+0x20>
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d000      	beq.n	8009638 <_write_r+0x20>
 8009636:	6023      	str	r3, [r4, #0]
 8009638:	bd70      	pop	{r4, r5, r6, pc}
 800963a:	46c0      	nop			; (mov r8, r8)
 800963c:	200005bc 	.word	0x200005bc

08009640 <_close_r>:
 8009640:	2300      	movs	r3, #0
 8009642:	b570      	push	{r4, r5, r6, lr}
 8009644:	4d06      	ldr	r5, [pc, #24]	; (8009660 <_close_r+0x20>)
 8009646:	0004      	movs	r4, r0
 8009648:	0008      	movs	r0, r1
 800964a:	602b      	str	r3, [r5, #0]
 800964c:	f7fa f897 	bl	800377e <_close>
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	d103      	bne.n	800965c <_close_r+0x1c>
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d000      	beq.n	800965c <_close_r+0x1c>
 800965a:	6023      	str	r3, [r4, #0]
 800965c:	bd70      	pop	{r4, r5, r6, pc}
 800965e:	46c0      	nop			; (mov r8, r8)
 8009660:	200005bc 	.word	0x200005bc

08009664 <_fstat_r>:
 8009664:	2300      	movs	r3, #0
 8009666:	b570      	push	{r4, r5, r6, lr}
 8009668:	4d06      	ldr	r5, [pc, #24]	; (8009684 <_fstat_r+0x20>)
 800966a:	0004      	movs	r4, r0
 800966c:	0008      	movs	r0, r1
 800966e:	0011      	movs	r1, r2
 8009670:	602b      	str	r3, [r5, #0]
 8009672:	f7fa f88e 	bl	8003792 <_fstat>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	d103      	bne.n	8009682 <_fstat_r+0x1e>
 800967a:	682b      	ldr	r3, [r5, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d000      	beq.n	8009682 <_fstat_r+0x1e>
 8009680:	6023      	str	r3, [r4, #0]
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	200005bc 	.word	0x200005bc

08009688 <_isatty_r>:
 8009688:	2300      	movs	r3, #0
 800968a:	b570      	push	{r4, r5, r6, lr}
 800968c:	4d06      	ldr	r5, [pc, #24]	; (80096a8 <_isatty_r+0x20>)
 800968e:	0004      	movs	r4, r0
 8009690:	0008      	movs	r0, r1
 8009692:	602b      	str	r3, [r5, #0]
 8009694:	f7fa f88b 	bl	80037ae <_isatty>
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	d103      	bne.n	80096a4 <_isatty_r+0x1c>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d000      	beq.n	80096a4 <_isatty_r+0x1c>
 80096a2:	6023      	str	r3, [r4, #0]
 80096a4:	bd70      	pop	{r4, r5, r6, pc}
 80096a6:	46c0      	nop			; (mov r8, r8)
 80096a8:	200005bc 	.word	0x200005bc

080096ac <_lseek_r>:
 80096ac:	b570      	push	{r4, r5, r6, lr}
 80096ae:	0004      	movs	r4, r0
 80096b0:	0008      	movs	r0, r1
 80096b2:	0011      	movs	r1, r2
 80096b4:	001a      	movs	r2, r3
 80096b6:	2300      	movs	r3, #0
 80096b8:	4d05      	ldr	r5, [pc, #20]	; (80096d0 <_lseek_r+0x24>)
 80096ba:	602b      	str	r3, [r5, #0]
 80096bc:	f7fa f880 	bl	80037c0 <_lseek>
 80096c0:	1c43      	adds	r3, r0, #1
 80096c2:	d103      	bne.n	80096cc <_lseek_r+0x20>
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d000      	beq.n	80096cc <_lseek_r+0x20>
 80096ca:	6023      	str	r3, [r4, #0]
 80096cc:	bd70      	pop	{r4, r5, r6, pc}
 80096ce:	46c0      	nop			; (mov r8, r8)
 80096d0:	200005bc 	.word	0x200005bc

080096d4 <_read_r>:
 80096d4:	b570      	push	{r4, r5, r6, lr}
 80096d6:	0004      	movs	r4, r0
 80096d8:	0008      	movs	r0, r1
 80096da:	0011      	movs	r1, r2
 80096dc:	001a      	movs	r2, r3
 80096de:	2300      	movs	r3, #0
 80096e0:	4d05      	ldr	r5, [pc, #20]	; (80096f8 <_read_r+0x24>)
 80096e2:	602b      	str	r3, [r5, #0]
 80096e4:	f7fa f812 	bl	800370c <_read>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d103      	bne.n	80096f4 <_read_r+0x20>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d000      	beq.n	80096f4 <_read_r+0x20>
 80096f2:	6023      	str	r3, [r4, #0]
 80096f4:	bd70      	pop	{r4, r5, r6, pc}
 80096f6:	46c0      	nop			; (mov r8, r8)
 80096f8:	200005bc 	.word	0x200005bc

080096fc <_init>:
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	46c0      	nop			; (mov r8, r8)
 8009700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009702:	bc08      	pop	{r3}
 8009704:	469e      	mov	lr, r3
 8009706:	4770      	bx	lr

08009708 <_fini>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	46c0      	nop			; (mov r8, r8)
 800970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970e:	bc08      	pop	{r3}
 8009710:	469e      	mov	lr, r3
 8009712:	4770      	bx	lr
