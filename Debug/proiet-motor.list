
proiet-motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800522c  0800522c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800522c  0800522c  0001522c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005234  08005234  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005238  08005238  00015238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800523c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000074  080052b0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  080052b0  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010afb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000200b  00000000  00000000  00030b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00032bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00033a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000da0f  00000000  00000000  000348b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004a9e  00000000  00000000  000422c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00046d65  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000042a8  00000000  00000000  00046db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080050cc 	.word	0x080050cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080050cc 	.word	0x080050cc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fd69 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f875 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f9d9 	bl	8000958 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 f9a7 	bl	80008f8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005aa:	f000 f915 	bl	80007d8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005ae:	f000 f8bf 	bl	8000730 <MX_TIM2_Init>
  MX_TIM6_Init();
 80005b2:	f000 f96b 	bl	800088c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005b6:	2100      	movs	r1, #0
 80005b8:	482a      	ldr	r0, [pc, #168]	; (8000664 <main+0xd0>)
 80005ba:	f002 fbbb 	bl	8002d34 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80005be:	213c      	movs	r1, #60	; 0x3c
 80005c0:	4829      	ldr	r0, [pc, #164]	; (8000668 <main+0xd4>)
 80005c2:	f002 fd43 	bl	800304c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80005c6:	4829      	ldr	r0, [pc, #164]	; (800066c <main+0xd8>)
 80005c8:	f002 fb00 	bl	8002bcc <HAL_TIM_Base_Start_IT>
  mot_init();
 80005cc:	f000 fac6 	bl	8000b5c <mot_init>

  mot_set(0xFFFF, MOT_BACKWARD);
 80005d0:	f04f 31ff 	mov.w	r1, #4294967295
 80005d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005d8:	f000 fb42 	bl	8000c60 <mot_set>
  {
//	  avg speed measurement
	static uint32_t lastTimerVal = 1;
	static uint32_t lastEncoderVal = 0;
//	uint32_t vel = ((mot_get_pos() - lastEncoderVal)) / (22*(uwTick - lastTimerVal));
	uint32_t pos = mot_get_pos();
 80005dc:	f000 fb51 	bl	8000c82 <mot_get_pos>
 80005e0:	6178      	str	r0, [r7, #20]
	uint32_t t = uwTick;
 80005e2:	4b23      	ldr	r3, [pc, #140]	; (8000670 <main+0xdc>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	613b      	str	r3, [r7, #16]
	uint32_t dP = (pos > lastEncoderVal) ? (pos - lastEncoderVal) : (lastEncoderVal - pos);
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <main+0xe0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	697a      	ldr	r2, [r7, #20]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d904      	bls.n	80005fc <main+0x68>
 80005f2:	4b20      	ldr	r3, [pc, #128]	; (8000674 <main+0xe0>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	e003      	b.n	8000604 <main+0x70>
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <main+0xe0>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	60fb      	str	r3, [r7, #12]
	uint32_t dT = (t - lastTimerVal);
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <main+0xe4>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	60bb      	str	r3, [r7, #8]
	uint32_t vel = (dP * 60000) / (dT * 22);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000616:	fb03 f202 	mul.w	r2, r3, r2
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	2116      	movs	r1, #22
 800061e:	fb01 f303 	mul.w	r3, r1, r3
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	607b      	str	r3, [r7, #4]
	lastTimerVal = t;
 8000628:	4a13      	ldr	r2, [pc, #76]	; (8000678 <main+0xe4>)
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	6013      	str	r3, [r2, #0]
	lastEncoderVal = mot_get_pos();
 800062e:	f000 fb28 	bl	8000c82 <mot_get_pos>
 8000632:	4603      	mov	r3, r0
 8000634:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <main+0xe0>)
 8000636:	6013      	str	r3, [r2, #0]


	// print instantaneous and avg velocity measurement
//	sprintf(printf_buf, "avgVelocity(RPM):%lu,insVelocity(RPM):%lu\n", vel, angularVelocity);
	// print instantaneous velocity measurement
	sprintf(printf_buf, "insVelocity(RPM):%lu\r\n", angularVelocity);
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <main+0xe8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4910      	ldr	r1, [pc, #64]	; (8000680 <main+0xec>)
 8000640:	4810      	ldr	r0, [pc, #64]	; (8000684 <main+0xf0>)
 8000642:	f004 f8d5 	bl	80047f0 <siprintf>
	// print avg velocity measurement
//	sprintf(printf_buf, "avgVelocity(RPM):%lu\r\n", vel);

	HAL_UART_Transmit(&huart2, (uint8_t*)printf_buf, strlen(printf_buf), 1000);
 8000646:	480f      	ldr	r0, [pc, #60]	; (8000684 <main+0xf0>)
 8000648:	f7ff fdca 	bl	80001e0 <strlen>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000654:	490b      	ldr	r1, [pc, #44]	; (8000684 <main+0xf0>)
 8000656:	480c      	ldr	r0, [pc, #48]	; (8000688 <main+0xf4>)
 8000658:	f003 fbce 	bl	8003df8 <HAL_UART_Transmit>
	HAL_Delay(10);
 800065c:	200a      	movs	r0, #10
 800065e:	f000 fd83 	bl	8001168 <HAL_Delay>
  {
 8000662:	e7bb      	b.n	80005dc <main+0x48>
 8000664:	200000dc 	.word	0x200000dc
 8000668:	20000090 	.word	0x20000090
 800066c:	20000128 	.word	0x20000128
 8000670:	20000320 	.word	0x20000320
 8000674:	20000300 	.word	0x20000300
 8000678:	20000000 	.word	0x20000000
 800067c:	200002fc 	.word	0x200002fc
 8000680:	08005194 	.word	0x08005194
 8000684:	200001f8 	.word	0x200001f8
 8000688:	20000174 	.word	0x20000174

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b096      	sub	sp, #88	; 0x58
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2244      	movs	r2, #68	; 0x44
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f004 f8a0 	bl	80047e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006b2:	f001 f847 	bl	8001744 <HAL_PWREx_ControlVoltageScaling>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006bc:	f000 fa48 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ca:	2340      	movs	r3, #64	; 0x40
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d2:	2302      	movs	r3, #2
 80006d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006da:	230a      	movs	r3, #10
 80006dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006de:	2307      	movs	r3, #7
 80006e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f87e 	bl	80017f0 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006fa:	f000 fa29 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	2104      	movs	r1, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fc7e 	bl	8002018 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000722:	f000 fa15 	bl	8000b50 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3758      	adds	r7, #88	; 0x58
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2224      	movs	r2, #36	; 0x24
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f004 f84e 	bl	80047e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MX_TIM2_Init+0xa4>)
 8000750:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000754:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_TIM2_Init+0xa4>)
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_TIM2_Init+0xa4>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_TIM2_Init+0xa4>)
 8000764:	f04f 32ff 	mov.w	r2, #4294967295
 8000768:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_TIM2_Init+0xa4>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_TIM2_Init+0xa4>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800077e:	2301      	movs	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800078e:	2301      	movs	r3, #1
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4619      	mov	r1, r3
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <MX_TIM2_Init+0xa4>)
 80007a2:	f002 fbad 	bl	8002f00 <HAL_TIM_Encoder_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80007ac:	f000 f9d0 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_TIM2_Init+0xa4>)
 80007be:	f003 fa41 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80007c8:	f000 f9c2 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3730      	adds	r7, #48	; 0x30
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000090 	.word	0x20000090

080007d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
 80007f8:	615a      	str	r2, [r3, #20]
 80007fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fc:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MX_TIM3_Init+0xac>)
 80007fe:	4a22      	ldr	r2, [pc, #136]	; (8000888 <MX_TIM3_Init+0xb0>)
 8000800:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_TIM3_Init+0xac>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_TIM3_Init+0xac>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_TIM3_Init+0xac>)
 8000810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000814:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_TIM3_Init+0xac>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_TIM3_Init+0xac>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000822:	4818      	ldr	r0, [pc, #96]	; (8000884 <MX_TIM3_Init+0xac>)
 8000824:	f002 fa2e 	bl	8002c84 <HAL_TIM_PWM_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800082e:	f000 f98f 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4810      	ldr	r0, [pc, #64]	; (8000884 <MX_TIM3_Init+0xac>)
 8000842:	f003 f9ff 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800084c:	f000 f980 	bl	8000b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000850:	2360      	movs	r3, #96	; 0x60
 8000852:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	4619      	mov	r1, r3
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <MX_TIM3_Init+0xac>)
 8000868:	f002 fd9e 	bl	80033a8 <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000872:	f000 f96d 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <MX_TIM3_Init+0xac>)
 8000878:	f000 fab8 	bl	8000dec <HAL_TIM_MspPostInit>

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200000dc 	.word	0x200000dc
 8000888:	40000400 	.word	0x40000400

0800088c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_TIM6_Init+0x64>)
 800089e:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <MX_TIM6_Init+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_TIM6_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_TIM6_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_TIM6_Init+0x64>)
 80008b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_TIM6_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <MX_TIM6_Init+0x64>)
 80008be:	f002 f92d 	bl	8002b1c <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80008c8:	f000 f942 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_TIM6_Init+0x64>)
 80008da:	f003 f9b3 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80008e4:	f000 f934 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000128 	.word	0x20000128
 80008f4:	40001000 	.word	0x40001000

080008f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USART2_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	; (8000954 <MX_USART2_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART2_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART2_UART_Init+0x58>)
 800093c:	f003 fa0e 	bl	8003d5c <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 f903 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000174 	.word	0x20000174
 8000954:	40004400 	.word	0x40004400

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b51      	ldr	r3, [pc, #324]	; (8000ab4 <MX_GPIO_Init+0x15c>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a50      	ldr	r2, [pc, #320]	; (8000ab4 <MX_GPIO_Init+0x15c>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b4e      	ldr	r3, [pc, #312]	; (8000ab4 <MX_GPIO_Init+0x15c>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	4b4b      	ldr	r3, [pc, #300]	; (8000ab4 <MX_GPIO_Init+0x15c>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a4a      	ldr	r2, [pc, #296]	; (8000ab4 <MX_GPIO_Init+0x15c>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b48      	ldr	r3, [pc, #288]	; (8000ab4 <MX_GPIO_Init+0x15c>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b45      	ldr	r3, [pc, #276]	; (8000ab4 <MX_GPIO_Init+0x15c>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a44      	ldr	r2, [pc, #272]	; (8000ab4 <MX_GPIO_Init+0x15c>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b42      	ldr	r3, [pc, #264]	; (8000ab4 <MX_GPIO_Init+0x15c>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <MX_GPIO_Init+0x15c>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a3e      	ldr	r2, [pc, #248]	; (8000ab4 <MX_GPIO_Init+0x15c>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b3c      	ldr	r3, [pc, #240]	; (8000ab4 <MX_GPIO_Init+0x15c>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	21b0      	movs	r1, #176	; 0xb0
 80009d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d6:	f000 fe77 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e0:	4835      	ldr	r0, [pc, #212]	; (8000ab8 <MX_GPIO_Init+0x160>)
 80009e2:	f000 fe71 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80009ec:	4833      	ldr	r0, [pc, #204]	; (8000abc <MX_GPIO_Init+0x164>)
 80009ee:	f000 fe6b 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	482c      	ldr	r0, [pc, #176]	; (8000abc <MX_GPIO_Init+0x164>)
 8000a0a:	f000 fce3 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4826      	ldr	r0, [pc, #152]	; (8000abc <MX_GPIO_Init+0x164>)
 8000a24:	f000 fcd6 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000a28:	23b0      	movs	r3, #176	; 0xb0
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a42:	f000 fcc7 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a46:	2340      	movs	r3, #64	; 0x40
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f000 fcba 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <MX_GPIO_Init+0x160>)
 8000a7a:	f000 fcab 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000a7e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4809      	ldr	r0, [pc, #36]	; (8000abc <MX_GPIO_Init+0x164>)
 8000a98:	f000 fc9c 	bl	80013d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2006      	movs	r0, #6
 8000aa2:	f000 fc60 	bl	8001366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000aa6:	2006      	movs	r0, #6
 8000aa8:	f000 fc79 	bl	800139e <HAL_NVIC_EnableIRQ>

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	48000400 	.word	0x48000400
 8000abc:	48000800 	.word	0x48000800

08000ac0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d11b      	bne.n	8000b08 <HAL_GPIO_EXTI_Callback+0x48>
		static const uint32_t freqConst = 436363636;
		static uint16_t lastCNT = 0;
		static uint32_t lastOC = 0;

		uint16_t cnt = TIM6->CNT;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x54>)
 8000ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad4:	81fb      	strh	r3, [r7, #14]
		angularVelocity = freqConst / (cnt - lastCNT + ((overflowCtr - lastOC)<<16));
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_GPIO_EXTI_Callback+0x58>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	490f      	ldr	r1, [pc, #60]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ade:	8809      	ldrh	r1, [r1, #0]
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x60>)
 8000ae6:	6819      	ldr	r1, [r3, #0]
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	1acb      	subs	r3, r1, r3
 8000aee:	041b      	lsls	r3, r3, #16
 8000af0:	4403      	add	r3, r0
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x68>)
 8000af8:	6013      	str	r3, [r2, #0]
		lastCNT = cnt;
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000afc:	89fb      	ldrh	r3, [r7, #14]
 8000afe:	8013      	strh	r3, [r2, #0]
		lastOC = overflowCtr;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x60>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x64>)
 8000b06:	6013      	str	r3, [r2, #0]
	}
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40001000 	.word	0x40001000
 8000b18:	080051ac 	.word	0x080051ac
 8000b1c:	20000304 	.word	0x20000304
 8000b20:	200002f8 	.word	0x200002f8
 8000b24:	20000308 	.word	0x20000308
 8000b28:	200002fc 	.word	0x200002fc

08000b2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	overflowCtr++;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3c:	6013      	str	r3, [r2, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	200002f8 	.word	0x200002f8

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <mot_init>:
static int mot_dir;
static uint16_t mot_pwm;
static uint32_t mot_pos;
static uint32_t mot_last_sample_time;

void mot_init(void){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	mot_dir = MOT_FWD;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <mot_init+0x38>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
	mot_pwm = 0;
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <mot_init+0x3c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	801a      	strh	r2, [r3, #0]
	mot_pos = TIM2->CNT;
 8000b6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <mot_init+0x40>)
 8000b74:	6013      	str	r3, [r2, #0]
	mot_last_sample_time = HAL_GetTick();
 8000b76:	f000 faeb 	bl	8001150 <HAL_GetTick>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <mot_init+0x44>)
 8000b7e:	6013      	str	r3, [r2, #0]
	mot_set(mot_pwm, mot_dir);
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <mot_init+0x3c>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <mot_init+0x38>)
 8000b86:	6812      	ldr	r2, [r2, #0]
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f868 	bl	8000c60 <mot_set>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000030c 	.word	0x2000030c
 8000b98:	20000310 	.word	0x20000310
 8000b9c:	20000314 	.word	0x20000314
 8000ba0:	20000318 	.word	0x20000318

08000ba4 <mot_set_dir>:

void mot_set_dir(int dir){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	switch(dir){
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d00a      	beq.n	8000bc8 <mot_set_dir+0x24>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	dc34      	bgt.n	8000c22 <mot_set_dir+0x7e>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bbe:	d012      	beq.n	8000be6 <mot_set_dir+0x42>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d01e      	beq.n	8000c04 <mot_set_dir+0x60>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
			mot_dir = dir;
			break;
	}
}
 8000bc6:	e02c      	b.n	8000c22 <mot_set_dir+0x7e>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	4817      	ldr	r0, [pc, #92]	; (8000c2c <mot_set_dir+0x88>)
 8000bce:	f000 fd7b 	bl	80016c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd8:	4814      	ldr	r0, [pc, #80]	; (8000c2c <mot_set_dir+0x88>)
 8000bda:	f000 fd75 	bl	80016c8 <HAL_GPIO_WritePin>
			mot_dir = dir;
 8000bde:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <mot_set_dir+0x8c>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6013      	str	r3, [r2, #0]
			break;
 8000be4:	e01d      	b.n	8000c22 <mot_set_dir+0x7e>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2180      	movs	r1, #128	; 0x80
 8000bea:	4810      	ldr	r0, [pc, #64]	; (8000c2c <mot_set_dir+0x88>)
 8000bec:	f000 fd6c 	bl	80016c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf6:	480d      	ldr	r0, [pc, #52]	; (8000c2c <mot_set_dir+0x88>)
 8000bf8:	f000 fd66 	bl	80016c8 <HAL_GPIO_WritePin>
			mot_dir = dir;
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <mot_set_dir+0x8c>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
			break;
 8000c02:	e00e      	b.n	8000c22 <mot_set_dir+0x7e>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2180      	movs	r1, #128	; 0x80
 8000c08:	4808      	ldr	r0, [pc, #32]	; (8000c2c <mot_set_dir+0x88>)
 8000c0a:	f000 fd5d 	bl	80016c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <mot_set_dir+0x88>)
 8000c16:	f000 fd57 	bl	80016c8 <HAL_GPIO_WritePin>
			mot_dir = dir;
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <mot_set_dir+0x8c>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6013      	str	r3, [r2, #0]
			break;
 8000c20:	bf00      	nop
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	48000800 	.word	0x48000800
 8000c30:	2000030c 	.word	0x2000030c

08000c34 <mot_set_pwm>:

void mot_set_pwm(uint16_t pwm){
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
	TIM3->CCR1 = pwm;
 8000c3e:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <mot_set_pwm+0x24>)
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	6353      	str	r3, [r2, #52]	; 0x34
	mot_pwm = pwm;
 8000c44:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <mot_set_pwm+0x28>)
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	8013      	strh	r3, [r2, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40000400 	.word	0x40000400
 8000c5c:	20000310 	.word	0x20000310

08000c60 <mot_set>:

void mot_set(uint16_t pwm, int dir){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	80fb      	strh	r3, [r7, #6]
	mot_set_dir(dir);
 8000c6c:	6838      	ldr	r0, [r7, #0]
 8000c6e:	f7ff ff99 	bl	8000ba4 <mot_set_dir>
	mot_set_pwm(pwm);
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ffdd 	bl	8000c34 <mot_set_pwm>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <mot_get_pos>:
		case MOT_BACKWARD: mot_dir = MOT_FORWARD; break;
	}
	mot_set_dir(mot_dir);
}

uint32_t mot_get_pos(){
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 8000c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_MspInit+0x44>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_MspInit+0x44>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x44>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x44>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d00:	d128      	bne.n	8000d54 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d32:	2303      	movs	r3, #3
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d42:	2301      	movs	r3, #1
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f000 fb40 	bl	80013d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_TIM_PWM_MspInit+0x38>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d10b      	bne.n	8000d8a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_TIM_PWM_MspInit+0x3c>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <HAL_TIM_PWM_MspInit+0x3c>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <HAL_TIM_PWM_MspInit+0x3c>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40000400 	.word	0x40000400
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <HAL_TIM_Base_MspInit+0x44>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d113      	bne.n	8000dda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_TIM_Base_MspInit+0x48>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db6:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <HAL_TIM_Base_MspInit+0x48>)
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_TIM_Base_MspInit+0x48>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc2:	f003 0310 	and.w	r3, r3, #16
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2101      	movs	r1, #1
 8000dce:	2036      	movs	r0, #54	; 0x36
 8000dd0:	f000 fac9 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dd4:	2036      	movs	r0, #54	; 0x36
 8000dd6:	f000 fae2 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40001000 	.word	0x40001000
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a11      	ldr	r2, [pc, #68]	; (8000e50 <HAL_TIM_MspPostInit+0x64>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d11b      	bne.n	8000e46 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_TIM_MspPostInit+0x68>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <HAL_TIM_MspPostInit+0x68>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_TIM_MspPostInit+0x68>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e26:	2340      	movs	r3, #64	; 0x40
 8000e28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <HAL_TIM_MspPostInit+0x6c>)
 8000e42:	f000 fac7 	bl	80013d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40000400 	.word	0x40000400
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000800 	.word	0x48000800

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0a4      	sub	sp, #144	; 0x90
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2268      	movs	r2, #104	; 0x68
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 fcaf 	bl	80047e0 <memset>
  if(huart->Instance==USART2)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <HAL_UART_MspInit+0xb0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d13a      	bne.n	8000f02 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 fae1 	bl	8002460 <HAL_RCCEx_PeriphCLKConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea4:	f7ff fe54 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_UART_MspInit+0xb4>)
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eac:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <HAL_UART_MspInit+0xb4>)
 8000eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_UART_MspInit+0xb4>)
 8000eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_UART_MspInit+0xb4>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec4:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <HAL_UART_MspInit+0xb4>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HAL_UART_MspInit+0xb4>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eee:	2307      	movs	r3, #7
 8000ef0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f000 fa69 	bl	80013d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3790      	adds	r7, #144	; 0x90
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40004400 	.word	0x40004400
 8000f10:	40021000 	.word	0x40021000

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <NMI_Handler+0x4>

08000f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <MemManage_Handler+0x4>

08000f26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f60:	f000 f8e2 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f000 fbc3 	bl	80016f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <TIM6_DAC_IRQHandler+0x10>)
 8000f7e:	f002 f8f3 	bl	8003168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000128 	.word	0x20000128

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fbc:	f003 fbe6 	bl	800478c <__errno>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20028000 	.word	0x20028000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	2000031c 	.word	0x2000031c
 8000ff4:	20000338 	.word	0x20000338

08000ff8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001020:	f7ff ffea 	bl	8000ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <LoopForever+0x6>)
  ldr r1, =_edata
 8001026:	490d      	ldr	r1, [pc, #52]	; (800105c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <LoopForever+0xe>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800102c:	e002      	b.n	8001034 <LoopCopyDataInit>

0800102e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001032:	3304      	adds	r3, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001038:	d3f9      	bcc.n	800102e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <LoopForever+0x12>)
  ldr r4, =_ebss
 800103c:	4c0a      	ldr	r4, [pc, #40]	; (8001068 <LoopForever+0x16>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001040:	e001      	b.n	8001046 <LoopFillZerobss>

08001042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001044:	3204      	adds	r2, #4

08001046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001048:	d3fb      	bcc.n	8001042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104a:	f003 fba5 	bl	8004798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800104e:	f7ff faa1 	bl	8000594 <main>

08001052 <LoopForever>:

LoopForever:
    b LoopForever
 8001052:	e7fe      	b.n	8001052 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001054:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001060:	0800523c 	.word	0x0800523c
  ldr r2, =_sbss
 8001064:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001068:	20000334 	.word	0x20000334

0800106c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC1_IRQHandler>
	...

08001070 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_Init+0x3c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <HAL_Init+0x3c>)
 8001080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001084:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001086:	2003      	movs	r0, #3
 8001088:	f000 f962 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800108c:	2000      	movs	r0, #0
 800108e:	f000 f80f 	bl	80010b0 <HAL_InitTick>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d002      	beq.n	800109e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	e001      	b.n	80010a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800109e:	f7ff fdfb 	bl	8000c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40022000 	.word	0x40022000

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_InitTick+0x6c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d023      	beq.n	800110c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_InitTick+0x70>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_InitTick+0x6c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f96d 	bl	80013ba <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10f      	bne.n	8001106 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d809      	bhi.n	8001100 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f000 f937 	bl	8001366 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_InitTick+0x74>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e007      	b.n	8001110 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e004      	b.n	8001110 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	e001      	b.n	8001110 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000000c 	.word	0x2000000c
 8001120:	20000004 	.word	0x20000004
 8001124:	20000008 	.word	0x20000008

08001128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x20>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_IncTick+0x24>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <HAL_IncTick+0x24>)
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	2000000c 	.word	0x2000000c
 800114c:	20000320 	.word	0x20000320

08001150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return uwTick;
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <HAL_GetTick+0x14>)
 8001156:	681b      	ldr	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000320 	.word	0x20000320

08001168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001170:	f7ff ffee 	bl	8001150 <HAL_GetTick>
 8001174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001180:	d005      	beq.n	800118e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_Delay+0x44>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800118e:	bf00      	nop
 8001190:	f7ff ffde 	bl	8001150 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	429a      	cmp	r2, r3
 800119e:	d8f7      	bhi.n	8001190 <HAL_Delay+0x28>
  {
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000000c 	.word	0x2000000c

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4907      	ldr	r1, [pc, #28]	; (800124c <__NVIC_EnableIRQ+0x38>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff29 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff3e 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff8e 	bl	80012a4 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5d 	bl	8001250 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff31 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffa2 	bl	800130c <SysTick_Config>
 80013c8:	4603      	mov	r3, r0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e2:	e154      	b.n	800168e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2101      	movs	r1, #1
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	4013      	ands	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8146 	beq.w	8001688 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b01      	cmp	r3, #1
 8001406:	d005      	beq.n	8001414 <HAL_GPIO_Init+0x40>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d130      	bne.n	8001476 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800144a:	2201      	movs	r2, #1
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	091b      	lsrs	r3, r3, #4
 8001460:	f003 0201 	and.w	r2, r3, #1
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b03      	cmp	r3, #3
 8001480:	d017      	beq.n	80014b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d123      	bne.n	8001506 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	08da      	lsrs	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3208      	adds	r2, #8
 80014c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	220f      	movs	r2, #15
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	691a      	ldr	r2, [r3, #16]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	08da      	lsrs	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3208      	adds	r2, #8
 8001500:	6939      	ldr	r1, [r7, #16]
 8001502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0203 	and.w	r2, r3, #3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 80a0 	beq.w	8001688 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001548:	4b58      	ldr	r3, [pc, #352]	; (80016ac <HAL_GPIO_Init+0x2d8>)
 800154a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154c:	4a57      	ldr	r2, [pc, #348]	; (80016ac <HAL_GPIO_Init+0x2d8>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6613      	str	r3, [r2, #96]	; 0x60
 8001554:	4b55      	ldr	r3, [pc, #340]	; (80016ac <HAL_GPIO_Init+0x2d8>)
 8001556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001560:	4a53      	ldr	r2, [pc, #332]	; (80016b0 <HAL_GPIO_Init+0x2dc>)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	089b      	lsrs	r3, r3, #2
 8001566:	3302      	adds	r3, #2
 8001568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	220f      	movs	r2, #15
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800158a:	d019      	beq.n	80015c0 <HAL_GPIO_Init+0x1ec>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a49      	ldr	r2, [pc, #292]	; (80016b4 <HAL_GPIO_Init+0x2e0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d013      	beq.n	80015bc <HAL_GPIO_Init+0x1e8>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a48      	ldr	r2, [pc, #288]	; (80016b8 <HAL_GPIO_Init+0x2e4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00d      	beq.n	80015b8 <HAL_GPIO_Init+0x1e4>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a47      	ldr	r2, [pc, #284]	; (80016bc <HAL_GPIO_Init+0x2e8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d007      	beq.n	80015b4 <HAL_GPIO_Init+0x1e0>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <HAL_GPIO_Init+0x2ec>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d101      	bne.n	80015b0 <HAL_GPIO_Init+0x1dc>
 80015ac:	2304      	movs	r3, #4
 80015ae:	e008      	b.n	80015c2 <HAL_GPIO_Init+0x1ee>
 80015b0:	2307      	movs	r3, #7
 80015b2:	e006      	b.n	80015c2 <HAL_GPIO_Init+0x1ee>
 80015b4:	2303      	movs	r3, #3
 80015b6:	e004      	b.n	80015c2 <HAL_GPIO_Init+0x1ee>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e002      	b.n	80015c2 <HAL_GPIO_Init+0x1ee>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <HAL_GPIO_Init+0x1ee>
 80015c0:	2300      	movs	r3, #0
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	f002 0203 	and.w	r2, r2, #3
 80015c8:	0092      	lsls	r2, r2, #2
 80015ca:	4093      	lsls	r3, r2
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015d2:	4937      	ldr	r1, [pc, #220]	; (80016b0 <HAL_GPIO_Init+0x2dc>)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015e0:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <HAL_GPIO_Init+0x2f0>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001604:	4a2f      	ldr	r2, [pc, #188]	; (80016c4 <HAL_GPIO_Init+0x2f0>)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800160a:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <HAL_GPIO_Init+0x2f0>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800162e:	4a25      	ldr	r2, [pc, #148]	; (80016c4 <HAL_GPIO_Init+0x2f0>)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <HAL_GPIO_Init+0x2f0>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001658:	4a1a      	ldr	r2, [pc, #104]	; (80016c4 <HAL_GPIO_Init+0x2f0>)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_GPIO_Init+0x2f0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <HAL_GPIO_Init+0x2f0>)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3301      	adds	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	fa22 f303 	lsr.w	r3, r2, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	f47f aea3 	bne.w	80013e4 <HAL_GPIO_Init+0x10>
  }
}
 800169e:	bf00      	nop
 80016a0:	bf00      	nop
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000
 80016b4:	48000400 	.word	0x48000400
 80016b8:	48000800 	.word	0x48000800
 80016bc:	48000c00 	.word	0x48000c00
 80016c0:	48001000 	.word	0x48001000
 80016c4:	40010400 	.word	0x40010400

080016c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d8:	787b      	ldrb	r3, [r7, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	4013      	ands	r3, r2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff f9d2 	bl	8000ac0 <HAL_GPIO_EXTI_Callback>
  }
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40010400 	.word	0x40010400

08001728 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <HAL_PWREx_GetVoltageRange+0x18>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40007000 	.word	0x40007000

08001744 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001752:	d130      	bne.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001754:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800175c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001760:	d038      	beq.n	80017d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800176a:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001770:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2232      	movs	r2, #50	; 0x32
 8001778:	fb02 f303 	mul.w	r3, r2, r3
 800177c:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0c9b      	lsrs	r3, r3, #18
 8001784:	3301      	adds	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001788:	e002      	b.n	8001790 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3b01      	subs	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179c:	d102      	bne.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f2      	bne.n	800178a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b0:	d110      	bne.n	80017d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e00f      	b.n	80017d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c2:	d007      	beq.n	80017d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017cc:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40007000 	.word	0x40007000
 80017e8:	20000004 	.word	0x20000004
 80017ec:	431bde83 	.word	0x431bde83

080017f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	f000 bc02 	b.w	8002008 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001804:	4b96      	ldr	r3, [pc, #600]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800180e:	4b94      	ldr	r3, [pc, #592]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80e4 	beq.w	80019ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d007      	beq.n	800183c <HAL_RCC_OscConfig+0x4c>
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	f040 808b 	bne.w	800194a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2b01      	cmp	r3, #1
 8001838:	f040 8087 	bne.w	800194a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800183c:	4b88      	ldr	r3, [pc, #544]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_OscConfig+0x64>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e3d9      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1a      	ldr	r2, [r3, #32]
 8001858:	4b81      	ldr	r3, [pc, #516]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <HAL_RCC_OscConfig+0x7e>
 8001864:	4b7e      	ldr	r3, [pc, #504]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800186c:	e005      	b.n	800187a <HAL_RCC_OscConfig+0x8a>
 800186e:	4b7c      	ldr	r3, [pc, #496]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800187a:	4293      	cmp	r3, r2
 800187c:	d223      	bcs.n	80018c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fd8c 	bl	80023a0 <RCC_SetFlashLatencyFromMSIRange>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e3ba      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001892:	4b73      	ldr	r3, [pc, #460]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a72      	ldr	r2, [pc, #456]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b70      	ldr	r3, [pc, #448]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	496d      	ldr	r1, [pc, #436]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b0:	4b6b      	ldr	r3, [pc, #428]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	4968      	ldr	r1, [pc, #416]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
 80018c4:	e025      	b.n	8001912 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c6:	4b66      	ldr	r3, [pc, #408]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a65      	ldr	r2, [pc, #404]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80018cc:	f043 0308 	orr.w	r3, r3, #8
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b63      	ldr	r3, [pc, #396]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	4960      	ldr	r1, [pc, #384]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e4:	4b5e      	ldr	r3, [pc, #376]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	495b      	ldr	r1, [pc, #364]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fd4c 	bl	80023a0 <RCC_SetFlashLatencyFromMSIRange>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e37a      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001912:	f000 fc81 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 8001916:	4602      	mov	r2, r0
 8001918:	4b51      	ldr	r3, [pc, #324]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	4950      	ldr	r1, [pc, #320]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001924:	5ccb      	ldrb	r3, [r1, r3]
 8001926:	f003 031f 	and.w	r3, r3, #31
 800192a:	fa22 f303 	lsr.w	r3, r2, r3
 800192e:	4a4e      	ldr	r2, [pc, #312]	; (8001a68 <HAL_RCC_OscConfig+0x278>)
 8001930:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001932:	4b4e      	ldr	r3, [pc, #312]	; (8001a6c <HAL_RCC_OscConfig+0x27c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fbba 	bl	80010b0 <HAL_InitTick>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d052      	beq.n	80019ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	e35e      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d032      	beq.n	80019b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001952:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a42      	ldr	r2, [pc, #264]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800195e:	f7ff fbf7 	bl	8001150 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001966:	f7ff fbf3 	bl	8001150 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e347      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001978:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001984:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a35      	ldr	r2, [pc, #212]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4930      	ldr	r1, [pc, #192]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a2:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	492b      	ldr	r1, [pc, #172]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
 80019b6:	e01a      	b.n	80019ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019b8:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019c4:	f7ff fbc4 	bl	8001150 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019cc:	f7ff fbc0 	bl	8001150 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e314      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x1dc>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d073      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_OscConfig+0x21c>
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d10e      	bne.n	8001a24 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d10b      	bne.n	8001a24 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d063      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x2f0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d15f      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e2f1      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2c:	d106      	bne.n	8001a3c <HAL_RCC_OscConfig+0x24c>
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e025      	b.n	8001a88 <HAL_RCC_OscConfig+0x298>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a44:	d114      	bne.n	8001a70 <HAL_RCC_OscConfig+0x280>
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a02      	ldr	r2, [pc, #8]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e013      	b.n	8001a88 <HAL_RCC_OscConfig+0x298>
 8001a60:	40021000 	.word	0x40021000
 8001a64:	080051b0 	.word	0x080051b0
 8001a68:	20000004 	.word	0x20000004
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	4ba0      	ldr	r3, [pc, #640]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a9f      	ldr	r2, [pc, #636]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b9d      	ldr	r3, [pc, #628]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a9c      	ldr	r2, [pc, #624]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d013      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff fb5e 	bl	8001150 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a98:	f7ff fb5a 	bl	8001150 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	; 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e2ae      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aaa:	4b92      	ldr	r3, [pc, #584]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x2a8>
 8001ab6:	e014      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fb4a 	bl	8001150 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7ff fb46 	bl	8001150 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e29a      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ad2:	4b88      	ldr	r3, [pc, #544]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x2d0>
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d060      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_OscConfig+0x310>
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d119      	bne.n	8001b2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d116      	bne.n	8001b2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b00:	4b7c      	ldr	r3, [pc, #496]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_OscConfig+0x328>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e277      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b18:	4b76      	ldr	r3, [pc, #472]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	061b      	lsls	r3, r3, #24
 8001b26:	4973      	ldr	r1, [pc, #460]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b2c:	e040      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d023      	beq.n	8001b7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b36:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a6e      	ldr	r2, [pc, #440]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7ff fb05 	bl	8001150 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fb01 	bl	8001150 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e255      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b5c:	4b65      	ldr	r3, [pc, #404]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	4b62      	ldr	r3, [pc, #392]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	061b      	lsls	r3, r3, #24
 8001b76:	495f      	ldr	r1, [pc, #380]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
 8001b7c:	e018      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7e:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a5c      	ldr	r2, [pc, #368]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8a:	f7ff fae1 	bl	8001150 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b92:	f7ff fadd 	bl	8001150 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e231      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ba4:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f0      	bne.n	8001b92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d03c      	beq.n	8001c36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01c      	beq.n	8001bfe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bca:	4a4a      	ldr	r2, [pc, #296]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fabc 	bl	8001150 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fab8 	bl	8001150 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e20c      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bee:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0ef      	beq.n	8001bdc <HAL_RCC_OscConfig+0x3ec>
 8001bfc:	e01b      	b.n	8001c36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c04:	4a3b      	ldr	r2, [pc, #236]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001c06:	f023 0301 	bic.w	r3, r3, #1
 8001c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fa9f 	bl	8001150 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c16:	f7ff fa9b 	bl	8001150 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e1ef      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c28:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1ef      	bne.n	8001c16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 80a6 	beq.w	8001d90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c48:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10d      	bne.n	8001c70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	4a26      	ldr	r2, [pc, #152]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c70:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <HAL_RCC_OscConfig+0x508>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d118      	bne.n	8001cae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_RCC_OscConfig+0x508>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <HAL_RCC_OscConfig+0x508>)
 8001c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c88:	f7ff fa62 	bl	8001150 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c90:	f7ff fa5e 	bl	8001150 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e1b2      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_RCC_OscConfig+0x508>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d108      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x4d8>
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc6:	e029      	b.n	8001d1c <HAL_RCC_OscConfig+0x52c>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d115      	bne.n	8001cfc <HAL_RCC_OscConfig+0x50c>
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	4a03      	ldr	r2, [pc, #12]	; (8001cf4 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cf0:	e014      	b.n	8001d1c <HAL_RCC_OscConfig+0x52c>
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	4b9a      	ldr	r3, [pc, #616]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d02:	4a99      	ldr	r2, [pc, #612]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d0c:	4b96      	ldr	r3, [pc, #600]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d12:	4a95      	ldr	r2, [pc, #596]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d016      	beq.n	8001d52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d24:	f7ff fa14 	bl	8001150 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fa10 	bl	8001150 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e162      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d42:	4b89      	ldr	r3, [pc, #548]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0ed      	beq.n	8001d2c <HAL_RCC_OscConfig+0x53c>
 8001d50:	e015      	b.n	8001d7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d52:	f7ff f9fd 	bl	8001150 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7ff f9f9 	bl	8001150 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e14b      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d70:	4b7d      	ldr	r3, [pc, #500]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1ed      	bne.n	8001d5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d7e:	7ffb      	ldrb	r3, [r7, #31]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d105      	bne.n	8001d90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d84:	4b78      	ldr	r3, [pc, #480]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	4a77      	ldr	r2, [pc, #476]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d03c      	beq.n	8001e16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01c      	beq.n	8001dde <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001da4:	4b70      	ldr	r3, [pc, #448]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001daa:	4a6f      	ldr	r2, [pc, #444]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7ff f9cc 	bl	8001150 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dbc:	f7ff f9c8 	bl	8001150 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e11c      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dce:	4b66      	ldr	r3, [pc, #408]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0ef      	beq.n	8001dbc <HAL_RCC_OscConfig+0x5cc>
 8001ddc:	e01b      	b.n	8001e16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dde:	4b62      	ldr	r3, [pc, #392]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001de4:	4a60      	ldr	r2, [pc, #384]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dee:	f7ff f9af 	bl	8001150 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001df6:	f7ff f9ab 	bl	8001150 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e0ff      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e08:	4b57      	ldr	r3, [pc, #348]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1ef      	bne.n	8001df6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80f3 	beq.w	8002006 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	f040 80c9 	bne.w	8001fbc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e2a:	4b4f      	ldr	r3, [pc, #316]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f003 0203 	and.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d12c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d123      	bne.n	8001e98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d11b      	bne.n	8001e98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d113      	bne.n	8001e98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7a:	085b      	lsrs	r3, r3, #1
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d109      	bne.n	8001e98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	085b      	lsrs	r3, r3, #1
 8001e90:	3b01      	subs	r3, #1
 8001e92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d06b      	beq.n	8001f70 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b0c      	cmp	r3, #12
 8001e9c:	d062      	beq.n	8001f64 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e9e:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0ac      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a2d      	ldr	r2, [pc, #180]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001eb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eba:	f7ff f949 	bl	8001150 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff f945 	bl	8001150 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e099      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed4:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f0      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee0:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <HAL_RCC_OscConfig+0x77c>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ef0:	3a01      	subs	r2, #1
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	4311      	orrs	r1, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001efa:	0212      	lsls	r2, r2, #8
 8001efc:	4311      	orrs	r1, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f02:	0852      	lsrs	r2, r2, #1
 8001f04:	3a01      	subs	r2, #1
 8001f06:	0552      	lsls	r2, r2, #21
 8001f08:	4311      	orrs	r1, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f0e:	0852      	lsrs	r2, r2, #1
 8001f10:	3a01      	subs	r2, #1
 8001f12:	0652      	lsls	r2, r2, #25
 8001f14:	4311      	orrs	r1, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f1a:	06d2      	lsls	r2, r2, #27
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	4912      	ldr	r1, [pc, #72]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f24:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f3c:	f7ff f908 	bl	8001150 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff f904 	bl	8001150 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e058      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f62:	e050      	b.n	8002006 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e04f      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <HAL_RCC_OscConfig+0x820>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d144      	bne.n	8002006 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCC_OscConfig+0x820>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a23      	ldr	r2, [pc, #140]	; (8002010 <HAL_RCC_OscConfig+0x820>)
 8001f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <HAL_RCC_OscConfig+0x820>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a20      	ldr	r2, [pc, #128]	; (8002010 <HAL_RCC_OscConfig+0x820>)
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f94:	f7ff f8dc 	bl	8001150 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff f8d8 	bl	8001150 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e02c      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <HAL_RCC_OscConfig+0x820>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x7ac>
 8001fba:	e024      	b.n	8002006 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d01f      	beq.n	8002002 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_RCC_OscConfig+0x820>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <HAL_RCC_OscConfig+0x820>)
 8001fc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7ff f8bf 	bl	8001150 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7ff f8bb 	bl	8001150 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e00f      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_RCC_OscConfig+0x820>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_RCC_OscConfig+0x820>)
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	4905      	ldr	r1, [pc, #20]	; (8002010 <HAL_RCC_OscConfig+0x820>)
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_OscConfig+0x824>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60cb      	str	r3, [r1, #12]
 8002000:	e001      	b.n	8002006 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3720      	adds	r7, #32
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	feeefffc 	.word	0xfeeefffc

08002018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0e7      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800202c:	4b75      	ldr	r3, [pc, #468]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d910      	bls.n	800205c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b72      	ldr	r3, [pc, #456]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0207 	bic.w	r2, r3, #7
 8002042:	4970      	ldr	r1, [pc, #448]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0cf      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d010      	beq.n	800208a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002074:	429a      	cmp	r2, r3
 8002076:	d908      	bls.n	800208a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002078:	4b63      	ldr	r3, [pc, #396]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4960      	ldr	r1, [pc, #384]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d04c      	beq.n	8002130 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b03      	cmp	r3, #3
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	4b5a      	ldr	r3, [pc, #360]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d121      	bne.n	80020ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0a6      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b6:	4b54      	ldr	r3, [pc, #336]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d115      	bne.n	80020ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e09a      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ce:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e08e      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020de:	4b4a      	ldr	r3, [pc, #296]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e086      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ee:	4b46      	ldr	r3, [pc, #280]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f023 0203 	bic.w	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4943      	ldr	r1, [pc, #268]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002100:	f7ff f826 	bl	8001150 <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	e00a      	b.n	800211e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002108:	f7ff f822 	bl	8001150 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e06e      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 020c 	and.w	r2, r3, #12
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	429a      	cmp	r2, r3
 800212e:	d1eb      	bne.n	8002108 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d010      	beq.n	800215e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	4b31      	ldr	r3, [pc, #196]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002148:	429a      	cmp	r2, r3
 800214a:	d208      	bcs.n	800215e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214c:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	492b      	ldr	r1, [pc, #172]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800215e:	4b29      	ldr	r3, [pc, #164]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d210      	bcs.n	800218e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216c:	4b25      	ldr	r3, [pc, #148]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 0207 	bic.w	r2, r3, #7
 8002174:	4923      	ldr	r1, [pc, #140]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217c:	4b21      	ldr	r3, [pc, #132]	; (8002204 <HAL_RCC_ClockConfig+0x1ec>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e036      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	4918      	ldr	r1, [pc, #96]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d009      	beq.n	80021cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4910      	ldr	r1, [pc, #64]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021cc:	f000 f824 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_RCC_ClockConfig+0x1f0>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	490b      	ldr	r1, [pc, #44]	; (800220c <HAL_RCC_ClockConfig+0x1f4>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
 80021e8:	4a09      	ldr	r2, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1f8>)
 80021ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_RCC_ClockConfig+0x1fc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe ff5d 	bl	80010b0 <HAL_InitTick>
 80021f6:	4603      	mov	r3, r0
 80021f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80021fa:	7afb      	ldrb	r3, [r7, #11]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40022000 	.word	0x40022000
 8002208:	40021000 	.word	0x40021000
 800220c:	080051b0 	.word	0x080051b0
 8002210:	20000004 	.word	0x20000004
 8002214:	20000008 	.word	0x20000008

08002218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002226:	4b3e      	ldr	r3, [pc, #248]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002230:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x34>
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d121      	bne.n	800228a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d11e      	bne.n	800228a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002258:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 800225a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	e005      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002274:	4a2b      	ldr	r2, [pc, #172]	; (8002324 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10d      	bne.n	80022a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b04      	cmp	r3, #4
 800228e:	d102      	bne.n	8002296 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <HAL_RCC_GetSysClockFreq+0x110>)
 8002292:	61bb      	str	r3, [r7, #24]
 8002294:	e004      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b08      	cmp	r3, #8
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <HAL_RCC_GetSysClockFreq+0x114>)
 800229e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d134      	bne.n	8002310 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d003      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0xa6>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d003      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0xac>
 80022bc:	e005      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_RCC_GetSysClockFreq+0x110>)
 80022c0:	617b      	str	r3, [r7, #20]
      break;
 80022c2:	e005      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_RCC_GetSysClockFreq+0x114>)
 80022c6:	617b      	str	r3, [r7, #20]
      break;
 80022c8:	e002      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	617b      	str	r3, [r7, #20]
      break;
 80022ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	3301      	adds	r3, #1
 80022dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	fb03 f202 	mul.w	r2, r3, r2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	0e5b      	lsrs	r3, r3, #25
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	3301      	adds	r3, #1
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	fbb2 f3f3 	udiv	r3, r2, r3
 800230e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002310:	69bb      	ldr	r3, [r7, #24]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3724      	adds	r7, #36	; 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	080051c8 	.word	0x080051c8
 8002328:	00f42400 	.word	0x00f42400
 800232c:	007a1200 	.word	0x007a1200

08002330 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_RCC_GetHCLKFreq+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000004 	.word	0x20000004

08002348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800234c:	f7ff fff0 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4904      	ldr	r1, [pc, #16]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	080051c0 	.word	0x080051c0

08002374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002378:	f7ff ffda 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 800237c:	4602      	mov	r2, r0
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	0adb      	lsrs	r3, r3, #11
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4904      	ldr	r1, [pc, #16]	; (800239c <HAL_RCC_GetPCLK2Freq+0x28>)
 800238a:	5ccb      	ldrb	r3, [r1, r3]
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	080051c0 	.word	0x080051c0

080023a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023ac:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023b8:	f7ff f9b6 	bl	8001728 <HAL_PWREx_GetVoltageRange>
 80023bc:	6178      	str	r0, [r7, #20]
 80023be:	e014      	b.n	80023ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	4a24      	ldr	r2, [pc, #144]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ca:	6593      	str	r3, [r2, #88]	; 0x58
 80023cc:	4b22      	ldr	r3, [pc, #136]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023d8:	f7ff f9a6 	bl	8001728 <HAL_PWREx_GetVoltageRange>
 80023dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023de:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f0:	d10b      	bne.n	800240a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b80      	cmp	r3, #128	; 0x80
 80023f6:	d919      	bls.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2ba0      	cmp	r3, #160	; 0xa0
 80023fc:	d902      	bls.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023fe:	2302      	movs	r3, #2
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	e013      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002404:	2301      	movs	r3, #1
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	e010      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b80      	cmp	r3, #128	; 0x80
 800240e:	d902      	bls.n	8002416 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002410:	2303      	movs	r3, #3
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	e00a      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b80      	cmp	r3, #128	; 0x80
 800241a:	d102      	bne.n	8002422 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800241c:	2302      	movs	r3, #2
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	e004      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b70      	cmp	r3, #112	; 0x70
 8002426:	d101      	bne.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002428:	2301      	movs	r3, #1
 800242a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 0207 	bic.w	r2, r3, #7
 8002434:	4909      	ldr	r1, [pc, #36]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	429a      	cmp	r2, r3
 8002448:	d001      	beq.n	800244e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	40022000 	.word	0x40022000

08002460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002468:	2300      	movs	r3, #0
 800246a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800246c:	2300      	movs	r3, #0
 800246e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002478:	2b00      	cmp	r3, #0
 800247a:	d031      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002480:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002484:	d01a      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002486:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800248a:	d814      	bhi.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002490:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002494:	d10f      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002496:	4b5d      	ldr	r3, [pc, #372]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	4a5c      	ldr	r2, [pc, #368]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024a2:	e00c      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3304      	adds	r3, #4
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fa44 	bl	8002938 <RCCEx_PLLSAI1_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024b4:	e003      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	74fb      	strb	r3, [r7, #19]
      break;
 80024ba:	e000      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80024bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024c4:	4b51      	ldr	r3, [pc, #324]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	494e      	ldr	r1, [pc, #312]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024da:	e001      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 809e 	beq.w	800262a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024f2:	4b46      	ldr	r3, [pc, #280]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00d      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b40      	ldr	r3, [pc, #256]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	4a3f      	ldr	r2, [pc, #252]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002512:	6593      	str	r3, [r2, #88]	; 0x58
 8002514:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002520:	2301      	movs	r3, #1
 8002522:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002524:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a39      	ldr	r2, [pc, #228]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002530:	f7fe fe0e 	bl	8001150 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002536:	e009      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002538:	f7fe fe0a 	bl	8001150 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d902      	bls.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	74fb      	strb	r3, [r7, #19]
        break;
 800254a:	e005      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800254c:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ef      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d15a      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800255e:	4b2b      	ldr	r3, [pc, #172]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002568:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01e      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	429a      	cmp	r2, r3
 8002578:	d019      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002584:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002586:	4b21      	ldr	r3, [pc, #132]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258c:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800258e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259c:	4a1b      	ldr	r2, [pc, #108]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025a6:	4a19      	ldr	r2, [pc, #100]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d016      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fdca 	bl	8001150 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025be:	e00b      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c0:	f7fe fdc6 	bl	8001150 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d902      	bls.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	74fb      	strb	r3, [r7, #19]
            break;
 80025d6:	e006      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0ec      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10b      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025fa:	4904      	ldr	r1, [pc, #16]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002602:	e009      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	74bb      	strb	r3, [r7, #18]
 8002608:	e006      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002618:	7c7b      	ldrb	r3, [r7, #17]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4b9e      	ldr	r3, [pc, #632]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	4a9d      	ldr	r2, [pc, #628]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002628:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002636:	4b98      	ldr	r3, [pc, #608]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f023 0203 	bic.w	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4994      	ldr	r1, [pc, #592]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002658:	4b8f      	ldr	r3, [pc, #572]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f023 020c 	bic.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	498c      	ldr	r1, [pc, #560]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800267a:	4b87      	ldr	r3, [pc, #540]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	4983      	ldr	r1, [pc, #524]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800269c:	4b7e      	ldr	r3, [pc, #504]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	497b      	ldr	r1, [pc, #492]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026be:	4b76      	ldr	r3, [pc, #472]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	4972      	ldr	r1, [pc, #456]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026e0:	4b6d      	ldr	r3, [pc, #436]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	496a      	ldr	r1, [pc, #424]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002702:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	4961      	ldr	r1, [pc, #388]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002724:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002732:	4959      	ldr	r1, [pc, #356]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002746:	4b54      	ldr	r3, [pc, #336]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	4950      	ldr	r1, [pc, #320]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002768:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	4948      	ldr	r1, [pc, #288]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800278a:	4b43      	ldr	r3, [pc, #268]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800278c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002790:	f023 0203 	bic.w	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	493f      	ldr	r1, [pc, #252]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d028      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027ac:	4b3a      	ldr	r3, [pc, #232]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ba:	4937      	ldr	r1, [pc, #220]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ca:	d106      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027cc:	4b32      	ldr	r3, [pc, #200]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a31      	ldr	r2, [pc, #196]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d6:	60d3      	str	r3, [r2, #12]
 80027d8:	e011      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027e2:	d10c      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	2101      	movs	r1, #1
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f8a4 	bl	8002938 <RCCEx_PLLSAI1_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027f4:	7cfb      	ldrb	r3, [r7, #19]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80027fa:	7cfb      	ldrb	r3, [r7, #19]
 80027fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d028      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800280a:	4b23      	ldr	r3, [pc, #140]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002810:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	491f      	ldr	r1, [pc, #124]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002828:	d106      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	4a1a      	ldr	r2, [pc, #104]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002830:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002834:	60d3      	str	r3, [r2, #12]
 8002836:	e011      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002840:	d10c      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	2101      	movs	r1, #1
 8002848:	4618      	mov	r0, r3
 800284a:	f000 f875 	bl	8002938 <RCCEx_PLLSAI1_Config>
 800284e:	4603      	mov	r3, r0
 8002850:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d02b      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	4908      	ldr	r1, [pc, #32]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002886:	d109      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a02      	ldr	r2, [pc, #8]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800288e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002892:	60d3      	str	r3, [r2, #12]
 8002894:	e014      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2101      	movs	r1, #1
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 f843 	bl	8002938 <RCCEx_PLLSAI1_Config>
 80028b2:	4603      	mov	r3, r0
 80028b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01c      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	4916      	ldr	r1, [pc, #88]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028ea:	d10c      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	2102      	movs	r1, #2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f820 	bl	8002938 <RCCEx_PLLSAI1_Config>
 80028f8:	4603      	mov	r3, r0
 80028fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002902:	7cfb      	ldrb	r3, [r7, #19]
 8002904:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002920:	4904      	ldr	r1, [pc, #16]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002928:	7cbb      	ldrb	r3, [r7, #18]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000

08002938 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002946:	4b74      	ldr	r3, [pc, #464]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d018      	beq.n	8002984 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002952:	4b71      	ldr	r3, [pc, #452]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0203 	and.w	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d10d      	bne.n	800297e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
       ||
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800296a:	4b6b      	ldr	r3, [pc, #428]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
       ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d047      	beq.n	8002a0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
 8002982:	e044      	b.n	8002a0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d018      	beq.n	80029be <RCCEx_PLLSAI1_Config+0x86>
 800298c:	2b03      	cmp	r3, #3
 800298e:	d825      	bhi.n	80029dc <RCCEx_PLLSAI1_Config+0xa4>
 8002990:	2b01      	cmp	r3, #1
 8002992:	d002      	beq.n	800299a <RCCEx_PLLSAI1_Config+0x62>
 8002994:	2b02      	cmp	r3, #2
 8002996:	d009      	beq.n	80029ac <RCCEx_PLLSAI1_Config+0x74>
 8002998:	e020      	b.n	80029dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800299a:	4b5f      	ldr	r3, [pc, #380]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d11d      	bne.n	80029e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029aa:	e01a      	b.n	80029e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029ac:	4b5a      	ldr	r3, [pc, #360]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d116      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029bc:	e013      	b.n	80029e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029be:	4b56      	ldr	r3, [pc, #344]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10f      	bne.n	80029ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ca:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029da:	e006      	b.n	80029ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
      break;
 80029e0:	e004      	b.n	80029ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029e2:	bf00      	nop
 80029e4:	e002      	b.n	80029ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029e6:	bf00      	nop
 80029e8:	e000      	b.n	80029ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10d      	bne.n	8002a0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029f2:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6819      	ldr	r1, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	430b      	orrs	r3, r1
 8002a08:	4943      	ldr	r1, [pc, #268]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d17c      	bne.n	8002b0e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a14:	4b40      	ldr	r3, [pc, #256]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a3f      	ldr	r2, [pc, #252]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a20:	f7fe fb96 	bl	8001150 <HAL_GetTick>
 8002a24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a26:	e009      	b.n	8002a3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a28:	f7fe fb92 	bl	8001150 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d902      	bls.n	8002a3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	73fb      	strb	r3, [r7, #15]
        break;
 8002a3a:	e005      	b.n	8002a48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a3c:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ef      	bne.n	8002a28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d15f      	bne.n	8002b0e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d110      	bne.n	8002a76 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a54:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002a5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6892      	ldr	r2, [r2, #8]
 8002a64:	0211      	lsls	r1, r2, #8
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68d2      	ldr	r2, [r2, #12]
 8002a6a:	06d2      	lsls	r2, r2, #27
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	492a      	ldr	r1, [pc, #168]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	610b      	str	r3, [r1, #16]
 8002a74:	e027      	b.n	8002ac6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d112      	bne.n	8002aa2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a7c:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6892      	ldr	r2, [r2, #8]
 8002a8c:	0211      	lsls	r1, r2, #8
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6912      	ldr	r2, [r2, #16]
 8002a92:	0852      	lsrs	r2, r2, #1
 8002a94:	3a01      	subs	r2, #1
 8002a96:	0552      	lsls	r2, r2, #21
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	491f      	ldr	r1, [pc, #124]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	610b      	str	r3, [r1, #16]
 8002aa0:	e011      	b.n	8002ac6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002aaa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6892      	ldr	r2, [r2, #8]
 8002ab2:	0211      	lsls	r1, r2, #8
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6952      	ldr	r2, [r2, #20]
 8002ab8:	0852      	lsrs	r2, r2, #1
 8002aba:	3a01      	subs	r2, #1
 8002abc:	0652      	lsls	r2, r2, #25
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	4915      	ldr	r1, [pc, #84]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002acc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ad0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad2:	f7fe fb3d 	bl	8001150 <HAL_GetTick>
 8002ad6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ad8:	e009      	b.n	8002aee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ada:	f7fe fb39 	bl	8001150 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d902      	bls.n	8002aee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	73fb      	strb	r3, [r7, #15]
          break;
 8002aec:	e005      	b.n	8002afa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0ef      	beq.n	8002ada <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d106      	bne.n	8002b0e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	4903      	ldr	r1, [pc, #12]	; (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000

08002b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e049      	b.n	8002bc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe f92c 	bl	8000da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f000 fd60 	bl	8003620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d001      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e040      	b.n	8002c66 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <HAL_TIM_Base_Start_IT+0xa8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00e      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x58>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d009      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x58>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a18      	ldr	r2, [pc, #96]	; (8002c78 <HAL_TIM_Base_Start_IT+0xac>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x58>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <HAL_TIM_Base_Start_IT+0xb0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d115      	bne.n	8002c50 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d015      	beq.n	8002c62 <HAL_TIM_Base_Start_IT+0x96>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3c:	d011      	beq.n	8002c62 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4e:	e008      	b.n	8002c62 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	e000      	b.n	8002c64 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	40014000 	.word	0x40014000
 8002c80:	00010007 	.word	0x00010007

08002c84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e049      	b.n	8002d2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe f858 	bl	8000d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 fcac 	bl	8003620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <HAL_TIM_PWM_Start+0x24>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	bf14      	ite	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	2300      	moveq	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	e03c      	b.n	8002dd2 <HAL_TIM_PWM_Start+0x9e>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d109      	bne.n	8002d72 <HAL_TIM_PWM_Start+0x3e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	bf14      	ite	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	2300      	moveq	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	e02f      	b.n	8002dd2 <HAL_TIM_PWM_Start+0x9e>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d109      	bne.n	8002d8c <HAL_TIM_PWM_Start+0x58>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	e022      	b.n	8002dd2 <HAL_TIM_PWM_Start+0x9e>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b0c      	cmp	r3, #12
 8002d90:	d109      	bne.n	8002da6 <HAL_TIM_PWM_Start+0x72>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	bf14      	ite	ne
 8002d9e:	2301      	movne	r3, #1
 8002da0:	2300      	moveq	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	e015      	b.n	8002dd2 <HAL_TIM_PWM_Start+0x9e>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b10      	cmp	r3, #16
 8002daa:	d109      	bne.n	8002dc0 <HAL_TIM_PWM_Start+0x8c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e008      	b.n	8002dd2 <HAL_TIM_PWM_Start+0x9e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	bf14      	ite	ne
 8002dcc:	2301      	movne	r3, #1
 8002dce:	2300      	moveq	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e083      	b.n	8002ee2 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_PWM_Start+0xb6>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de8:	e023      	b.n	8002e32 <HAL_TIM_PWM_Start+0xfe>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_PWM_Start+0xc6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df8:	e01b      	b.n	8002e32 <HAL_TIM_PWM_Start+0xfe>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d104      	bne.n	8002e0a <HAL_TIM_PWM_Start+0xd6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e08:	e013      	b.n	8002e32 <HAL_TIM_PWM_Start+0xfe>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b0c      	cmp	r3, #12
 8002e0e:	d104      	bne.n	8002e1a <HAL_TIM_PWM_Start+0xe6>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e18:	e00b      	b.n	8002e32 <HAL_TIM_PWM_Start+0xfe>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d104      	bne.n	8002e2a <HAL_TIM_PWM_Start+0xf6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e28:	e003      	b.n	8002e32 <HAL_TIM_PWM_Start+0xfe>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2201      	movs	r2, #1
 8002e38:	6839      	ldr	r1, [r7, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fedc 	bl	8003bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a29      	ldr	r2, [pc, #164]	; (8002eec <HAL_TIM_PWM_Start+0x1b8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d009      	beq.n	8002e5e <HAL_TIM_PWM_Start+0x12a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a28      	ldr	r2, [pc, #160]	; (8002ef0 <HAL_TIM_PWM_Start+0x1bc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_TIM_PWM_Start+0x12a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a26      	ldr	r2, [pc, #152]	; (8002ef4 <HAL_TIM_PWM_Start+0x1c0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_TIM_PWM_Start+0x12e>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_TIM_PWM_Start+0x130>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1b      	ldr	r2, [pc, #108]	; (8002eec <HAL_TIM_PWM_Start+0x1b8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00e      	beq.n	8002ea0 <HAL_TIM_PWM_Start+0x16c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8a:	d009      	beq.n	8002ea0 <HAL_TIM_PWM_Start+0x16c>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a19      	ldr	r2, [pc, #100]	; (8002ef8 <HAL_TIM_PWM_Start+0x1c4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_TIM_PWM_Start+0x16c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <HAL_TIM_PWM_Start+0x1bc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d115      	bne.n	8002ecc <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <HAL_TIM_PWM_Start+0x1c8>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d015      	beq.n	8002ede <HAL_TIM_PWM_Start+0x1aa>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb8:	d011      	beq.n	8002ede <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0201 	orr.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eca:	e008      	b.n	8002ede <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e000      	b.n	8002ee0 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ede:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40014400 	.word	0x40014400
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	00010007 	.word	0x00010007

08002f00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e097      	b.n	8003044 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d106      	bne.n	8002f2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7fd fed9 	bl	8000ce0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002f44:	f023 0307 	bic.w	r3, r3, #7
 8002f48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3304      	adds	r3, #4
 8002f52:	4619      	mov	r1, r3
 8002f54:	4610      	mov	r0, r2
 8002f56:	f000 fb63 	bl	8003620 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f82:	f023 0303 	bic.w	r3, r3, #3
 8002f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	021b      	lsls	r3, r3, #8
 8002f92:	4313      	orrs	r3, r2
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002fa0:	f023 030c 	bic.w	r3, r3, #12
 8002fa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	011a      	lsls	r2, r3, #4
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	031b      	lsls	r3, r3, #12
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002fde:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002fe6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800305c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003064:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800306c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003074:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d110      	bne.n	800309e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d102      	bne.n	8003088 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003082:	7b7b      	ldrb	r3, [r7, #13]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d001      	beq.n	800308c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e069      	b.n	8003160 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800309c:	e031      	b.n	8003102 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d110      	bne.n	80030c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80030a4:	7bbb      	ldrb	r3, [r7, #14]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d102      	bne.n	80030b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030aa:	7b3b      	ldrb	r3, [r7, #12]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d001      	beq.n	80030b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e055      	b.n	8003160 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030c4:	e01d      	b.n	8003102 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d108      	bne.n	80030de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80030cc:	7bbb      	ldrb	r3, [r7, #14]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d105      	bne.n	80030de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030d2:	7b7b      	ldrb	r3, [r7, #13]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d102      	bne.n	80030de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030d8:	7b3b      	ldrb	r3, [r7, #12]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d001      	beq.n	80030e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e03e      	b.n	8003160 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_TIM_Encoder_Start+0xc4>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b04      	cmp	r3, #4
 800310c:	d008      	beq.n	8003120 <HAL_TIM_Encoder_Start+0xd4>
 800310e:	e00f      	b.n	8003130 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2201      	movs	r2, #1
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fd6d 	bl	8003bf8 <TIM_CCxChannelCmd>
      break;
 800311e:	e016      	b.n	800314e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2201      	movs	r2, #1
 8003126:	2104      	movs	r1, #4
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fd65 	bl	8003bf8 <TIM_CCxChannelCmd>
      break;
 800312e:	e00e      	b.n	800314e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2201      	movs	r2, #1
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fd5d 	bl	8003bf8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2201      	movs	r2, #1
 8003144:	2104      	movs	r1, #4
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fd56 	bl	8003bf8 <TIM_CCxChannelCmd>
      break;
 800314c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 0201 	orr.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b02      	cmp	r3, #2
 800317c:	d122      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	d11b      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0202 	mvn.w	r2, #2
 8003194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fa1a 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
 80031b0:	e005      	b.n	80031be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fa0c 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fa1d 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d122      	bne.n	8003218 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d11b      	bne.n	8003218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0204 	mvn.w	r2, #4
 80031e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2202      	movs	r2, #2
 80031ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f9f0 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
 8003204:	e005      	b.n	8003212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f9e2 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f9f3 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b08      	cmp	r3, #8
 8003224:	d122      	bne.n	800326c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b08      	cmp	r3, #8
 8003232:	d11b      	bne.n	800326c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0208 	mvn.w	r2, #8
 800323c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2204      	movs	r2, #4
 8003242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f9c6 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
 8003258:	e005      	b.n	8003266 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f9b8 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f9c9 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b10      	cmp	r3, #16
 8003278:	d122      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b10      	cmp	r3, #16
 8003286:	d11b      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0210 	mvn.w	r2, #16
 8003290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2208      	movs	r2, #8
 8003296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f99c 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
 80032ac:	e005      	b.n	80032ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f98e 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f99f 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d10e      	bne.n	80032ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0201 	mvn.w	r2, #1
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd fc20 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	2b80      	cmp	r3, #128	; 0x80
 80032f8:	d10e      	bne.n	8003318 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003304:	2b80      	cmp	r3, #128	; 0x80
 8003306:	d107      	bne.n	8003318 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fd0e 	bl	8003d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003326:	d10e      	bne.n	8003346 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003332:	2b80      	cmp	r3, #128	; 0x80
 8003334:	d107      	bne.n	8003346 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800333e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fd01 	bl	8003d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003350:	2b40      	cmp	r3, #64	; 0x40
 8003352:	d10e      	bne.n	8003372 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	d107      	bne.n	8003372 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800336a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f94d 	bl	800360c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b20      	cmp	r3, #32
 800337e:	d10e      	bne.n	800339e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b20      	cmp	r3, #32
 800338c:	d107      	bne.n	800339e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f06f 0220 	mvn.w	r2, #32
 8003396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fcc1 	bl	8003d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e0ff      	b.n	80035c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b14      	cmp	r3, #20
 80033d2:	f200 80f0 	bhi.w	80035b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80033d6:	a201      	add	r2, pc, #4	; (adr r2, 80033dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033dc:	08003431 	.word	0x08003431
 80033e0:	080035b7 	.word	0x080035b7
 80033e4:	080035b7 	.word	0x080035b7
 80033e8:	080035b7 	.word	0x080035b7
 80033ec:	08003471 	.word	0x08003471
 80033f0:	080035b7 	.word	0x080035b7
 80033f4:	080035b7 	.word	0x080035b7
 80033f8:	080035b7 	.word	0x080035b7
 80033fc:	080034b3 	.word	0x080034b3
 8003400:	080035b7 	.word	0x080035b7
 8003404:	080035b7 	.word	0x080035b7
 8003408:	080035b7 	.word	0x080035b7
 800340c:	080034f3 	.word	0x080034f3
 8003410:	080035b7 	.word	0x080035b7
 8003414:	080035b7 	.word	0x080035b7
 8003418:	080035b7 	.word	0x080035b7
 800341c:	08003535 	.word	0x08003535
 8003420:	080035b7 	.word	0x080035b7
 8003424:	080035b7 	.word	0x080035b7
 8003428:	080035b7 	.word	0x080035b7
 800342c:	08003575 	.word	0x08003575
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f960 	bl	80036fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0208 	orr.w	r2, r2, #8
 800344a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0204 	bic.w	r2, r2, #4
 800345a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6999      	ldr	r1, [r3, #24]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	619a      	str	r2, [r3, #24]
      break;
 800346e:	e0a5      	b.n	80035bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f9bc 	bl	80037f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800348a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6999      	ldr	r1, [r3, #24]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	021a      	lsls	r2, r3, #8
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	619a      	str	r2, [r3, #24]
      break;
 80034b0:	e084      	b.n	80035bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68b9      	ldr	r1, [r7, #8]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fa15 	bl	80038e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69da      	ldr	r2, [r3, #28]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0208 	orr.w	r2, r2, #8
 80034cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0204 	bic.w	r2, r2, #4
 80034dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69d9      	ldr	r1, [r3, #28]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	61da      	str	r2, [r3, #28]
      break;
 80034f0:	e064      	b.n	80035bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fa6d 	bl	80039d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800350c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69d9      	ldr	r1, [r3, #28]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	021a      	lsls	r2, r3, #8
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	61da      	str	r2, [r3, #28]
      break;
 8003532:	e043      	b.n	80035bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 faaa 	bl	8003a94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0208 	orr.w	r2, r2, #8
 800354e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0204 	bic.w	r2, r2, #4
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003572:	e023      	b.n	80035bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fae2 	bl	8003b44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800358e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	021a      	lsls	r2, r3, #8
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035b4:	e002      	b.n	80035bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
      break;
 80035ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop

080035d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a2e      	ldr	r2, [pc, #184]	; (80036ec <TIM_Base_SetConfig+0xcc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d007      	beq.n	8003648 <TIM_Base_SetConfig+0x28>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363e:	d003      	beq.n	8003648 <TIM_Base_SetConfig+0x28>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a2b      	ldr	r2, [pc, #172]	; (80036f0 <TIM_Base_SetConfig+0xd0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d108      	bne.n	800365a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a23      	ldr	r2, [pc, #140]	; (80036ec <TIM_Base_SetConfig+0xcc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00f      	beq.n	8003682 <TIM_Base_SetConfig+0x62>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003668:	d00b      	beq.n	8003682 <TIM_Base_SetConfig+0x62>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a20      	ldr	r2, [pc, #128]	; (80036f0 <TIM_Base_SetConfig+0xd0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d007      	beq.n	8003682 <TIM_Base_SetConfig+0x62>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a1f      	ldr	r2, [pc, #124]	; (80036f4 <TIM_Base_SetConfig+0xd4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d003      	beq.n	8003682 <TIM_Base_SetConfig+0x62>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <TIM_Base_SetConfig+0xd8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d108      	bne.n	8003694 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a0c      	ldr	r2, [pc, #48]	; (80036ec <TIM_Base_SetConfig+0xcc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <TIM_Base_SetConfig+0xb0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a0c      	ldr	r2, [pc, #48]	; (80036f4 <TIM_Base_SetConfig+0xd4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d003      	beq.n	80036d0 <TIM_Base_SetConfig+0xb0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <TIM_Base_SetConfig+0xd8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d103      	bne.n	80036d8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	615a      	str	r2, [r3, #20]
}
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40014000 	.word	0x40014000
 80036f8:	40014400 	.word	0x40014400

080036fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f023 0201 	bic.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f023 0302 	bic.w	r3, r3, #2
 8003748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a24      	ldr	r2, [pc, #144]	; (80037e8 <TIM_OC1_SetConfig+0xec>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <TIM_OC1_SetConfig+0x70>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a23      	ldr	r2, [pc, #140]	; (80037ec <TIM_OC1_SetConfig+0xf0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d003      	beq.n	800376c <TIM_OC1_SetConfig+0x70>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a22      	ldr	r2, [pc, #136]	; (80037f0 <TIM_OC1_SetConfig+0xf4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d10c      	bne.n	8003786 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f023 0308 	bic.w	r3, r3, #8
 8003772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f023 0304 	bic.w	r3, r3, #4
 8003784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <TIM_OC1_SetConfig+0xec>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <TIM_OC1_SetConfig+0xa2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a16      	ldr	r2, [pc, #88]	; (80037ec <TIM_OC1_SetConfig+0xf0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d003      	beq.n	800379e <TIM_OC1_SetConfig+0xa2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <TIM_OC1_SetConfig+0xf4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d111      	bne.n	80037c2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	621a      	str	r2, [r3, #32]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40014000 	.word	0x40014000
 80037f0:	40014400 	.word	0x40014400

080037f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f023 0210 	bic.w	r2, r3, #16
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f023 0320 	bic.w	r3, r3, #32
 8003842:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a22      	ldr	r2, [pc, #136]	; (80038dc <TIM_OC2_SetConfig+0xe8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d10d      	bne.n	8003874 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800385e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003872:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a19      	ldr	r2, [pc, #100]	; (80038dc <TIM_OC2_SetConfig+0xe8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d007      	beq.n	800388c <TIM_OC2_SetConfig+0x98>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <TIM_OC2_SetConfig+0xec>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <TIM_OC2_SetConfig+0x98>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <TIM_OC2_SetConfig+0xf0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d113      	bne.n	80038b4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800389a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	621a      	str	r2, [r3, #32]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40012c00 	.word	0x40012c00
 80038e0:	40014000 	.word	0x40014000
 80038e4:	40014400 	.word	0x40014400

080038e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0303 	bic.w	r3, r3, #3
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a21      	ldr	r2, [pc, #132]	; (80039cc <TIM_OC3_SetConfig+0xe4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d10d      	bne.n	8003966 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a18      	ldr	r2, [pc, #96]	; (80039cc <TIM_OC3_SetConfig+0xe4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <TIM_OC3_SetConfig+0x96>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <TIM_OC3_SetConfig+0xe8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_OC3_SetConfig+0x96>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <TIM_OC3_SetConfig+0xec>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d113      	bne.n	80039a6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800398c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	40012c00 	.word	0x40012c00
 80039d0:	40014000 	.word	0x40014000
 80039d4:	40014400 	.word	0x40014400

080039d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	031b      	lsls	r3, r3, #12
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <TIM_OC4_SetConfig+0xb0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_OC4_SetConfig+0x74>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <TIM_OC4_SetConfig+0xb4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_OC4_SetConfig+0x74>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <TIM_OC4_SetConfig+0xb8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d109      	bne.n	8003a60 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	019b      	lsls	r3, r3, #6
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400

08003a94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ad8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <TIM_OC5_SetConfig+0xa4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_OC5_SetConfig+0x6a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <TIM_OC5_SetConfig+0xa8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_OC5_SetConfig+0x6a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a11      	ldr	r2, [pc, #68]	; (8003b40 <TIM_OC5_SetConfig+0xac>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d109      	bne.n	8003b12 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	621a      	str	r2, [r3, #32]
}
 8003b2c:	bf00      	nop
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40014400 	.word	0x40014400

08003b44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	051b      	lsls	r3, r3, #20
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a14      	ldr	r2, [pc, #80]	; (8003bec <TIM_OC6_SetConfig+0xa8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d007      	beq.n	8003bb0 <TIM_OC6_SetConfig+0x6c>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <TIM_OC6_SetConfig+0xac>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_OC6_SetConfig+0x6c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <TIM_OC6_SetConfig+0xb0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d109      	bne.n	8003bc4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	029b      	lsls	r3, r3, #10
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40014000 	.word	0x40014000
 8003bf4:	40014400 	.word	0x40014400

08003bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a1a      	ldr	r2, [r3, #32]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a1a      	ldr	r2, [r3, #32]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e054      	b.n	8003d06 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a24      	ldr	r2, [pc, #144]	; (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d108      	bne.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00e      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc4:	d009      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d004      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40012c00 	.word	0x40012c00
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40014000 	.word	0x40014000

08003d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e040      	b.n	8003df0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fd f86c 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2224      	movs	r2, #36	; 0x24
 8003d88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0201 	bic.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f8c0 	bl	8003f20 <UART_SetConfig>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e022      	b.n	8003df0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fb3a 	bl	800442c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fbc1 	bl	8004570 <UART_CheckIdleState>
 8003dee:	4603      	mov	r3, r0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	; 0x28
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	f040 8082 	bne.w	8003f16 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_UART_Transmit+0x26>
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e07a      	b.n	8003f18 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Transmit+0x38>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e073      	b.n	8003f18 <HAL_UART_Transmit+0x120>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2221      	movs	r2, #33	; 0x21
 8003e44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e46:	f7fd f983 	bl	8001150 <HAL_GetTick>
 8003e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e64:	d108      	bne.n	8003e78 <HAL_UART_Transmit+0x80>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d104      	bne.n	8003e78 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	e003      	b.n	8003e80 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003e88:	e02d      	b.n	8003ee6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2200      	movs	r2, #0
 8003e92:	2180      	movs	r1, #128	; 0x80
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fbb4 	bl	8004602 <UART_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e039      	b.n	8003f18 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	881a      	ldrh	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eb6:	b292      	uxth	r2, r2
 8003eb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	e008      	b.n	8003ed4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	781a      	ldrb	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	b292      	uxth	r2, r2
 8003ecc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1cb      	bne.n	8003e8a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2140      	movs	r1, #64	; 0x40
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 fb80 	bl	8004602 <UART_WaitOnFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e005      	b.n	8003f18 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e000      	b.n	8003f18 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
  }
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f24:	b08a      	sub	sp, #40	; 0x28
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4ba5      	ldr	r3, [pc, #660]	; (80041e4 <UART_SetConfig+0x2c4>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a9a      	ldr	r2, [pc, #616]	; (80041e8 <UART_SetConfig+0x2c8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a91      	ldr	r2, [pc, #580]	; (80041ec <UART_SetConfig+0x2cc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d126      	bne.n	8003ff8 <UART_SetConfig+0xd8>
 8003faa:	4b91      	ldr	r3, [pc, #580]	; (80041f0 <UART_SetConfig+0x2d0>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d81b      	bhi.n	8003ff0 <UART_SetConfig+0xd0>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <UART_SetConfig+0xa0>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003fd1 	.word	0x08003fd1
 8003fc4:	08003fe1 	.word	0x08003fe1
 8003fc8:	08003fd9 	.word	0x08003fd9
 8003fcc:	08003fe9 	.word	0x08003fe9
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd6:	e0d6      	b.n	8004186 <UART_SetConfig+0x266>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fde:	e0d2      	b.n	8004186 <UART_SetConfig+0x266>
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe6:	e0ce      	b.n	8004186 <UART_SetConfig+0x266>
 8003fe8:	2308      	movs	r3, #8
 8003fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fee:	e0ca      	b.n	8004186 <UART_SetConfig+0x266>
 8003ff0:	2310      	movs	r3, #16
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff6:	e0c6      	b.n	8004186 <UART_SetConfig+0x266>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a7d      	ldr	r2, [pc, #500]	; (80041f4 <UART_SetConfig+0x2d4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d138      	bne.n	8004074 <UART_SetConfig+0x154>
 8004002:	4b7b      	ldr	r3, [pc, #492]	; (80041f0 <UART_SetConfig+0x2d0>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	f003 030c 	and.w	r3, r3, #12
 800400c:	2b0c      	cmp	r3, #12
 800400e:	d82d      	bhi.n	800406c <UART_SetConfig+0x14c>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <UART_SetConfig+0xf8>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	0800404d 	.word	0x0800404d
 800401c:	0800406d 	.word	0x0800406d
 8004020:	0800406d 	.word	0x0800406d
 8004024:	0800406d 	.word	0x0800406d
 8004028:	0800405d 	.word	0x0800405d
 800402c:	0800406d 	.word	0x0800406d
 8004030:	0800406d 	.word	0x0800406d
 8004034:	0800406d 	.word	0x0800406d
 8004038:	08004055 	.word	0x08004055
 800403c:	0800406d 	.word	0x0800406d
 8004040:	0800406d 	.word	0x0800406d
 8004044:	0800406d 	.word	0x0800406d
 8004048:	08004065 	.word	0x08004065
 800404c:	2300      	movs	r3, #0
 800404e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004052:	e098      	b.n	8004186 <UART_SetConfig+0x266>
 8004054:	2302      	movs	r3, #2
 8004056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800405a:	e094      	b.n	8004186 <UART_SetConfig+0x266>
 800405c:	2304      	movs	r3, #4
 800405e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004062:	e090      	b.n	8004186 <UART_SetConfig+0x266>
 8004064:	2308      	movs	r3, #8
 8004066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406a:	e08c      	b.n	8004186 <UART_SetConfig+0x266>
 800406c:	2310      	movs	r3, #16
 800406e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004072:	e088      	b.n	8004186 <UART_SetConfig+0x266>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a5f      	ldr	r2, [pc, #380]	; (80041f8 <UART_SetConfig+0x2d8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d125      	bne.n	80040ca <UART_SetConfig+0x1aa>
 800407e:	4b5c      	ldr	r3, [pc, #368]	; (80041f0 <UART_SetConfig+0x2d0>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004084:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004088:	2b30      	cmp	r3, #48	; 0x30
 800408a:	d016      	beq.n	80040ba <UART_SetConfig+0x19a>
 800408c:	2b30      	cmp	r3, #48	; 0x30
 800408e:	d818      	bhi.n	80040c2 <UART_SetConfig+0x1a2>
 8004090:	2b20      	cmp	r3, #32
 8004092:	d00a      	beq.n	80040aa <UART_SetConfig+0x18a>
 8004094:	2b20      	cmp	r3, #32
 8004096:	d814      	bhi.n	80040c2 <UART_SetConfig+0x1a2>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <UART_SetConfig+0x182>
 800409c:	2b10      	cmp	r3, #16
 800409e:	d008      	beq.n	80040b2 <UART_SetConfig+0x192>
 80040a0:	e00f      	b.n	80040c2 <UART_SetConfig+0x1a2>
 80040a2:	2300      	movs	r3, #0
 80040a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a8:	e06d      	b.n	8004186 <UART_SetConfig+0x266>
 80040aa:	2302      	movs	r3, #2
 80040ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b0:	e069      	b.n	8004186 <UART_SetConfig+0x266>
 80040b2:	2304      	movs	r3, #4
 80040b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b8:	e065      	b.n	8004186 <UART_SetConfig+0x266>
 80040ba:	2308      	movs	r3, #8
 80040bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c0:	e061      	b.n	8004186 <UART_SetConfig+0x266>
 80040c2:	2310      	movs	r3, #16
 80040c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c8:	e05d      	b.n	8004186 <UART_SetConfig+0x266>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a4b      	ldr	r2, [pc, #300]	; (80041fc <UART_SetConfig+0x2dc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d125      	bne.n	8004120 <UART_SetConfig+0x200>
 80040d4:	4b46      	ldr	r3, [pc, #280]	; (80041f0 <UART_SetConfig+0x2d0>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040de:	2bc0      	cmp	r3, #192	; 0xc0
 80040e0:	d016      	beq.n	8004110 <UART_SetConfig+0x1f0>
 80040e2:	2bc0      	cmp	r3, #192	; 0xc0
 80040e4:	d818      	bhi.n	8004118 <UART_SetConfig+0x1f8>
 80040e6:	2b80      	cmp	r3, #128	; 0x80
 80040e8:	d00a      	beq.n	8004100 <UART_SetConfig+0x1e0>
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d814      	bhi.n	8004118 <UART_SetConfig+0x1f8>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <UART_SetConfig+0x1d8>
 80040f2:	2b40      	cmp	r3, #64	; 0x40
 80040f4:	d008      	beq.n	8004108 <UART_SetConfig+0x1e8>
 80040f6:	e00f      	b.n	8004118 <UART_SetConfig+0x1f8>
 80040f8:	2300      	movs	r3, #0
 80040fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fe:	e042      	b.n	8004186 <UART_SetConfig+0x266>
 8004100:	2302      	movs	r3, #2
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004106:	e03e      	b.n	8004186 <UART_SetConfig+0x266>
 8004108:	2304      	movs	r3, #4
 800410a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410e:	e03a      	b.n	8004186 <UART_SetConfig+0x266>
 8004110:	2308      	movs	r3, #8
 8004112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004116:	e036      	b.n	8004186 <UART_SetConfig+0x266>
 8004118:	2310      	movs	r3, #16
 800411a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411e:	e032      	b.n	8004186 <UART_SetConfig+0x266>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a30      	ldr	r2, [pc, #192]	; (80041e8 <UART_SetConfig+0x2c8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d12a      	bne.n	8004180 <UART_SetConfig+0x260>
 800412a:	4b31      	ldr	r3, [pc, #196]	; (80041f0 <UART_SetConfig+0x2d0>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004130:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004134:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004138:	d01a      	beq.n	8004170 <UART_SetConfig+0x250>
 800413a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800413e:	d81b      	bhi.n	8004178 <UART_SetConfig+0x258>
 8004140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004144:	d00c      	beq.n	8004160 <UART_SetConfig+0x240>
 8004146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414a:	d815      	bhi.n	8004178 <UART_SetConfig+0x258>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <UART_SetConfig+0x238>
 8004150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004154:	d008      	beq.n	8004168 <UART_SetConfig+0x248>
 8004156:	e00f      	b.n	8004178 <UART_SetConfig+0x258>
 8004158:	2300      	movs	r3, #0
 800415a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415e:	e012      	b.n	8004186 <UART_SetConfig+0x266>
 8004160:	2302      	movs	r3, #2
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004166:	e00e      	b.n	8004186 <UART_SetConfig+0x266>
 8004168:	2304      	movs	r3, #4
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416e:	e00a      	b.n	8004186 <UART_SetConfig+0x266>
 8004170:	2308      	movs	r3, #8
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004176:	e006      	b.n	8004186 <UART_SetConfig+0x266>
 8004178:	2310      	movs	r3, #16
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800417e:	e002      	b.n	8004186 <UART_SetConfig+0x266>
 8004180:	2310      	movs	r3, #16
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <UART_SetConfig+0x2c8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	f040 808b 	bne.w	80042a8 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004192:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004196:	2b08      	cmp	r3, #8
 8004198:	d834      	bhi.n	8004204 <UART_SetConfig+0x2e4>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <UART_SetConfig+0x280>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	08004205 	.word	0x08004205
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	08004205 	.word	0x08004205
 80041b0:	080041d3 	.word	0x080041d3
 80041b4:	08004205 	.word	0x08004205
 80041b8:	08004205 	.word	0x08004205
 80041bc:	08004205 	.word	0x08004205
 80041c0:	080041db 	.word	0x080041db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c4:	f7fe f8c0 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 80041c8:	61f8      	str	r0, [r7, #28]
        break;
 80041ca:	e021      	b.n	8004210 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <UART_SetConfig+0x2e0>)
 80041ce:	61fb      	str	r3, [r7, #28]
        break;
 80041d0:	e01e      	b.n	8004210 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041d2:	f7fe f821 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80041d6:	61f8      	str	r0, [r7, #28]
        break;
 80041d8:	e01a      	b.n	8004210 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041de:	61fb      	str	r3, [r7, #28]
        break;
 80041e0:	e016      	b.n	8004210 <UART_SetConfig+0x2f0>
 80041e2:	bf00      	nop
 80041e4:	efff69f3 	.word	0xefff69f3
 80041e8:	40008000 	.word	0x40008000
 80041ec:	40013800 	.word	0x40013800
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40004400 	.word	0x40004400
 80041f8:	40004800 	.word	0x40004800
 80041fc:	40004c00 	.word	0x40004c00
 8004200:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800420e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80fa 	beq.w	800440c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	4413      	add	r3, r2
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	429a      	cmp	r2, r3
 8004226:	d305      	bcc.n	8004234 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	429a      	cmp	r2, r3
 8004232:	d903      	bls.n	800423c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800423a:	e0e7      	b.n	800440c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2200      	movs	r2, #0
 8004240:	461c      	mov	r4, r3
 8004242:	4615      	mov	r5, r2
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	022b      	lsls	r3, r5, #8
 800424e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004252:	0222      	lsls	r2, r4, #8
 8004254:	68f9      	ldr	r1, [r7, #12]
 8004256:	6849      	ldr	r1, [r1, #4]
 8004258:	0849      	lsrs	r1, r1, #1
 800425a:	2000      	movs	r0, #0
 800425c:	4688      	mov	r8, r1
 800425e:	4681      	mov	r9, r0
 8004260:	eb12 0a08 	adds.w	sl, r2, r8
 8004264:	eb43 0b09 	adc.w	fp, r3, r9
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004276:	4650      	mov	r0, sl
 8004278:	4659      	mov	r1, fp
 800427a:	f7fc f809 	bl	8000290 <__aeabi_uldivmod>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4613      	mov	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800428c:	d308      	bcc.n	80042a0 <UART_SetConfig+0x380>
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004294:	d204      	bcs.n	80042a0 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	e0b5      	b.n	800440c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042a6:	e0b1      	b.n	800440c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b0:	d15d      	bne.n	800436e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80042b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d827      	bhi.n	800430a <UART_SetConfig+0x3ea>
 80042ba:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <UART_SetConfig+0x3a0>)
 80042bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c0:	080042e5 	.word	0x080042e5
 80042c4:	080042ed 	.word	0x080042ed
 80042c8:	080042f5 	.word	0x080042f5
 80042cc:	0800430b 	.word	0x0800430b
 80042d0:	080042fb 	.word	0x080042fb
 80042d4:	0800430b 	.word	0x0800430b
 80042d8:	0800430b 	.word	0x0800430b
 80042dc:	0800430b 	.word	0x0800430b
 80042e0:	08004303 	.word	0x08004303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e4:	f7fe f830 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 80042e8:	61f8      	str	r0, [r7, #28]
        break;
 80042ea:	e014      	b.n	8004316 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042ec:	f7fe f842 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 80042f0:	61f8      	str	r0, [r7, #28]
        break;
 80042f2:	e010      	b.n	8004316 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f4:	4b4c      	ldr	r3, [pc, #304]	; (8004428 <UART_SetConfig+0x508>)
 80042f6:	61fb      	str	r3, [r7, #28]
        break;
 80042f8:	e00d      	b.n	8004316 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fa:	f7fd ff8d 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80042fe:	61f8      	str	r0, [r7, #28]
        break;
 8004300:	e009      	b.n	8004316 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004306:	61fb      	str	r3, [r7, #28]
        break;
 8004308:	e005      	b.n	8004316 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004314:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d077      	beq.n	800440c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	005a      	lsls	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	441a      	add	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b0f      	cmp	r3, #15
 8004336:	d916      	bls.n	8004366 <UART_SetConfig+0x446>
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433e:	d212      	bcs.n	8004366 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f023 030f 	bic.w	r3, r3, #15
 8004348:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	b29b      	uxth	r3, r3
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	b29a      	uxth	r2, r3
 8004356:	8afb      	ldrh	r3, [r7, #22]
 8004358:	4313      	orrs	r3, r2
 800435a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	8afa      	ldrh	r2, [r7, #22]
 8004362:	60da      	str	r2, [r3, #12]
 8004364:	e052      	b.n	800440c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800436c:	e04e      	b.n	800440c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800436e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004372:	2b08      	cmp	r3, #8
 8004374:	d827      	bhi.n	80043c6 <UART_SetConfig+0x4a6>
 8004376:	a201      	add	r2, pc, #4	; (adr r2, 800437c <UART_SetConfig+0x45c>)
 8004378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437c:	080043a1 	.word	0x080043a1
 8004380:	080043a9 	.word	0x080043a9
 8004384:	080043b1 	.word	0x080043b1
 8004388:	080043c7 	.word	0x080043c7
 800438c:	080043b7 	.word	0x080043b7
 8004390:	080043c7 	.word	0x080043c7
 8004394:	080043c7 	.word	0x080043c7
 8004398:	080043c7 	.word	0x080043c7
 800439c:	080043bf 	.word	0x080043bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a0:	f7fd ffd2 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 80043a4:	61f8      	str	r0, [r7, #28]
        break;
 80043a6:	e014      	b.n	80043d2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043a8:	f7fd ffe4 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 80043ac:	61f8      	str	r0, [r7, #28]
        break;
 80043ae:	e010      	b.n	80043d2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <UART_SetConfig+0x508>)
 80043b2:	61fb      	str	r3, [r7, #28]
        break;
 80043b4:	e00d      	b.n	80043d2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b6:	f7fd ff2f 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80043ba:	61f8      	str	r0, [r7, #28]
        break;
 80043bc:	e009      	b.n	80043d2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c2:	61fb      	str	r3, [r7, #28]
        break;
 80043c4:	e005      	b.n	80043d2 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043d0:	bf00      	nop
    }

    if (pclk != 0U)
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d019      	beq.n	800440c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	085a      	lsrs	r2, r3, #1
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	441a      	add	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2b0f      	cmp	r3, #15
 80043f0:	d909      	bls.n	8004406 <UART_SetConfig+0x4e6>
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f8:	d205      	bcs.n	8004406 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60da      	str	r2, [r3, #12]
 8004404:	e002      	b.n	800440c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004418:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800441c:	4618      	mov	r0, r3
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004426:	bf00      	nop
 8004428:	00f42400 	.word	0x00f42400

0800442c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01a      	beq.n	8004542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452a:	d10a      	bne.n	8004542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
  }
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af02      	add	r7, sp, #8
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004580:	f7fc fde6 	bl	8001150 <HAL_GetTick>
 8004584:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b08      	cmp	r3, #8
 8004592:	d10e      	bne.n	80045b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f82d 	bl	8004602 <UART_WaitOnFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e023      	b.n	80045fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d10e      	bne.n	80045de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f817 	bl	8004602 <UART_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e00d      	b.n	80045fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2220      	movs	r2, #32
 80045e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b09c      	sub	sp, #112	; 0x70
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	4613      	mov	r3, r2
 8004610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004612:	e0a5      	b.n	8004760 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	f000 80a1 	beq.w	8004760 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461e:	f7fc fd97 	bl	8001150 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800462a:	429a      	cmp	r2, r3
 800462c:	d302      	bcc.n	8004634 <UART_WaitOnFlagUntilTimeout+0x32>
 800462e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004630:	2b00      	cmp	r3, #0
 8004632:	d13e      	bne.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004648:	667b      	str	r3, [r7, #100]	; 0x64
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004654:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004658:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e6      	bne.n	8004634 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3308      	adds	r3, #8
 800466c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	663b      	str	r3, [r7, #96]	; 0x60
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3308      	adds	r3, #8
 8004684:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004686:	64ba      	str	r2, [r7, #72]	; 0x48
 8004688:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800468c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e5      	bne.n	8004666 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e067      	b.n	8004782 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d04f      	beq.n	8004760 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ce:	d147      	bne.n	8004760 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
 80046fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e6      	bne.n	80046da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3308      	adds	r3, #8
 8004712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	613b      	str	r3, [r7, #16]
   return(result);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	66bb      	str	r3, [r7, #104]	; 0x68
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3308      	adds	r3, #8
 800472a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800472c:	623a      	str	r2, [r7, #32]
 800472e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	69f9      	ldr	r1, [r7, #28]
 8004732:	6a3a      	ldr	r2, [r7, #32]
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	61bb      	str	r3, [r7, #24]
   return(result);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e5      	bne.n	800470c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e010      	b.n	8004782 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69da      	ldr	r2, [r3, #28]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4013      	ands	r3, r2
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	429a      	cmp	r2, r3
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	79fb      	ldrb	r3, [r7, #7]
 800477a:	429a      	cmp	r2, r3
 800477c:	f43f af4a 	beq.w	8004614 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3770      	adds	r7, #112	; 0x70
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <__errno>:
 800478c:	4b01      	ldr	r3, [pc, #4]	; (8004794 <__errno+0x8>)
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000010 	.word	0x20000010

08004798 <__libc_init_array>:
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	4d0d      	ldr	r5, [pc, #52]	; (80047d0 <__libc_init_array+0x38>)
 800479c:	4c0d      	ldr	r4, [pc, #52]	; (80047d4 <__libc_init_array+0x3c>)
 800479e:	1b64      	subs	r4, r4, r5
 80047a0:	10a4      	asrs	r4, r4, #2
 80047a2:	2600      	movs	r6, #0
 80047a4:	42a6      	cmp	r6, r4
 80047a6:	d109      	bne.n	80047bc <__libc_init_array+0x24>
 80047a8:	4d0b      	ldr	r5, [pc, #44]	; (80047d8 <__libc_init_array+0x40>)
 80047aa:	4c0c      	ldr	r4, [pc, #48]	; (80047dc <__libc_init_array+0x44>)
 80047ac:	f000 fc8e 	bl	80050cc <_init>
 80047b0:	1b64      	subs	r4, r4, r5
 80047b2:	10a4      	asrs	r4, r4, #2
 80047b4:	2600      	movs	r6, #0
 80047b6:	42a6      	cmp	r6, r4
 80047b8:	d105      	bne.n	80047c6 <__libc_init_array+0x2e>
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
 80047bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c0:	4798      	blx	r3
 80047c2:	3601      	adds	r6, #1
 80047c4:	e7ee      	b.n	80047a4 <__libc_init_array+0xc>
 80047c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ca:	4798      	blx	r3
 80047cc:	3601      	adds	r6, #1
 80047ce:	e7f2      	b.n	80047b6 <__libc_init_array+0x1e>
 80047d0:	08005234 	.word	0x08005234
 80047d4:	08005234 	.word	0x08005234
 80047d8:	08005234 	.word	0x08005234
 80047dc:	08005238 	.word	0x08005238

080047e0 <memset>:
 80047e0:	4402      	add	r2, r0
 80047e2:	4603      	mov	r3, r0
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d100      	bne.n	80047ea <memset+0xa>
 80047e8:	4770      	bx	lr
 80047ea:	f803 1b01 	strb.w	r1, [r3], #1
 80047ee:	e7f9      	b.n	80047e4 <memset+0x4>

080047f0 <siprintf>:
 80047f0:	b40e      	push	{r1, r2, r3}
 80047f2:	b500      	push	{lr}
 80047f4:	b09c      	sub	sp, #112	; 0x70
 80047f6:	ab1d      	add	r3, sp, #116	; 0x74
 80047f8:	9002      	str	r0, [sp, #8]
 80047fa:	9006      	str	r0, [sp, #24]
 80047fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004800:	4809      	ldr	r0, [pc, #36]	; (8004828 <siprintf+0x38>)
 8004802:	9107      	str	r1, [sp, #28]
 8004804:	9104      	str	r1, [sp, #16]
 8004806:	4909      	ldr	r1, [pc, #36]	; (800482c <siprintf+0x3c>)
 8004808:	f853 2b04 	ldr.w	r2, [r3], #4
 800480c:	9105      	str	r1, [sp, #20]
 800480e:	6800      	ldr	r0, [r0, #0]
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	a902      	add	r1, sp, #8
 8004814:	f000 f868 	bl	80048e8 <_svfiprintf_r>
 8004818:	9b02      	ldr	r3, [sp, #8]
 800481a:	2200      	movs	r2, #0
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	b01c      	add	sp, #112	; 0x70
 8004820:	f85d eb04 	ldr.w	lr, [sp], #4
 8004824:	b003      	add	sp, #12
 8004826:	4770      	bx	lr
 8004828:	20000010 	.word	0x20000010
 800482c:	ffff0208 	.word	0xffff0208

08004830 <__ssputs_r>:
 8004830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004834:	688e      	ldr	r6, [r1, #8]
 8004836:	429e      	cmp	r6, r3
 8004838:	4682      	mov	sl, r0
 800483a:	460c      	mov	r4, r1
 800483c:	4690      	mov	r8, r2
 800483e:	461f      	mov	r7, r3
 8004840:	d838      	bhi.n	80048b4 <__ssputs_r+0x84>
 8004842:	898a      	ldrh	r2, [r1, #12]
 8004844:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004848:	d032      	beq.n	80048b0 <__ssputs_r+0x80>
 800484a:	6825      	ldr	r5, [r4, #0]
 800484c:	6909      	ldr	r1, [r1, #16]
 800484e:	eba5 0901 	sub.w	r9, r5, r1
 8004852:	6965      	ldr	r5, [r4, #20]
 8004854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004858:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800485c:	3301      	adds	r3, #1
 800485e:	444b      	add	r3, r9
 8004860:	106d      	asrs	r5, r5, #1
 8004862:	429d      	cmp	r5, r3
 8004864:	bf38      	it	cc
 8004866:	461d      	movcc	r5, r3
 8004868:	0553      	lsls	r3, r2, #21
 800486a:	d531      	bpl.n	80048d0 <__ssputs_r+0xa0>
 800486c:	4629      	mov	r1, r5
 800486e:	f000 fb63 	bl	8004f38 <_malloc_r>
 8004872:	4606      	mov	r6, r0
 8004874:	b950      	cbnz	r0, 800488c <__ssputs_r+0x5c>
 8004876:	230c      	movs	r3, #12
 8004878:	f8ca 3000 	str.w	r3, [sl]
 800487c:	89a3      	ldrh	r3, [r4, #12]
 800487e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004882:	81a3      	strh	r3, [r4, #12]
 8004884:	f04f 30ff 	mov.w	r0, #4294967295
 8004888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800488c:	6921      	ldr	r1, [r4, #16]
 800488e:	464a      	mov	r2, r9
 8004890:	f000 fabe 	bl	8004e10 <memcpy>
 8004894:	89a3      	ldrh	r3, [r4, #12]
 8004896:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800489a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489e:	81a3      	strh	r3, [r4, #12]
 80048a0:	6126      	str	r6, [r4, #16]
 80048a2:	6165      	str	r5, [r4, #20]
 80048a4:	444e      	add	r6, r9
 80048a6:	eba5 0509 	sub.w	r5, r5, r9
 80048aa:	6026      	str	r6, [r4, #0]
 80048ac:	60a5      	str	r5, [r4, #8]
 80048ae:	463e      	mov	r6, r7
 80048b0:	42be      	cmp	r6, r7
 80048b2:	d900      	bls.n	80048b6 <__ssputs_r+0x86>
 80048b4:	463e      	mov	r6, r7
 80048b6:	6820      	ldr	r0, [r4, #0]
 80048b8:	4632      	mov	r2, r6
 80048ba:	4641      	mov	r1, r8
 80048bc:	f000 fab6 	bl	8004e2c <memmove>
 80048c0:	68a3      	ldr	r3, [r4, #8]
 80048c2:	1b9b      	subs	r3, r3, r6
 80048c4:	60a3      	str	r3, [r4, #8]
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	4433      	add	r3, r6
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	2000      	movs	r0, #0
 80048ce:	e7db      	b.n	8004888 <__ssputs_r+0x58>
 80048d0:	462a      	mov	r2, r5
 80048d2:	f000 fba5 	bl	8005020 <_realloc_r>
 80048d6:	4606      	mov	r6, r0
 80048d8:	2800      	cmp	r0, #0
 80048da:	d1e1      	bne.n	80048a0 <__ssputs_r+0x70>
 80048dc:	6921      	ldr	r1, [r4, #16]
 80048de:	4650      	mov	r0, sl
 80048e0:	f000 fabe 	bl	8004e60 <_free_r>
 80048e4:	e7c7      	b.n	8004876 <__ssputs_r+0x46>
	...

080048e8 <_svfiprintf_r>:
 80048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	4698      	mov	r8, r3
 80048ee:	898b      	ldrh	r3, [r1, #12]
 80048f0:	061b      	lsls	r3, r3, #24
 80048f2:	b09d      	sub	sp, #116	; 0x74
 80048f4:	4607      	mov	r7, r0
 80048f6:	460d      	mov	r5, r1
 80048f8:	4614      	mov	r4, r2
 80048fa:	d50e      	bpl.n	800491a <_svfiprintf_r+0x32>
 80048fc:	690b      	ldr	r3, [r1, #16]
 80048fe:	b963      	cbnz	r3, 800491a <_svfiprintf_r+0x32>
 8004900:	2140      	movs	r1, #64	; 0x40
 8004902:	f000 fb19 	bl	8004f38 <_malloc_r>
 8004906:	6028      	str	r0, [r5, #0]
 8004908:	6128      	str	r0, [r5, #16]
 800490a:	b920      	cbnz	r0, 8004916 <_svfiprintf_r+0x2e>
 800490c:	230c      	movs	r3, #12
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	f04f 30ff 	mov.w	r0, #4294967295
 8004914:	e0d1      	b.n	8004aba <_svfiprintf_r+0x1d2>
 8004916:	2340      	movs	r3, #64	; 0x40
 8004918:	616b      	str	r3, [r5, #20]
 800491a:	2300      	movs	r3, #0
 800491c:	9309      	str	r3, [sp, #36]	; 0x24
 800491e:	2320      	movs	r3, #32
 8004920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004924:	f8cd 800c 	str.w	r8, [sp, #12]
 8004928:	2330      	movs	r3, #48	; 0x30
 800492a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ad4 <_svfiprintf_r+0x1ec>
 800492e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004932:	f04f 0901 	mov.w	r9, #1
 8004936:	4623      	mov	r3, r4
 8004938:	469a      	mov	sl, r3
 800493a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800493e:	b10a      	cbz	r2, 8004944 <_svfiprintf_r+0x5c>
 8004940:	2a25      	cmp	r2, #37	; 0x25
 8004942:	d1f9      	bne.n	8004938 <_svfiprintf_r+0x50>
 8004944:	ebba 0b04 	subs.w	fp, sl, r4
 8004948:	d00b      	beq.n	8004962 <_svfiprintf_r+0x7a>
 800494a:	465b      	mov	r3, fp
 800494c:	4622      	mov	r2, r4
 800494e:	4629      	mov	r1, r5
 8004950:	4638      	mov	r0, r7
 8004952:	f7ff ff6d 	bl	8004830 <__ssputs_r>
 8004956:	3001      	adds	r0, #1
 8004958:	f000 80aa 	beq.w	8004ab0 <_svfiprintf_r+0x1c8>
 800495c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800495e:	445a      	add	r2, fp
 8004960:	9209      	str	r2, [sp, #36]	; 0x24
 8004962:	f89a 3000 	ldrb.w	r3, [sl]
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 80a2 	beq.w	8004ab0 <_svfiprintf_r+0x1c8>
 800496c:	2300      	movs	r3, #0
 800496e:	f04f 32ff 	mov.w	r2, #4294967295
 8004972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004976:	f10a 0a01 	add.w	sl, sl, #1
 800497a:	9304      	str	r3, [sp, #16]
 800497c:	9307      	str	r3, [sp, #28]
 800497e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004982:	931a      	str	r3, [sp, #104]	; 0x68
 8004984:	4654      	mov	r4, sl
 8004986:	2205      	movs	r2, #5
 8004988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800498c:	4851      	ldr	r0, [pc, #324]	; (8004ad4 <_svfiprintf_r+0x1ec>)
 800498e:	f7fb fc2f 	bl	80001f0 <memchr>
 8004992:	9a04      	ldr	r2, [sp, #16]
 8004994:	b9d8      	cbnz	r0, 80049ce <_svfiprintf_r+0xe6>
 8004996:	06d0      	lsls	r0, r2, #27
 8004998:	bf44      	itt	mi
 800499a:	2320      	movmi	r3, #32
 800499c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049a0:	0711      	lsls	r1, r2, #28
 80049a2:	bf44      	itt	mi
 80049a4:	232b      	movmi	r3, #43	; 0x2b
 80049a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049aa:	f89a 3000 	ldrb.w	r3, [sl]
 80049ae:	2b2a      	cmp	r3, #42	; 0x2a
 80049b0:	d015      	beq.n	80049de <_svfiprintf_r+0xf6>
 80049b2:	9a07      	ldr	r2, [sp, #28]
 80049b4:	4654      	mov	r4, sl
 80049b6:	2000      	movs	r0, #0
 80049b8:	f04f 0c0a 	mov.w	ip, #10
 80049bc:	4621      	mov	r1, r4
 80049be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049c2:	3b30      	subs	r3, #48	; 0x30
 80049c4:	2b09      	cmp	r3, #9
 80049c6:	d94e      	bls.n	8004a66 <_svfiprintf_r+0x17e>
 80049c8:	b1b0      	cbz	r0, 80049f8 <_svfiprintf_r+0x110>
 80049ca:	9207      	str	r2, [sp, #28]
 80049cc:	e014      	b.n	80049f8 <_svfiprintf_r+0x110>
 80049ce:	eba0 0308 	sub.w	r3, r0, r8
 80049d2:	fa09 f303 	lsl.w	r3, r9, r3
 80049d6:	4313      	orrs	r3, r2
 80049d8:	9304      	str	r3, [sp, #16]
 80049da:	46a2      	mov	sl, r4
 80049dc:	e7d2      	b.n	8004984 <_svfiprintf_r+0x9c>
 80049de:	9b03      	ldr	r3, [sp, #12]
 80049e0:	1d19      	adds	r1, r3, #4
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	9103      	str	r1, [sp, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bfbb      	ittet	lt
 80049ea:	425b      	neglt	r3, r3
 80049ec:	f042 0202 	orrlt.w	r2, r2, #2
 80049f0:	9307      	strge	r3, [sp, #28]
 80049f2:	9307      	strlt	r3, [sp, #28]
 80049f4:	bfb8      	it	lt
 80049f6:	9204      	strlt	r2, [sp, #16]
 80049f8:	7823      	ldrb	r3, [r4, #0]
 80049fa:	2b2e      	cmp	r3, #46	; 0x2e
 80049fc:	d10c      	bne.n	8004a18 <_svfiprintf_r+0x130>
 80049fe:	7863      	ldrb	r3, [r4, #1]
 8004a00:	2b2a      	cmp	r3, #42	; 0x2a
 8004a02:	d135      	bne.n	8004a70 <_svfiprintf_r+0x188>
 8004a04:	9b03      	ldr	r3, [sp, #12]
 8004a06:	1d1a      	adds	r2, r3, #4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	9203      	str	r2, [sp, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bfb8      	it	lt
 8004a10:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a14:	3402      	adds	r4, #2
 8004a16:	9305      	str	r3, [sp, #20]
 8004a18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ae4 <_svfiprintf_r+0x1fc>
 8004a1c:	7821      	ldrb	r1, [r4, #0]
 8004a1e:	2203      	movs	r2, #3
 8004a20:	4650      	mov	r0, sl
 8004a22:	f7fb fbe5 	bl	80001f0 <memchr>
 8004a26:	b140      	cbz	r0, 8004a3a <_svfiprintf_r+0x152>
 8004a28:	2340      	movs	r3, #64	; 0x40
 8004a2a:	eba0 000a 	sub.w	r0, r0, sl
 8004a2e:	fa03 f000 	lsl.w	r0, r3, r0
 8004a32:	9b04      	ldr	r3, [sp, #16]
 8004a34:	4303      	orrs	r3, r0
 8004a36:	3401      	adds	r4, #1
 8004a38:	9304      	str	r3, [sp, #16]
 8004a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a3e:	4826      	ldr	r0, [pc, #152]	; (8004ad8 <_svfiprintf_r+0x1f0>)
 8004a40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a44:	2206      	movs	r2, #6
 8004a46:	f7fb fbd3 	bl	80001f0 <memchr>
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d038      	beq.n	8004ac0 <_svfiprintf_r+0x1d8>
 8004a4e:	4b23      	ldr	r3, [pc, #140]	; (8004adc <_svfiprintf_r+0x1f4>)
 8004a50:	bb1b      	cbnz	r3, 8004a9a <_svfiprintf_r+0x1b2>
 8004a52:	9b03      	ldr	r3, [sp, #12]
 8004a54:	3307      	adds	r3, #7
 8004a56:	f023 0307 	bic.w	r3, r3, #7
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	9303      	str	r3, [sp, #12]
 8004a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a60:	4433      	add	r3, r6
 8004a62:	9309      	str	r3, [sp, #36]	; 0x24
 8004a64:	e767      	b.n	8004936 <_svfiprintf_r+0x4e>
 8004a66:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	e7a5      	b.n	80049bc <_svfiprintf_r+0xd4>
 8004a70:	2300      	movs	r3, #0
 8004a72:	3401      	adds	r4, #1
 8004a74:	9305      	str	r3, [sp, #20]
 8004a76:	4619      	mov	r1, r3
 8004a78:	f04f 0c0a 	mov.w	ip, #10
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a82:	3a30      	subs	r2, #48	; 0x30
 8004a84:	2a09      	cmp	r2, #9
 8004a86:	d903      	bls.n	8004a90 <_svfiprintf_r+0x1a8>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0c5      	beq.n	8004a18 <_svfiprintf_r+0x130>
 8004a8c:	9105      	str	r1, [sp, #20]
 8004a8e:	e7c3      	b.n	8004a18 <_svfiprintf_r+0x130>
 8004a90:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a94:	4604      	mov	r4, r0
 8004a96:	2301      	movs	r3, #1
 8004a98:	e7f0      	b.n	8004a7c <_svfiprintf_r+0x194>
 8004a9a:	ab03      	add	r3, sp, #12
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	462a      	mov	r2, r5
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <_svfiprintf_r+0x1f8>)
 8004aa2:	a904      	add	r1, sp, #16
 8004aa4:	4638      	mov	r0, r7
 8004aa6:	f3af 8000 	nop.w
 8004aaa:	1c42      	adds	r2, r0, #1
 8004aac:	4606      	mov	r6, r0
 8004aae:	d1d6      	bne.n	8004a5e <_svfiprintf_r+0x176>
 8004ab0:	89ab      	ldrh	r3, [r5, #12]
 8004ab2:	065b      	lsls	r3, r3, #25
 8004ab4:	f53f af2c 	bmi.w	8004910 <_svfiprintf_r+0x28>
 8004ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aba:	b01d      	add	sp, #116	; 0x74
 8004abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac0:	ab03      	add	r3, sp, #12
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	462a      	mov	r2, r5
 8004ac6:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <_svfiprintf_r+0x1f8>)
 8004ac8:	a904      	add	r1, sp, #16
 8004aca:	4638      	mov	r0, r7
 8004acc:	f000 f87a 	bl	8004bc4 <_printf_i>
 8004ad0:	e7eb      	b.n	8004aaa <_svfiprintf_r+0x1c2>
 8004ad2:	bf00      	nop
 8004ad4:	080051f8 	.word	0x080051f8
 8004ad8:	08005202 	.word	0x08005202
 8004adc:	00000000 	.word	0x00000000
 8004ae0:	08004831 	.word	0x08004831
 8004ae4:	080051fe 	.word	0x080051fe

08004ae8 <_printf_common>:
 8004ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aec:	4616      	mov	r6, r2
 8004aee:	4699      	mov	r9, r3
 8004af0:	688a      	ldr	r2, [r1, #8]
 8004af2:	690b      	ldr	r3, [r1, #16]
 8004af4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004af8:	4293      	cmp	r3, r2
 8004afa:	bfb8      	it	lt
 8004afc:	4613      	movlt	r3, r2
 8004afe:	6033      	str	r3, [r6, #0]
 8004b00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b04:	4607      	mov	r7, r0
 8004b06:	460c      	mov	r4, r1
 8004b08:	b10a      	cbz	r2, 8004b0e <_printf_common+0x26>
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	6033      	str	r3, [r6, #0]
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	0699      	lsls	r1, r3, #26
 8004b12:	bf42      	ittt	mi
 8004b14:	6833      	ldrmi	r3, [r6, #0]
 8004b16:	3302      	addmi	r3, #2
 8004b18:	6033      	strmi	r3, [r6, #0]
 8004b1a:	6825      	ldr	r5, [r4, #0]
 8004b1c:	f015 0506 	ands.w	r5, r5, #6
 8004b20:	d106      	bne.n	8004b30 <_printf_common+0x48>
 8004b22:	f104 0a19 	add.w	sl, r4, #25
 8004b26:	68e3      	ldr	r3, [r4, #12]
 8004b28:	6832      	ldr	r2, [r6, #0]
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	42ab      	cmp	r3, r5
 8004b2e:	dc26      	bgt.n	8004b7e <_printf_common+0x96>
 8004b30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b34:	1e13      	subs	r3, r2, #0
 8004b36:	6822      	ldr	r2, [r4, #0]
 8004b38:	bf18      	it	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	0692      	lsls	r2, r2, #26
 8004b3e:	d42b      	bmi.n	8004b98 <_printf_common+0xb0>
 8004b40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b44:	4649      	mov	r1, r9
 8004b46:	4638      	mov	r0, r7
 8004b48:	47c0      	blx	r8
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	d01e      	beq.n	8004b8c <_printf_common+0xa4>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	68e5      	ldr	r5, [r4, #12]
 8004b52:	6832      	ldr	r2, [r6, #0]
 8004b54:	f003 0306 	and.w	r3, r3, #6
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	bf08      	it	eq
 8004b5c:	1aad      	subeq	r5, r5, r2
 8004b5e:	68a3      	ldr	r3, [r4, #8]
 8004b60:	6922      	ldr	r2, [r4, #16]
 8004b62:	bf0c      	ite	eq
 8004b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b68:	2500      	movne	r5, #0
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	bfc4      	itt	gt
 8004b6e:	1a9b      	subgt	r3, r3, r2
 8004b70:	18ed      	addgt	r5, r5, r3
 8004b72:	2600      	movs	r6, #0
 8004b74:	341a      	adds	r4, #26
 8004b76:	42b5      	cmp	r5, r6
 8004b78:	d11a      	bne.n	8004bb0 <_printf_common+0xc8>
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	e008      	b.n	8004b90 <_printf_common+0xa8>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4652      	mov	r2, sl
 8004b82:	4649      	mov	r1, r9
 8004b84:	4638      	mov	r0, r7
 8004b86:	47c0      	blx	r8
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d103      	bne.n	8004b94 <_printf_common+0xac>
 8004b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b94:	3501      	adds	r5, #1
 8004b96:	e7c6      	b.n	8004b26 <_printf_common+0x3e>
 8004b98:	18e1      	adds	r1, r4, r3
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	2030      	movs	r0, #48	; 0x30
 8004b9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ba2:	4422      	add	r2, r4
 8004ba4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ba8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bac:	3302      	adds	r3, #2
 8004bae:	e7c7      	b.n	8004b40 <_printf_common+0x58>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	47c0      	blx	r8
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d0e6      	beq.n	8004b8c <_printf_common+0xa4>
 8004bbe:	3601      	adds	r6, #1
 8004bc0:	e7d9      	b.n	8004b76 <_printf_common+0x8e>
	...

08004bc4 <_printf_i>:
 8004bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc8:	7e0f      	ldrb	r7, [r1, #24]
 8004bca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bcc:	2f78      	cmp	r7, #120	; 0x78
 8004bce:	4691      	mov	r9, r2
 8004bd0:	4680      	mov	r8, r0
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	469a      	mov	sl, r3
 8004bd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bda:	d807      	bhi.n	8004bec <_printf_i+0x28>
 8004bdc:	2f62      	cmp	r7, #98	; 0x62
 8004bde:	d80a      	bhi.n	8004bf6 <_printf_i+0x32>
 8004be0:	2f00      	cmp	r7, #0
 8004be2:	f000 80d8 	beq.w	8004d96 <_printf_i+0x1d2>
 8004be6:	2f58      	cmp	r7, #88	; 0x58
 8004be8:	f000 80a3 	beq.w	8004d32 <_printf_i+0x16e>
 8004bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bf4:	e03a      	b.n	8004c6c <_printf_i+0xa8>
 8004bf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bfa:	2b15      	cmp	r3, #21
 8004bfc:	d8f6      	bhi.n	8004bec <_printf_i+0x28>
 8004bfe:	a101      	add	r1, pc, #4	; (adr r1, 8004c04 <_printf_i+0x40>)
 8004c00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c04:	08004c5d 	.word	0x08004c5d
 8004c08:	08004c71 	.word	0x08004c71
 8004c0c:	08004bed 	.word	0x08004bed
 8004c10:	08004bed 	.word	0x08004bed
 8004c14:	08004bed 	.word	0x08004bed
 8004c18:	08004bed 	.word	0x08004bed
 8004c1c:	08004c71 	.word	0x08004c71
 8004c20:	08004bed 	.word	0x08004bed
 8004c24:	08004bed 	.word	0x08004bed
 8004c28:	08004bed 	.word	0x08004bed
 8004c2c:	08004bed 	.word	0x08004bed
 8004c30:	08004d7d 	.word	0x08004d7d
 8004c34:	08004ca1 	.word	0x08004ca1
 8004c38:	08004d5f 	.word	0x08004d5f
 8004c3c:	08004bed 	.word	0x08004bed
 8004c40:	08004bed 	.word	0x08004bed
 8004c44:	08004d9f 	.word	0x08004d9f
 8004c48:	08004bed 	.word	0x08004bed
 8004c4c:	08004ca1 	.word	0x08004ca1
 8004c50:	08004bed 	.word	0x08004bed
 8004c54:	08004bed 	.word	0x08004bed
 8004c58:	08004d67 	.word	0x08004d67
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	1d1a      	adds	r2, r3, #4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	602a      	str	r2, [r5, #0]
 8004c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0a3      	b.n	8004db8 <_printf_i+0x1f4>
 8004c70:	6820      	ldr	r0, [r4, #0]
 8004c72:	6829      	ldr	r1, [r5, #0]
 8004c74:	0606      	lsls	r6, r0, #24
 8004c76:	f101 0304 	add.w	r3, r1, #4
 8004c7a:	d50a      	bpl.n	8004c92 <_printf_i+0xce>
 8004c7c:	680e      	ldr	r6, [r1, #0]
 8004c7e:	602b      	str	r3, [r5, #0]
 8004c80:	2e00      	cmp	r6, #0
 8004c82:	da03      	bge.n	8004c8c <_printf_i+0xc8>
 8004c84:	232d      	movs	r3, #45	; 0x2d
 8004c86:	4276      	negs	r6, r6
 8004c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c8c:	485e      	ldr	r0, [pc, #376]	; (8004e08 <_printf_i+0x244>)
 8004c8e:	230a      	movs	r3, #10
 8004c90:	e019      	b.n	8004cc6 <_printf_i+0x102>
 8004c92:	680e      	ldr	r6, [r1, #0]
 8004c94:	602b      	str	r3, [r5, #0]
 8004c96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c9a:	bf18      	it	ne
 8004c9c:	b236      	sxthne	r6, r6
 8004c9e:	e7ef      	b.n	8004c80 <_printf_i+0xbc>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	6820      	ldr	r0, [r4, #0]
 8004ca4:	1d19      	adds	r1, r3, #4
 8004ca6:	6029      	str	r1, [r5, #0]
 8004ca8:	0601      	lsls	r1, r0, #24
 8004caa:	d501      	bpl.n	8004cb0 <_printf_i+0xec>
 8004cac:	681e      	ldr	r6, [r3, #0]
 8004cae:	e002      	b.n	8004cb6 <_printf_i+0xf2>
 8004cb0:	0646      	lsls	r6, r0, #25
 8004cb2:	d5fb      	bpl.n	8004cac <_printf_i+0xe8>
 8004cb4:	881e      	ldrh	r6, [r3, #0]
 8004cb6:	4854      	ldr	r0, [pc, #336]	; (8004e08 <_printf_i+0x244>)
 8004cb8:	2f6f      	cmp	r7, #111	; 0x6f
 8004cba:	bf0c      	ite	eq
 8004cbc:	2308      	moveq	r3, #8
 8004cbe:	230a      	movne	r3, #10
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cc6:	6865      	ldr	r5, [r4, #4]
 8004cc8:	60a5      	str	r5, [r4, #8]
 8004cca:	2d00      	cmp	r5, #0
 8004ccc:	bfa2      	ittt	ge
 8004cce:	6821      	ldrge	r1, [r4, #0]
 8004cd0:	f021 0104 	bicge.w	r1, r1, #4
 8004cd4:	6021      	strge	r1, [r4, #0]
 8004cd6:	b90e      	cbnz	r6, 8004cdc <_printf_i+0x118>
 8004cd8:	2d00      	cmp	r5, #0
 8004cda:	d04d      	beq.n	8004d78 <_printf_i+0x1b4>
 8004cdc:	4615      	mov	r5, r2
 8004cde:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ce2:	fb03 6711 	mls	r7, r3, r1, r6
 8004ce6:	5dc7      	ldrb	r7, [r0, r7]
 8004ce8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cec:	4637      	mov	r7, r6
 8004cee:	42bb      	cmp	r3, r7
 8004cf0:	460e      	mov	r6, r1
 8004cf2:	d9f4      	bls.n	8004cde <_printf_i+0x11a>
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d10b      	bne.n	8004d10 <_printf_i+0x14c>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	07de      	lsls	r6, r3, #31
 8004cfc:	d508      	bpl.n	8004d10 <_printf_i+0x14c>
 8004cfe:	6923      	ldr	r3, [r4, #16]
 8004d00:	6861      	ldr	r1, [r4, #4]
 8004d02:	4299      	cmp	r1, r3
 8004d04:	bfde      	ittt	le
 8004d06:	2330      	movle	r3, #48	; 0x30
 8004d08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d10:	1b52      	subs	r2, r2, r5
 8004d12:	6122      	str	r2, [r4, #16]
 8004d14:	f8cd a000 	str.w	sl, [sp]
 8004d18:	464b      	mov	r3, r9
 8004d1a:	aa03      	add	r2, sp, #12
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	4640      	mov	r0, r8
 8004d20:	f7ff fee2 	bl	8004ae8 <_printf_common>
 8004d24:	3001      	adds	r0, #1
 8004d26:	d14c      	bne.n	8004dc2 <_printf_i+0x1fe>
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2c:	b004      	add	sp, #16
 8004d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d32:	4835      	ldr	r0, [pc, #212]	; (8004e08 <_printf_i+0x244>)
 8004d34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d38:	6829      	ldr	r1, [r5, #0]
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d40:	6029      	str	r1, [r5, #0]
 8004d42:	061d      	lsls	r5, r3, #24
 8004d44:	d514      	bpl.n	8004d70 <_printf_i+0x1ac>
 8004d46:	07df      	lsls	r7, r3, #31
 8004d48:	bf44      	itt	mi
 8004d4a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d4e:	6023      	strmi	r3, [r4, #0]
 8004d50:	b91e      	cbnz	r6, 8004d5a <_printf_i+0x196>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	f023 0320 	bic.w	r3, r3, #32
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	2310      	movs	r3, #16
 8004d5c:	e7b0      	b.n	8004cc0 <_printf_i+0xfc>
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	f043 0320 	orr.w	r3, r3, #32
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	2378      	movs	r3, #120	; 0x78
 8004d68:	4828      	ldr	r0, [pc, #160]	; (8004e0c <_printf_i+0x248>)
 8004d6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d6e:	e7e3      	b.n	8004d38 <_printf_i+0x174>
 8004d70:	0659      	lsls	r1, r3, #25
 8004d72:	bf48      	it	mi
 8004d74:	b2b6      	uxthmi	r6, r6
 8004d76:	e7e6      	b.n	8004d46 <_printf_i+0x182>
 8004d78:	4615      	mov	r5, r2
 8004d7a:	e7bb      	b.n	8004cf4 <_printf_i+0x130>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	6826      	ldr	r6, [r4, #0]
 8004d80:	6961      	ldr	r1, [r4, #20]
 8004d82:	1d18      	adds	r0, r3, #4
 8004d84:	6028      	str	r0, [r5, #0]
 8004d86:	0635      	lsls	r5, r6, #24
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	d501      	bpl.n	8004d90 <_printf_i+0x1cc>
 8004d8c:	6019      	str	r1, [r3, #0]
 8004d8e:	e002      	b.n	8004d96 <_printf_i+0x1d2>
 8004d90:	0670      	lsls	r0, r6, #25
 8004d92:	d5fb      	bpl.n	8004d8c <_printf_i+0x1c8>
 8004d94:	8019      	strh	r1, [r3, #0]
 8004d96:	2300      	movs	r3, #0
 8004d98:	6123      	str	r3, [r4, #16]
 8004d9a:	4615      	mov	r5, r2
 8004d9c:	e7ba      	b.n	8004d14 <_printf_i+0x150>
 8004d9e:	682b      	ldr	r3, [r5, #0]
 8004da0:	1d1a      	adds	r2, r3, #4
 8004da2:	602a      	str	r2, [r5, #0]
 8004da4:	681d      	ldr	r5, [r3, #0]
 8004da6:	6862      	ldr	r2, [r4, #4]
 8004da8:	2100      	movs	r1, #0
 8004daa:	4628      	mov	r0, r5
 8004dac:	f7fb fa20 	bl	80001f0 <memchr>
 8004db0:	b108      	cbz	r0, 8004db6 <_printf_i+0x1f2>
 8004db2:	1b40      	subs	r0, r0, r5
 8004db4:	6060      	str	r0, [r4, #4]
 8004db6:	6863      	ldr	r3, [r4, #4]
 8004db8:	6123      	str	r3, [r4, #16]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dc0:	e7a8      	b.n	8004d14 <_printf_i+0x150>
 8004dc2:	6923      	ldr	r3, [r4, #16]
 8004dc4:	462a      	mov	r2, r5
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	4640      	mov	r0, r8
 8004dca:	47d0      	blx	sl
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d0ab      	beq.n	8004d28 <_printf_i+0x164>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	079b      	lsls	r3, r3, #30
 8004dd4:	d413      	bmi.n	8004dfe <_printf_i+0x23a>
 8004dd6:	68e0      	ldr	r0, [r4, #12]
 8004dd8:	9b03      	ldr	r3, [sp, #12]
 8004dda:	4298      	cmp	r0, r3
 8004ddc:	bfb8      	it	lt
 8004dde:	4618      	movlt	r0, r3
 8004de0:	e7a4      	b.n	8004d2c <_printf_i+0x168>
 8004de2:	2301      	movs	r3, #1
 8004de4:	4632      	mov	r2, r6
 8004de6:	4649      	mov	r1, r9
 8004de8:	4640      	mov	r0, r8
 8004dea:	47d0      	blx	sl
 8004dec:	3001      	adds	r0, #1
 8004dee:	d09b      	beq.n	8004d28 <_printf_i+0x164>
 8004df0:	3501      	adds	r5, #1
 8004df2:	68e3      	ldr	r3, [r4, #12]
 8004df4:	9903      	ldr	r1, [sp, #12]
 8004df6:	1a5b      	subs	r3, r3, r1
 8004df8:	42ab      	cmp	r3, r5
 8004dfa:	dcf2      	bgt.n	8004de2 <_printf_i+0x21e>
 8004dfc:	e7eb      	b.n	8004dd6 <_printf_i+0x212>
 8004dfe:	2500      	movs	r5, #0
 8004e00:	f104 0619 	add.w	r6, r4, #25
 8004e04:	e7f5      	b.n	8004df2 <_printf_i+0x22e>
 8004e06:	bf00      	nop
 8004e08:	08005209 	.word	0x08005209
 8004e0c:	0800521a 	.word	0x0800521a

08004e10 <memcpy>:
 8004e10:	440a      	add	r2, r1
 8004e12:	4291      	cmp	r1, r2
 8004e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e18:	d100      	bne.n	8004e1c <memcpy+0xc>
 8004e1a:	4770      	bx	lr
 8004e1c:	b510      	push	{r4, lr}
 8004e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e26:	4291      	cmp	r1, r2
 8004e28:	d1f9      	bne.n	8004e1e <memcpy+0xe>
 8004e2a:	bd10      	pop	{r4, pc}

08004e2c <memmove>:
 8004e2c:	4288      	cmp	r0, r1
 8004e2e:	b510      	push	{r4, lr}
 8004e30:	eb01 0402 	add.w	r4, r1, r2
 8004e34:	d902      	bls.n	8004e3c <memmove+0x10>
 8004e36:	4284      	cmp	r4, r0
 8004e38:	4623      	mov	r3, r4
 8004e3a:	d807      	bhi.n	8004e4c <memmove+0x20>
 8004e3c:	1e43      	subs	r3, r0, #1
 8004e3e:	42a1      	cmp	r1, r4
 8004e40:	d008      	beq.n	8004e54 <memmove+0x28>
 8004e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e4a:	e7f8      	b.n	8004e3e <memmove+0x12>
 8004e4c:	4402      	add	r2, r0
 8004e4e:	4601      	mov	r1, r0
 8004e50:	428a      	cmp	r2, r1
 8004e52:	d100      	bne.n	8004e56 <memmove+0x2a>
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e5e:	e7f7      	b.n	8004e50 <memmove+0x24>

08004e60 <_free_r>:
 8004e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e62:	2900      	cmp	r1, #0
 8004e64:	d044      	beq.n	8004ef0 <_free_r+0x90>
 8004e66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e6a:	9001      	str	r0, [sp, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e72:	bfb8      	it	lt
 8004e74:	18e4      	addlt	r4, r4, r3
 8004e76:	f000 f913 	bl	80050a0 <__malloc_lock>
 8004e7a:	4a1e      	ldr	r2, [pc, #120]	; (8004ef4 <_free_r+0x94>)
 8004e7c:	9801      	ldr	r0, [sp, #4]
 8004e7e:	6813      	ldr	r3, [r2, #0]
 8004e80:	b933      	cbnz	r3, 8004e90 <_free_r+0x30>
 8004e82:	6063      	str	r3, [r4, #4]
 8004e84:	6014      	str	r4, [r2, #0]
 8004e86:	b003      	add	sp, #12
 8004e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e8c:	f000 b90e 	b.w	80050ac <__malloc_unlock>
 8004e90:	42a3      	cmp	r3, r4
 8004e92:	d908      	bls.n	8004ea6 <_free_r+0x46>
 8004e94:	6825      	ldr	r5, [r4, #0]
 8004e96:	1961      	adds	r1, r4, r5
 8004e98:	428b      	cmp	r3, r1
 8004e9a:	bf01      	itttt	eq
 8004e9c:	6819      	ldreq	r1, [r3, #0]
 8004e9e:	685b      	ldreq	r3, [r3, #4]
 8004ea0:	1949      	addeq	r1, r1, r5
 8004ea2:	6021      	streq	r1, [r4, #0]
 8004ea4:	e7ed      	b.n	8004e82 <_free_r+0x22>
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	b10b      	cbz	r3, 8004eb0 <_free_r+0x50>
 8004eac:	42a3      	cmp	r3, r4
 8004eae:	d9fa      	bls.n	8004ea6 <_free_r+0x46>
 8004eb0:	6811      	ldr	r1, [r2, #0]
 8004eb2:	1855      	adds	r5, r2, r1
 8004eb4:	42a5      	cmp	r5, r4
 8004eb6:	d10b      	bne.n	8004ed0 <_free_r+0x70>
 8004eb8:	6824      	ldr	r4, [r4, #0]
 8004eba:	4421      	add	r1, r4
 8004ebc:	1854      	adds	r4, r2, r1
 8004ebe:	42a3      	cmp	r3, r4
 8004ec0:	6011      	str	r1, [r2, #0]
 8004ec2:	d1e0      	bne.n	8004e86 <_free_r+0x26>
 8004ec4:	681c      	ldr	r4, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	6053      	str	r3, [r2, #4]
 8004eca:	4421      	add	r1, r4
 8004ecc:	6011      	str	r1, [r2, #0]
 8004ece:	e7da      	b.n	8004e86 <_free_r+0x26>
 8004ed0:	d902      	bls.n	8004ed8 <_free_r+0x78>
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	6003      	str	r3, [r0, #0]
 8004ed6:	e7d6      	b.n	8004e86 <_free_r+0x26>
 8004ed8:	6825      	ldr	r5, [r4, #0]
 8004eda:	1961      	adds	r1, r4, r5
 8004edc:	428b      	cmp	r3, r1
 8004ede:	bf04      	itt	eq
 8004ee0:	6819      	ldreq	r1, [r3, #0]
 8004ee2:	685b      	ldreq	r3, [r3, #4]
 8004ee4:	6063      	str	r3, [r4, #4]
 8004ee6:	bf04      	itt	eq
 8004ee8:	1949      	addeq	r1, r1, r5
 8004eea:	6021      	streq	r1, [r4, #0]
 8004eec:	6054      	str	r4, [r2, #4]
 8004eee:	e7ca      	b.n	8004e86 <_free_r+0x26>
 8004ef0:	b003      	add	sp, #12
 8004ef2:	bd30      	pop	{r4, r5, pc}
 8004ef4:	20000324 	.word	0x20000324

08004ef8 <sbrk_aligned>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	4e0e      	ldr	r6, [pc, #56]	; (8004f34 <sbrk_aligned+0x3c>)
 8004efc:	460c      	mov	r4, r1
 8004efe:	6831      	ldr	r1, [r6, #0]
 8004f00:	4605      	mov	r5, r0
 8004f02:	b911      	cbnz	r1, 8004f0a <sbrk_aligned+0x12>
 8004f04:	f000 f8bc 	bl	8005080 <_sbrk_r>
 8004f08:	6030      	str	r0, [r6, #0]
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f000 f8b7 	bl	8005080 <_sbrk_r>
 8004f12:	1c43      	adds	r3, r0, #1
 8004f14:	d00a      	beq.n	8004f2c <sbrk_aligned+0x34>
 8004f16:	1cc4      	adds	r4, r0, #3
 8004f18:	f024 0403 	bic.w	r4, r4, #3
 8004f1c:	42a0      	cmp	r0, r4
 8004f1e:	d007      	beq.n	8004f30 <sbrk_aligned+0x38>
 8004f20:	1a21      	subs	r1, r4, r0
 8004f22:	4628      	mov	r0, r5
 8004f24:	f000 f8ac 	bl	8005080 <_sbrk_r>
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d101      	bne.n	8004f30 <sbrk_aligned+0x38>
 8004f2c:	f04f 34ff 	mov.w	r4, #4294967295
 8004f30:	4620      	mov	r0, r4
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	20000328 	.word	0x20000328

08004f38 <_malloc_r>:
 8004f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3c:	1ccd      	adds	r5, r1, #3
 8004f3e:	f025 0503 	bic.w	r5, r5, #3
 8004f42:	3508      	adds	r5, #8
 8004f44:	2d0c      	cmp	r5, #12
 8004f46:	bf38      	it	cc
 8004f48:	250c      	movcc	r5, #12
 8004f4a:	2d00      	cmp	r5, #0
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	db01      	blt.n	8004f54 <_malloc_r+0x1c>
 8004f50:	42a9      	cmp	r1, r5
 8004f52:	d905      	bls.n	8004f60 <_malloc_r+0x28>
 8004f54:	230c      	movs	r3, #12
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	2600      	movs	r6, #0
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f60:	4e2e      	ldr	r6, [pc, #184]	; (800501c <_malloc_r+0xe4>)
 8004f62:	f000 f89d 	bl	80050a0 <__malloc_lock>
 8004f66:	6833      	ldr	r3, [r6, #0]
 8004f68:	461c      	mov	r4, r3
 8004f6a:	bb34      	cbnz	r4, 8004fba <_malloc_r+0x82>
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	4638      	mov	r0, r7
 8004f70:	f7ff ffc2 	bl	8004ef8 <sbrk_aligned>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	4604      	mov	r4, r0
 8004f78:	d14d      	bne.n	8005016 <_malloc_r+0xde>
 8004f7a:	6834      	ldr	r4, [r6, #0]
 8004f7c:	4626      	mov	r6, r4
 8004f7e:	2e00      	cmp	r6, #0
 8004f80:	d140      	bne.n	8005004 <_malloc_r+0xcc>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	4631      	mov	r1, r6
 8004f86:	4638      	mov	r0, r7
 8004f88:	eb04 0803 	add.w	r8, r4, r3
 8004f8c:	f000 f878 	bl	8005080 <_sbrk_r>
 8004f90:	4580      	cmp	r8, r0
 8004f92:	d13a      	bne.n	800500a <_malloc_r+0xd2>
 8004f94:	6821      	ldr	r1, [r4, #0]
 8004f96:	3503      	adds	r5, #3
 8004f98:	1a6d      	subs	r5, r5, r1
 8004f9a:	f025 0503 	bic.w	r5, r5, #3
 8004f9e:	3508      	adds	r5, #8
 8004fa0:	2d0c      	cmp	r5, #12
 8004fa2:	bf38      	it	cc
 8004fa4:	250c      	movcc	r5, #12
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	4638      	mov	r0, r7
 8004faa:	f7ff ffa5 	bl	8004ef8 <sbrk_aligned>
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d02b      	beq.n	800500a <_malloc_r+0xd2>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	442b      	add	r3, r5
 8004fb6:	6023      	str	r3, [r4, #0]
 8004fb8:	e00e      	b.n	8004fd8 <_malloc_r+0xa0>
 8004fba:	6822      	ldr	r2, [r4, #0]
 8004fbc:	1b52      	subs	r2, r2, r5
 8004fbe:	d41e      	bmi.n	8004ffe <_malloc_r+0xc6>
 8004fc0:	2a0b      	cmp	r2, #11
 8004fc2:	d916      	bls.n	8004ff2 <_malloc_r+0xba>
 8004fc4:	1961      	adds	r1, r4, r5
 8004fc6:	42a3      	cmp	r3, r4
 8004fc8:	6025      	str	r5, [r4, #0]
 8004fca:	bf18      	it	ne
 8004fcc:	6059      	strne	r1, [r3, #4]
 8004fce:	6863      	ldr	r3, [r4, #4]
 8004fd0:	bf08      	it	eq
 8004fd2:	6031      	streq	r1, [r6, #0]
 8004fd4:	5162      	str	r2, [r4, r5]
 8004fd6:	604b      	str	r3, [r1, #4]
 8004fd8:	4638      	mov	r0, r7
 8004fda:	f104 060b 	add.w	r6, r4, #11
 8004fde:	f000 f865 	bl	80050ac <__malloc_unlock>
 8004fe2:	f026 0607 	bic.w	r6, r6, #7
 8004fe6:	1d23      	adds	r3, r4, #4
 8004fe8:	1af2      	subs	r2, r6, r3
 8004fea:	d0b6      	beq.n	8004f5a <_malloc_r+0x22>
 8004fec:	1b9b      	subs	r3, r3, r6
 8004fee:	50a3      	str	r3, [r4, r2]
 8004ff0:	e7b3      	b.n	8004f5a <_malloc_r+0x22>
 8004ff2:	6862      	ldr	r2, [r4, #4]
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	bf0c      	ite	eq
 8004ff8:	6032      	streq	r2, [r6, #0]
 8004ffa:	605a      	strne	r2, [r3, #4]
 8004ffc:	e7ec      	b.n	8004fd8 <_malloc_r+0xa0>
 8004ffe:	4623      	mov	r3, r4
 8005000:	6864      	ldr	r4, [r4, #4]
 8005002:	e7b2      	b.n	8004f6a <_malloc_r+0x32>
 8005004:	4634      	mov	r4, r6
 8005006:	6876      	ldr	r6, [r6, #4]
 8005008:	e7b9      	b.n	8004f7e <_malloc_r+0x46>
 800500a:	230c      	movs	r3, #12
 800500c:	603b      	str	r3, [r7, #0]
 800500e:	4638      	mov	r0, r7
 8005010:	f000 f84c 	bl	80050ac <__malloc_unlock>
 8005014:	e7a1      	b.n	8004f5a <_malloc_r+0x22>
 8005016:	6025      	str	r5, [r4, #0]
 8005018:	e7de      	b.n	8004fd8 <_malloc_r+0xa0>
 800501a:	bf00      	nop
 800501c:	20000324 	.word	0x20000324

08005020 <_realloc_r>:
 8005020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005024:	4680      	mov	r8, r0
 8005026:	4614      	mov	r4, r2
 8005028:	460e      	mov	r6, r1
 800502a:	b921      	cbnz	r1, 8005036 <_realloc_r+0x16>
 800502c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005030:	4611      	mov	r1, r2
 8005032:	f7ff bf81 	b.w	8004f38 <_malloc_r>
 8005036:	b92a      	cbnz	r2, 8005044 <_realloc_r+0x24>
 8005038:	f7ff ff12 	bl	8004e60 <_free_r>
 800503c:	4625      	mov	r5, r4
 800503e:	4628      	mov	r0, r5
 8005040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005044:	f000 f838 	bl	80050b8 <_malloc_usable_size_r>
 8005048:	4284      	cmp	r4, r0
 800504a:	4607      	mov	r7, r0
 800504c:	d802      	bhi.n	8005054 <_realloc_r+0x34>
 800504e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005052:	d812      	bhi.n	800507a <_realloc_r+0x5a>
 8005054:	4621      	mov	r1, r4
 8005056:	4640      	mov	r0, r8
 8005058:	f7ff ff6e 	bl	8004f38 <_malloc_r>
 800505c:	4605      	mov	r5, r0
 800505e:	2800      	cmp	r0, #0
 8005060:	d0ed      	beq.n	800503e <_realloc_r+0x1e>
 8005062:	42bc      	cmp	r4, r7
 8005064:	4622      	mov	r2, r4
 8005066:	4631      	mov	r1, r6
 8005068:	bf28      	it	cs
 800506a:	463a      	movcs	r2, r7
 800506c:	f7ff fed0 	bl	8004e10 <memcpy>
 8005070:	4631      	mov	r1, r6
 8005072:	4640      	mov	r0, r8
 8005074:	f7ff fef4 	bl	8004e60 <_free_r>
 8005078:	e7e1      	b.n	800503e <_realloc_r+0x1e>
 800507a:	4635      	mov	r5, r6
 800507c:	e7df      	b.n	800503e <_realloc_r+0x1e>
	...

08005080 <_sbrk_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4d06      	ldr	r5, [pc, #24]	; (800509c <_sbrk_r+0x1c>)
 8005084:	2300      	movs	r3, #0
 8005086:	4604      	mov	r4, r0
 8005088:	4608      	mov	r0, r1
 800508a:	602b      	str	r3, [r5, #0]
 800508c:	f7fb ff7e 	bl	8000f8c <_sbrk>
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	d102      	bne.n	800509a <_sbrk_r+0x1a>
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	b103      	cbz	r3, 800509a <_sbrk_r+0x1a>
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	2000032c 	.word	0x2000032c

080050a0 <__malloc_lock>:
 80050a0:	4801      	ldr	r0, [pc, #4]	; (80050a8 <__malloc_lock+0x8>)
 80050a2:	f000 b811 	b.w	80050c8 <__retarget_lock_acquire_recursive>
 80050a6:	bf00      	nop
 80050a8:	20000330 	.word	0x20000330

080050ac <__malloc_unlock>:
 80050ac:	4801      	ldr	r0, [pc, #4]	; (80050b4 <__malloc_unlock+0x8>)
 80050ae:	f000 b80c 	b.w	80050ca <__retarget_lock_release_recursive>
 80050b2:	bf00      	nop
 80050b4:	20000330 	.word	0x20000330

080050b8 <_malloc_usable_size_r>:
 80050b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050bc:	1f18      	subs	r0, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bfbc      	itt	lt
 80050c2:	580b      	ldrlt	r3, [r1, r0]
 80050c4:	18c0      	addlt	r0, r0, r3
 80050c6:	4770      	bx	lr

080050c8 <__retarget_lock_acquire_recursive>:
 80050c8:	4770      	bx	lr

080050ca <__retarget_lock_release_recursive>:
 80050ca:	4770      	bx	lr

080050cc <_init>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr

080050d8 <_fini>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	bf00      	nop
 80050dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050de:	bc08      	pop	{r3}
 80050e0:	469e      	mov	lr, r3
 80050e2:	4770      	bx	lr
