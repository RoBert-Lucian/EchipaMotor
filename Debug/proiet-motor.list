
proiet-motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003f3c  08003f3c  00013f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f84  08003f84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f8c  08003f8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f8c  08003f8c  00013f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f90  08003f90  00013f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08003fa0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003fa0  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb44  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e01  00000000  00000000  0002fb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00031988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00032808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000cf00  00000000  00000000  000335d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000490d  00000000  00000000  000404d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00044ddd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003d20  00000000  00000000  00044e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003f24 	.word	0x08003f24

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003f24 	.word	0x08003f24

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fc41 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f831 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f95f 	bl	80007a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f92d 	bl	8000748 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80004ee:	f000 f8d1 	bl	8000694 <MX_TIM3_Init>
  MX_TIM2_Init();
 80004f2:	f000 f87b 	bl	80005ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004f6:	2100      	movs	r1, #0
 80004f8:	4810      	ldr	r0, [pc, #64]	; (800053c <main+0x64>)
 80004fa:	f002 f9b5 	bl	8002868 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80004fe:	213c      	movs	r1, #60	; 0x3c
 8000500:	480f      	ldr	r0, [pc, #60]	; (8000540 <main+0x68>)
 8000502:	f002 fb3d 	bl	8002b80 <HAL_TIM_Encoder_Start>
  mot_init();
 8000506:	f000 f9f5 	bl	80008f4 <mot_init>
  mot_set(32000, MOT_FWD);
 800050a:	2101      	movs	r1, #1
 800050c:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8000510:	f000 fa72 	bl	80009f8 <mot_set>
  uint32_t ctr = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8000518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051c:	4809      	ldr	r0, [pc, #36]	; (8000544 <main+0x6c>)
 800051e:	f000 ff21 	bl	8001364 <HAL_GPIO_ReadPin>
 8000522:	4603      	mov	r3, r0
 8000524:	2b01      	cmp	r3, #1
 8000526:	d105      	bne.n	8000534 <main+0x5c>
		  mot_toggle_dir();
 8000528:	f000 fa78 	bl	8000a1c <mot_toggle_dir>
		  HAL_Delay(500);
 800052c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000530:	f000 fc94 	bl	8000e5c <HAL_Delay>
	  }
	  ctr = mot_get_pos();
 8000534:	f000 fa8e 	bl	8000a54 <mot_get_pos>
 8000538:	6078      	str	r0, [r7, #4]
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 800053a:	e7ed      	b.n	8000518 <main+0x40>
 800053c:	20000074 	.word	0x20000074
 8000540:	20000028 	.word	0x20000028
 8000544:	48000800 	.word	0x48000800

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b096      	sub	sp, #88	; 0x58
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	2244      	movs	r2, #68	; 0x44
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 fcdc 	bl	8003f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800056a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800056e:	f000 ff37 	bl	80013e0 <HAL_PWREx_ControlVoltageScaling>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000578:	f000 f9b6 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2340      	movs	r3, #64	; 0x40
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000596:	230a      	movs	r3, #10
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 ff6e 	bl	800148c <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005b6:	f000 f997 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ce:	463b      	mov	r3, r7
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fb6e 	bl	8001cb4 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005de:	f000 f983 	bl	80008e8 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3758      	adds	r7, #88	; 0x58
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2224      	movs	r2, #36	; 0x24
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fc8a 	bl	8003f14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000600:	463b      	mov	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <MX_TIM2_Init+0xa4>)
 800060c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000610:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_TIM2_Init+0xa4>)
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_TIM2_Init+0xa4>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <MX_TIM2_Init+0xa4>)
 8000620:	f04f 32ff 	mov.w	r2, #4294967295
 8000624:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_TIM2_Init+0xa4>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_TIM2_Init+0xa4>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000632:	2301      	movs	r3, #1
 8000634:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800063a:	2301      	movs	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800064a:	2301      	movs	r3, #1
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	4619      	mov	r1, r3
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <MX_TIM2_Init+0xa4>)
 800065e:	f002 f9e9 	bl	8002a34 <HAL_TIM_Encoder_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000668:	f000 f93e 	bl	80008e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	4619      	mov	r1, r3
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_TIM2_Init+0xa4>)
 800067a:	f002 ff35 	bl	80034e8 <HAL_TIMEx_MasterConfigSynchronization>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000684:	f000 f930 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	3730      	adds	r7, #48	; 0x30
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000028 	.word	0x20000028

08000694 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
 80006b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <MX_TIM3_Init+0xac>)
 80006ba:	4a22      	ldr	r2, [pc, #136]	; (8000744 <MX_TIM3_Init+0xb0>)
 80006bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_TIM3_Init+0xac>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_TIM3_Init+0xac>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_TIM3_Init+0xac>)
 80006cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_TIM3_Init+0xac>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_TIM3_Init+0xac>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006de:	4818      	ldr	r0, [pc, #96]	; (8000740 <MX_TIM3_Init+0xac>)
 80006e0:	f002 f86a 	bl	80027b8 <HAL_TIM_PWM_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80006ea:	f000 f8fd 	bl	80008e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	4810      	ldr	r0, [pc, #64]	; (8000740 <MX_TIM3_Init+0xac>)
 80006fe:	f002 fef3 	bl	80034e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000708:	f000 f8ee 	bl	80008e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800070c:	2360      	movs	r3, #96	; 0x60
 800070e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	4619      	mov	r1, r3
 8000722:	4807      	ldr	r0, [pc, #28]	; (8000740 <MX_TIM3_Init+0xac>)
 8000724:	f002 faba 	bl	8002c9c <HAL_TIM_PWM_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800072e:	f000 f8db 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000732:	4803      	ldr	r0, [pc, #12]	; (8000740 <MX_TIM3_Init+0xac>)
 8000734:	f000 fa1c 	bl	8000b70 <HAL_TIM_MspPostInit>

}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	; 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000074 	.word	0x20000074
 8000744:	40000400 	.word	0x40000400

08000748 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_USART2_UART_Init+0x58>)
 800074e:	4a15      	ldr	r2, [pc, #84]	; (80007a4 <MX_USART2_UART_Init+0x5c>)
 8000750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_USART2_UART_Init+0x58>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_USART2_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART2_UART_Init+0x58>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART2_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART2_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART2_UART_Init+0x58>)
 800078c:	f002 ff1a 	bl	80035c4 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000796:	f000 f8a7 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000c0 	.word	0x200000c0
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b47      	ldr	r3, [pc, #284]	; (80008dc <MX_GPIO_Init+0x134>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a46      	ldr	r2, [pc, #280]	; (80008dc <MX_GPIO_Init+0x134>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b44      	ldr	r3, [pc, #272]	; (80008dc <MX_GPIO_Init+0x134>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	4b41      	ldr	r3, [pc, #260]	; (80008dc <MX_GPIO_Init+0x134>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a40      	ldr	r2, [pc, #256]	; (80008dc <MX_GPIO_Init+0x134>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b3e      	ldr	r3, [pc, #248]	; (80008dc <MX_GPIO_Init+0x134>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b3b      	ldr	r3, [pc, #236]	; (80008dc <MX_GPIO_Init+0x134>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a3a      	ldr	r2, [pc, #232]	; (80008dc <MX_GPIO_Init+0x134>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b38      	ldr	r3, [pc, #224]	; (80008dc <MX_GPIO_Init+0x134>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <MX_GPIO_Init+0x134>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a34      	ldr	r2, [pc, #208]	; (80008dc <MX_GPIO_Init+0x134>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b32      	ldr	r3, [pc, #200]	; (80008dc <MX_GPIO_Init+0x134>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	21b0      	movs	r1, #176	; 0xb0
 8000822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000826:	f000 fdb5 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000830:	482b      	ldr	r0, [pc, #172]	; (80008e0 <MX_GPIO_Init+0x138>)
 8000832:	f000 fdaf 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800083c:	4829      	ldr	r0, [pc, #164]	; (80008e4 <MX_GPIO_Init+0x13c>)
 800083e:	f000 fda9 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000848:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	4822      	ldr	r0, [pc, #136]	; (80008e4 <MX_GPIO_Init+0x13c>)
 800085a:	f000 fc09 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800085e:	23b0      	movs	r3, #176	; 0xb0
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 fbfa 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800087c:	2340      	movs	r3, #64	; 0x40
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000884:	2301      	movs	r3, #1
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000892:	f000 fbed 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_GPIO_Init+0x138>)
 80008b0:	f000 fbde 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80008b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_GPIO_Init+0x13c>)
 80008ce:	f000 fbcf 	bl	8001070 <HAL_GPIO_Init>

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000
 80008e0:	48000400 	.word	0x48000400
 80008e4:	48000800 	.word	0x48000800

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <mot_init>:
static int mot_dir;
static uint16_t mot_pwm;
static uint32_t mot_pos;
static uint32_t mot_last_sample_time;

void mot_init(void){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	mot_dir = MOT_FWD;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <mot_init+0x38>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
	mot_pwm = 0;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <mot_init+0x3c>)
 8000900:	2200      	movs	r2, #0
 8000902:	801a      	strh	r2, [r3, #0]
	mot_pos = TIM2->CNT;
 8000904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <mot_init+0x40>)
 800090c:	6013      	str	r3, [r2, #0]
	mot_last_sample_time = HAL_GetTick();
 800090e:	f000 fa99 	bl	8000e44 <HAL_GetTick>
 8000912:	4603      	mov	r3, r0
 8000914:	4a08      	ldr	r2, [pc, #32]	; (8000938 <mot_init+0x44>)
 8000916:	6013      	str	r3, [r2, #0]
	mot_set(mot_pwm, mot_dir);
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <mot_init+0x3c>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	4a03      	ldr	r2, [pc, #12]	; (800092c <mot_init+0x38>)
 800091e:	6812      	ldr	r2, [r2, #0]
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f868 	bl	80009f8 <mot_set>
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000144 	.word	0x20000144
 8000930:	20000148 	.word	0x20000148
 8000934:	2000014c 	.word	0x2000014c
 8000938:	20000150 	.word	0x20000150

0800093c <mot_set_dir>:

void mot_set_dir(int dir){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	switch(dir){
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d00a      	beq.n	8000960 <mot_set_dir+0x24>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b01      	cmp	r3, #1
 800094e:	dc34      	bgt.n	80009ba <mot_set_dir+0x7e>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000956:	d012      	beq.n	800097e <mot_set_dir+0x42>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d01e      	beq.n	800099c <mot_set_dir+0x60>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
			mot_dir = dir;
			break;
	}
}
 800095e:	e02c      	b.n	80009ba <mot_set_dir+0x7e>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	4817      	ldr	r0, [pc, #92]	; (80009c4 <mot_set_dir+0x88>)
 8000966:	f000 fd15 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000970:	4814      	ldr	r0, [pc, #80]	; (80009c4 <mot_set_dir+0x88>)
 8000972:	f000 fd0f 	bl	8001394 <HAL_GPIO_WritePin>
			mot_dir = dir;
 8000976:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <mot_set_dir+0x8c>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6013      	str	r3, [r2, #0]
			break;
 800097c:	e01d      	b.n	80009ba <mot_set_dir+0x7e>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	4810      	ldr	r0, [pc, #64]	; (80009c4 <mot_set_dir+0x88>)
 8000984:	f000 fd06 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <mot_set_dir+0x88>)
 8000990:	f000 fd00 	bl	8001394 <HAL_GPIO_WritePin>
			mot_dir = dir;
 8000994:	4a0c      	ldr	r2, [pc, #48]	; (80009c8 <mot_set_dir+0x8c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
			break;
 800099a:	e00e      	b.n	80009ba <mot_set_dir+0x7e>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2180      	movs	r1, #128	; 0x80
 80009a0:	4808      	ldr	r0, [pc, #32]	; (80009c4 <mot_set_dir+0x88>)
 80009a2:	f000 fcf7 	bl	8001394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <mot_set_dir+0x88>)
 80009ae:	f000 fcf1 	bl	8001394 <HAL_GPIO_WritePin>
			mot_dir = dir;
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <mot_set_dir+0x8c>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6013      	str	r3, [r2, #0]
			break;
 80009b8:	bf00      	nop
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	48000800 	.word	0x48000800
 80009c8:	20000144 	.word	0x20000144

080009cc <mot_set_pwm>:

void mot_set_pwm(uint16_t pwm){
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	80fb      	strh	r3, [r7, #6]
	TIM3->CCR1 = pwm;
 80009d6:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <mot_set_pwm+0x24>)
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	6353      	str	r3, [r2, #52]	; 0x34
	mot_pwm = pwm;
 80009dc:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <mot_set_pwm+0x28>)
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	8013      	strh	r3, [r2, #0]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40000400 	.word	0x40000400
 80009f4:	20000148 	.word	0x20000148

080009f8 <mot_set>:

void mot_set(uint16_t pwm, int dir){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	80fb      	strh	r3, [r7, #6]
	mot_set_dir(dir);
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f7ff ff99 	bl	800093c <mot_set_dir>
	mot_set_pwm(pwm);
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ffdd 	bl	80009cc <mot_set_pwm>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <mot_toggle_dir>:

void mot_toggle_dir(){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	switch(mot_dir){
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <mot_toggle_dir+0x34>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a28:	d006      	beq.n	8000a38 <mot_toggle_dir+0x1c>
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d108      	bne.n	8000a40 <mot_toggle_dir+0x24>
		case MOT_FORWARD: mot_dir = MOT_BACKWARD; break;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <mot_toggle_dir+0x34>)
 8000a30:	f04f 32ff 	mov.w	r2, #4294967295
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	e003      	b.n	8000a40 <mot_toggle_dir+0x24>
		case MOT_BACKWARD: mot_dir = MOT_FORWARD; break;
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <mot_toggle_dir+0x34>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	bf00      	nop
	}
	mot_set_dir(mot_dir);
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <mot_toggle_dir+0x34>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff79 	bl	800093c <mot_set_dir>
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000144 	.word	0x20000144

08000a54 <mot_get_pos>:

uint32_t mot_get_pos(){
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 8000a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_MspInit+0x44>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <HAL_MspInit+0x44>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6613      	str	r3, [r2, #96]	; 0x60
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_MspInit+0x44>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_MspInit+0x44>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <HAL_MspInit+0x44>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	6593      	str	r3, [r2, #88]	; 0x58
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_MspInit+0x44>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad0:	d128      	bne.n	8000b24 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b02:	2303      	movs	r3, #3
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b12:	2301      	movs	r3, #1
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f000 faa6 	bl	8001070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40021000 	.word	0x40021000

08000b30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <HAL_TIM_PWM_MspInit+0x38>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d10b      	bne.n	8000b5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b46:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40000400 	.word	0x40000400
 8000b6c:	40021000 	.word	0x40021000

08000b70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <HAL_TIM_MspPostInit+0x64>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d11b      	bne.n	8000bca <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_TIM_MspPostInit+0x68>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_TIM_MspPostInit+0x68>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_TIM_MspPostInit+0x68>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000baa:	2340      	movs	r3, #64	; 0x40
 8000bac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <HAL_TIM_MspPostInit+0x6c>)
 8000bc6:	f000 fa53 	bl	8001070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40000400 	.word	0x40000400
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	48000800 	.word	0x48000800

08000be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0a4      	sub	sp, #144	; 0x90
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2268      	movs	r2, #104	; 0x68
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 f987 	bl	8003f14 <memset>
  if(huart->Instance==USART2)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <HAL_UART_MspInit+0xb0>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d13a      	bne.n	8000c86 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 fa6d 	bl	80020fc <HAL_RCCEx_PeriphCLKConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c28:	f7ff fe5e 	bl	80008e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_UART_MspInit+0xb4>)
 8000c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c30:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <HAL_UART_MspInit+0xb4>)
 8000c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c36:	6593      	str	r3, [r2, #88]	; 0x58
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_UART_MspInit+0xb4>)
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <HAL_UART_MspInit+0xb4>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c48:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <HAL_UART_MspInit+0xb4>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <HAL_UART_MspInit+0xb4>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c72:	2307      	movs	r3, #7
 8000c74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c82:	f000 f9f5 	bl	8001070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3790      	adds	r7, #144	; 0x90
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40004400 	.word	0x40004400
 8000c94:	40021000 	.word	0x40021000

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <NMI_Handler+0x4>

08000c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <HardFault_Handler+0x4>

08000ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <MemManage_Handler+0x4>

08000caa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <BusFault_Handler+0x4>

08000cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <UsageFault_Handler+0x4>

08000cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce4:	f000 f89a 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <SystemInit+0x20>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <SystemInit+0x20>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d14:	f7ff ffea 	bl	8000cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1a:	490d      	ldr	r1, [pc, #52]	; (8000d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <LoopForever+0xe>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d30:	4c0a      	ldr	r4, [pc, #40]	; (8000d5c <LoopForever+0x16>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f003 f8c5 	bl	8003ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d42:	f7ff fbc9 	bl	80004d8 <main>

08000d46 <LoopForever>:

LoopForever:
    b LoopForever
 8000d46:	e7fe      	b.n	8000d46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d48:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d54:	08003f94 	.word	0x08003f94
  ldr r2, =_sbss
 8000d58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d5c:	20000158 	.word	0x20000158

08000d60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC1_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_Init+0x3c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <HAL_Init+0x3c>)
 8000d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f000 f944 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d80:	2000      	movs	r0, #0
 8000d82:	f000 f80f 	bl	8000da4 <HAL_InitTick>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	e001      	b.n	8000d96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d92:	f7ff fe69 	bl	8000a68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40022000 	.word	0x40022000

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_InitTick+0x6c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d023      	beq.n	8000e00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <HAL_InitTick+0x70>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <HAL_InitTick+0x6c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f941 	bl	8001056 <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10f      	bne.n	8000dfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d809      	bhi.n	8000df4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 f919 	bl	800101e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_InitTick+0x74>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e007      	b.n	8000e04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e004      	b.n	8000e04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
 8000dfe:	e001      	b.n	8000e04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20000154 	.word	0x20000154

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000154 	.word	0x20000154

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff ffee 	bl	8000e44 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e74:	d005      	beq.n	8000e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_Delay+0x44>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e82:	bf00      	nop
 8000e84:	f7ff ffde 	bl	8000e44 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d8f7      	bhi.n	8000e84 <HAL_Delay+0x28>
  {
  }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008

08000ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	f003 0307 	and.w	r3, r3, #7
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff47 	bl	8000ea4 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff5c 	bl	8000eec <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffb0 	bl	8000fc4 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107e:	e154      	b.n	800132a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	2101      	movs	r1, #1
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	4013      	ands	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 8146 	beq.w	8001324 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d005      	beq.n	80010b0 <HAL_GPIO_Init+0x40>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d130      	bne.n	8001112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010e6:	2201      	movs	r2, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	f003 0201 	and.w	r2, r3, #1
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b03      	cmp	r3, #3
 800111c:	d017      	beq.n	800114e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d123      	bne.n	80011a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	691a      	ldr	r2, [r3, #16]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	08da      	lsrs	r2, r3, #3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3208      	adds	r2, #8
 800119c:	6939      	ldr	r1, [r7, #16]
 800119e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0203 	and.w	r2, r3, #3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 80a0 	beq.w	8001324 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e4:	4b58      	ldr	r3, [pc, #352]	; (8001348 <HAL_GPIO_Init+0x2d8>)
 80011e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e8:	4a57      	ldr	r2, [pc, #348]	; (8001348 <HAL_GPIO_Init+0x2d8>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6613      	str	r3, [r2, #96]	; 0x60
 80011f0:	4b55      	ldr	r3, [pc, #340]	; (8001348 <HAL_GPIO_Init+0x2d8>)
 80011f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011fc:	4a53      	ldr	r2, [pc, #332]	; (800134c <HAL_GPIO_Init+0x2dc>)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001226:	d019      	beq.n	800125c <HAL_GPIO_Init+0x1ec>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a49      	ldr	r2, [pc, #292]	; (8001350 <HAL_GPIO_Init+0x2e0>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d013      	beq.n	8001258 <HAL_GPIO_Init+0x1e8>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a48      	ldr	r2, [pc, #288]	; (8001354 <HAL_GPIO_Init+0x2e4>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d00d      	beq.n	8001254 <HAL_GPIO_Init+0x1e4>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a47      	ldr	r2, [pc, #284]	; (8001358 <HAL_GPIO_Init+0x2e8>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d007      	beq.n	8001250 <HAL_GPIO_Init+0x1e0>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a46      	ldr	r2, [pc, #280]	; (800135c <HAL_GPIO_Init+0x2ec>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d101      	bne.n	800124c <HAL_GPIO_Init+0x1dc>
 8001248:	2304      	movs	r3, #4
 800124a:	e008      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 800124c:	2307      	movs	r3, #7
 800124e:	e006      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001250:	2303      	movs	r3, #3
 8001252:	e004      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001254:	2302      	movs	r3, #2
 8001256:	e002      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 800125c:	2300      	movs	r3, #0
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	f002 0203 	and.w	r2, r2, #3
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	4093      	lsls	r3, r2
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800126e:	4937      	ldr	r1, [pc, #220]	; (800134c <HAL_GPIO_Init+0x2dc>)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800127c:	4b38      	ldr	r3, [pc, #224]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012a0:	4a2f      	ldr	r2, [pc, #188]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ca:	4a25      	ldr	r2, [pc, #148]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f4:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	f47f aea3 	bne.w	8001080 <HAL_GPIO_Init+0x10>
  }
}
 800133a:	bf00      	nop
 800133c:	bf00      	nop
 800133e:	371c      	adds	r7, #28
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40021000 	.word	0x40021000
 800134c:	40010000 	.word	0x40010000
 8001350:	48000400 	.word	0x48000400
 8001354:	48000800 	.word	0x48000800
 8001358:	48000c00 	.word	0x48000c00
 800135c:	48001000 	.word	0x48001000
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	4013      	ands	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e001      	b.n	8001386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <HAL_PWREx_GetVoltageRange+0x18>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40007000 	.word	0x40007000

080013e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ee:	d130      	bne.n	8001452 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013fc:	d038      	beq.n	8001470 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001406:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001408:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2232      	movs	r2, #50	; 0x32
 8001414:	fb02 f303 	mul.w	r3, r2, r3
 8001418:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	0c9b      	lsrs	r3, r3, #18
 8001420:	3301      	adds	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001424:	e002      	b.n	800142c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3b01      	subs	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001438:	d102      	bne.n	8001440 <HAL_PWREx_ControlVoltageScaling+0x60>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f2      	bne.n	8001426 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144c:	d110      	bne.n	8001470 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e00f      	b.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800145a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800145e:	d007      	beq.n	8001470 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001468:	4a05      	ldr	r2, [pc, #20]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40007000 	.word	0x40007000
 8001484:	20000000 	.word	0x20000000
 8001488:	431bde83 	.word	0x431bde83

0800148c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	f000 bc02 	b.w	8001ca4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a0:	4b96      	ldr	r3, [pc, #600]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 030c 	and.w	r3, r3, #12
 80014a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014aa:	4b94      	ldr	r3, [pc, #592]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 80e4 	beq.w	800168a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <HAL_RCC_OscConfig+0x4c>
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b0c      	cmp	r3, #12
 80014cc:	f040 808b 	bne.w	80015e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	f040 8087 	bne.w	80015e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d8:	4b88      	ldr	r3, [pc, #544]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_OscConfig+0x64>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e3d9      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1a      	ldr	r2, [r3, #32]
 80014f4:	4b81      	ldr	r3, [pc, #516]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d004      	beq.n	800150a <HAL_RCC_OscConfig+0x7e>
 8001500:	4b7e      	ldr	r3, [pc, #504]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001508:	e005      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
 800150a:	4b7c      	ldr	r3, [pc, #496]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 800150c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001516:	4293      	cmp	r3, r2
 8001518:	d223      	bcs.n	8001562 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fd8c 	bl	800203c <RCC_SetFlashLatencyFromMSIRange>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e3ba      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800152e:	4b73      	ldr	r3, [pc, #460]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a72      	ldr	r2, [pc, #456]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b70      	ldr	r3, [pc, #448]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	496d      	ldr	r1, [pc, #436]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800154c:	4b6b      	ldr	r3, [pc, #428]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	4968      	ldr	r1, [pc, #416]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
 8001560:	e025      	b.n	80015ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001562:	4b66      	ldr	r3, [pc, #408]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a65      	ldr	r2, [pc, #404]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001568:	f043 0308 	orr.w	r3, r3, #8
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b63      	ldr	r3, [pc, #396]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4960      	ldr	r1, [pc, #384]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001580:	4b5e      	ldr	r3, [pc, #376]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	495b      	ldr	r1, [pc, #364]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fd4c 	bl	800203c <RCC_SetFlashLatencyFromMSIRange>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e37a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ae:	f000 fc81 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 80015b2:	4602      	mov	r2, r0
 80015b4:	4b51      	ldr	r3, [pc, #324]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	4950      	ldr	r1, [pc, #320]	; (8001700 <HAL_RCC_OscConfig+0x274>)
 80015c0:	5ccb      	ldrb	r3, [r1, r3]
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ca:	4a4e      	ldr	r2, [pc, #312]	; (8001704 <HAL_RCC_OscConfig+0x278>)
 80015cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015ce:	4b4e      	ldr	r3, [pc, #312]	; (8001708 <HAL_RCC_OscConfig+0x27c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fbe6 	bl	8000da4 <HAL_InitTick>
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d052      	beq.n	8001688 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	e35e      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d032      	beq.n	8001654 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015ee:	4b43      	ldr	r3, [pc, #268]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a42      	ldr	r2, [pc, #264]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fc23 	bl	8000e44 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001602:	f7ff fc1f 	bl	8000e44 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e347      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001614:	4b39      	ldr	r3, [pc, #228]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001620:	4b36      	ldr	r3, [pc, #216]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a35      	ldr	r2, [pc, #212]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b33      	ldr	r3, [pc, #204]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4930      	ldr	r1, [pc, #192]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800163e:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	492b      	ldr	r1, [pc, #172]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]
 8001652:	e01a      	b.n	800168a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a28      	ldr	r2, [pc, #160]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 800165a:	f023 0301 	bic.w	r3, r3, #1
 800165e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001660:	f7ff fbf0 	bl	8000e44 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001668:	f7ff fbec 	bl	8000e44 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e314      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x1dc>
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001688:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d073      	beq.n	800177e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b08      	cmp	r3, #8
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x21c>
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d10e      	bne.n	80016c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d10b      	bne.n	80016c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d063      	beq.n	800177c <HAL_RCC_OscConfig+0x2f0>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d15f      	bne.n	800177c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e2f1      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d106      	bne.n	80016d8 <HAL_RCC_OscConfig+0x24c>
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e025      	b.n	8001724 <HAL_RCC_OscConfig+0x298>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e0:	d114      	bne.n	800170c <HAL_RCC_OscConfig+0x280>
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a02      	ldr	r2, [pc, #8]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e013      	b.n	8001724 <HAL_RCC_OscConfig+0x298>
 80016fc:	40021000 	.word	0x40021000
 8001700:	08003f3c 	.word	0x08003f3c
 8001704:	20000000 	.word	0x20000000
 8001708:	20000004 	.word	0x20000004
 800170c:	4ba0      	ldr	r3, [pc, #640]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a9f      	ldr	r2, [pc, #636]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 8001712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b9d      	ldr	r3, [pc, #628]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a9c      	ldr	r2, [pc, #624]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 800171e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d013      	beq.n	8001754 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fb8a 	bl	8000e44 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fb86 	bl	8000e44 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e2ae      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001746:	4b92      	ldr	r3, [pc, #584]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x2a8>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fb76 	bl	8000e44 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fb72 	bl	8000e44 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	; 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e29a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176e:	4b88      	ldr	r3, [pc, #544]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x2d0>
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d060      	beq.n	800184c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d005      	beq.n	800179c <HAL_RCC_OscConfig+0x310>
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d119      	bne.n	80017ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d116      	bne.n	80017ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800179c:	4b7c      	ldr	r3, [pc, #496]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_OscConfig+0x328>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e277      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b4:	4b76      	ldr	r3, [pc, #472]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	061b      	lsls	r3, r3, #24
 80017c2:	4973      	ldr	r1, [pc, #460]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c8:	e040      	b.n	800184c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d023      	beq.n	800181a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d2:	4b6f      	ldr	r3, [pc, #444]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6e      	ldr	r2, [pc, #440]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff fb31 	bl	8000e44 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e6:	f7ff fb2d 	bl	8000e44 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e255      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f8:	4b65      	ldr	r3, [pc, #404]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001804:	4b62      	ldr	r3, [pc, #392]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	061b      	lsls	r3, r3, #24
 8001812:	495f      	ldr	r1, [pc, #380]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
 8001818:	e018      	b.n	800184c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181a:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a5c      	ldr	r2, [pc, #368]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 8001820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff fb0d 	bl	8000e44 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff fb09 	bl	8000e44 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e231      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001840:	4b53      	ldr	r3, [pc, #332]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d03c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01c      	beq.n	800189a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001860:	4b4b      	ldr	r3, [pc, #300]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 8001862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001866:	4a4a      	ldr	r2, [pc, #296]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7ff fae8 	bl	8000e44 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff fae4 	bl	8000e44 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e20c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800188a:	4b41      	ldr	r3, [pc, #260]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 800188c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0ef      	beq.n	8001878 <HAL_RCC_OscConfig+0x3ec>
 8001898:	e01b      	b.n	80018d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 800189c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a0:	4a3b      	ldr	r2, [pc, #236]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff facb 	bl	8000e44 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b2:	f7ff fac7 	bl	8000e44 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e1ef      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c4:	4b32      	ldr	r3, [pc, #200]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 80018c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ef      	bne.n	80018b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80a6 	beq.w	8001a2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10d      	bne.n	800190c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f4:	4a26      	ldr	r2, [pc, #152]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fa:	6593      	str	r3, [r2, #88]	; 0x58
 80018fc:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001908:	2301      	movs	r3, #1
 800190a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_RCC_OscConfig+0x508>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d118      	bne.n	800194a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <HAL_RCC_OscConfig+0x508>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_RCC_OscConfig+0x508>)
 800191e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001922:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001924:	f7ff fa8e 	bl	8000e44 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192c:	f7ff fa8a 	bl	8000e44 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1b2      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_RCC_OscConfig+0x508>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d108      	bne.n	8001964 <HAL_RCC_OscConfig+0x4d8>
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 8001954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001962:	e029      	b.n	80019b8 <HAL_RCC_OscConfig+0x52c>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b05      	cmp	r3, #5
 800196a:	d115      	bne.n	8001998 <HAL_RCC_OscConfig+0x50c>
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001982:	4a03      	ldr	r2, [pc, #12]	; (8001990 <HAL_RCC_OscConfig+0x504>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800198c:	e014      	b.n	80019b8 <HAL_RCC_OscConfig+0x52c>
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	40007000 	.word	0x40007000
 8001998:	4b9a      	ldr	r3, [pc, #616]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199e:	4a99      	ldr	r2, [pc, #612]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019a8:	4b96      	ldr	r3, [pc, #600]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ae:	4a95      	ldr	r2, [pc, #596]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d016      	beq.n	80019ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff fa40 	bl	8000e44 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c6:	e00a      	b.n	80019de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7ff fa3c 	bl	8000e44 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e162      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019de:	4b89      	ldr	r3, [pc, #548]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 80019e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ed      	beq.n	80019c8 <HAL_RCC_OscConfig+0x53c>
 80019ec:	e015      	b.n	8001a1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7ff fa29 	bl	8000e44 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7ff fa25 	bl	8000e44 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e14b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a0c:	4b7d      	ldr	r3, [pc, #500]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ed      	bne.n	80019f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a1a:	7ffb      	ldrb	r3, [r7, #31]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a20:	4b78      	ldr	r3, [pc, #480]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	4a77      	ldr	r2, [pc, #476]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d03c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a40:	4b70      	ldr	r3, [pc, #448]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a46:	4a6f      	ldr	r2, [pc, #444]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff f9f8 	bl	8000e44 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a58:	f7ff f9f4 	bl	8000e44 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e11c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a6a:	4b66      	ldr	r3, [pc, #408]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ef      	beq.n	8001a58 <HAL_RCC_OscConfig+0x5cc>
 8001a78:	e01b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a7a:	4b62      	ldr	r3, [pc, #392]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a80:	4a60      	ldr	r2, [pc, #384]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f9db 	bl	8000e44 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a92:	f7ff f9d7 	bl	8000e44 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e0ff      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aa4:	4b57      	ldr	r3, [pc, #348]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1ef      	bne.n	8001a92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80f3 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	f040 80c9 	bne.w	8001c58 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ac6:	4b4f      	ldr	r3, [pc, #316]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0203 	and.w	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d12c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d123      	bne.n	8001b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d11b      	bne.n	8001b34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d113      	bne.n	8001b34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b16:	085b      	lsrs	r3, r3, #1
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d109      	bne.n	8001b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	085b      	lsrs	r3, r3, #1
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d06b      	beq.n	8001c0c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d062      	beq.n	8001c00 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b3a:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0ac      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a2d      	ldr	r2, [pc, #180]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001b50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b56:	f7ff f975 	bl	8000e44 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7ff f971 	bl	8000e44 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e099      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f0      	bne.n	8001b5e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <HAL_RCC_OscConfig+0x77c>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b8c:	3a01      	subs	r2, #1
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	4311      	orrs	r1, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b96:	0212      	lsls	r2, r2, #8
 8001b98:	4311      	orrs	r1, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b9e:	0852      	lsrs	r2, r2, #1
 8001ba0:	3a01      	subs	r2, #1
 8001ba2:	0552      	lsls	r2, r2, #21
 8001ba4:	4311      	orrs	r1, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001baa:	0852      	lsrs	r2, r2, #1
 8001bac:	3a01      	subs	r2, #1
 8001bae:	0652      	lsls	r2, r2, #25
 8001bb0:	4311      	orrs	r1, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bb6:	06d2      	lsls	r2, r2, #27
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	4912      	ldr	r1, [pc, #72]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bd8:	f7ff f934 	bl	8000e44 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff f930 	bl	8000e44 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e058      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <HAL_RCC_OscConfig+0x778>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bfe:	e050      	b.n	8001ca2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e04f      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
 8001c04:	40021000 	.word	0x40021000
 8001c08:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0c:	4b27      	ldr	r3, [pc, #156]	; (8001cac <HAL_RCC_OscConfig+0x820>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d144      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c18:	4b24      	ldr	r3, [pc, #144]	; (8001cac <HAL_RCC_OscConfig+0x820>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <HAL_RCC_OscConfig+0x820>)
 8001c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c24:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_RCC_OscConfig+0x820>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4a20      	ldr	r2, [pc, #128]	; (8001cac <HAL_RCC_OscConfig+0x820>)
 8001c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c30:	f7ff f908 	bl	8000e44 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f904 	bl	8000e44 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e02c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_RCC_OscConfig+0x820>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x7ac>
 8001c56:	e024      	b.n	8001ca2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d01f      	beq.n	8001c9e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_RCC_OscConfig+0x820>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <HAL_RCC_OscConfig+0x820>)
 8001c64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6a:	f7ff f8eb 	bl	8000e44 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c72:	f7ff f8e7 	bl	8000e44 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e00f      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_RCC_OscConfig+0x820>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f0      	bne.n	8001c72 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_OscConfig+0x820>)
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	4905      	ldr	r1, [pc, #20]	; (8001cac <HAL_RCC_OscConfig+0x820>)
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_OscConfig+0x824>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60cb      	str	r3, [r1, #12]
 8001c9c:	e001      	b.n	8001ca2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	feeefffc 	.word	0xfeeefffc

08001cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0e7      	b.n	8001e98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b75      	ldr	r3, [pc, #468]	; (8001ea0 <HAL_RCC_ClockConfig+0x1ec>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d910      	bls.n	8001cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b72      	ldr	r3, [pc, #456]	; (8001ea0 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 0207 	bic.w	r2, r3, #7
 8001cde:	4970      	ldr	r1, [pc, #448]	; (8001ea0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b6e      	ldr	r3, [pc, #440]	; (8001ea0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0cf      	b.n	8001e98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d010      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	4b66      	ldr	r3, [pc, #408]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d908      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d14:	4b63      	ldr	r3, [pc, #396]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4960      	ldr	r1, [pc, #384]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d04c      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d121      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0a6      	b.n	8001e98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d107      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d52:	4b54      	ldr	r3, [pc, #336]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d115      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e09a      	b.n	8001e98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d6a:	4b4e      	ldr	r3, [pc, #312]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e08e      	b.n	8001e98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e086      	b.n	8001e98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d8a:	4b46      	ldr	r3, [pc, #280]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f023 0203 	bic.w	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4943      	ldr	r1, [pc, #268]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d9c:	f7ff f852 	bl	8000e44 <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da4:	f7ff f84e 	bl	8000e44 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e06e      	b.n	8001e98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dba:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 020c 	and.w	r2, r3, #12
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d1eb      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d010      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d208      	bcs.n	8001dfa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de8:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	492b      	ldr	r1, [pc, #172]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfa:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <HAL_RCC_ClockConfig+0x1ec>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d210      	bcs.n	8001e2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 0207 	bic.w	r2, r3, #7
 8001e10:	4923      	ldr	r1, [pc, #140]	; (8001ea0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e18:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e036      	b.n	8001e98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	4918      	ldr	r1, [pc, #96]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d009      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4910      	ldr	r1, [pc, #64]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e68:	f000 f824 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	490b      	ldr	r1, [pc, #44]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f4>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
 8001e84:	4a09      	ldr	r2, [pc, #36]	; (8001eac <HAL_RCC_ClockConfig+0x1f8>)
 8001e86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_ClockConfig+0x1fc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe ff89 	bl	8000da4 <HAL_InitTick>
 8001e92:	4603      	mov	r3, r0
 8001e94:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e96:	7afb      	ldrb	r3, [r7, #11]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40022000 	.word	0x40022000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	08003f3c 	.word	0x08003f3c
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	20000004 	.word	0x20000004

08001eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec2:	4b3e      	ldr	r3, [pc, #248]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	2b0c      	cmp	r3, #12
 8001ee0:	d121      	bne.n	8001f26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d11e      	bne.n	8001f26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ee8:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d107      	bne.n	8001f04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ef4:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	e005      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f10:	4a2b      	ldr	r2, [pc, #172]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d102      	bne.n	8001f32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	e004      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f38:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d134      	bne.n	8001fac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d003      	beq.n	8001f5a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d003      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0xac>
 8001f58:	e005      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f5c:	617b      	str	r3, [r7, #20]
      break;
 8001f5e:	e005      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f62:	617b      	str	r3, [r7, #20]
      break;
 8001f64:	e002      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	617b      	str	r3, [r7, #20]
      break;
 8001f6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	3301      	adds	r3, #1
 8001f78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	fb03 f202 	mul.w	r2, r3, r2
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	0e5b      	lsrs	r3, r3, #25
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fac:	69bb      	ldr	r3, [r7, #24]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	08003f54 	.word	0x08003f54
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	007a1200 	.word	0x007a1200

08001fcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000000 	.word	0x20000000

08001fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fe8:	f7ff fff0 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	4904      	ldr	r1, [pc, #16]	; (800200c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ffa:	5ccb      	ldrb	r3, [r1, r3]
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002004:	4618      	mov	r0, r3
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	08003f4c 	.word	0x08003f4c

08002010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002014:	f7ff ffda 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_RCC_GetPCLK2Freq+0x24>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	0adb      	lsrs	r3, r3, #11
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	4904      	ldr	r1, [pc, #16]	; (8002038 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000
 8002038:	08003f4c 	.word	0x08003f4c

0800203c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002048:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002054:	f7ff f9b6 	bl	80013c4 <HAL_PWREx_GetVoltageRange>
 8002058:	6178      	str	r0, [r7, #20]
 800205a:	e014      	b.n	8002086 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	4a24      	ldr	r2, [pc, #144]	; (80020f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002066:	6593      	str	r3, [r2, #88]	; 0x58
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002074:	f7ff f9a6 	bl	80013c4 <HAL_PWREx_GetVoltageRange>
 8002078:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	4a1d      	ldr	r2, [pc, #116]	; (80020f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002084:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800208c:	d10b      	bne.n	80020a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b80      	cmp	r3, #128	; 0x80
 8002092:	d919      	bls.n	80020c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2ba0      	cmp	r3, #160	; 0xa0
 8002098:	d902      	bls.n	80020a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800209a:	2302      	movs	r3, #2
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	e013      	b.n	80020c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020a0:	2301      	movs	r3, #1
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	e010      	b.n	80020c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b80      	cmp	r3, #128	; 0x80
 80020aa:	d902      	bls.n	80020b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020ac:	2303      	movs	r3, #3
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	e00a      	b.n	80020c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b80      	cmp	r3, #128	; 0x80
 80020b6:	d102      	bne.n	80020be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020b8:	2302      	movs	r3, #2
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	e004      	b.n	80020c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b70      	cmp	r3, #112	; 0x70
 80020c2:	d101      	bne.n	80020c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020c4:	2301      	movs	r3, #1
 80020c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 0207 	bic.w	r2, r3, #7
 80020d0:	4909      	ldr	r1, [pc, #36]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020d8:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d001      	beq.n	80020ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40022000 	.word	0x40022000

080020fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002104:	2300      	movs	r3, #0
 8002106:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002108:	2300      	movs	r3, #0
 800210a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002114:	2b00      	cmp	r3, #0
 8002116:	d031      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002120:	d01a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002122:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002126:	d814      	bhi.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002128:	2b00      	cmp	r3, #0
 800212a:	d009      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800212c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002130:	d10f      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002132:	4b5d      	ldr	r3, [pc, #372]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	4a5c      	ldr	r2, [pc, #368]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800213e:	e00c      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fa44 	bl	80025d4 <RCCEx_PLLSAI1_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002150:	e003      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	74fb      	strb	r3, [r7, #19]
      break;
 8002156:	e000      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800215a:	7cfb      	ldrb	r3, [r7, #19]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10b      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002160:	4b51      	ldr	r3, [pc, #324]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	494e      	ldr	r1, [pc, #312]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002176:	e001      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 809e 	beq.w	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800218e:	4b46      	ldr	r3, [pc, #280]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800219e:	2300      	movs	r3, #0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00d      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a4:	4b40      	ldr	r3, [pc, #256]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	4a3f      	ldr	r2, [pc, #252]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ae:	6593      	str	r3, [r2, #88]	; 0x58
 80021b0:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021bc:	2301      	movs	r3, #1
 80021be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c0:	4b3a      	ldr	r3, [pc, #232]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a39      	ldr	r2, [pc, #228]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021cc:	f7fe fe3a 	bl	8000e44 <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021d2:	e009      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d4:	f7fe fe36 	bl	8000e44 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d902      	bls.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	74fb      	strb	r3, [r7, #19]
        break;
 80021e6:	e005      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021e8:	4b30      	ldr	r3, [pc, #192]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ef      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d15a      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021fa:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002204:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01e      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	429a      	cmp	r2, r3
 8002214:	d019      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002216:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002220:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002228:	4a1f      	ldr	r2, [pc, #124]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800222a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002232:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002238:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800223a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002242:	4a19      	ldr	r2, [pc, #100]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d016      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe fdf6 	bl	8000e44 <HAL_GetTick>
 8002258:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225a:	e00b      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225c:	f7fe fdf2 	bl	8000e44 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f241 3288 	movw	r2, #5000	; 0x1388
 800226a:	4293      	cmp	r3, r2
 800226c:	d902      	bls.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	74fb      	strb	r3, [r7, #19]
            break;
 8002272:	e006      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0ec      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10b      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002296:	4904      	ldr	r1, [pc, #16]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800229e:	e009      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	74bb      	strb	r3, [r7, #18]
 80022a4:	e006      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022b4:	7c7b      	ldrb	r3, [r7, #17]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d105      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ba:	4b9e      	ldr	r3, [pc, #632]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	4a9d      	ldr	r2, [pc, #628]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022d2:	4b98      	ldr	r3, [pc, #608]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d8:	f023 0203 	bic.w	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4994      	ldr	r1, [pc, #592]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022f4:	4b8f      	ldr	r3, [pc, #572]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fa:	f023 020c 	bic.w	r2, r3, #12
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	498c      	ldr	r1, [pc, #560]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002316:	4b87      	ldr	r3, [pc, #540]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	4983      	ldr	r1, [pc, #524]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002338:	4b7e      	ldr	r3, [pc, #504]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	497b      	ldr	r1, [pc, #492]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800235a:	4b76      	ldr	r3, [pc, #472]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002360:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	4972      	ldr	r1, [pc, #456]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800237c:	4b6d      	ldr	r3, [pc, #436]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002382:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	496a      	ldr	r1, [pc, #424]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800239e:	4b65      	ldr	r3, [pc, #404]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ac:	4961      	ldr	r1, [pc, #388]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c0:	4b5c      	ldr	r3, [pc, #368]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ce:	4959      	ldr	r1, [pc, #356]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023e2:	4b54      	ldr	r3, [pc, #336]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f0:	4950      	ldr	r1, [pc, #320]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002404:	4b4b      	ldr	r3, [pc, #300]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	4948      	ldr	r1, [pc, #288]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002426:	4b43      	ldr	r3, [pc, #268]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002428:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800242c:	f023 0203 	bic.w	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	493f      	ldr	r1, [pc, #252]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d028      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002448:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002456:	4937      	ldr	r1, [pc, #220]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002466:	d106      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002468:	4b32      	ldr	r3, [pc, #200]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a31      	ldr	r2, [pc, #196]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800246e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002472:	60d3      	str	r3, [r2, #12]
 8002474:	e011      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800247e:	d10c      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3304      	adds	r3, #4
 8002484:	2101      	movs	r1, #1
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f8a4 	bl	80025d4 <RCCEx_PLLSAI1_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002496:	7cfb      	ldrb	r3, [r7, #19]
 8002498:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d028      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	491f      	ldr	r1, [pc, #124]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024c4:	d106      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d0:	60d3      	str	r3, [r2, #12]
 80024d2:	e011      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2101      	movs	r1, #1
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 f875 	bl	80025d4 <RCCEx_PLLSAI1_Config>
 80024ea:	4603      	mov	r3, r0
 80024ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d02b      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	4908      	ldr	r1, [pc, #32]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002522:	d109      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a02      	ldr	r2, [pc, #8]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800252a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800252e:	60d3      	str	r3, [r2, #12]
 8002530:	e014      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002540:	d10c      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	2101      	movs	r1, #1
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f843 	bl	80025d4 <RCCEx_PLLSAI1_Config>
 800254e:	4603      	mov	r3, r0
 8002550:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01c      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002568:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002576:	4916      	ldr	r1, [pc, #88]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002586:	d10c      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3304      	adds	r3, #4
 800258c:	2102      	movs	r1, #2
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f820 	bl	80025d4 <RCCEx_PLLSAI1_Config>
 8002594:	4603      	mov	r3, r0
 8002596:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80025b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025bc:	4904      	ldr	r1, [pc, #16]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000

080025d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025e2:	4b74      	ldr	r3, [pc, #464]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d018      	beq.n	8002620 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025ee:	4b71      	ldr	r3, [pc, #452]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0203 	and.w	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d10d      	bne.n	800261a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
       ||
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002606:	4b6b      	ldr	r3, [pc, #428]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
       ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d047      	beq.n	80026aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	e044      	b.n	80026aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d018      	beq.n	800265a <RCCEx_PLLSAI1_Config+0x86>
 8002628:	2b03      	cmp	r3, #3
 800262a:	d825      	bhi.n	8002678 <RCCEx_PLLSAI1_Config+0xa4>
 800262c:	2b01      	cmp	r3, #1
 800262e:	d002      	beq.n	8002636 <RCCEx_PLLSAI1_Config+0x62>
 8002630:	2b02      	cmp	r3, #2
 8002632:	d009      	beq.n	8002648 <RCCEx_PLLSAI1_Config+0x74>
 8002634:	e020      	b.n	8002678 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002636:	4b5f      	ldr	r3, [pc, #380]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d11d      	bne.n	800267e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002646:	e01a      	b.n	800267e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002648:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002650:	2b00      	cmp	r3, #0
 8002652:	d116      	bne.n	8002682 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002658:	e013      	b.n	8002682 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800265a:	4b56      	ldr	r3, [pc, #344]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002666:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002676:	e006      	b.n	8002686 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
      break;
 800267c:	e004      	b.n	8002688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800267e:	bf00      	nop
 8002680:	e002      	b.n	8002688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002682:	bf00      	nop
 8002684:	e000      	b.n	8002688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002686:	bf00      	nop
    }

    if(status == HAL_OK)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10d      	bne.n	80026aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800268e:	4b49      	ldr	r3, [pc, #292]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6819      	ldr	r1, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	430b      	orrs	r3, r1
 80026a4:	4943      	ldr	r1, [pc, #268]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d17c      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026b0:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a3f      	ldr	r2, [pc, #252]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026bc:	f7fe fbc2 	bl	8000e44 <HAL_GetTick>
 80026c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026c2:	e009      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026c4:	f7fe fbbe 	bl	8000e44 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d902      	bls.n	80026d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	73fb      	strb	r3, [r7, #15]
        break;
 80026d6:	e005      	b.n	80026e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026d8:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1ef      	bne.n	80026c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d15f      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d110      	bne.n	8002712 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f0:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80026f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6892      	ldr	r2, [r2, #8]
 8002700:	0211      	lsls	r1, r2, #8
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68d2      	ldr	r2, [r2, #12]
 8002706:	06d2      	lsls	r2, r2, #27
 8002708:	430a      	orrs	r2, r1
 800270a:	492a      	ldr	r1, [pc, #168]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270c:	4313      	orrs	r3, r2
 800270e:	610b      	str	r3, [r1, #16]
 8002710:	e027      	b.n	8002762 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d112      	bne.n	800273e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002718:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002720:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6892      	ldr	r2, [r2, #8]
 8002728:	0211      	lsls	r1, r2, #8
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6912      	ldr	r2, [r2, #16]
 800272e:	0852      	lsrs	r2, r2, #1
 8002730:	3a01      	subs	r2, #1
 8002732:	0552      	lsls	r2, r2, #21
 8002734:	430a      	orrs	r2, r1
 8002736:	491f      	ldr	r1, [pc, #124]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002738:	4313      	orrs	r3, r2
 800273a:	610b      	str	r3, [r1, #16]
 800273c:	e011      	b.n	8002762 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002746:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6892      	ldr	r2, [r2, #8]
 800274e:	0211      	lsls	r1, r2, #8
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6952      	ldr	r2, [r2, #20]
 8002754:	0852      	lsrs	r2, r2, #1
 8002756:	3a01      	subs	r2, #1
 8002758:	0652      	lsls	r2, r2, #25
 800275a:	430a      	orrs	r2, r1
 800275c:	4915      	ldr	r1, [pc, #84]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275e:	4313      	orrs	r3, r2
 8002760:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002762:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002768:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800276c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7fe fb69 	bl	8000e44 <HAL_GetTick>
 8002772:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002774:	e009      	b.n	800278a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002776:	f7fe fb65 	bl	8000e44 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d902      	bls.n	800278a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	73fb      	strb	r3, [r7, #15]
          break;
 8002788:	e005      	b.n	8002796 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0ef      	beq.n	8002776 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4903      	ldr	r1, [pc, #12]	; (80027b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000

080027b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e049      	b.n	800285e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe f9a6 	bl	8000b30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3304      	adds	r3, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f000 fb64 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <HAL_TIM_PWM_Start+0x24>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	bf14      	ite	ne
 8002884:	2301      	movne	r3, #1
 8002886:	2300      	moveq	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	e03c      	b.n	8002906 <HAL_TIM_PWM_Start+0x9e>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b04      	cmp	r3, #4
 8002890:	d109      	bne.n	80028a6 <HAL_TIM_PWM_Start+0x3e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b01      	cmp	r3, #1
 800289c:	bf14      	ite	ne
 800289e:	2301      	movne	r3, #1
 80028a0:	2300      	moveq	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	e02f      	b.n	8002906 <HAL_TIM_PWM_Start+0x9e>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d109      	bne.n	80028c0 <HAL_TIM_PWM_Start+0x58>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	e022      	b.n	8002906 <HAL_TIM_PWM_Start+0x9e>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d109      	bne.n	80028da <HAL_TIM_PWM_Start+0x72>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	bf14      	ite	ne
 80028d2:	2301      	movne	r3, #1
 80028d4:	2300      	moveq	r3, #0
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	e015      	b.n	8002906 <HAL_TIM_PWM_Start+0x9e>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d109      	bne.n	80028f4 <HAL_TIM_PWM_Start+0x8c>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	bf14      	ite	ne
 80028ec:	2301      	movne	r3, #1
 80028ee:	2300      	moveq	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e008      	b.n	8002906 <HAL_TIM_PWM_Start+0x9e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e083      	b.n	8002a16 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d104      	bne.n	800291e <HAL_TIM_PWM_Start+0xb6>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800291c:	e023      	b.n	8002966 <HAL_TIM_PWM_Start+0xfe>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b04      	cmp	r3, #4
 8002922:	d104      	bne.n	800292e <HAL_TIM_PWM_Start+0xc6>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800292c:	e01b      	b.n	8002966 <HAL_TIM_PWM_Start+0xfe>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d104      	bne.n	800293e <HAL_TIM_PWM_Start+0xd6>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800293c:	e013      	b.n	8002966 <HAL_TIM_PWM_Start+0xfe>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b0c      	cmp	r3, #12
 8002942:	d104      	bne.n	800294e <HAL_TIM_PWM_Start+0xe6>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800294c:	e00b      	b.n	8002966 <HAL_TIM_PWM_Start+0xfe>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b10      	cmp	r3, #16
 8002952:	d104      	bne.n	800295e <HAL_TIM_PWM_Start+0xf6>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800295c:	e003      	b.n	8002966 <HAL_TIM_PWM_Start+0xfe>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2201      	movs	r2, #1
 800296c:	6839      	ldr	r1, [r7, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fd94 	bl	800349c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a29      	ldr	r2, [pc, #164]	; (8002a20 <HAL_TIM_PWM_Start+0x1b8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d009      	beq.n	8002992 <HAL_TIM_PWM_Start+0x12a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a28      	ldr	r2, [pc, #160]	; (8002a24 <HAL_TIM_PWM_Start+0x1bc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d004      	beq.n	8002992 <HAL_TIM_PWM_Start+0x12a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a26      	ldr	r2, [pc, #152]	; (8002a28 <HAL_TIM_PWM_Start+0x1c0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_TIM_PWM_Start+0x12e>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_TIM_PWM_Start+0x130>
 8002996:	2300      	movs	r3, #0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d007      	beq.n	80029ac <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1b      	ldr	r2, [pc, #108]	; (8002a20 <HAL_TIM_PWM_Start+0x1b8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00e      	beq.n	80029d4 <HAL_TIM_PWM_Start+0x16c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029be:	d009      	beq.n	80029d4 <HAL_TIM_PWM_Start+0x16c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_TIM_PWM_Start+0x1c4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d004      	beq.n	80029d4 <HAL_TIM_PWM_Start+0x16c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a15      	ldr	r2, [pc, #84]	; (8002a24 <HAL_TIM_PWM_Start+0x1bc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d115      	bne.n	8002a00 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_TIM_PWM_Start+0x1c8>)
 80029dc:	4013      	ands	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d015      	beq.n	8002a12 <HAL_TIM_PWM_Start+0x1aa>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ec:	d011      	beq.n	8002a12 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fe:	e008      	b.n	8002a12 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	e000      	b.n	8002a14 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	40014000 	.word	0x40014000
 8002a28:	40014400 	.word	0x40014400
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	00010007 	.word	0x00010007

08002a34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e097      	b.n	8002b78 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d106      	bne.n	8002a62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7fe f827 	bl	8000ab0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002a78:	f023 0307 	bic.w	r3, r3, #7
 8002a7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3304      	adds	r3, #4
 8002a86:	4619      	mov	r1, r3
 8002a88:	4610      	mov	r0, r2
 8002a8a:	f000 fa1b 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab6:	f023 0303 	bic.w	r3, r3, #3
 8002aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ad4:	f023 030c 	bic.w	r3, r3, #12
 8002ad8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ae0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	021b      	lsls	r3, r3, #8
 8002af0:	4313      	orrs	r3, r2
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	011a      	lsls	r2, r3, #4
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	031b      	lsls	r3, r3, #12
 8002b04:	4313      	orrs	r3, r2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002b12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002b1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	4313      	orrs	r3, r2
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ba0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ba8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d110      	bne.n	8002bd2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bb6:	7b7b      	ldrb	r3, [r7, #13]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d001      	beq.n	8002bc0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e069      	b.n	8002c94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd0:	e031      	b.n	8002c36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d110      	bne.n	8002bfa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bd8:	7bbb      	ldrb	r3, [r7, #14]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d102      	bne.n	8002be4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bde:	7b3b      	ldrb	r3, [r7, #12]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d001      	beq.n	8002be8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e055      	b.n	8002c94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bf8:	e01d      	b.n	8002c36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d108      	bne.n	8002c12 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c00:	7bbb      	ldrb	r3, [r7, #14]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c06:	7b7b      	ldrb	r3, [r7, #13]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d102      	bne.n	8002c12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c0c:	7b3b      	ldrb	r3, [r7, #12]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d001      	beq.n	8002c16 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e03e      	b.n	8002c94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2202      	movs	r2, #2
 8002c22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_TIM_Encoder_Start+0xc4>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d008      	beq.n	8002c54 <HAL_TIM_Encoder_Start+0xd4>
 8002c42:	e00f      	b.n	8002c64 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fc25 	bl	800349c <TIM_CCxChannelCmd>
      break;
 8002c52:	e016      	b.n	8002c82 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2104      	movs	r1, #4
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fc1d 	bl	800349c <TIM_CCxChannelCmd>
      break;
 8002c62:	e00e      	b.n	8002c82 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fc15 	bl	800349c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2201      	movs	r2, #1
 8002c78:	2104      	movs	r1, #4
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fc0e 	bl	800349c <TIM_CCxChannelCmd>
      break;
 8002c80:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0201 	orr.w	r2, r2, #1
 8002c90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e0ff      	b.n	8002eba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b14      	cmp	r3, #20
 8002cc6:	f200 80f0 	bhi.w	8002eaa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002cca:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd0:	08002d25 	.word	0x08002d25
 8002cd4:	08002eab 	.word	0x08002eab
 8002cd8:	08002eab 	.word	0x08002eab
 8002cdc:	08002eab 	.word	0x08002eab
 8002ce0:	08002d65 	.word	0x08002d65
 8002ce4:	08002eab 	.word	0x08002eab
 8002ce8:	08002eab 	.word	0x08002eab
 8002cec:	08002eab 	.word	0x08002eab
 8002cf0:	08002da7 	.word	0x08002da7
 8002cf4:	08002eab 	.word	0x08002eab
 8002cf8:	08002eab 	.word	0x08002eab
 8002cfc:	08002eab 	.word	0x08002eab
 8002d00:	08002de7 	.word	0x08002de7
 8002d04:	08002eab 	.word	0x08002eab
 8002d08:	08002eab 	.word	0x08002eab
 8002d0c:	08002eab 	.word	0x08002eab
 8002d10:	08002e29 	.word	0x08002e29
 8002d14:	08002eab 	.word	0x08002eab
 8002d18:	08002eab 	.word	0x08002eab
 8002d1c:	08002eab 	.word	0x08002eab
 8002d20:	08002e69 	.word	0x08002e69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f938 	bl	8002fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0208 	orr.w	r2, r2, #8
 8002d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0204 	bic.w	r2, r2, #4
 8002d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6999      	ldr	r1, [r3, #24]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	619a      	str	r2, [r3, #24]
      break;
 8002d62:	e0a5      	b.n	8002eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f994 	bl	8003098 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6999      	ldr	r1, [r3, #24]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	021a      	lsls	r2, r3, #8
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	619a      	str	r2, [r3, #24]
      break;
 8002da4:	e084      	b.n	8002eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 f9ed 	bl	800318c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69da      	ldr	r2, [r3, #28]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0208 	orr.w	r2, r2, #8
 8002dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69da      	ldr	r2, [r3, #28]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0204 	bic.w	r2, r2, #4
 8002dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69d9      	ldr	r1, [r3, #28]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	61da      	str	r2, [r3, #28]
      break;
 8002de4:	e064      	b.n	8002eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fa45 	bl	800327c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69da      	ldr	r2, [r3, #28]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69d9      	ldr	r1, [r3, #28]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	021a      	lsls	r2, r3, #8
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	61da      	str	r2, [r3, #28]
      break;
 8002e26:	e043      	b.n	8002eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fa82 	bl	8003338 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0208 	orr.w	r2, r2, #8
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0204 	bic.w	r2, r2, #4
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e66:	e023      	b.n	8002eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 faba 	bl	80033e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	021a      	lsls	r2, r3, #8
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ea8:	e002      	b.n	8002eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
      break;
 8002eae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop

08002ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a2e      	ldr	r2, [pc, #184]	; (8002f90 <TIM_Base_SetConfig+0xcc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d007      	beq.n	8002eec <TIM_Base_SetConfig+0x28>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d003      	beq.n	8002eec <TIM_Base_SetConfig+0x28>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a2b      	ldr	r2, [pc, #172]	; (8002f94 <TIM_Base_SetConfig+0xd0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d108      	bne.n	8002efe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a23      	ldr	r2, [pc, #140]	; (8002f90 <TIM_Base_SetConfig+0xcc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00f      	beq.n	8002f26 <TIM_Base_SetConfig+0x62>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d00b      	beq.n	8002f26 <TIM_Base_SetConfig+0x62>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a20      	ldr	r2, [pc, #128]	; (8002f94 <TIM_Base_SetConfig+0xd0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <TIM_Base_SetConfig+0x62>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1f      	ldr	r2, [pc, #124]	; (8002f98 <TIM_Base_SetConfig+0xd4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <TIM_Base_SetConfig+0x62>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <TIM_Base_SetConfig+0xd8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d108      	bne.n	8002f38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <TIM_Base_SetConfig+0xcc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d007      	beq.n	8002f74 <TIM_Base_SetConfig+0xb0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a0c      	ldr	r2, [pc, #48]	; (8002f98 <TIM_Base_SetConfig+0xd4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <TIM_Base_SetConfig+0xb0>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <TIM_Base_SetConfig+0xd8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d103      	bne.n	8002f7c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	615a      	str	r2, [r3, #20]
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40014000 	.word	0x40014000
 8002f9c:	40014400 	.word	0x40014400

08002fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f023 0201 	bic.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f023 0302 	bic.w	r3, r3, #2
 8002fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a24      	ldr	r2, [pc, #144]	; (800308c <TIM_OC1_SetConfig+0xec>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d007      	beq.n	8003010 <TIM_OC1_SetConfig+0x70>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a23      	ldr	r2, [pc, #140]	; (8003090 <TIM_OC1_SetConfig+0xf0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d003      	beq.n	8003010 <TIM_OC1_SetConfig+0x70>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a22      	ldr	r2, [pc, #136]	; (8003094 <TIM_OC1_SetConfig+0xf4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d10c      	bne.n	800302a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f023 0308 	bic.w	r3, r3, #8
 8003016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f023 0304 	bic.w	r3, r3, #4
 8003028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a17      	ldr	r2, [pc, #92]	; (800308c <TIM_OC1_SetConfig+0xec>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d007      	beq.n	8003042 <TIM_OC1_SetConfig+0xa2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a16      	ldr	r2, [pc, #88]	; (8003090 <TIM_OC1_SetConfig+0xf0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d003      	beq.n	8003042 <TIM_OC1_SetConfig+0xa2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a15      	ldr	r2, [pc, #84]	; (8003094 <TIM_OC1_SetConfig+0xf4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d111      	bne.n	8003066 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	621a      	str	r2, [r3, #32]
}
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40014000 	.word	0x40014000
 8003094:	40014400 	.word	0x40014400

08003098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f023 0210 	bic.w	r2, r3, #16
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f023 0320 	bic.w	r3, r3, #32
 80030e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a22      	ldr	r2, [pc, #136]	; (8003180 <TIM_OC2_SetConfig+0xe8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d10d      	bne.n	8003118 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003116:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a19      	ldr	r2, [pc, #100]	; (8003180 <TIM_OC2_SetConfig+0xe8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d007      	beq.n	8003130 <TIM_OC2_SetConfig+0x98>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a18      	ldr	r2, [pc, #96]	; (8003184 <TIM_OC2_SetConfig+0xec>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_OC2_SetConfig+0x98>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a17      	ldr	r2, [pc, #92]	; (8003188 <TIM_OC2_SetConfig+0xf0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d113      	bne.n	8003158 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800313e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40012c00 	.word	0x40012c00
 8003184:	40014000 	.word	0x40014000
 8003188:	40014400 	.word	0x40014400

0800318c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0303 	bic.w	r3, r3, #3
 80031c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a21      	ldr	r2, [pc, #132]	; (8003270 <TIM_OC3_SetConfig+0xe4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d10d      	bne.n	800320a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a18      	ldr	r2, [pc, #96]	; (8003270 <TIM_OC3_SetConfig+0xe4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <TIM_OC3_SetConfig+0x96>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a17      	ldr	r2, [pc, #92]	; (8003274 <TIM_OC3_SetConfig+0xe8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d003      	beq.n	8003222 <TIM_OC3_SetConfig+0x96>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a16      	ldr	r2, [pc, #88]	; (8003278 <TIM_OC3_SetConfig+0xec>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d113      	bne.n	800324a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	621a      	str	r2, [r3, #32]
}
 8003264:	bf00      	nop
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40014000 	.word	0x40014000
 8003278:	40014400 	.word	0x40014400

0800327c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	031b      	lsls	r3, r3, #12
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a14      	ldr	r2, [pc, #80]	; (800332c <TIM_OC4_SetConfig+0xb0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d007      	beq.n	80032f0 <TIM_OC4_SetConfig+0x74>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a13      	ldr	r2, [pc, #76]	; (8003330 <TIM_OC4_SetConfig+0xb4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d003      	beq.n	80032f0 <TIM_OC4_SetConfig+0x74>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a12      	ldr	r2, [pc, #72]	; (8003334 <TIM_OC4_SetConfig+0xb8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d109      	bne.n	8003304 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	019b      	lsls	r3, r3, #6
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	621a      	str	r2, [r3, #32]
}
 800331e:	bf00      	nop
 8003320:	371c      	adds	r7, #28
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40012c00 	.word	0x40012c00
 8003330:	40014000 	.word	0x40014000
 8003334:	40014400 	.word	0x40014400

08003338 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800337c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a13      	ldr	r2, [pc, #76]	; (80033dc <TIM_OC5_SetConfig+0xa4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d007      	beq.n	80033a2 <TIM_OC5_SetConfig+0x6a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <TIM_OC5_SetConfig+0xa8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d003      	beq.n	80033a2 <TIM_OC5_SetConfig+0x6a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a11      	ldr	r2, [pc, #68]	; (80033e4 <TIM_OC5_SetConfig+0xac>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d109      	bne.n	80033b6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	621a      	str	r2, [r3, #32]
}
 80033d0:	bf00      	nop
 80033d2:	371c      	adds	r7, #28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	40014000 	.word	0x40014000
 80033e4:	40014400 	.word	0x40014400

080033e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800342e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	051b      	lsls	r3, r3, #20
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a14      	ldr	r2, [pc, #80]	; (8003490 <TIM_OC6_SetConfig+0xa8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d007      	beq.n	8003454 <TIM_OC6_SetConfig+0x6c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a13      	ldr	r2, [pc, #76]	; (8003494 <TIM_OC6_SetConfig+0xac>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d003      	beq.n	8003454 <TIM_OC6_SetConfig+0x6c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a12      	ldr	r2, [pc, #72]	; (8003498 <TIM_OC6_SetConfig+0xb0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d109      	bne.n	8003468 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	029b      	lsls	r3, r3, #10
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	621a      	str	r2, [r3, #32]
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40012c00 	.word	0x40012c00
 8003494:	40014000 	.word	0x40014000
 8003498:	40014400 	.word	0x40014400

0800349c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	2201      	movs	r2, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a1a      	ldr	r2, [r3, #32]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	43db      	mvns	r3, r3
 80034be:	401a      	ands	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e054      	b.n	80035aa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a24      	ldr	r2, [pc, #144]	; (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d108      	bne.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003530:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a17      	ldr	r2, [pc, #92]	; (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00e      	beq.n	800357e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003568:	d009      	beq.n	800357e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a13      	ldr	r2, [pc, #76]	; (80035bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d004      	beq.n	800357e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a11      	ldr	r2, [pc, #68]	; (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d10c      	bne.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	4313      	orrs	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40014000 	.word	0x40014000

080035c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e040      	b.n	8003658 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd fafa 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2224      	movs	r2, #36	; 0x24
 80035f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f82c 	bl	8003660 <UART_SetConfig>
 8003608:	4603      	mov	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e022      	b.n	8003658 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 faa6 	bl	8003b6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800362e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800363e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fb2d 	bl	8003cb0 <UART_CheckIdleState>
 8003656:	4603      	mov	r3, r0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003664:	b08a      	sub	sp, #40	; 0x28
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	431a      	orrs	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	431a      	orrs	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	4313      	orrs	r3, r2
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4ba5      	ldr	r3, [pc, #660]	; (8003924 <UART_SetConfig+0x2c4>)
 8003690:	4013      	ands	r3, r2
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003698:	430b      	orrs	r3, r1
 800369a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a9a      	ldr	r2, [pc, #616]	; (8003928 <UART_SetConfig+0x2c8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c8:	4313      	orrs	r3, r2
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036dc:	430a      	orrs	r2, r1
 80036de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a91      	ldr	r2, [pc, #580]	; (800392c <UART_SetConfig+0x2cc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d126      	bne.n	8003738 <UART_SetConfig+0xd8>
 80036ea:	4b91      	ldr	r3, [pc, #580]	; (8003930 <UART_SetConfig+0x2d0>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d81b      	bhi.n	8003730 <UART_SetConfig+0xd0>
 80036f8:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <UART_SetConfig+0xa0>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003711 	.word	0x08003711
 8003704:	08003721 	.word	0x08003721
 8003708:	08003719 	.word	0x08003719
 800370c:	08003729 	.word	0x08003729
 8003710:	2301      	movs	r3, #1
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003716:	e0d6      	b.n	80038c6 <UART_SetConfig+0x266>
 8003718:	2302      	movs	r3, #2
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371e:	e0d2      	b.n	80038c6 <UART_SetConfig+0x266>
 8003720:	2304      	movs	r3, #4
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003726:	e0ce      	b.n	80038c6 <UART_SetConfig+0x266>
 8003728:	2308      	movs	r3, #8
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372e:	e0ca      	b.n	80038c6 <UART_SetConfig+0x266>
 8003730:	2310      	movs	r3, #16
 8003732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003736:	e0c6      	b.n	80038c6 <UART_SetConfig+0x266>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a7d      	ldr	r2, [pc, #500]	; (8003934 <UART_SetConfig+0x2d4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d138      	bne.n	80037b4 <UART_SetConfig+0x154>
 8003742:	4b7b      	ldr	r3, [pc, #492]	; (8003930 <UART_SetConfig+0x2d0>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b0c      	cmp	r3, #12
 800374e:	d82d      	bhi.n	80037ac <UART_SetConfig+0x14c>
 8003750:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <UART_SetConfig+0xf8>)
 8003752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003756:	bf00      	nop
 8003758:	0800378d 	.word	0x0800378d
 800375c:	080037ad 	.word	0x080037ad
 8003760:	080037ad 	.word	0x080037ad
 8003764:	080037ad 	.word	0x080037ad
 8003768:	0800379d 	.word	0x0800379d
 800376c:	080037ad 	.word	0x080037ad
 8003770:	080037ad 	.word	0x080037ad
 8003774:	080037ad 	.word	0x080037ad
 8003778:	08003795 	.word	0x08003795
 800377c:	080037ad 	.word	0x080037ad
 8003780:	080037ad 	.word	0x080037ad
 8003784:	080037ad 	.word	0x080037ad
 8003788:	080037a5 	.word	0x080037a5
 800378c:	2300      	movs	r3, #0
 800378e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003792:	e098      	b.n	80038c6 <UART_SetConfig+0x266>
 8003794:	2302      	movs	r3, #2
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379a:	e094      	b.n	80038c6 <UART_SetConfig+0x266>
 800379c:	2304      	movs	r3, #4
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a2:	e090      	b.n	80038c6 <UART_SetConfig+0x266>
 80037a4:	2308      	movs	r3, #8
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037aa:	e08c      	b.n	80038c6 <UART_SetConfig+0x266>
 80037ac:	2310      	movs	r3, #16
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b2:	e088      	b.n	80038c6 <UART_SetConfig+0x266>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a5f      	ldr	r2, [pc, #380]	; (8003938 <UART_SetConfig+0x2d8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d125      	bne.n	800380a <UART_SetConfig+0x1aa>
 80037be:	4b5c      	ldr	r3, [pc, #368]	; (8003930 <UART_SetConfig+0x2d0>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037c8:	2b30      	cmp	r3, #48	; 0x30
 80037ca:	d016      	beq.n	80037fa <UART_SetConfig+0x19a>
 80037cc:	2b30      	cmp	r3, #48	; 0x30
 80037ce:	d818      	bhi.n	8003802 <UART_SetConfig+0x1a2>
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d00a      	beq.n	80037ea <UART_SetConfig+0x18a>
 80037d4:	2b20      	cmp	r3, #32
 80037d6:	d814      	bhi.n	8003802 <UART_SetConfig+0x1a2>
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <UART_SetConfig+0x182>
 80037dc:	2b10      	cmp	r3, #16
 80037de:	d008      	beq.n	80037f2 <UART_SetConfig+0x192>
 80037e0:	e00f      	b.n	8003802 <UART_SetConfig+0x1a2>
 80037e2:	2300      	movs	r3, #0
 80037e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e8:	e06d      	b.n	80038c6 <UART_SetConfig+0x266>
 80037ea:	2302      	movs	r3, #2
 80037ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f0:	e069      	b.n	80038c6 <UART_SetConfig+0x266>
 80037f2:	2304      	movs	r3, #4
 80037f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f8:	e065      	b.n	80038c6 <UART_SetConfig+0x266>
 80037fa:	2308      	movs	r3, #8
 80037fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003800:	e061      	b.n	80038c6 <UART_SetConfig+0x266>
 8003802:	2310      	movs	r3, #16
 8003804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003808:	e05d      	b.n	80038c6 <UART_SetConfig+0x266>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a4b      	ldr	r2, [pc, #300]	; (800393c <UART_SetConfig+0x2dc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d125      	bne.n	8003860 <UART_SetConfig+0x200>
 8003814:	4b46      	ldr	r3, [pc, #280]	; (8003930 <UART_SetConfig+0x2d0>)
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800381e:	2bc0      	cmp	r3, #192	; 0xc0
 8003820:	d016      	beq.n	8003850 <UART_SetConfig+0x1f0>
 8003822:	2bc0      	cmp	r3, #192	; 0xc0
 8003824:	d818      	bhi.n	8003858 <UART_SetConfig+0x1f8>
 8003826:	2b80      	cmp	r3, #128	; 0x80
 8003828:	d00a      	beq.n	8003840 <UART_SetConfig+0x1e0>
 800382a:	2b80      	cmp	r3, #128	; 0x80
 800382c:	d814      	bhi.n	8003858 <UART_SetConfig+0x1f8>
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <UART_SetConfig+0x1d8>
 8003832:	2b40      	cmp	r3, #64	; 0x40
 8003834:	d008      	beq.n	8003848 <UART_SetConfig+0x1e8>
 8003836:	e00f      	b.n	8003858 <UART_SetConfig+0x1f8>
 8003838:	2300      	movs	r3, #0
 800383a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383e:	e042      	b.n	80038c6 <UART_SetConfig+0x266>
 8003840:	2302      	movs	r3, #2
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003846:	e03e      	b.n	80038c6 <UART_SetConfig+0x266>
 8003848:	2304      	movs	r3, #4
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384e:	e03a      	b.n	80038c6 <UART_SetConfig+0x266>
 8003850:	2308      	movs	r3, #8
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003856:	e036      	b.n	80038c6 <UART_SetConfig+0x266>
 8003858:	2310      	movs	r3, #16
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385e:	e032      	b.n	80038c6 <UART_SetConfig+0x266>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a30      	ldr	r2, [pc, #192]	; (8003928 <UART_SetConfig+0x2c8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d12a      	bne.n	80038c0 <UART_SetConfig+0x260>
 800386a:	4b31      	ldr	r3, [pc, #196]	; (8003930 <UART_SetConfig+0x2d0>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003874:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003878:	d01a      	beq.n	80038b0 <UART_SetConfig+0x250>
 800387a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800387e:	d81b      	bhi.n	80038b8 <UART_SetConfig+0x258>
 8003880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003884:	d00c      	beq.n	80038a0 <UART_SetConfig+0x240>
 8003886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800388a:	d815      	bhi.n	80038b8 <UART_SetConfig+0x258>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <UART_SetConfig+0x238>
 8003890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003894:	d008      	beq.n	80038a8 <UART_SetConfig+0x248>
 8003896:	e00f      	b.n	80038b8 <UART_SetConfig+0x258>
 8003898:	2300      	movs	r3, #0
 800389a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389e:	e012      	b.n	80038c6 <UART_SetConfig+0x266>
 80038a0:	2302      	movs	r3, #2
 80038a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a6:	e00e      	b.n	80038c6 <UART_SetConfig+0x266>
 80038a8:	2304      	movs	r3, #4
 80038aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ae:	e00a      	b.n	80038c6 <UART_SetConfig+0x266>
 80038b0:	2308      	movs	r3, #8
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b6:	e006      	b.n	80038c6 <UART_SetConfig+0x266>
 80038b8:	2310      	movs	r3, #16
 80038ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038be:	e002      	b.n	80038c6 <UART_SetConfig+0x266>
 80038c0:	2310      	movs	r3, #16
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a17      	ldr	r2, [pc, #92]	; (8003928 <UART_SetConfig+0x2c8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	f040 808b 	bne.w	80039e8 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d834      	bhi.n	8003944 <UART_SetConfig+0x2e4>
 80038da:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <UART_SetConfig+0x280>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	08003905 	.word	0x08003905
 80038e4:	08003945 	.word	0x08003945
 80038e8:	0800390d 	.word	0x0800390d
 80038ec:	08003945 	.word	0x08003945
 80038f0:	08003913 	.word	0x08003913
 80038f4:	08003945 	.word	0x08003945
 80038f8:	08003945 	.word	0x08003945
 80038fc:	08003945 	.word	0x08003945
 8003900:	0800391b 	.word	0x0800391b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003904:	f7fe fb6e 	bl	8001fe4 <HAL_RCC_GetPCLK1Freq>
 8003908:	61f8      	str	r0, [r7, #28]
        break;
 800390a:	e021      	b.n	8003950 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <UART_SetConfig+0x2e0>)
 800390e:	61fb      	str	r3, [r7, #28]
        break;
 8003910:	e01e      	b.n	8003950 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003912:	f7fe facf 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8003916:	61f8      	str	r0, [r7, #28]
        break;
 8003918:	e01a      	b.n	8003950 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800391a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391e:	61fb      	str	r3, [r7, #28]
        break;
 8003920:	e016      	b.n	8003950 <UART_SetConfig+0x2f0>
 8003922:	bf00      	nop
 8003924:	efff69f3 	.word	0xefff69f3
 8003928:	40008000 	.word	0x40008000
 800392c:	40013800 	.word	0x40013800
 8003930:	40021000 	.word	0x40021000
 8003934:	40004400 	.word	0x40004400
 8003938:	40004800 	.word	0x40004800
 800393c:	40004c00 	.word	0x40004c00
 8003940:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800394e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 80fa 	beq.w	8003b4c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	429a      	cmp	r2, r3
 8003966:	d305      	bcc.n	8003974 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	429a      	cmp	r2, r3
 8003972:	d903      	bls.n	800397c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800397a:	e0e7      	b.n	8003b4c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2200      	movs	r2, #0
 8003980:	461c      	mov	r4, r3
 8003982:	4615      	mov	r5, r2
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	022b      	lsls	r3, r5, #8
 800398e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003992:	0222      	lsls	r2, r4, #8
 8003994:	68f9      	ldr	r1, [r7, #12]
 8003996:	6849      	ldr	r1, [r1, #4]
 8003998:	0849      	lsrs	r1, r1, #1
 800399a:	2000      	movs	r0, #0
 800399c:	4688      	mov	r8, r1
 800399e:	4681      	mov	r9, r0
 80039a0:	eb12 0a08 	adds.w	sl, r2, r8
 80039a4:	eb43 0b09 	adc.w	fp, r3, r9
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039b6:	4650      	mov	r0, sl
 80039b8:	4659      	mov	r1, fp
 80039ba:	f7fc fc0b 	bl	80001d4 <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4613      	mov	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039cc:	d308      	bcc.n	80039e0 <UART_SetConfig+0x380>
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d4:	d204      	bcs.n	80039e0 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	e0b5      	b.n	8003b4c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039e6:	e0b1      	b.n	8003b4c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f0:	d15d      	bne.n	8003aae <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80039f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d827      	bhi.n	8003a4a <UART_SetConfig+0x3ea>
 80039fa:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <UART_SetConfig+0x3a0>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a2d 	.word	0x08003a2d
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003a4b 	.word	0x08003a4b
 8003a10:	08003a3b 	.word	0x08003a3b
 8003a14:	08003a4b 	.word	0x08003a4b
 8003a18:	08003a4b 	.word	0x08003a4b
 8003a1c:	08003a4b 	.word	0x08003a4b
 8003a20:	08003a43 	.word	0x08003a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7fe fade 	bl	8001fe4 <HAL_RCC_GetPCLK1Freq>
 8003a28:	61f8      	str	r0, [r7, #28]
        break;
 8003a2a:	e014      	b.n	8003a56 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a2c:	f7fe faf0 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8003a30:	61f8      	str	r0, [r7, #28]
        break;
 8003a32:	e010      	b.n	8003a56 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a34:	4b4c      	ldr	r3, [pc, #304]	; (8003b68 <UART_SetConfig+0x508>)
 8003a36:	61fb      	str	r3, [r7, #28]
        break;
 8003a38:	e00d      	b.n	8003a56 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3a:	f7fe fa3b 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8003a3e:	61f8      	str	r0, [r7, #28]
        break;
 8003a40:	e009      	b.n	8003a56 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a46:	61fb      	str	r3, [r7, #28]
        break;
 8003a48:	e005      	b.n	8003a56 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d077      	beq.n	8003b4c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005a      	lsls	r2, r3, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	085b      	lsrs	r3, r3, #1
 8003a66:	441a      	add	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b0f      	cmp	r3, #15
 8003a76:	d916      	bls.n	8003aa6 <UART_SetConfig+0x446>
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7e:	d212      	bcs.n	8003aa6 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f023 030f 	bic.w	r3, r3, #15
 8003a88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	8afb      	ldrh	r3, [r7, #22]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	8afa      	ldrh	r2, [r7, #22]
 8003aa2:	60da      	str	r2, [r3, #12]
 8003aa4:	e052      	b.n	8003b4c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003aac:	e04e      	b.n	8003b4c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d827      	bhi.n	8003b06 <UART_SetConfig+0x4a6>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <UART_SetConfig+0x45c>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003ae1 	.word	0x08003ae1
 8003ac0:	08003ae9 	.word	0x08003ae9
 8003ac4:	08003af1 	.word	0x08003af1
 8003ac8:	08003b07 	.word	0x08003b07
 8003acc:	08003af7 	.word	0x08003af7
 8003ad0:	08003b07 	.word	0x08003b07
 8003ad4:	08003b07 	.word	0x08003b07
 8003ad8:	08003b07 	.word	0x08003b07
 8003adc:	08003aff 	.word	0x08003aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae0:	f7fe fa80 	bl	8001fe4 <HAL_RCC_GetPCLK1Freq>
 8003ae4:	61f8      	str	r0, [r7, #28]
        break;
 8003ae6:	e014      	b.n	8003b12 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae8:	f7fe fa92 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8003aec:	61f8      	str	r0, [r7, #28]
        break;
 8003aee:	e010      	b.n	8003b12 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <UART_SetConfig+0x508>)
 8003af2:	61fb      	str	r3, [r7, #28]
        break;
 8003af4:	e00d      	b.n	8003b12 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af6:	f7fe f9dd 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8003afa:	61f8      	str	r0, [r7, #28]
        break;
 8003afc:	e009      	b.n	8003b12 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b02:	61fb      	str	r3, [r7, #28]
        break;
 8003b04:	e005      	b.n	8003b12 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b10:	bf00      	nop
    }

    if (pclk != 0U)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d019      	beq.n	8003b4c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	085a      	lsrs	r2, r3, #1
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	441a      	add	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b0f      	cmp	r3, #15
 8003b30:	d909      	bls.n	8003b46 <UART_SetConfig+0x4e6>
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b38:	d205      	bcs.n	8003b46 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60da      	str	r2, [r3, #12]
 8003b44:	e002      	b.n	8003b4c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3728      	adds	r7, #40	; 0x28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b66:	bf00      	nop
 8003b68:	00f42400 	.word	0x00f42400

08003b6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01a      	beq.n	8003c82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6a:	d10a      	bne.n	8003c82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cc0:	f7fd f8c0 	bl	8000e44 <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d10e      	bne.n	8003cf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f82d 	bl	8003d42 <UART_WaitOnFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e023      	b.n	8003d3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d10e      	bne.n	8003d1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f817 	bl	8003d42 <UART_WaitOnFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e00d      	b.n	8003d3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b09c      	sub	sp, #112	; 0x70
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d52:	e0a5      	b.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	f000 80a1 	beq.w	8003ea0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5e:	f7fd f871 	bl	8000e44 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d302      	bcc.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d13e      	bne.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d88:	667b      	str	r3, [r7, #100]	; 0x64
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e6      	bne.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3308      	adds	r3, #8
 8003dac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003dc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e5      	bne.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e067      	b.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d04f      	beq.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e0e:	d147      	bne.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e18:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
 8003e3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e6      	bne.n	8003e1a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e6c:	623a      	str	r2, [r7, #32]
 8003e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	69f9      	ldr	r1, [r7, #28]
 8003e72:	6a3a      	ldr	r2, [r7, #32]
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e5      	bne.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e010      	b.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69da      	ldr	r2, [r3, #28]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	f43f af4a 	beq.w	8003d54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3770      	adds	r7, #112	; 0x70
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <__libc_init_array>:
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	4d0d      	ldr	r5, [pc, #52]	; (8003f04 <__libc_init_array+0x38>)
 8003ed0:	4c0d      	ldr	r4, [pc, #52]	; (8003f08 <__libc_init_array+0x3c>)
 8003ed2:	1b64      	subs	r4, r4, r5
 8003ed4:	10a4      	asrs	r4, r4, #2
 8003ed6:	2600      	movs	r6, #0
 8003ed8:	42a6      	cmp	r6, r4
 8003eda:	d109      	bne.n	8003ef0 <__libc_init_array+0x24>
 8003edc:	4d0b      	ldr	r5, [pc, #44]	; (8003f0c <__libc_init_array+0x40>)
 8003ede:	4c0c      	ldr	r4, [pc, #48]	; (8003f10 <__libc_init_array+0x44>)
 8003ee0:	f000 f820 	bl	8003f24 <_init>
 8003ee4:	1b64      	subs	r4, r4, r5
 8003ee6:	10a4      	asrs	r4, r4, #2
 8003ee8:	2600      	movs	r6, #0
 8003eea:	42a6      	cmp	r6, r4
 8003eec:	d105      	bne.n	8003efa <__libc_init_array+0x2e>
 8003eee:	bd70      	pop	{r4, r5, r6, pc}
 8003ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef4:	4798      	blx	r3
 8003ef6:	3601      	adds	r6, #1
 8003ef8:	e7ee      	b.n	8003ed8 <__libc_init_array+0xc>
 8003efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003efe:	4798      	blx	r3
 8003f00:	3601      	adds	r6, #1
 8003f02:	e7f2      	b.n	8003eea <__libc_init_array+0x1e>
 8003f04:	08003f8c 	.word	0x08003f8c
 8003f08:	08003f8c 	.word	0x08003f8c
 8003f0c:	08003f8c 	.word	0x08003f8c
 8003f10:	08003f90 	.word	0x08003f90

08003f14 <memset>:
 8003f14:	4402      	add	r2, r0
 8003f16:	4603      	mov	r3, r0
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d100      	bne.n	8003f1e <memset+0xa>
 8003f1c:	4770      	bx	lr
 8003f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f22:	e7f9      	b.n	8003f18 <memset+0x4>

08003f24 <_init>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr

08003f30 <_fini>:
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	bf00      	nop
 8003f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f36:	bc08      	pop	{r3}
 8003f38:	469e      	mov	lr, r3
 8003f3a:	4770      	bx	lr
