
proiet-motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004870  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08004a10  08004a10  00014a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b5c  08004b5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b5c  08004b5c  00014b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b64  08004b64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000070  08004bdc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08004bdc  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe5d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb6  00000000  00000000  0002fefd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00031db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00032c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d5c1  00000000  00000000  00033a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004a1c  00000000  00000000  00041011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00045a2d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000041b4  00000000  00000000  00045a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080049f8 	.word	0x080049f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080049f8 	.word	0x080049f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fc81 	bl	8000ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f857 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f985 	bl	80008b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 f953 	bl	8000850 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005aa:	f000 f8f7 	bl	800079c <MX_TIM3_Init>
  MX_TIM2_Init();
 80005ae:	f000 f8a1 	bl	80006f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005b2:	2100      	movs	r1, #0
 80005b4:	4820      	ldr	r0, [pc, #128]	; (8000638 <main+0xa4>)
 80005b6:	f002 f9b9 	bl	800292c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80005ba:	213c      	movs	r1, #60	; 0x3c
 80005bc:	481f      	ldr	r0, [pc, #124]	; (800063c <main+0xa8>)
 80005be:	f002 fb41 	bl	8002c44 <HAL_TIM_Encoder_Start>
  mot_init();
 80005c2:	f000 fa1b 	bl	80009fc <mot_init>

  mot_set(0xFFFF, MOT_FWD);
 80005c6:	2101      	movs	r1, #1
 80005c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005cc:	f000 fa98 	bl	8000b00 <mot_set>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // speed measurement
	  uint32_t timer1 = uwTick + 5;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <main+0xac>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3305      	adds	r3, #5
 80005d6:	60fb      	str	r3, [r7, #12]
	  uint32_t ctr1, ctr2;
	  while(uwTick != timer1);
 80005d8:	bf00      	nop
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <main+0xac>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d1fa      	bne.n	80005da <main+0x46>
	  ctr1 = mot_get_pos();
 80005e4:	f000 fa9d 	bl	8000b22 <mot_get_pos>
 80005e8:	60b8      	str	r0, [r7, #8]
	  timer1 += 100;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3364      	adds	r3, #100	; 0x64
 80005ee:	60fb      	str	r3, [r7, #12]
	  while(uwTick != timer1);
 80005f0:	bf00      	nop
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <main+0xac>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d1fa      	bne.n	80005f2 <main+0x5e>
	  ctr2 = mot_get_pos();
 80005fc:	f000 fa91 	bl	8000b22 <mot_get_pos>
 8000600:	6078      	str	r0, [r7, #4]
	  int vel = ctr2 - ctr1;
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	603b      	str	r3, [r7, #0]
	  sprintf(printf_buf, "motor velocity %dRPS %dRPM\n\r", vel, vel*60);
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	4613      	mov	r3, r2
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	490b      	ldr	r1, [pc, #44]	; (8000644 <main+0xb0>)
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <main+0xb4>)
 800061a:	f003 fd7f 	bl	800411c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)printf_buf, strlen(printf_buf), 1000);
 800061e:	480a      	ldr	r0, [pc, #40]	; (8000648 <main+0xb4>)
 8000620:	f7ff fdde 	bl	80001e0 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062c:	4906      	ldr	r1, [pc, #24]	; (8000648 <main+0xb4>)
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <main+0xb8>)
 8000630:	f003 f878 	bl	8003724 <HAL_UART_Transmit>
  {
 8000634:	e7cc      	b.n	80005d0 <main+0x3c>
 8000636:	bf00      	nop
 8000638:	200000d8 	.word	0x200000d8
 800063c:	2000008c 	.word	0x2000008c
 8000640:	200002bc 	.word	0x200002bc
 8000644:	08004ac0 	.word	0x08004ac0
 8000648:	200001a8 	.word	0x200001a8
 800064c:	20000124 	.word	0x20000124

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	; 0x58
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2244      	movs	r2, #68	; 0x44
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fd54 	bl	800410c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000672:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000676:	f000 ff15 	bl	80014a4 <HAL_PWREx_ControlVoltageScaling>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000680:	f000 f9b6 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800068c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068e:	2340      	movs	r3, #64	; 0x40
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000696:	2302      	movs	r3, #2
 8000698:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800069e:	230a      	movs	r3, #10
 80006a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006a2:	2307      	movs	r3, #7
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ff4c 	bl	8001550 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006be:	f000 f997 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2303      	movs	r3, #3
 80006c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	2104      	movs	r1, #4
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fb4c 	bl	8001d78 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006e6:	f000 f983 	bl	80009f0 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3758      	adds	r7, #88	; 0x58
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	; 0x30
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2224      	movs	r2, #36	; 0x24
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fd02 	bl	800410c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_TIM2_Init+0xa4>)
 8000714:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000718:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_TIM2_Init+0xa4>)
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_TIM2_Init+0xa4>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_TIM2_Init+0xa4>)
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_TIM2_Init+0xa4>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_TIM2_Init+0xa4>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800073a:	2301      	movs	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000742:	2301      	movs	r3, #1
 8000744:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000752:	2301      	movs	r3, #1
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4619      	mov	r1, r3
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_TIM2_Init+0xa4>)
 8000766:	f002 f9c7 	bl	8002af8 <HAL_TIM_Encoder_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000770:	f000 f93e 	bl	80009f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_TIM2_Init+0xa4>)
 8000782:	f002 ff13 	bl	80035ac <HAL_TIMEx_MasterConfigSynchronization>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800078c:	f000 f930 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3730      	adds	r7, #48	; 0x30
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000008c 	.word	0x2000008c

0800079c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007c0:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_TIM3_Init+0xac>)
 80007c2:	4a22      	ldr	r2, [pc, #136]	; (800084c <MX_TIM3_Init+0xb0>)
 80007c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_TIM3_Init+0xac>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_TIM3_Init+0xac>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_TIM3_Init+0xac>)
 80007d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_TIM3_Init+0xac>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_TIM3_Init+0xac>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007e6:	4818      	ldr	r0, [pc, #96]	; (8000848 <MX_TIM3_Init+0xac>)
 80007e8:	f002 f848 	bl	800287c <HAL_TIM_PWM_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80007f2:	f000 f8fd 	bl	80009f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4810      	ldr	r0, [pc, #64]	; (8000848 <MX_TIM3_Init+0xac>)
 8000806:	f002 fed1 	bl	80035ac <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000810:	f000 f8ee 	bl	80009f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000814:	2360      	movs	r3, #96	; 0x60
 8000816:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	4619      	mov	r1, r3
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <MX_TIM3_Init+0xac>)
 800082c:	f002 fa98 	bl	8002d60 <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000836:	f000 f8db 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <MX_TIM3_Init+0xac>)
 800083c:	f000 fa00 	bl	8000c40 <HAL_TIM_MspPostInit>

}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000d8 	.word	0x200000d8
 800084c:	40000400 	.word	0x40000400

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <MX_USART2_UART_Init+0x5c>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000894:	f002 fef8 	bl	8003688 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800089e:	f000 f8a7 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000124 	.word	0x20000124
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a46      	ldr	r2, [pc, #280]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b44      	ldr	r3, [pc, #272]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b41      	ldr	r3, [pc, #260]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a40      	ldr	r2, [pc, #256]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b3b      	ldr	r3, [pc, #236]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a3a      	ldr	r2, [pc, #232]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <MX_GPIO_Init+0x134>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <MX_GPIO_Init+0x134>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a34      	ldr	r2, [pc, #208]	; (80009e4 <MX_GPIO_Init+0x134>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <MX_GPIO_Init+0x134>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	21b0      	movs	r1, #176	; 0xb0
 800092a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092e:	f000 fd93 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000938:	482b      	ldr	r0, [pc, #172]	; (80009e8 <MX_GPIO_Init+0x138>)
 800093a:	f000 fd8d 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000944:	4829      	ldr	r0, [pc, #164]	; (80009ec <MX_GPIO_Init+0x13c>)
 8000946:	f000 fd87 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000950:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4822      	ldr	r0, [pc, #136]	; (80009ec <MX_GPIO_Init+0x13c>)
 8000962:	f000 fbff 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000966:	23b0      	movs	r3, #176	; 0xb0
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000980:	f000 fbf0 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000984:	2340      	movs	r3, #64	; 0x40
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098c:	2301      	movs	r3, #1
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f000 fbe3 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800099e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	480c      	ldr	r0, [pc, #48]	; (80009e8 <MX_GPIO_Init+0x138>)
 80009b8:	f000 fbd4 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80009bc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_GPIO_Init+0x13c>)
 80009d6:	f000 fbc5 	bl	8001164 <HAL_GPIO_Init>

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000400 	.word	0x48000400
 80009ec:	48000800 	.word	0x48000800

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <mot_init>:
static int mot_dir;
static uint16_t mot_pwm;
static uint32_t mot_pos;
static uint32_t mot_last_sample_time;

void mot_init(void){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	mot_dir = MOT_FWD;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <mot_init+0x38>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
	mot_pwm = 0;
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <mot_init+0x3c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	801a      	strh	r2, [r3, #0]
	mot_pos = TIM2->CNT;
 8000a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <mot_init+0x40>)
 8000a14:	6013      	str	r3, [r2, #0]
	mot_last_sample_time = HAL_GetTick();
 8000a16:	f000 fab3 	bl	8000f80 <HAL_GetTick>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <mot_init+0x44>)
 8000a1e:	6013      	str	r3, [r2, #0]
	mot_set(mot_pwm, mot_dir);
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <mot_init+0x3c>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	4a03      	ldr	r2, [pc, #12]	; (8000a34 <mot_init+0x38>)
 8000a26:	6812      	ldr	r2, [r2, #0]
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f868 	bl	8000b00 <mot_set>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200002a8 	.word	0x200002a8
 8000a38:	200002ac 	.word	0x200002ac
 8000a3c:	200002b0 	.word	0x200002b0
 8000a40:	200002b4 	.word	0x200002b4

08000a44 <mot_set_dir>:

void mot_set_dir(int dir){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	switch(dir){
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d00a      	beq.n	8000a68 <mot_set_dir+0x24>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	dc34      	bgt.n	8000ac2 <mot_set_dir+0x7e>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5e:	d012      	beq.n	8000a86 <mot_set_dir+0x42>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d01e      	beq.n	8000aa4 <mot_set_dir+0x60>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
			mot_dir = dir;
			break;
	}
}
 8000a66:	e02c      	b.n	8000ac2 <mot_set_dir+0x7e>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4817      	ldr	r0, [pc, #92]	; (8000acc <mot_set_dir+0x88>)
 8000a6e:	f000 fcf3 	bl	8001458 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a78:	4814      	ldr	r0, [pc, #80]	; (8000acc <mot_set_dir+0x88>)
 8000a7a:	f000 fced 	bl	8001458 <HAL_GPIO_WritePin>
			mot_dir = dir;
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <mot_set_dir+0x8c>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6013      	str	r3, [r2, #0]
			break;
 8000a84:	e01d      	b.n	8000ac2 <mot_set_dir+0x7e>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	4810      	ldr	r0, [pc, #64]	; (8000acc <mot_set_dir+0x88>)
 8000a8c:	f000 fce4 	bl	8001458 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <mot_set_dir+0x88>)
 8000a98:	f000 fcde 	bl	8001458 <HAL_GPIO_WritePin>
			mot_dir = dir;
 8000a9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <mot_set_dir+0x8c>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6013      	str	r3, [r2, #0]
			break;
 8000aa2:	e00e      	b.n	8000ac2 <mot_set_dir+0x7e>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <mot_set_dir+0x88>)
 8000aaa:	f000 fcd5 	bl	8001458 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <mot_set_dir+0x88>)
 8000ab6:	f000 fccf 	bl	8001458 <HAL_GPIO_WritePin>
			mot_dir = dir;
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <mot_set_dir+0x8c>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]
			break;
 8000ac0:	bf00      	nop
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	48000800 	.word	0x48000800
 8000ad0:	200002a8 	.word	0x200002a8

08000ad4 <mot_set_pwm>:

void mot_set_pwm(uint16_t pwm){
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	80fb      	strh	r3, [r7, #6]
	TIM3->CCR1 = pwm;
 8000ade:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <mot_set_pwm+0x24>)
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	6353      	str	r3, [r2, #52]	; 0x34
	mot_pwm = pwm;
 8000ae4:	4a05      	ldr	r2, [pc, #20]	; (8000afc <mot_set_pwm+0x28>)
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	8013      	strh	r3, [r2, #0]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40000400 	.word	0x40000400
 8000afc:	200002ac 	.word	0x200002ac

08000b00 <mot_set>:

void mot_set(uint16_t pwm, int dir){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	80fb      	strh	r3, [r7, #6]
	mot_set_dir(dir);
 8000b0c:	6838      	ldr	r0, [r7, #0]
 8000b0e:	f7ff ff99 	bl	8000a44 <mot_set_dir>
	mot_set_pwm(pwm);
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ffdd 	bl	8000ad4 <mot_set_pwm>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <mot_get_pos>:
		case MOT_BACKWARD: mot_dir = MOT_FORWARD; break;
	}
	mot_set_dir(mot_dir);
}

uint32_t mot_get_pos(){
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 8000b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_MspInit+0x44>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_MspInit+0x44>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6613      	str	r3, [r2, #96]	; 0x60
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_MspInit+0x44>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_MspInit+0x44>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_MspInit+0x44>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6593      	str	r3, [r2, #88]	; 0x58
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_MspInit+0x44>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba0:	d128      	bne.n	8000bf4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6593      	str	r3, [r2, #88]	; 0x58
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000be2:	2301      	movs	r3, #1
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f000 fab8 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_TIM_PWM_MspInit+0x38>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d10b      	bne.n	8000c2a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_TIM_PWM_MspInit+0x3c>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <HAL_TIM_PWM_MspInit+0x3c>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <HAL_TIM_PWM_MspInit+0x3c>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40000400 	.word	0x40000400
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a11      	ldr	r2, [pc, #68]	; (8000ca4 <HAL_TIM_MspPostInit+0x64>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d11b      	bne.n	8000c9a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_TIM_MspPostInit+0x68>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	4a10      	ldr	r2, [pc, #64]	; (8000ca8 <HAL_TIM_MspPostInit+0x68>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_TIM_MspPostInit+0x68>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c7a:	2340      	movs	r3, #64	; 0x40
 8000c7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_TIM_MspPostInit+0x6c>)
 8000c96:	f000 fa65 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3720      	adds	r7, #32
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40000400 	.word	0x40000400
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	48000800 	.word	0x48000800

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0a4      	sub	sp, #144	; 0x90
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2268      	movs	r2, #104	; 0x68
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f003 fa1b 	bl	800410c <memset>
  if(huart->Instance==USART2)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a21      	ldr	r2, [pc, #132]	; (8000d60 <HAL_UART_MspInit+0xb0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d13a      	bne.n	8000d56 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4618      	mov	r0, r3
 8000cee:	f001 fa67 	bl	80021c0 <HAL_RCCEx_PeriphCLKConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cf8:	f7ff fe7a 	bl	80009f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_UART_MspInit+0xb4>)
 8000cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d00:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <HAL_UART_MspInit+0xb4>)
 8000d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d06:	6593      	str	r3, [r2, #88]	; 0x58
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_UART_MspInit+0xb4>)
 8000d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <HAL_UART_MspInit+0xb4>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d18:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <HAL_UART_MspInit+0xb4>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_UART_MspInit+0xb4>)
 8000d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d42:	2307      	movs	r3, #7
 8000d44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d52:	f000 fa07 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3790      	adds	r7, #144	; 0x90
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40004400 	.word	0x40004400
 8000d64:	40021000 	.word	0x40021000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f8d0 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <_sbrk+0x5c>)
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <_sbrk+0x60>)
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_sbrk+0x64>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <_sbrk+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dec:	f003 f964 	bl	80040b8 <__errno>
 8000df0:	4603      	mov	r3, r0
 8000df2:	220c      	movs	r2, #12
 8000df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20028000 	.word	0x20028000
 8000e1c:	00000400 	.word	0x00000400
 8000e20:	200002b8 	.word	0x200002b8
 8000e24:	200002d0 	.word	0x200002d0

08000e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SystemInit+0x20>)
 8000e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <SystemInit+0x20>)
 8000e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e50:	f7ff ffea 	bl	8000e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e56:	490d      	ldr	r1, [pc, #52]	; (8000e8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <LoopForever+0xe>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e6c:	4c0a      	ldr	r4, [pc, #40]	; (8000e98 <LoopForever+0x16>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f003 f923 	bl	80040c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e7e:	f7ff fb89 	bl	8000594 <main>

08000e82 <LoopForever>:

LoopForever:
    b LoopForever
 8000e82:	e7fe      	b.n	8000e82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e84:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e90:	08004b6c 	.word	0x08004b6c
  ldr r2, =_sbss
 8000e94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e98:	200002d0 	.word	0x200002d0

08000e9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC1_IRQHandler>
	...

08000ea0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_Init+0x3c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <HAL_Init+0x3c>)
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f000 f920 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 f80f 	bl	8000ee0 <HAL_InitTick>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	e001      	b.n	8000ed2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ece:	f7ff fe33 	bl	8000b38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40022000 	.word	0x40022000

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_InitTick+0x6c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d023      	beq.n	8000f3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_InitTick+0x70>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <HAL_InitTick+0x6c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f91d 	bl	800114a <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10f      	bne.n	8000f36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d809      	bhi.n	8000f30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f000 f8f5 	bl	8001112 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_InitTick+0x74>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e007      	b.n	8000f40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	e004      	b.n	8000f40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	e001      	b.n	8000f40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	200002bc 	.word	0x200002bc

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200002bc 	.word	0x200002bc

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f7ff ff8e 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff47 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff5c 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff8e 	bl	8001050 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5d 	bl	8000ffc <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffb0 	bl	80010b8 <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	e154      	b.n	800141e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8146 	beq.w	8001418 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x40>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 0201 	and.w	r2, r3, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b03      	cmp	r3, #3
 8001210:	d017      	beq.n	8001242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0203 	and.w	r2, r3, #3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80a0 	beq.w	8001418 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d8:	4b58      	ldr	r3, [pc, #352]	; (800143c <HAL_GPIO_Init+0x2d8>)
 80012da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012dc:	4a57      	ldr	r2, [pc, #348]	; (800143c <HAL_GPIO_Init+0x2d8>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6613      	str	r3, [r2, #96]	; 0x60
 80012e4:	4b55      	ldr	r3, [pc, #340]	; (800143c <HAL_GPIO_Init+0x2d8>)
 80012e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f0:	4a53      	ldr	r2, [pc, #332]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800131a:	d019      	beq.n	8001350 <HAL_GPIO_Init+0x1ec>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a49      	ldr	r2, [pc, #292]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d013      	beq.n	800134c <HAL_GPIO_Init+0x1e8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a48      	ldr	r2, [pc, #288]	; (8001448 <HAL_GPIO_Init+0x2e4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d00d      	beq.n	8001348 <HAL_GPIO_Init+0x1e4>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a47      	ldr	r2, [pc, #284]	; (800144c <HAL_GPIO_Init+0x2e8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d007      	beq.n	8001344 <HAL_GPIO_Init+0x1e0>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a46      	ldr	r2, [pc, #280]	; (8001450 <HAL_GPIO_Init+0x2ec>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d101      	bne.n	8001340 <HAL_GPIO_Init+0x1dc>
 800133c:	2304      	movs	r3, #4
 800133e:	e008      	b.n	8001352 <HAL_GPIO_Init+0x1ee>
 8001340:	2307      	movs	r3, #7
 8001342:	e006      	b.n	8001352 <HAL_GPIO_Init+0x1ee>
 8001344:	2303      	movs	r3, #3
 8001346:	e004      	b.n	8001352 <HAL_GPIO_Init+0x1ee>
 8001348:	2302      	movs	r3, #2
 800134a:	e002      	b.n	8001352 <HAL_GPIO_Init+0x1ee>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <HAL_GPIO_Init+0x1ee>
 8001350:	2300      	movs	r3, #0
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	f002 0203 	and.w	r2, r2, #3
 8001358:	0092      	lsls	r2, r2, #2
 800135a:	4093      	lsls	r3, r2
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001362:	4937      	ldr	r1, [pc, #220]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001370:	4b38      	ldr	r3, [pc, #224]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001394:	4a2f      	ldr	r2, [pc, #188]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800139a:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013be:	4a25      	ldr	r2, [pc, #148]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013e8:	4a1a      	ldr	r2, [pc, #104]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001412:	4a10      	ldr	r2, [pc, #64]	; (8001454 <HAL_GPIO_Init+0x2f0>)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	f47f aea3 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	371c      	adds	r7, #28
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40021000 	.word	0x40021000
 8001440:	40010000 	.word	0x40010000
 8001444:	48000400 	.word	0x48000400
 8001448:	48000800 	.word	0x48000800
 800144c:	48000c00 	.word	0x48000c00
 8001450:	48001000 	.word	0x48001000
 8001454:	40010400 	.word	0x40010400

08001458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
 8001464:	4613      	mov	r3, r2
 8001466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001468:	787b      	ldrb	r3, [r7, #1]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001474:	e002      	b.n	800147c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40007000 	.word	0x40007000

080014a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014b2:	d130      	bne.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014c0:	d038      	beq.n	8001534 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ca:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014d2:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2232      	movs	r2, #50	; 0x32
 80014d8:	fb02 f303 	mul.w	r3, r2, r3
 80014dc:	4a1b      	ldr	r2, [pc, #108]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014de:	fba2 2303 	umull	r2, r3, r2, r3
 80014e2:	0c9b      	lsrs	r3, r3, #18
 80014e4:	3301      	adds	r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014e8:	e002      	b.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014fc:	d102      	bne.n	8001504 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f2      	bne.n	80014ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001510:	d110      	bne.n	8001534 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e00f      	b.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800151e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001522:	d007      	beq.n	8001534 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800152c:	4a05      	ldr	r2, [pc, #20]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001532:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40007000 	.word	0x40007000
 8001548:	20000000 	.word	0x20000000
 800154c:	431bde83 	.word	0x431bde83

08001550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	f000 bc02 	b.w	8001d68 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001564:	4b96      	ldr	r3, [pc, #600]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800156e:	4b94      	ldr	r3, [pc, #592]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80e4 	beq.w	800174e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <HAL_RCC_OscConfig+0x4c>
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2b0c      	cmp	r3, #12
 8001590:	f040 808b 	bne.w	80016aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b01      	cmp	r3, #1
 8001598:	f040 8087 	bne.w	80016aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800159c:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_OscConfig+0x64>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e3d9      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1a      	ldr	r2, [r3, #32]
 80015b8:	4b81      	ldr	r3, [pc, #516]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d004      	beq.n	80015ce <HAL_RCC_OscConfig+0x7e>
 80015c4:	4b7e      	ldr	r3, [pc, #504]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015cc:	e005      	b.n	80015da <HAL_RCC_OscConfig+0x8a>
 80015ce:	4b7c      	ldr	r3, [pc, #496]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80015d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015da:	4293      	cmp	r3, r2
 80015dc:	d223      	bcs.n	8001626 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fd8c 	bl	8002100 <RCC_SetFlashLatencyFromMSIRange>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e3ba      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f2:	4b73      	ldr	r3, [pc, #460]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a72      	ldr	r2, [pc, #456]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b70      	ldr	r3, [pc, #448]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	496d      	ldr	r1, [pc, #436]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001610:	4b6b      	ldr	r3, [pc, #428]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	4968      	ldr	r1, [pc, #416]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
 8001624:	e025      	b.n	8001672 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001626:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a65      	ldr	r2, [pc, #404]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b63      	ldr	r3, [pc, #396]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4960      	ldr	r1, [pc, #384]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001644:	4b5e      	ldr	r3, [pc, #376]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	495b      	ldr	r1, [pc, #364]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d109      	bne.n	8001672 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fd4c 	bl	8002100 <RCC_SetFlashLatencyFromMSIRange>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e37a      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001672:	f000 fc81 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8001676:	4602      	mov	r2, r0
 8001678:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	4950      	ldr	r1, [pc, #320]	; (80017c4 <HAL_RCC_OscConfig+0x274>)
 8001684:	5ccb      	ldrb	r3, [r1, r3]
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	fa22 f303 	lsr.w	r3, r2, r3
 800168e:	4a4e      	ldr	r2, [pc, #312]	; (80017c8 <HAL_RCC_OscConfig+0x278>)
 8001690:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001692:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <HAL_RCC_OscConfig+0x27c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fc22 	bl	8000ee0 <HAL_InitTick>
 800169c:	4603      	mov	r3, r0
 800169e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d052      	beq.n	800174c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	e35e      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d032      	beq.n	8001718 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016b2:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a42      	ldr	r2, [pc, #264]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016be:	f7ff fc5f 	bl	8000f80 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016c6:	f7ff fc5b 	bl	8000f80 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e347      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016d8:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e4:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a35      	ldr	r2, [pc, #212]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4930      	ldr	r1, [pc, #192]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001702:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	492b      	ldr	r1, [pc, #172]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
 8001716:	e01a      	b.n	800174e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a28      	ldr	r2, [pc, #160]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001724:	f7ff fc2c 	bl	8000f80 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800172c:	f7ff fc28 	bl	8000f80 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e314      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x1dc>
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800174c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d073      	beq.n	8001842 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b08      	cmp	r3, #8
 800175e:	d005      	beq.n	800176c <HAL_RCC_OscConfig+0x21c>
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2b0c      	cmp	r3, #12
 8001764:	d10e      	bne.n	8001784 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d10b      	bne.n	8001784 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d063      	beq.n	8001840 <HAL_RCC_OscConfig+0x2f0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d15f      	bne.n	8001840 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e2f1      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178c:	d106      	bne.n	800179c <HAL_RCC_OscConfig+0x24c>
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e025      	b.n	80017e8 <HAL_RCC_OscConfig+0x298>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a4:	d114      	bne.n	80017d0 <HAL_RCC_OscConfig+0x280>
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a02      	ldr	r2, [pc, #8]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e013      	b.n	80017e8 <HAL_RCC_OscConfig+0x298>
 80017c0:	40021000 	.word	0x40021000
 80017c4:	08004ae0 	.word	0x08004ae0
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000004 	.word	0x20000004
 80017d0:	4ba0      	ldr	r3, [pc, #640]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a9f      	ldr	r2, [pc, #636]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80017d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b9d      	ldr	r3, [pc, #628]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a9c      	ldr	r2, [pc, #624]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80017e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fbc6 	bl	8000f80 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fbc2 	bl	8000f80 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e2ae      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800180a:	4b92      	ldr	r3, [pc, #584]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x2a8>
 8001816:	e014      	b.n	8001842 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fbb2 	bl	8000f80 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff fbae 	bl	8000f80 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	; 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e29a      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001832:	4b88      	ldr	r3, [pc, #544]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x2d0>
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d060      	beq.n	8001910 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b04      	cmp	r3, #4
 8001852:	d005      	beq.n	8001860 <HAL_RCC_OscConfig+0x310>
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2b0c      	cmp	r3, #12
 8001858:	d119      	bne.n	800188e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d116      	bne.n	800188e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001860:	4b7c      	ldr	r3, [pc, #496]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_OscConfig+0x328>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e277      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001878:	4b76      	ldr	r3, [pc, #472]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	061b      	lsls	r3, r3, #24
 8001886:	4973      	ldr	r1, [pc, #460]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800188c:	e040      	b.n	8001910 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d023      	beq.n	80018de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001896:	4b6f      	ldr	r3, [pc, #444]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a6e      	ldr	r2, [pc, #440]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff fb6d 	bl	8000f80 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff fb69 	bl	8000f80 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e255      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018bc:	4b65      	ldr	r3, [pc, #404]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b62      	ldr	r3, [pc, #392]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	495f      	ldr	r1, [pc, #380]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
 80018dc:	e018      	b.n	8001910 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018de:	4b5d      	ldr	r3, [pc, #372]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a5c      	ldr	r2, [pc, #368]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80018e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff fb49 	bl	8000f80 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff fb45 	bl	8000f80 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e231      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001904:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d03c      	beq.n	8001996 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d01c      	beq.n	800195e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001924:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192a:	4a4a      	ldr	r2, [pc, #296]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001934:	f7ff fb24 	bl	8000f80 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff fb20 	bl	8000f80 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e20c      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800194e:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0ef      	beq.n	800193c <HAL_RCC_OscConfig+0x3ec>
 800195c:	e01b      	b.n	8001996 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195e:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001964:	4a3b      	ldr	r2, [pc, #236]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196e:	f7ff fb07 	bl	8000f80 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001976:	f7ff fb03 	bl	8000f80 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e1ef      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001988:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 800198a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1ef      	bne.n	8001976 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80a6 	beq.w	8001af0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019a8:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80019aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10d      	bne.n	80019d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b4:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	4a26      	ldr	r2, [pc, #152]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80019ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019be:	6593      	str	r3, [r2, #88]	; 0x58
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019cc:	2301      	movs	r3, #1
 80019ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_RCC_OscConfig+0x508>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d118      	bne.n	8001a0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019dc:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <HAL_RCC_OscConfig+0x508>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1d      	ldr	r2, [pc, #116]	; (8001a58 <HAL_RCC_OscConfig+0x508>)
 80019e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e8:	f7ff faca 	bl	8000f80 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f0:	f7ff fac6 	bl	8000f80 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1b2      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_RCC_OscConfig+0x508>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d108      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4d8>
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a26:	e029      	b.n	8001a7c <HAL_RCC_OscConfig+0x52c>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d115      	bne.n	8001a5c <HAL_RCC_OscConfig+0x50c>
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a36:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a46:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a50:	e014      	b.n	8001a7c <HAL_RCC_OscConfig+0x52c>
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40007000 	.word	0x40007000
 8001a5c:	4b9a      	ldr	r3, [pc, #616]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a62:	4a99      	ldr	r2, [pc, #612]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a6c:	4b96      	ldr	r3, [pc, #600]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	4a95      	ldr	r2, [pc, #596]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001a74:	f023 0304 	bic.w	r3, r3, #4
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d016      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a84:	f7ff fa7c 	bl	8000f80 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fa78 	bl	8000f80 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e162      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa2:	4b89      	ldr	r3, [pc, #548]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0ed      	beq.n	8001a8c <HAL_RCC_OscConfig+0x53c>
 8001ab0:	e015      	b.n	8001ade <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fa65 	bl	8000f80 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7ff fa61 	bl	8000f80 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e14b      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad0:	4b7d      	ldr	r3, [pc, #500]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1ed      	bne.n	8001aba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ade:	7ffb      	ldrb	r3, [r7, #31]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d105      	bne.n	8001af0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae4:	4b78      	ldr	r3, [pc, #480]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	4a77      	ldr	r2, [pc, #476]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d03c      	beq.n	8001b76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d01c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b04:	4b70      	ldr	r3, [pc, #448]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001b06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b0a:	4a6f      	ldr	r2, [pc, #444]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7ff fa34 	bl	8000f80 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b1c:	f7ff fa30 	bl	8000f80 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e11c      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b2e:	4b66      	ldr	r3, [pc, #408]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0ef      	beq.n	8001b1c <HAL_RCC_OscConfig+0x5cc>
 8001b3c:	e01b      	b.n	8001b76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b3e:	4b62      	ldr	r3, [pc, #392]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b44:	4a60      	ldr	r2, [pc, #384]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fa17 	bl	8000f80 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b56:	f7ff fa13 	bl	8000f80 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e0ff      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b68:	4b57      	ldr	r3, [pc, #348]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ef      	bne.n	8001b56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80f3 	beq.w	8001d66 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	f040 80c9 	bne.w	8001d1c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b8a:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0203 	and.w	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d12c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d123      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d11b      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d113      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bda:	085b      	lsrs	r3, r3, #1
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d109      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	085b      	lsrs	r3, r3, #1
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d06b      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d062      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bfe:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0ac      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a2d      	ldr	r2, [pc, #180]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c1a:	f7ff f9b1 	bl	8000f80 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c22:	f7ff f9ad 	bl	8000f80 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e099      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c40:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_RCC_OscConfig+0x77c>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c50:	3a01      	subs	r2, #1
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	4311      	orrs	r1, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c5a:	0212      	lsls	r2, r2, #8
 8001c5c:	4311      	orrs	r1, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c62:	0852      	lsrs	r2, r2, #1
 8001c64:	3a01      	subs	r2, #1
 8001c66:	0552      	lsls	r2, r2, #21
 8001c68:	4311      	orrs	r1, r2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c6e:	0852      	lsrs	r2, r2, #1
 8001c70:	3a01      	subs	r2, #1
 8001c72:	0652      	lsls	r2, r2, #25
 8001c74:	4311      	orrs	r1, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c7a:	06d2      	lsls	r2, r2, #27
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	4912      	ldr	r1, [pc, #72]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0f      	ldr	r2, [pc, #60]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c90:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4a0c      	ldr	r2, [pc, #48]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c9c:	f7ff f970 	bl	8000f80 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff f96c 	bl	8000f80 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e058      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <HAL_RCC_OscConfig+0x778>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc2:	e050      	b.n	8001d66 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e04f      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_RCC_OscConfig+0x820>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d144      	bne.n	8001d66 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cdc:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <HAL_RCC_OscConfig+0x820>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <HAL_RCC_OscConfig+0x820>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce8:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <HAL_RCC_OscConfig+0x820>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4a20      	ldr	r2, [pc, #128]	; (8001d70 <HAL_RCC_OscConfig+0x820>)
 8001cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cf4:	f7ff f944 	bl	8000f80 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7ff f940 	bl	8000f80 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e02c      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0e:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <HAL_RCC_OscConfig+0x820>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x7ac>
 8001d1a:	e024      	b.n	8001d66 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d01f      	beq.n	8001d62 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_RCC_OscConfig+0x820>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <HAL_RCC_OscConfig+0x820>)
 8001d28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2e:	f7ff f927 	bl	8000f80 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d36:	f7ff f923 	bl	8000f80 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e00f      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_RCC_OscConfig+0x820>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_RCC_OscConfig+0x820>)
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	4905      	ldr	r1, [pc, #20]	; (8001d70 <HAL_RCC_OscConfig+0x820>)
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_RCC_OscConfig+0x824>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60cb      	str	r3, [r1, #12]
 8001d60:	e001      	b.n	8001d66 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	feeefffc 	.word	0xfeeefffc

08001d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0e7      	b.n	8001f5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b75      	ldr	r3, [pc, #468]	; (8001f64 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d910      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b72      	ldr	r3, [pc, #456]	; (8001f64 <HAL_RCC_ClockConfig+0x1ec>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 0207 	bic.w	r2, r3, #7
 8001da2:	4970      	ldr	r1, [pc, #448]	; (8001f64 <HAL_RCC_ClockConfig+0x1ec>)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b6e      	ldr	r3, [pc, #440]	; (8001f64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0cf      	b.n	8001f5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d010      	beq.n	8001dea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	4b66      	ldr	r3, [pc, #408]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d908      	bls.n	8001dea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd8:	4b63      	ldr	r3, [pc, #396]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4960      	ldr	r1, [pc, #384]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d04c      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfe:	4b5a      	ldr	r3, [pc, #360]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d121      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0a6      	b.n	8001f5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e16:	4b54      	ldr	r3, [pc, #336]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d115      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e09a      	b.n	8001f5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e2e:	4b4e      	ldr	r3, [pc, #312]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d109      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e08e      	b.n	8001f5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e3e:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e086      	b.n	8001f5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e4e:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f023 0203 	bic.w	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4943      	ldr	r1, [pc, #268]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e60:	f7ff f88e 	bl	8000f80 <HAL_GetTick>
 8001e64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e68:	f7ff f88a 	bl	8000f80 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e06e      	b.n	8001f5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 020c 	and.w	r2, r3, #12
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d1eb      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d010      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d208      	bcs.n	8001ebe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eac:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	492b      	ldr	r1, [pc, #172]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d210      	bcs.n	8001eee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_RCC_ClockConfig+0x1ec>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f023 0207 	bic.w	r2, r3, #7
 8001ed4:	4923      	ldr	r1, [pc, #140]	; (8001f64 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <HAL_RCC_ClockConfig+0x1ec>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e036      	b.n	8001f5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d008      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001efa:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	4918      	ldr	r1, [pc, #96]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d009      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4910      	ldr	r1, [pc, #64]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f2c:	f000 f824 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <HAL_RCC_ClockConfig+0x1f0>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	490b      	ldr	r1, [pc, #44]	; (8001f6c <HAL_RCC_ClockConfig+0x1f4>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
 8001f48:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <HAL_RCC_ClockConfig+0x1f8>)
 8001f4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_ClockConfig+0x1fc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe ffc5 	bl	8000ee0 <HAL_InitTick>
 8001f56:	4603      	mov	r3, r0
 8001f58:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40022000 	.word	0x40022000
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	08004ae0 	.word	0x08004ae0
 8001f70:	20000000 	.word	0x20000000
 8001f74:	20000004 	.word	0x20000004

08001f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f86:	4b3e      	ldr	r3, [pc, #248]	; (8002080 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f90:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x34>
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2b0c      	cmp	r3, #12
 8001fa4:	d121      	bne.n	8001fea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d11e      	bne.n	8001fea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fac:	4b34      	ldr	r3, [pc, #208]	; (8002080 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fb8:	4b31      	ldr	r3, [pc, #196]	; (8002080 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fbe:	0a1b      	lsrs	r3, r3, #8
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	e005      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fd4:	4a2b      	ldr	r2, [pc, #172]	; (8002084 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10d      	bne.n	8002000 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d102      	bne.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ff2:	61bb      	str	r3, [r7, #24]
 8001ff4:	e004      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ffe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b0c      	cmp	r3, #12
 8002004:	d134      	bne.n	8002070 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <HAL_RCC_GetSysClockFreq+0x108>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d003      	beq.n	800201e <HAL_RCC_GetSysClockFreq+0xa6>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d003      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0xac>
 800201c:	e005      	b.n	800202a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <HAL_RCC_GetSysClockFreq+0x110>)
 8002020:	617b      	str	r3, [r7, #20]
      break;
 8002022:	e005      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_RCC_GetSysClockFreq+0x114>)
 8002026:	617b      	str	r3, [r7, #20]
      break;
 8002028:	e002      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	617b      	str	r3, [r7, #20]
      break;
 800202e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <HAL_RCC_GetSysClockFreq+0x108>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	3301      	adds	r3, #1
 800203c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_RCC_GetSysClockFreq+0x108>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	fb03 f202 	mul.w	r2, r3, r2
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	fbb2 f3f3 	udiv	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_RCC_GetSysClockFreq+0x108>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	0e5b      	lsrs	r3, r3, #25
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	3301      	adds	r3, #1
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	fbb2 f3f3 	udiv	r3, r2, r3
 800206e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002070:	69bb      	ldr	r3, [r7, #24]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	08004af8 	.word	0x08004af8
 8002088:	00f42400 	.word	0x00f42400
 800208c:	007a1200 	.word	0x007a1200

08002090 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000000 	.word	0x20000000

080020a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020ac:	f7ff fff0 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4904      	ldr	r1, [pc, #16]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	08004af0 	.word	0x08004af0

080020d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020d8:	f7ff ffda 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020dc:	4602      	mov	r2, r0
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	0adb      	lsrs	r3, r3, #11
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	4904      	ldr	r1, [pc, #16]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ea:	5ccb      	ldrb	r3, [r1, r3]
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08004af0 	.word	0x08004af0

08002100 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800210c:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002118:	f7ff f9b6 	bl	8001488 <HAL_PWREx_GetVoltageRange>
 800211c:	6178      	str	r0, [r7, #20]
 800211e:	e014      	b.n	800214a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002120:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	4a24      	ldr	r2, [pc, #144]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212a:	6593      	str	r3, [r2, #88]	; 0x58
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002138:	f7ff f9a6 	bl	8001488 <HAL_PWREx_GetVoltageRange>
 800213c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002148:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002150:	d10b      	bne.n	800216a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b80      	cmp	r3, #128	; 0x80
 8002156:	d919      	bls.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2ba0      	cmp	r3, #160	; 0xa0
 800215c:	d902      	bls.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800215e:	2302      	movs	r3, #2
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	e013      	b.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002164:	2301      	movs	r3, #1
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	e010      	b.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b80      	cmp	r3, #128	; 0x80
 800216e:	d902      	bls.n	8002176 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002170:	2303      	movs	r3, #3
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	e00a      	b.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b80      	cmp	r3, #128	; 0x80
 800217a:	d102      	bne.n	8002182 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800217c:	2302      	movs	r3, #2
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	e004      	b.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b70      	cmp	r3, #112	; 0x70
 8002186:	d101      	bne.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002188:	2301      	movs	r3, #1
 800218a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 0207 	bic.w	r2, r3, #7
 8002194:	4909      	ldr	r1, [pc, #36]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d001      	beq.n	80021ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40022000 	.word	0x40022000

080021c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021c8:	2300      	movs	r3, #0
 80021ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021cc:	2300      	movs	r3, #0
 80021ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d031      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021e4:	d01a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80021e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021ea:	d814      	bhi.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d009      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021f4:	d10f      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021f6:	4b5d      	ldr	r3, [pc, #372]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	4a5c      	ldr	r2, [pc, #368]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002202:	e00c      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fa44 	bl	8002698 <RCCEx_PLLSAI1_Config>
 8002210:	4603      	mov	r3, r0
 8002212:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002214:	e003      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	74fb      	strb	r3, [r7, #19]
      break;
 800221a:	e000      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800221c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10b      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002224:	4b51      	ldr	r3, [pc, #324]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	494e      	ldr	r1, [pc, #312]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800223a:	e001      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 809e 	beq.w	800238a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002252:	4b46      	ldr	r3, [pc, #280]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002262:	2300      	movs	r3, #0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00d      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002268:	4b40      	ldr	r3, [pc, #256]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	4a3f      	ldr	r2, [pc, #252]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800226e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002272:	6593      	str	r3, [r2, #88]	; 0x58
 8002274:	4b3d      	ldr	r3, [pc, #244]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002280:	2301      	movs	r3, #1
 8002282:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002284:	4b3a      	ldr	r3, [pc, #232]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a39      	ldr	r2, [pc, #228]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800228a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002290:	f7fe fe76 	bl	8000f80 <HAL_GetTick>
 8002294:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002296:	e009      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002298:	f7fe fe72 	bl	8000f80 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d902      	bls.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	74fb      	strb	r3, [r7, #19]
        break;
 80022aa:	e005      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022ac:	4b30      	ldr	r3, [pc, #192]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ef      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d15a      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022be:	4b2b      	ldr	r3, [pc, #172]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01e      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d019      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022e6:	4b21      	ldr	r3, [pc, #132]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ec:	4a1f      	ldr	r2, [pc, #124]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	4a1b      	ldr	r2, [pc, #108]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002306:	4a19      	ldr	r2, [pc, #100]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d016      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe fe32 	bl	8000f80 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231e:	e00b      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7fe fe2e 	bl	8000f80 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d902      	bls.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	74fb      	strb	r3, [r7, #19]
            break;
 8002336:	e006      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0ec      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002346:	7cfb      	ldrb	r3, [r7, #19]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10b      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800234c:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002352:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800235a:	4904      	ldr	r1, [pc, #16]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002362:	e009      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	74bb      	strb	r3, [r7, #18]
 8002368:	e006      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002378:	7c7b      	ldrb	r3, [r7, #17]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d105      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237e:	4b9e      	ldr	r3, [pc, #632]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	4a9d      	ldr	r2, [pc, #628]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002396:	4b98      	ldr	r3, [pc, #608]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239c:	f023 0203 	bic.w	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4994      	ldr	r1, [pc, #592]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023b8:	4b8f      	ldr	r3, [pc, #572]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	f023 020c 	bic.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	498c      	ldr	r1, [pc, #560]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023da:	4b87      	ldr	r3, [pc, #540]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	4983      	ldr	r1, [pc, #524]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023fc:	4b7e      	ldr	r3, [pc, #504]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	497b      	ldr	r1, [pc, #492]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800241e:	4b76      	ldr	r3, [pc, #472]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002424:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	4972      	ldr	r1, [pc, #456]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00a      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002440:	4b6d      	ldr	r3, [pc, #436]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	496a      	ldr	r1, [pc, #424]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002462:	4b65      	ldr	r3, [pc, #404]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002468:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002470:	4961      	ldr	r1, [pc, #388]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00a      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002484:	4b5c      	ldr	r3, [pc, #368]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002492:	4959      	ldr	r1, [pc, #356]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024a6:	4b54      	ldr	r3, [pc, #336]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	4950      	ldr	r1, [pc, #320]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024c8:	4b4b      	ldr	r3, [pc, #300]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	4948      	ldr	r1, [pc, #288]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024ea:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024f0:	f023 0203 	bic.w	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	493f      	ldr	r1, [pc, #252]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d028      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800250c:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251a:	4937      	ldr	r1, [pc, #220]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800252a:	d106      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800252c:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a31      	ldr	r2, [pc, #196]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002536:	60d3      	str	r3, [r2, #12]
 8002538:	e011      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002542:	d10c      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3304      	adds	r3, #4
 8002548:	2101      	movs	r1, #1
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f8a4 	bl	8002698 <RCCEx_PLLSAI1_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d028      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800256a:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002570:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	491f      	ldr	r1, [pc, #124]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002588:	d106      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	4a1a      	ldr	r2, [pc, #104]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002594:	60d3      	str	r3, [r2, #12]
 8002596:	e011      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025a0:	d10c      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2101      	movs	r1, #1
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 f875 	bl	8002698 <RCCEx_PLLSAI1_Config>
 80025ae:	4603      	mov	r3, r0
 80025b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d02b      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025e6:	d109      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4a02      	ldr	r2, [pc, #8]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f2:	60d3      	str	r3, [r2, #12]
 80025f4:	e014      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002604:	d10c      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	2101      	movs	r1, #1
 800260c:	4618      	mov	r0, r3
 800260e:	f000 f843 	bl	8002698 <RCCEx_PLLSAI1_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01c      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263a:	4916      	ldr	r1, [pc, #88]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800264a:	d10c      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3304      	adds	r3, #4
 8002650:	2102      	movs	r1, #2
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f820 	bl	8002698 <RCCEx_PLLSAI1_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002678:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002680:	4904      	ldr	r1, [pc, #16]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002688:	7cbb      	ldrb	r3, [r7, #18]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000

08002698 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026a6:	4b74      	ldr	r3, [pc, #464]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d018      	beq.n	80026e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026b2:	4b71      	ldr	r3, [pc, #452]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0203 	and.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d10d      	bne.n	80026de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
       ||
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026ca:	4b6b      	ldr	r3, [pc, #428]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
       ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d047      	beq.n	800276e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e044      	b.n	800276e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d018      	beq.n	800271e <RCCEx_PLLSAI1_Config+0x86>
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d825      	bhi.n	800273c <RCCEx_PLLSAI1_Config+0xa4>
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d002      	beq.n	80026fa <RCCEx_PLLSAI1_Config+0x62>
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d009      	beq.n	800270c <RCCEx_PLLSAI1_Config+0x74>
 80026f8:	e020      	b.n	800273c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026fa:	4b5f      	ldr	r3, [pc, #380]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d11d      	bne.n	8002742 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270a:	e01a      	b.n	8002742 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800270c:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d116      	bne.n	8002746 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271c:	e013      	b.n	8002746 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800271e:	4b56      	ldr	r3, [pc, #344]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800272a:	4b53      	ldr	r3, [pc, #332]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800273a:	e006      	b.n	800274a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      break;
 8002740:	e004      	b.n	800274c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002742:	bf00      	nop
 8002744:	e002      	b.n	800274c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002746:	bf00      	nop
 8002748:	e000      	b.n	800274c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800274a:	bf00      	nop
    }

    if(status == HAL_OK)
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10d      	bne.n	800276e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002752:	4b49      	ldr	r3, [pc, #292]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	430b      	orrs	r3, r1
 8002768:	4943      	ldr	r1, [pc, #268]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 800276a:	4313      	orrs	r3, r2
 800276c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d17c      	bne.n	800286e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002774:	4b40      	ldr	r3, [pc, #256]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3f      	ldr	r2, [pc, #252]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800277e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002780:	f7fe fbfe 	bl	8000f80 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002786:	e009      	b.n	800279c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002788:	f7fe fbfa 	bl	8000f80 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d902      	bls.n	800279c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	73fb      	strb	r3, [r7, #15]
        break;
 800279a:	e005      	b.n	80027a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800279c:	4b36      	ldr	r3, [pc, #216]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ef      	bne.n	8002788 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d15f      	bne.n	800286e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d110      	bne.n	80027d6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027b4:	4b30      	ldr	r3, [pc, #192]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6892      	ldr	r2, [r2, #8]
 80027c4:	0211      	lsls	r1, r2, #8
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68d2      	ldr	r2, [r2, #12]
 80027ca:	06d2      	lsls	r2, r2, #27
 80027cc:	430a      	orrs	r2, r1
 80027ce:	492a      	ldr	r1, [pc, #168]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	610b      	str	r3, [r1, #16]
 80027d4:	e027      	b.n	8002826 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d112      	bne.n	8002802 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027dc:	4b26      	ldr	r3, [pc, #152]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6892      	ldr	r2, [r2, #8]
 80027ec:	0211      	lsls	r1, r2, #8
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6912      	ldr	r2, [r2, #16]
 80027f2:	0852      	lsrs	r2, r2, #1
 80027f4:	3a01      	subs	r2, #1
 80027f6:	0552      	lsls	r2, r2, #21
 80027f8:	430a      	orrs	r2, r1
 80027fa:	491f      	ldr	r1, [pc, #124]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	610b      	str	r3, [r1, #16]
 8002800:	e011      	b.n	8002826 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800280a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6892      	ldr	r2, [r2, #8]
 8002812:	0211      	lsls	r1, r2, #8
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6952      	ldr	r2, [r2, #20]
 8002818:	0852      	lsrs	r2, r2, #1
 800281a:	3a01      	subs	r2, #1
 800281c:	0652      	lsls	r2, r2, #25
 800281e:	430a      	orrs	r2, r1
 8002820:	4915      	ldr	r1, [pc, #84]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002822:	4313      	orrs	r3, r2
 8002824:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a13      	ldr	r2, [pc, #76]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002830:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7fe fba5 	bl	8000f80 <HAL_GetTick>
 8002836:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002838:	e009      	b.n	800284e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800283a:	f7fe fba1 	bl	8000f80 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d902      	bls.n	800284e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	73fb      	strb	r3, [r7, #15]
          break;
 800284c:	e005      	b.n	800285a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0ef      	beq.n	800283a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d106      	bne.n	800286e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4903      	ldr	r1, [pc, #12]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 800286a:	4313      	orrs	r3, r2
 800286c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e049      	b.n	8002922 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe f9ac 	bl	8000c00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4610      	mov	r0, r2
 80028bc:	f000 fb64 	bl	8002f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_TIM_PWM_Start+0x24>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	e03c      	b.n	80029ca <HAL_TIM_PWM_Start+0x9e>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2b04      	cmp	r3, #4
 8002954:	d109      	bne.n	800296a <HAL_TIM_PWM_Start+0x3e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	e02f      	b.n	80029ca <HAL_TIM_PWM_Start+0x9e>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b08      	cmp	r3, #8
 800296e:	d109      	bne.n	8002984 <HAL_TIM_PWM_Start+0x58>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e022      	b.n	80029ca <HAL_TIM_PWM_Start+0x9e>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d109      	bne.n	800299e <HAL_TIM_PWM_Start+0x72>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	bf14      	ite	ne
 8002996:	2301      	movne	r3, #1
 8002998:	2300      	moveq	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	e015      	b.n	80029ca <HAL_TIM_PWM_Start+0x9e>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	d109      	bne.n	80029b8 <HAL_TIM_PWM_Start+0x8c>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	bf14      	ite	ne
 80029b0:	2301      	movne	r3, #1
 80029b2:	2300      	moveq	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e008      	b.n	80029ca <HAL_TIM_PWM_Start+0x9e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	bf14      	ite	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	2300      	moveq	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e083      	b.n	8002ada <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d104      	bne.n	80029e2 <HAL_TIM_PWM_Start+0xb6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e0:	e023      	b.n	8002a2a <HAL_TIM_PWM_Start+0xfe>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d104      	bne.n	80029f2 <HAL_TIM_PWM_Start+0xc6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029f0:	e01b      	b.n	8002a2a <HAL_TIM_PWM_Start+0xfe>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d104      	bne.n	8002a02 <HAL_TIM_PWM_Start+0xd6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a00:	e013      	b.n	8002a2a <HAL_TIM_PWM_Start+0xfe>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b0c      	cmp	r3, #12
 8002a06:	d104      	bne.n	8002a12 <HAL_TIM_PWM_Start+0xe6>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a10:	e00b      	b.n	8002a2a <HAL_TIM_PWM_Start+0xfe>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d104      	bne.n	8002a22 <HAL_TIM_PWM_Start+0xf6>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a20:	e003      	b.n	8002a2a <HAL_TIM_PWM_Start+0xfe>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	6839      	ldr	r1, [r7, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fd94 	bl	8003560 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a29      	ldr	r2, [pc, #164]	; (8002ae4 <HAL_TIM_PWM_Start+0x1b8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_TIM_PWM_Start+0x12a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <HAL_TIM_PWM_Start+0x1bc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_TIM_PWM_Start+0x12a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a26      	ldr	r2, [pc, #152]	; (8002aec <HAL_TIM_PWM_Start+0x1c0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d101      	bne.n	8002a5a <HAL_TIM_PWM_Start+0x12e>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_TIM_PWM_Start+0x130>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <HAL_TIM_PWM_Start+0x1b8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00e      	beq.n	8002a98 <HAL_TIM_PWM_Start+0x16c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a82:	d009      	beq.n	8002a98 <HAL_TIM_PWM_Start+0x16c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <HAL_TIM_PWM_Start+0x1c4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_TIM_PWM_Start+0x16c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <HAL_TIM_PWM_Start+0x1bc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d115      	bne.n	8002ac4 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_TIM_PWM_Start+0x1c8>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d015      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0x1aa>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab0:	d011      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac2:	e008      	b.n	8002ad6 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e000      	b.n	8002ad8 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40014000 	.word	0x40014000
 8002aec:	40014400 	.word	0x40014400
 8002af0:	40000400 	.word	0x40000400
 8002af4:	00010007 	.word	0x00010007

08002af8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e097      	b.n	8002c3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d106      	bne.n	8002b26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7fe f82d 	bl	8000b80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002b3c:	f023 0307 	bic.w	r3, r3, #7
 8002b40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	f000 fa1b 	bl	8002f88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7a:	f023 0303 	bic.w	r3, r3, #3
 8002b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b98:	f023 030c 	bic.w	r3, r3, #12
 8002b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	011a      	lsls	r2, r3, #4
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	031b      	lsls	r3, r3, #12
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002bd6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002bde:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	4313      	orrs	r3, r2
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d110      	bne.n	8002c96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d102      	bne.n	8002c80 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c7a:	7b7b      	ldrb	r3, [r7, #13]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d001      	beq.n	8002c84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e069      	b.n	8002d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c94:	e031      	b.n	8002cfa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d110      	bne.n	8002cbe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c9c:	7bbb      	ldrb	r3, [r7, #14]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d102      	bne.n	8002ca8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ca2:	7b3b      	ldrb	r3, [r7, #12]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d001      	beq.n	8002cac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e055      	b.n	8002d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cbc:	e01d      	b.n	8002cfa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d108      	bne.n	8002cd6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cc4:	7bbb      	ldrb	r3, [r7, #14]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d105      	bne.n	8002cd6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cca:	7b7b      	ldrb	r3, [r7, #13]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d102      	bne.n	8002cd6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cd0:	7b3b      	ldrb	r3, [r7, #12]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d001      	beq.n	8002cda <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e03e      	b.n	8002d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_TIM_Encoder_Start+0xc4>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d008      	beq.n	8002d18 <HAL_TIM_Encoder_Start+0xd4>
 8002d06:	e00f      	b.n	8002d28 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fc25 	bl	8003560 <TIM_CCxChannelCmd>
      break;
 8002d16:	e016      	b.n	8002d46 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	2104      	movs	r1, #4
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fc1d 	bl	8003560 <TIM_CCxChannelCmd>
      break;
 8002d26:	e00e      	b.n	8002d46 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fc15 	bl	8003560 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	2104      	movs	r1, #4
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fc0e 	bl	8003560 <TIM_CCxChannelCmd>
      break;
 8002d44:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e0ff      	b.n	8002f7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b14      	cmp	r3, #20
 8002d8a:	f200 80f0 	bhi.w	8002f6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d8e:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d94:	08002de9 	.word	0x08002de9
 8002d98:	08002f6f 	.word	0x08002f6f
 8002d9c:	08002f6f 	.word	0x08002f6f
 8002da0:	08002f6f 	.word	0x08002f6f
 8002da4:	08002e29 	.word	0x08002e29
 8002da8:	08002f6f 	.word	0x08002f6f
 8002dac:	08002f6f 	.word	0x08002f6f
 8002db0:	08002f6f 	.word	0x08002f6f
 8002db4:	08002e6b 	.word	0x08002e6b
 8002db8:	08002f6f 	.word	0x08002f6f
 8002dbc:	08002f6f 	.word	0x08002f6f
 8002dc0:	08002f6f 	.word	0x08002f6f
 8002dc4:	08002eab 	.word	0x08002eab
 8002dc8:	08002f6f 	.word	0x08002f6f
 8002dcc:	08002f6f 	.word	0x08002f6f
 8002dd0:	08002f6f 	.word	0x08002f6f
 8002dd4:	08002eed 	.word	0x08002eed
 8002dd8:	08002f6f 	.word	0x08002f6f
 8002ddc:	08002f6f 	.word	0x08002f6f
 8002de0:	08002f6f 	.word	0x08002f6f
 8002de4:	08002f2d 	.word	0x08002f2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f938 	bl	8003064 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0208 	orr.w	r2, r2, #8
 8002e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0204 	bic.w	r2, r2, #4
 8002e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6999      	ldr	r1, [r3, #24]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	619a      	str	r2, [r3, #24]
      break;
 8002e26:	e0a5      	b.n	8002f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f994 	bl	800315c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6999      	ldr	r1, [r3, #24]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	021a      	lsls	r2, r3, #8
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	619a      	str	r2, [r3, #24]
      break;
 8002e68:	e084      	b.n	8002f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 f9ed 	bl	8003250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0208 	orr.w	r2, r2, #8
 8002e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0204 	bic.w	r2, r2, #4
 8002e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69d9      	ldr	r1, [r3, #28]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	61da      	str	r2, [r3, #28]
      break;
 8002ea8:	e064      	b.n	8002f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fa45 	bl	8003340 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69d9      	ldr	r1, [r3, #28]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	021a      	lsls	r2, r3, #8
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	61da      	str	r2, [r3, #28]
      break;
 8002eea:	e043      	b.n	8002f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fa82 	bl	80033fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0208 	orr.w	r2, r2, #8
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0204 	bic.w	r2, r2, #4
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f2a:	e023      	b.n	8002f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 faba 	bl	80034ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	021a      	lsls	r2, r3, #8
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f6c:	e002      	b.n	8002f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
      break;
 8002f72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop

08002f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a2e      	ldr	r2, [pc, #184]	; (8003054 <TIM_Base_SetConfig+0xcc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d007      	beq.n	8002fb0 <TIM_Base_SetConfig+0x28>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d003      	beq.n	8002fb0 <TIM_Base_SetConfig+0x28>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a2b      	ldr	r2, [pc, #172]	; (8003058 <TIM_Base_SetConfig+0xd0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d108      	bne.n	8002fc2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a23      	ldr	r2, [pc, #140]	; (8003054 <TIM_Base_SetConfig+0xcc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00f      	beq.n	8002fea <TIM_Base_SetConfig+0x62>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd0:	d00b      	beq.n	8002fea <TIM_Base_SetConfig+0x62>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a20      	ldr	r2, [pc, #128]	; (8003058 <TIM_Base_SetConfig+0xd0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <TIM_Base_SetConfig+0x62>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a1f      	ldr	r2, [pc, #124]	; (800305c <TIM_Base_SetConfig+0xd4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_Base_SetConfig+0x62>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a1e      	ldr	r2, [pc, #120]	; (8003060 <TIM_Base_SetConfig+0xd8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d108      	bne.n	8002ffc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a0c      	ldr	r2, [pc, #48]	; (8003054 <TIM_Base_SetConfig+0xcc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d007      	beq.n	8003038 <TIM_Base_SetConfig+0xb0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a0c      	ldr	r2, [pc, #48]	; (800305c <TIM_Base_SetConfig+0xd4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d003      	beq.n	8003038 <TIM_Base_SetConfig+0xb0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <TIM_Base_SetConfig+0xd8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d103      	bne.n	8003040 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	615a      	str	r2, [r3, #20]
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40012c00 	.word	0x40012c00
 8003058:	40000400 	.word	0x40000400
 800305c:	40014000 	.word	0x40014000
 8003060:	40014400 	.word	0x40014400

08003064 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f023 0201 	bic.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0303 	bic.w	r3, r3, #3
 800309e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 0302 	bic.w	r3, r3, #2
 80030b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a24      	ldr	r2, [pc, #144]	; (8003150 <TIM_OC1_SetConfig+0xec>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d007      	beq.n	80030d4 <TIM_OC1_SetConfig+0x70>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a23      	ldr	r2, [pc, #140]	; (8003154 <TIM_OC1_SetConfig+0xf0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d003      	beq.n	80030d4 <TIM_OC1_SetConfig+0x70>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a22      	ldr	r2, [pc, #136]	; (8003158 <TIM_OC1_SetConfig+0xf4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d10c      	bne.n	80030ee <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f023 0308 	bic.w	r3, r3, #8
 80030da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f023 0304 	bic.w	r3, r3, #4
 80030ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a17      	ldr	r2, [pc, #92]	; (8003150 <TIM_OC1_SetConfig+0xec>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d007      	beq.n	8003106 <TIM_OC1_SetConfig+0xa2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a16      	ldr	r2, [pc, #88]	; (8003154 <TIM_OC1_SetConfig+0xf0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d003      	beq.n	8003106 <TIM_OC1_SetConfig+0xa2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a15      	ldr	r2, [pc, #84]	; (8003158 <TIM_OC1_SetConfig+0xf4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d111      	bne.n	800312a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800310c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	621a      	str	r2, [r3, #32]
}
 8003144:	bf00      	nop
 8003146:	371c      	adds	r7, #28
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	40012c00 	.word	0x40012c00
 8003154:	40014000 	.word	0x40014000
 8003158:	40014400 	.word	0x40014400

0800315c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f023 0210 	bic.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800318a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f023 0320 	bic.w	r3, r3, #32
 80031aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a22      	ldr	r2, [pc, #136]	; (8003244 <TIM_OC2_SetConfig+0xe8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d10d      	bne.n	80031dc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a19      	ldr	r2, [pc, #100]	; (8003244 <TIM_OC2_SetConfig+0xe8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <TIM_OC2_SetConfig+0x98>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a18      	ldr	r2, [pc, #96]	; (8003248 <TIM_OC2_SetConfig+0xec>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_OC2_SetConfig+0x98>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <TIM_OC2_SetConfig+0xf0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d113      	bne.n	800321c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	621a      	str	r2, [r3, #32]
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40014000 	.word	0x40014000
 800324c:	40014400 	.word	0x40014400

08003250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0303 	bic.w	r3, r3, #3
 800328a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800329c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a21      	ldr	r2, [pc, #132]	; (8003334 <TIM_OC3_SetConfig+0xe4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10d      	bne.n	80032ce <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a18      	ldr	r2, [pc, #96]	; (8003334 <TIM_OC3_SetConfig+0xe4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <TIM_OC3_SetConfig+0x96>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a17      	ldr	r2, [pc, #92]	; (8003338 <TIM_OC3_SetConfig+0xe8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d003      	beq.n	80032e6 <TIM_OC3_SetConfig+0x96>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a16      	ldr	r2, [pc, #88]	; (800333c <TIM_OC3_SetConfig+0xec>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d113      	bne.n	800330e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	621a      	str	r2, [r3, #32]
}
 8003328:	bf00      	nop
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	40012c00 	.word	0x40012c00
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400

08003340 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800338e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	031b      	lsls	r3, r3, #12
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <TIM_OC4_SetConfig+0xb0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d007      	beq.n	80033b4 <TIM_OC4_SetConfig+0x74>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <TIM_OC4_SetConfig+0xb4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_OC4_SetConfig+0x74>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a12      	ldr	r2, [pc, #72]	; (80033f8 <TIM_OC4_SetConfig+0xb8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d109      	bne.n	80033c8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	019b      	lsls	r3, r3, #6
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40012c00 	.word	0x40012c00
 80033f4:	40014000 	.word	0x40014000
 80033f8:	40014400 	.word	0x40014400

080033fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003440:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	041b      	lsls	r3, r3, #16
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a13      	ldr	r2, [pc, #76]	; (80034a0 <TIM_OC5_SetConfig+0xa4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <TIM_OC5_SetConfig+0x6a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <TIM_OC5_SetConfig+0xa8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d003      	beq.n	8003466 <TIM_OC5_SetConfig+0x6a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a11      	ldr	r2, [pc, #68]	; (80034a8 <TIM_OC5_SetConfig+0xac>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d109      	bne.n	800347a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	621a      	str	r2, [r3, #32]
}
 8003494:	bf00      	nop
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40014400 	.word	0x40014400

080034ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	051b      	lsls	r3, r3, #20
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a14      	ldr	r2, [pc, #80]	; (8003554 <TIM_OC6_SetConfig+0xa8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d007      	beq.n	8003518 <TIM_OC6_SetConfig+0x6c>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a13      	ldr	r2, [pc, #76]	; (8003558 <TIM_OC6_SetConfig+0xac>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_OC6_SetConfig+0x6c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a12      	ldr	r2, [pc, #72]	; (800355c <TIM_OC6_SetConfig+0xb0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d109      	bne.n	800352c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	029b      	lsls	r3, r3, #10
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	621a      	str	r2, [r3, #32]
}
 8003546:	bf00      	nop
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40014000 	.word	0x40014000
 800355c:	40014400 	.word	0x40014400

08003560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	2201      	movs	r2, #1
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a1a      	ldr	r2, [r3, #32]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	43db      	mvns	r3, r3
 8003582:	401a      	ands	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a1a      	ldr	r2, [r3, #32]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	431a      	orrs	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	621a      	str	r2, [r3, #32]
}
 800359e:	bf00      	nop
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e054      	b.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a24      	ldr	r2, [pc, #144]	; (800367c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d108      	bne.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80035f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a17      	ldr	r2, [pc, #92]	; (800367c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00e      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362c:	d009      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a13      	ldr	r2, [pc, #76]	; (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d004      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a11      	ldr	r2, [pc, #68]	; (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d10c      	bne.n	800365c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	4313      	orrs	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40012c00 	.word	0x40012c00
 8003680:	40000400 	.word	0x40000400
 8003684:	40014000 	.word	0x40014000

08003688 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e040      	b.n	800371c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fd fb00 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2224      	movs	r2, #36	; 0x24
 80036b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f8c0 	bl	800384c <UART_SetConfig>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e022      	b.n	800371c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fb3a 	bl	8003d58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003702:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fbc1 	bl	8003e9c <UART_CheckIdleState>
 800371a:	4603      	mov	r3, r0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08a      	sub	sp, #40	; 0x28
 8003728:	af02      	add	r7, sp, #8
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003738:	2b20      	cmp	r3, #32
 800373a:	f040 8082 	bne.w	8003842 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_UART_Transmit+0x26>
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e07a      	b.n	8003844 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_UART_Transmit+0x38>
 8003758:	2302      	movs	r3, #2
 800375a:	e073      	b.n	8003844 <HAL_UART_Transmit+0x120>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2221      	movs	r2, #33	; 0x21
 8003770:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003772:	f7fd fc05 	bl	8000f80 <HAL_GetTick>
 8003776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	88fa      	ldrh	r2, [r7, #6]
 8003784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003790:	d108      	bne.n	80037a4 <HAL_UART_Transmit+0x80>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d104      	bne.n	80037a4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	e003      	b.n	80037ac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80037b4:	e02d      	b.n	8003812 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2200      	movs	r2, #0
 80037be:	2180      	movs	r1, #128	; 0x80
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fbb4 	bl	8003f2e <UART_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e039      	b.n	8003844 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	881a      	ldrh	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e2:	b292      	uxth	r2, r2
 80037e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	3302      	adds	r3, #2
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	e008      	b.n	8003800 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	b292      	uxth	r2, r2
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3301      	adds	r3, #1
 80037fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1cb      	bne.n	80037b6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2200      	movs	r2, #0
 8003826:	2140      	movs	r1, #64	; 0x40
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fb80 	bl	8003f2e <UART_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e005      	b.n	8003844 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	e000      	b.n	8003844 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003842:	2302      	movs	r3, #2
  }
}
 8003844:	4618      	mov	r0, r3
 8003846:	3720      	adds	r7, #32
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800384c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003850:	b08a      	sub	sp, #40	; 0x28
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	431a      	orrs	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	431a      	orrs	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	4313      	orrs	r3, r2
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4ba5      	ldr	r3, [pc, #660]	; (8003b10 <UART_SetConfig+0x2c4>)
 800387c:	4013      	ands	r3, r2
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003884:	430b      	orrs	r3, r1
 8003886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a9a      	ldr	r2, [pc, #616]	; (8003b14 <UART_SetConfig+0x2c8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b4:	4313      	orrs	r3, r2
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a91      	ldr	r2, [pc, #580]	; (8003b18 <UART_SetConfig+0x2cc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d126      	bne.n	8003924 <UART_SetConfig+0xd8>
 80038d6:	4b91      	ldr	r3, [pc, #580]	; (8003b1c <UART_SetConfig+0x2d0>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d81b      	bhi.n	800391c <UART_SetConfig+0xd0>
 80038e4:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <UART_SetConfig+0xa0>)
 80038e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ea:	bf00      	nop
 80038ec:	080038fd 	.word	0x080038fd
 80038f0:	0800390d 	.word	0x0800390d
 80038f4:	08003905 	.word	0x08003905
 80038f8:	08003915 	.word	0x08003915
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003902:	e0d6      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003904:	2302      	movs	r3, #2
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390a:	e0d2      	b.n	8003ab2 <UART_SetConfig+0x266>
 800390c:	2304      	movs	r3, #4
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003912:	e0ce      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003914:	2308      	movs	r3, #8
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391a:	e0ca      	b.n	8003ab2 <UART_SetConfig+0x266>
 800391c:	2310      	movs	r3, #16
 800391e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003922:	e0c6      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a7d      	ldr	r2, [pc, #500]	; (8003b20 <UART_SetConfig+0x2d4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d138      	bne.n	80039a0 <UART_SetConfig+0x154>
 800392e:	4b7b      	ldr	r3, [pc, #492]	; (8003b1c <UART_SetConfig+0x2d0>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b0c      	cmp	r3, #12
 800393a:	d82d      	bhi.n	8003998 <UART_SetConfig+0x14c>
 800393c:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <UART_SetConfig+0xf8>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003979 	.word	0x08003979
 8003948:	08003999 	.word	0x08003999
 800394c:	08003999 	.word	0x08003999
 8003950:	08003999 	.word	0x08003999
 8003954:	08003989 	.word	0x08003989
 8003958:	08003999 	.word	0x08003999
 800395c:	08003999 	.word	0x08003999
 8003960:	08003999 	.word	0x08003999
 8003964:	08003981 	.word	0x08003981
 8003968:	08003999 	.word	0x08003999
 800396c:	08003999 	.word	0x08003999
 8003970:	08003999 	.word	0x08003999
 8003974:	08003991 	.word	0x08003991
 8003978:	2300      	movs	r3, #0
 800397a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397e:	e098      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003980:	2302      	movs	r3, #2
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003986:	e094      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003988:	2304      	movs	r3, #4
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398e:	e090      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003990:	2308      	movs	r3, #8
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e08c      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003998:	2310      	movs	r3, #16
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399e:	e088      	b.n	8003ab2 <UART_SetConfig+0x266>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a5f      	ldr	r2, [pc, #380]	; (8003b24 <UART_SetConfig+0x2d8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d125      	bne.n	80039f6 <UART_SetConfig+0x1aa>
 80039aa:	4b5c      	ldr	r3, [pc, #368]	; (8003b1c <UART_SetConfig+0x2d0>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039b4:	2b30      	cmp	r3, #48	; 0x30
 80039b6:	d016      	beq.n	80039e6 <UART_SetConfig+0x19a>
 80039b8:	2b30      	cmp	r3, #48	; 0x30
 80039ba:	d818      	bhi.n	80039ee <UART_SetConfig+0x1a2>
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d00a      	beq.n	80039d6 <UART_SetConfig+0x18a>
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d814      	bhi.n	80039ee <UART_SetConfig+0x1a2>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <UART_SetConfig+0x182>
 80039c8:	2b10      	cmp	r3, #16
 80039ca:	d008      	beq.n	80039de <UART_SetConfig+0x192>
 80039cc:	e00f      	b.n	80039ee <UART_SetConfig+0x1a2>
 80039ce:	2300      	movs	r3, #0
 80039d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d4:	e06d      	b.n	8003ab2 <UART_SetConfig+0x266>
 80039d6:	2302      	movs	r3, #2
 80039d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039dc:	e069      	b.n	8003ab2 <UART_SetConfig+0x266>
 80039de:	2304      	movs	r3, #4
 80039e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e4:	e065      	b.n	8003ab2 <UART_SetConfig+0x266>
 80039e6:	2308      	movs	r3, #8
 80039e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ec:	e061      	b.n	8003ab2 <UART_SetConfig+0x266>
 80039ee:	2310      	movs	r3, #16
 80039f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f4:	e05d      	b.n	8003ab2 <UART_SetConfig+0x266>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a4b      	ldr	r2, [pc, #300]	; (8003b28 <UART_SetConfig+0x2dc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d125      	bne.n	8003a4c <UART_SetConfig+0x200>
 8003a00:	4b46      	ldr	r3, [pc, #280]	; (8003b1c <UART_SetConfig+0x2d0>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a0c:	d016      	beq.n	8003a3c <UART_SetConfig+0x1f0>
 8003a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a10:	d818      	bhi.n	8003a44 <UART_SetConfig+0x1f8>
 8003a12:	2b80      	cmp	r3, #128	; 0x80
 8003a14:	d00a      	beq.n	8003a2c <UART_SetConfig+0x1e0>
 8003a16:	2b80      	cmp	r3, #128	; 0x80
 8003a18:	d814      	bhi.n	8003a44 <UART_SetConfig+0x1f8>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <UART_SetConfig+0x1d8>
 8003a1e:	2b40      	cmp	r3, #64	; 0x40
 8003a20:	d008      	beq.n	8003a34 <UART_SetConfig+0x1e8>
 8003a22:	e00f      	b.n	8003a44 <UART_SetConfig+0x1f8>
 8003a24:	2300      	movs	r3, #0
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2a:	e042      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a32:	e03e      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003a34:	2304      	movs	r3, #4
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3a:	e03a      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003a3c:	2308      	movs	r3, #8
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a42:	e036      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003a44:	2310      	movs	r3, #16
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4a:	e032      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a30      	ldr	r2, [pc, #192]	; (8003b14 <UART_SetConfig+0x2c8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d12a      	bne.n	8003aac <UART_SetConfig+0x260>
 8003a56:	4b31      	ldr	r3, [pc, #196]	; (8003b1c <UART_SetConfig+0x2d0>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a64:	d01a      	beq.n	8003a9c <UART_SetConfig+0x250>
 8003a66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a6a:	d81b      	bhi.n	8003aa4 <UART_SetConfig+0x258>
 8003a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a70:	d00c      	beq.n	8003a8c <UART_SetConfig+0x240>
 8003a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a76:	d815      	bhi.n	8003aa4 <UART_SetConfig+0x258>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <UART_SetConfig+0x238>
 8003a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a80:	d008      	beq.n	8003a94 <UART_SetConfig+0x248>
 8003a82:	e00f      	b.n	8003aa4 <UART_SetConfig+0x258>
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8a:	e012      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a92:	e00e      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003a94:	2304      	movs	r3, #4
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9a:	e00a      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa2:	e006      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aaa:	e002      	b.n	8003ab2 <UART_SetConfig+0x266>
 8003aac:	2310      	movs	r3, #16
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a17      	ldr	r2, [pc, #92]	; (8003b14 <UART_SetConfig+0x2c8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	f040 808b 	bne.w	8003bd4 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003abe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d834      	bhi.n	8003b30 <UART_SetConfig+0x2e4>
 8003ac6:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <UART_SetConfig+0x280>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003af1 	.word	0x08003af1
 8003ad0:	08003b31 	.word	0x08003b31
 8003ad4:	08003af9 	.word	0x08003af9
 8003ad8:	08003b31 	.word	0x08003b31
 8003adc:	08003aff 	.word	0x08003aff
 8003ae0:	08003b31 	.word	0x08003b31
 8003ae4:	08003b31 	.word	0x08003b31
 8003ae8:	08003b31 	.word	0x08003b31
 8003aec:	08003b07 	.word	0x08003b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af0:	f7fe fada 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 8003af4:	61f8      	str	r0, [r7, #28]
        break;
 8003af6:	e021      	b.n	8003b3c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af8:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <UART_SetConfig+0x2e0>)
 8003afa:	61fb      	str	r3, [r7, #28]
        break;
 8003afc:	e01e      	b.n	8003b3c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003afe:	f7fe fa3b 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8003b02:	61f8      	str	r0, [r7, #28]
        break;
 8003b04:	e01a      	b.n	8003b3c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b0a:	61fb      	str	r3, [r7, #28]
        break;
 8003b0c:	e016      	b.n	8003b3c <UART_SetConfig+0x2f0>
 8003b0e:	bf00      	nop
 8003b10:	efff69f3 	.word	0xefff69f3
 8003b14:	40008000 	.word	0x40008000
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40004400 	.word	0x40004400
 8003b24:	40004800 	.word	0x40004800
 8003b28:	40004c00 	.word	0x40004c00
 8003b2c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80fa 	beq.w	8003d38 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	4413      	add	r3, r2
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d305      	bcc.n	8003b60 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d903      	bls.n	8003b68 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b66:	e0e7      	b.n	8003d38 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	461c      	mov	r4, r3
 8003b6e:	4615      	mov	r5, r2
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	022b      	lsls	r3, r5, #8
 8003b7a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b7e:	0222      	lsls	r2, r4, #8
 8003b80:	68f9      	ldr	r1, [r7, #12]
 8003b82:	6849      	ldr	r1, [r1, #4]
 8003b84:	0849      	lsrs	r1, r1, #1
 8003b86:	2000      	movs	r0, #0
 8003b88:	4688      	mov	r8, r1
 8003b8a:	4681      	mov	r9, r0
 8003b8c:	eb12 0a08 	adds.w	sl, r2, r8
 8003b90:	eb43 0b09 	adc.w	fp, r3, r9
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ba2:	4650      	mov	r0, sl
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	f7fc fb73 	bl	8000290 <__aeabi_uldivmod>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4613      	mov	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb8:	d308      	bcc.n	8003bcc <UART_SetConfig+0x380>
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc0:	d204      	bcs.n	8003bcc <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	60da      	str	r2, [r3, #12]
 8003bca:	e0b5      	b.n	8003d38 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bd2:	e0b1      	b.n	8003d38 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bdc:	d15d      	bne.n	8003c9a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003bde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d827      	bhi.n	8003c36 <UART_SetConfig+0x3ea>
 8003be6:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <UART_SetConfig+0x3a0>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	08003c21 	.word	0x08003c21
 8003bf8:	08003c37 	.word	0x08003c37
 8003bfc:	08003c27 	.word	0x08003c27
 8003c00:	08003c37 	.word	0x08003c37
 8003c04:	08003c37 	.word	0x08003c37
 8003c08:	08003c37 	.word	0x08003c37
 8003c0c:	08003c2f 	.word	0x08003c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c10:	f7fe fa4a 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 8003c14:	61f8      	str	r0, [r7, #28]
        break;
 8003c16:	e014      	b.n	8003c42 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c18:	f7fe fa5c 	bl	80020d4 <HAL_RCC_GetPCLK2Freq>
 8003c1c:	61f8      	str	r0, [r7, #28]
        break;
 8003c1e:	e010      	b.n	8003c42 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c20:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <UART_SetConfig+0x508>)
 8003c22:	61fb      	str	r3, [r7, #28]
        break;
 8003c24:	e00d      	b.n	8003c42 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c26:	f7fe f9a7 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8003c2a:	61f8      	str	r0, [r7, #28]
        break;
 8003c2c:	e009      	b.n	8003c42 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c32:	61fb      	str	r3, [r7, #28]
        break;
 8003c34:	e005      	b.n	8003c42 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d077      	beq.n	8003d38 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	005a      	lsls	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	441a      	add	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	2b0f      	cmp	r3, #15
 8003c62:	d916      	bls.n	8003c92 <UART_SetConfig+0x446>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6a:	d212      	bcs.n	8003c92 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f023 030f 	bic.w	r3, r3, #15
 8003c74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	085b      	lsrs	r3, r3, #1
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	8afb      	ldrh	r3, [r7, #22]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	8afa      	ldrh	r2, [r7, #22]
 8003c8e:	60da      	str	r2, [r3, #12]
 8003c90:	e052      	b.n	8003d38 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c98:	e04e      	b.n	8003d38 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d827      	bhi.n	8003cf2 <UART_SetConfig+0x4a6>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0x45c>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003cd5 	.word	0x08003cd5
 8003cb0:	08003cdd 	.word	0x08003cdd
 8003cb4:	08003cf3 	.word	0x08003cf3
 8003cb8:	08003ce3 	.word	0x08003ce3
 8003cbc:	08003cf3 	.word	0x08003cf3
 8003cc0:	08003cf3 	.word	0x08003cf3
 8003cc4:	08003cf3 	.word	0x08003cf3
 8003cc8:	08003ceb 	.word	0x08003ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7fe f9ec 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 8003cd0:	61f8      	str	r0, [r7, #28]
        break;
 8003cd2:	e014      	b.n	8003cfe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd4:	f7fe f9fe 	bl	80020d4 <HAL_RCC_GetPCLK2Freq>
 8003cd8:	61f8      	str	r0, [r7, #28]
        break;
 8003cda:	e010      	b.n	8003cfe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <UART_SetConfig+0x508>)
 8003cde:	61fb      	str	r3, [r7, #28]
        break;
 8003ce0:	e00d      	b.n	8003cfe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce2:	f7fe f949 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8003ce6:	61f8      	str	r0, [r7, #28]
        break;
 8003ce8:	e009      	b.n	8003cfe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cee:	61fb      	str	r3, [r7, #28]
        break;
 8003cf0:	e005      	b.n	8003cfe <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cfc:	bf00      	nop
    }

    if (pclk != 0U)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d019      	beq.n	8003d38 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	085a      	lsrs	r2, r3, #1
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	441a      	add	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b0f      	cmp	r3, #15
 8003d1c:	d909      	bls.n	8003d32 <UART_SetConfig+0x4e6>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d24:	d205      	bcs.n	8003d32 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60da      	str	r2, [r3, #12]
 8003d30:	e002      	b.n	8003d38 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3728      	adds	r7, #40	; 0x28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d52:	bf00      	nop
 8003d54:	00f42400 	.word	0x00f42400

08003d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01a      	beq.n	8003e6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e56:	d10a      	bne.n	8003e6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	605a      	str	r2, [r3, #4]
  }
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003eac:	f7fd f868 	bl	8000f80 <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d10e      	bne.n	8003ede <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f82d 	bl	8003f2e <UART_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e023      	b.n	8003f26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d10e      	bne.n	8003f0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f817 	bl	8003f2e <UART_WaitOnFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e00d      	b.n	8003f26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b09c      	sub	sp, #112	; 0x70
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3e:	e0a5      	b.n	800408c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	f000 80a1 	beq.w	800408c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f4a:	f7fd f819 	bl	8000f80 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d302      	bcc.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d13e      	bne.n	8003fde <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f74:	667b      	str	r3, [r7, #100]	; 0x64
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e6      	bne.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3308      	adds	r3, #8
 8003f98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e5      	bne.n	8003f92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e067      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d04f      	beq.n	800408c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffa:	d147      	bne.n	800408c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004004:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800401a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004024:	637b      	str	r3, [r7, #52]	; 0x34
 8004026:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800402a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e6      	bne.n	8004006 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	613b      	str	r3, [r7, #16]
   return(result);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3308      	adds	r3, #8
 8004056:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004058:	623a      	str	r2, [r7, #32]
 800405a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	69f9      	ldr	r1, [r7, #28]
 800405e:	6a3a      	ldr	r2, [r7, #32]
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	61bb      	str	r3, [r7, #24]
   return(result);
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e5      	bne.n	8004038 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e010      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69da      	ldr	r2, [r3, #28]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4013      	ands	r3, r2
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	429a      	cmp	r2, r3
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	f43f af4a 	beq.w	8003f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3770      	adds	r7, #112	; 0x70
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <__errno>:
 80040b8:	4b01      	ldr	r3, [pc, #4]	; (80040c0 <__errno+0x8>)
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	2000000c 	.word	0x2000000c

080040c4 <__libc_init_array>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	4d0d      	ldr	r5, [pc, #52]	; (80040fc <__libc_init_array+0x38>)
 80040c8:	4c0d      	ldr	r4, [pc, #52]	; (8004100 <__libc_init_array+0x3c>)
 80040ca:	1b64      	subs	r4, r4, r5
 80040cc:	10a4      	asrs	r4, r4, #2
 80040ce:	2600      	movs	r6, #0
 80040d0:	42a6      	cmp	r6, r4
 80040d2:	d109      	bne.n	80040e8 <__libc_init_array+0x24>
 80040d4:	4d0b      	ldr	r5, [pc, #44]	; (8004104 <__libc_init_array+0x40>)
 80040d6:	4c0c      	ldr	r4, [pc, #48]	; (8004108 <__libc_init_array+0x44>)
 80040d8:	f000 fc8e 	bl	80049f8 <_init>
 80040dc:	1b64      	subs	r4, r4, r5
 80040de:	10a4      	asrs	r4, r4, #2
 80040e0:	2600      	movs	r6, #0
 80040e2:	42a6      	cmp	r6, r4
 80040e4:	d105      	bne.n	80040f2 <__libc_init_array+0x2e>
 80040e6:	bd70      	pop	{r4, r5, r6, pc}
 80040e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ec:	4798      	blx	r3
 80040ee:	3601      	adds	r6, #1
 80040f0:	e7ee      	b.n	80040d0 <__libc_init_array+0xc>
 80040f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f6:	4798      	blx	r3
 80040f8:	3601      	adds	r6, #1
 80040fa:	e7f2      	b.n	80040e2 <__libc_init_array+0x1e>
 80040fc:	08004b64 	.word	0x08004b64
 8004100:	08004b64 	.word	0x08004b64
 8004104:	08004b64 	.word	0x08004b64
 8004108:	08004b68 	.word	0x08004b68

0800410c <memset>:
 800410c:	4402      	add	r2, r0
 800410e:	4603      	mov	r3, r0
 8004110:	4293      	cmp	r3, r2
 8004112:	d100      	bne.n	8004116 <memset+0xa>
 8004114:	4770      	bx	lr
 8004116:	f803 1b01 	strb.w	r1, [r3], #1
 800411a:	e7f9      	b.n	8004110 <memset+0x4>

0800411c <siprintf>:
 800411c:	b40e      	push	{r1, r2, r3}
 800411e:	b500      	push	{lr}
 8004120:	b09c      	sub	sp, #112	; 0x70
 8004122:	ab1d      	add	r3, sp, #116	; 0x74
 8004124:	9002      	str	r0, [sp, #8]
 8004126:	9006      	str	r0, [sp, #24]
 8004128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800412c:	4809      	ldr	r0, [pc, #36]	; (8004154 <siprintf+0x38>)
 800412e:	9107      	str	r1, [sp, #28]
 8004130:	9104      	str	r1, [sp, #16]
 8004132:	4909      	ldr	r1, [pc, #36]	; (8004158 <siprintf+0x3c>)
 8004134:	f853 2b04 	ldr.w	r2, [r3], #4
 8004138:	9105      	str	r1, [sp, #20]
 800413a:	6800      	ldr	r0, [r0, #0]
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	a902      	add	r1, sp, #8
 8004140:	f000 f868 	bl	8004214 <_svfiprintf_r>
 8004144:	9b02      	ldr	r3, [sp, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	b01c      	add	sp, #112	; 0x70
 800414c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004150:	b003      	add	sp, #12
 8004152:	4770      	bx	lr
 8004154:	2000000c 	.word	0x2000000c
 8004158:	ffff0208 	.word	0xffff0208

0800415c <__ssputs_r>:
 800415c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004160:	688e      	ldr	r6, [r1, #8]
 8004162:	429e      	cmp	r6, r3
 8004164:	4682      	mov	sl, r0
 8004166:	460c      	mov	r4, r1
 8004168:	4690      	mov	r8, r2
 800416a:	461f      	mov	r7, r3
 800416c:	d838      	bhi.n	80041e0 <__ssputs_r+0x84>
 800416e:	898a      	ldrh	r2, [r1, #12]
 8004170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004174:	d032      	beq.n	80041dc <__ssputs_r+0x80>
 8004176:	6825      	ldr	r5, [r4, #0]
 8004178:	6909      	ldr	r1, [r1, #16]
 800417a:	eba5 0901 	sub.w	r9, r5, r1
 800417e:	6965      	ldr	r5, [r4, #20]
 8004180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004188:	3301      	adds	r3, #1
 800418a:	444b      	add	r3, r9
 800418c:	106d      	asrs	r5, r5, #1
 800418e:	429d      	cmp	r5, r3
 8004190:	bf38      	it	cc
 8004192:	461d      	movcc	r5, r3
 8004194:	0553      	lsls	r3, r2, #21
 8004196:	d531      	bpl.n	80041fc <__ssputs_r+0xa0>
 8004198:	4629      	mov	r1, r5
 800419a:	f000 fb63 	bl	8004864 <_malloc_r>
 800419e:	4606      	mov	r6, r0
 80041a0:	b950      	cbnz	r0, 80041b8 <__ssputs_r+0x5c>
 80041a2:	230c      	movs	r3, #12
 80041a4:	f8ca 3000 	str.w	r3, [sl]
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ae:	81a3      	strh	r3, [r4, #12]
 80041b0:	f04f 30ff 	mov.w	r0, #4294967295
 80041b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b8:	6921      	ldr	r1, [r4, #16]
 80041ba:	464a      	mov	r2, r9
 80041bc:	f000 fabe 	bl	800473c <memcpy>
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ca:	81a3      	strh	r3, [r4, #12]
 80041cc:	6126      	str	r6, [r4, #16]
 80041ce:	6165      	str	r5, [r4, #20]
 80041d0:	444e      	add	r6, r9
 80041d2:	eba5 0509 	sub.w	r5, r5, r9
 80041d6:	6026      	str	r6, [r4, #0]
 80041d8:	60a5      	str	r5, [r4, #8]
 80041da:	463e      	mov	r6, r7
 80041dc:	42be      	cmp	r6, r7
 80041de:	d900      	bls.n	80041e2 <__ssputs_r+0x86>
 80041e0:	463e      	mov	r6, r7
 80041e2:	6820      	ldr	r0, [r4, #0]
 80041e4:	4632      	mov	r2, r6
 80041e6:	4641      	mov	r1, r8
 80041e8:	f000 fab6 	bl	8004758 <memmove>
 80041ec:	68a3      	ldr	r3, [r4, #8]
 80041ee:	1b9b      	subs	r3, r3, r6
 80041f0:	60a3      	str	r3, [r4, #8]
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	4433      	add	r3, r6
 80041f6:	6023      	str	r3, [r4, #0]
 80041f8:	2000      	movs	r0, #0
 80041fa:	e7db      	b.n	80041b4 <__ssputs_r+0x58>
 80041fc:	462a      	mov	r2, r5
 80041fe:	f000 fba5 	bl	800494c <_realloc_r>
 8004202:	4606      	mov	r6, r0
 8004204:	2800      	cmp	r0, #0
 8004206:	d1e1      	bne.n	80041cc <__ssputs_r+0x70>
 8004208:	6921      	ldr	r1, [r4, #16]
 800420a:	4650      	mov	r0, sl
 800420c:	f000 fabe 	bl	800478c <_free_r>
 8004210:	e7c7      	b.n	80041a2 <__ssputs_r+0x46>
	...

08004214 <_svfiprintf_r>:
 8004214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004218:	4698      	mov	r8, r3
 800421a:	898b      	ldrh	r3, [r1, #12]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	b09d      	sub	sp, #116	; 0x74
 8004220:	4607      	mov	r7, r0
 8004222:	460d      	mov	r5, r1
 8004224:	4614      	mov	r4, r2
 8004226:	d50e      	bpl.n	8004246 <_svfiprintf_r+0x32>
 8004228:	690b      	ldr	r3, [r1, #16]
 800422a:	b963      	cbnz	r3, 8004246 <_svfiprintf_r+0x32>
 800422c:	2140      	movs	r1, #64	; 0x40
 800422e:	f000 fb19 	bl	8004864 <_malloc_r>
 8004232:	6028      	str	r0, [r5, #0]
 8004234:	6128      	str	r0, [r5, #16]
 8004236:	b920      	cbnz	r0, 8004242 <_svfiprintf_r+0x2e>
 8004238:	230c      	movs	r3, #12
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	f04f 30ff 	mov.w	r0, #4294967295
 8004240:	e0d1      	b.n	80043e6 <_svfiprintf_r+0x1d2>
 8004242:	2340      	movs	r3, #64	; 0x40
 8004244:	616b      	str	r3, [r5, #20]
 8004246:	2300      	movs	r3, #0
 8004248:	9309      	str	r3, [sp, #36]	; 0x24
 800424a:	2320      	movs	r3, #32
 800424c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004250:	f8cd 800c 	str.w	r8, [sp, #12]
 8004254:	2330      	movs	r3, #48	; 0x30
 8004256:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004400 <_svfiprintf_r+0x1ec>
 800425a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800425e:	f04f 0901 	mov.w	r9, #1
 8004262:	4623      	mov	r3, r4
 8004264:	469a      	mov	sl, r3
 8004266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800426a:	b10a      	cbz	r2, 8004270 <_svfiprintf_r+0x5c>
 800426c:	2a25      	cmp	r2, #37	; 0x25
 800426e:	d1f9      	bne.n	8004264 <_svfiprintf_r+0x50>
 8004270:	ebba 0b04 	subs.w	fp, sl, r4
 8004274:	d00b      	beq.n	800428e <_svfiprintf_r+0x7a>
 8004276:	465b      	mov	r3, fp
 8004278:	4622      	mov	r2, r4
 800427a:	4629      	mov	r1, r5
 800427c:	4638      	mov	r0, r7
 800427e:	f7ff ff6d 	bl	800415c <__ssputs_r>
 8004282:	3001      	adds	r0, #1
 8004284:	f000 80aa 	beq.w	80043dc <_svfiprintf_r+0x1c8>
 8004288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800428a:	445a      	add	r2, fp
 800428c:	9209      	str	r2, [sp, #36]	; 0x24
 800428e:	f89a 3000 	ldrb.w	r3, [sl]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 80a2 	beq.w	80043dc <_svfiprintf_r+0x1c8>
 8004298:	2300      	movs	r3, #0
 800429a:	f04f 32ff 	mov.w	r2, #4294967295
 800429e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042a2:	f10a 0a01 	add.w	sl, sl, #1
 80042a6:	9304      	str	r3, [sp, #16]
 80042a8:	9307      	str	r3, [sp, #28]
 80042aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042ae:	931a      	str	r3, [sp, #104]	; 0x68
 80042b0:	4654      	mov	r4, sl
 80042b2:	2205      	movs	r2, #5
 80042b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b8:	4851      	ldr	r0, [pc, #324]	; (8004400 <_svfiprintf_r+0x1ec>)
 80042ba:	f7fb ff99 	bl	80001f0 <memchr>
 80042be:	9a04      	ldr	r2, [sp, #16]
 80042c0:	b9d8      	cbnz	r0, 80042fa <_svfiprintf_r+0xe6>
 80042c2:	06d0      	lsls	r0, r2, #27
 80042c4:	bf44      	itt	mi
 80042c6:	2320      	movmi	r3, #32
 80042c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042cc:	0711      	lsls	r1, r2, #28
 80042ce:	bf44      	itt	mi
 80042d0:	232b      	movmi	r3, #43	; 0x2b
 80042d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042d6:	f89a 3000 	ldrb.w	r3, [sl]
 80042da:	2b2a      	cmp	r3, #42	; 0x2a
 80042dc:	d015      	beq.n	800430a <_svfiprintf_r+0xf6>
 80042de:	9a07      	ldr	r2, [sp, #28]
 80042e0:	4654      	mov	r4, sl
 80042e2:	2000      	movs	r0, #0
 80042e4:	f04f 0c0a 	mov.w	ip, #10
 80042e8:	4621      	mov	r1, r4
 80042ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042ee:	3b30      	subs	r3, #48	; 0x30
 80042f0:	2b09      	cmp	r3, #9
 80042f2:	d94e      	bls.n	8004392 <_svfiprintf_r+0x17e>
 80042f4:	b1b0      	cbz	r0, 8004324 <_svfiprintf_r+0x110>
 80042f6:	9207      	str	r2, [sp, #28]
 80042f8:	e014      	b.n	8004324 <_svfiprintf_r+0x110>
 80042fa:	eba0 0308 	sub.w	r3, r0, r8
 80042fe:	fa09 f303 	lsl.w	r3, r9, r3
 8004302:	4313      	orrs	r3, r2
 8004304:	9304      	str	r3, [sp, #16]
 8004306:	46a2      	mov	sl, r4
 8004308:	e7d2      	b.n	80042b0 <_svfiprintf_r+0x9c>
 800430a:	9b03      	ldr	r3, [sp, #12]
 800430c:	1d19      	adds	r1, r3, #4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	9103      	str	r1, [sp, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	bfbb      	ittet	lt
 8004316:	425b      	neglt	r3, r3
 8004318:	f042 0202 	orrlt.w	r2, r2, #2
 800431c:	9307      	strge	r3, [sp, #28]
 800431e:	9307      	strlt	r3, [sp, #28]
 8004320:	bfb8      	it	lt
 8004322:	9204      	strlt	r2, [sp, #16]
 8004324:	7823      	ldrb	r3, [r4, #0]
 8004326:	2b2e      	cmp	r3, #46	; 0x2e
 8004328:	d10c      	bne.n	8004344 <_svfiprintf_r+0x130>
 800432a:	7863      	ldrb	r3, [r4, #1]
 800432c:	2b2a      	cmp	r3, #42	; 0x2a
 800432e:	d135      	bne.n	800439c <_svfiprintf_r+0x188>
 8004330:	9b03      	ldr	r3, [sp, #12]
 8004332:	1d1a      	adds	r2, r3, #4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	9203      	str	r2, [sp, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	bfb8      	it	lt
 800433c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004340:	3402      	adds	r4, #2
 8004342:	9305      	str	r3, [sp, #20]
 8004344:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004410 <_svfiprintf_r+0x1fc>
 8004348:	7821      	ldrb	r1, [r4, #0]
 800434a:	2203      	movs	r2, #3
 800434c:	4650      	mov	r0, sl
 800434e:	f7fb ff4f 	bl	80001f0 <memchr>
 8004352:	b140      	cbz	r0, 8004366 <_svfiprintf_r+0x152>
 8004354:	2340      	movs	r3, #64	; 0x40
 8004356:	eba0 000a 	sub.w	r0, r0, sl
 800435a:	fa03 f000 	lsl.w	r0, r3, r0
 800435e:	9b04      	ldr	r3, [sp, #16]
 8004360:	4303      	orrs	r3, r0
 8004362:	3401      	adds	r4, #1
 8004364:	9304      	str	r3, [sp, #16]
 8004366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800436a:	4826      	ldr	r0, [pc, #152]	; (8004404 <_svfiprintf_r+0x1f0>)
 800436c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004370:	2206      	movs	r2, #6
 8004372:	f7fb ff3d 	bl	80001f0 <memchr>
 8004376:	2800      	cmp	r0, #0
 8004378:	d038      	beq.n	80043ec <_svfiprintf_r+0x1d8>
 800437a:	4b23      	ldr	r3, [pc, #140]	; (8004408 <_svfiprintf_r+0x1f4>)
 800437c:	bb1b      	cbnz	r3, 80043c6 <_svfiprintf_r+0x1b2>
 800437e:	9b03      	ldr	r3, [sp, #12]
 8004380:	3307      	adds	r3, #7
 8004382:	f023 0307 	bic.w	r3, r3, #7
 8004386:	3308      	adds	r3, #8
 8004388:	9303      	str	r3, [sp, #12]
 800438a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800438c:	4433      	add	r3, r6
 800438e:	9309      	str	r3, [sp, #36]	; 0x24
 8004390:	e767      	b.n	8004262 <_svfiprintf_r+0x4e>
 8004392:	fb0c 3202 	mla	r2, ip, r2, r3
 8004396:	460c      	mov	r4, r1
 8004398:	2001      	movs	r0, #1
 800439a:	e7a5      	b.n	80042e8 <_svfiprintf_r+0xd4>
 800439c:	2300      	movs	r3, #0
 800439e:	3401      	adds	r4, #1
 80043a0:	9305      	str	r3, [sp, #20]
 80043a2:	4619      	mov	r1, r3
 80043a4:	f04f 0c0a 	mov.w	ip, #10
 80043a8:	4620      	mov	r0, r4
 80043aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043ae:	3a30      	subs	r2, #48	; 0x30
 80043b0:	2a09      	cmp	r2, #9
 80043b2:	d903      	bls.n	80043bc <_svfiprintf_r+0x1a8>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0c5      	beq.n	8004344 <_svfiprintf_r+0x130>
 80043b8:	9105      	str	r1, [sp, #20]
 80043ba:	e7c3      	b.n	8004344 <_svfiprintf_r+0x130>
 80043bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80043c0:	4604      	mov	r4, r0
 80043c2:	2301      	movs	r3, #1
 80043c4:	e7f0      	b.n	80043a8 <_svfiprintf_r+0x194>
 80043c6:	ab03      	add	r3, sp, #12
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	462a      	mov	r2, r5
 80043cc:	4b0f      	ldr	r3, [pc, #60]	; (800440c <_svfiprintf_r+0x1f8>)
 80043ce:	a904      	add	r1, sp, #16
 80043d0:	4638      	mov	r0, r7
 80043d2:	f3af 8000 	nop.w
 80043d6:	1c42      	adds	r2, r0, #1
 80043d8:	4606      	mov	r6, r0
 80043da:	d1d6      	bne.n	800438a <_svfiprintf_r+0x176>
 80043dc:	89ab      	ldrh	r3, [r5, #12]
 80043de:	065b      	lsls	r3, r3, #25
 80043e0:	f53f af2c 	bmi.w	800423c <_svfiprintf_r+0x28>
 80043e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043e6:	b01d      	add	sp, #116	; 0x74
 80043e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ec:	ab03      	add	r3, sp, #12
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	462a      	mov	r2, r5
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <_svfiprintf_r+0x1f8>)
 80043f4:	a904      	add	r1, sp, #16
 80043f6:	4638      	mov	r0, r7
 80043f8:	f000 f87a 	bl	80044f0 <_printf_i>
 80043fc:	e7eb      	b.n	80043d6 <_svfiprintf_r+0x1c2>
 80043fe:	bf00      	nop
 8004400:	08004b28 	.word	0x08004b28
 8004404:	08004b32 	.word	0x08004b32
 8004408:	00000000 	.word	0x00000000
 800440c:	0800415d 	.word	0x0800415d
 8004410:	08004b2e 	.word	0x08004b2e

08004414 <_printf_common>:
 8004414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004418:	4616      	mov	r6, r2
 800441a:	4699      	mov	r9, r3
 800441c:	688a      	ldr	r2, [r1, #8]
 800441e:	690b      	ldr	r3, [r1, #16]
 8004420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004424:	4293      	cmp	r3, r2
 8004426:	bfb8      	it	lt
 8004428:	4613      	movlt	r3, r2
 800442a:	6033      	str	r3, [r6, #0]
 800442c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004430:	4607      	mov	r7, r0
 8004432:	460c      	mov	r4, r1
 8004434:	b10a      	cbz	r2, 800443a <_printf_common+0x26>
 8004436:	3301      	adds	r3, #1
 8004438:	6033      	str	r3, [r6, #0]
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	0699      	lsls	r1, r3, #26
 800443e:	bf42      	ittt	mi
 8004440:	6833      	ldrmi	r3, [r6, #0]
 8004442:	3302      	addmi	r3, #2
 8004444:	6033      	strmi	r3, [r6, #0]
 8004446:	6825      	ldr	r5, [r4, #0]
 8004448:	f015 0506 	ands.w	r5, r5, #6
 800444c:	d106      	bne.n	800445c <_printf_common+0x48>
 800444e:	f104 0a19 	add.w	sl, r4, #25
 8004452:	68e3      	ldr	r3, [r4, #12]
 8004454:	6832      	ldr	r2, [r6, #0]
 8004456:	1a9b      	subs	r3, r3, r2
 8004458:	42ab      	cmp	r3, r5
 800445a:	dc26      	bgt.n	80044aa <_printf_common+0x96>
 800445c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004460:	1e13      	subs	r3, r2, #0
 8004462:	6822      	ldr	r2, [r4, #0]
 8004464:	bf18      	it	ne
 8004466:	2301      	movne	r3, #1
 8004468:	0692      	lsls	r2, r2, #26
 800446a:	d42b      	bmi.n	80044c4 <_printf_common+0xb0>
 800446c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004470:	4649      	mov	r1, r9
 8004472:	4638      	mov	r0, r7
 8004474:	47c0      	blx	r8
 8004476:	3001      	adds	r0, #1
 8004478:	d01e      	beq.n	80044b8 <_printf_common+0xa4>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	68e5      	ldr	r5, [r4, #12]
 800447e:	6832      	ldr	r2, [r6, #0]
 8004480:	f003 0306 	and.w	r3, r3, #6
 8004484:	2b04      	cmp	r3, #4
 8004486:	bf08      	it	eq
 8004488:	1aad      	subeq	r5, r5, r2
 800448a:	68a3      	ldr	r3, [r4, #8]
 800448c:	6922      	ldr	r2, [r4, #16]
 800448e:	bf0c      	ite	eq
 8004490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004494:	2500      	movne	r5, #0
 8004496:	4293      	cmp	r3, r2
 8004498:	bfc4      	itt	gt
 800449a:	1a9b      	subgt	r3, r3, r2
 800449c:	18ed      	addgt	r5, r5, r3
 800449e:	2600      	movs	r6, #0
 80044a0:	341a      	adds	r4, #26
 80044a2:	42b5      	cmp	r5, r6
 80044a4:	d11a      	bne.n	80044dc <_printf_common+0xc8>
 80044a6:	2000      	movs	r0, #0
 80044a8:	e008      	b.n	80044bc <_printf_common+0xa8>
 80044aa:	2301      	movs	r3, #1
 80044ac:	4652      	mov	r2, sl
 80044ae:	4649      	mov	r1, r9
 80044b0:	4638      	mov	r0, r7
 80044b2:	47c0      	blx	r8
 80044b4:	3001      	adds	r0, #1
 80044b6:	d103      	bne.n	80044c0 <_printf_common+0xac>
 80044b8:	f04f 30ff 	mov.w	r0, #4294967295
 80044bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044c0:	3501      	adds	r5, #1
 80044c2:	e7c6      	b.n	8004452 <_printf_common+0x3e>
 80044c4:	18e1      	adds	r1, r4, r3
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	2030      	movs	r0, #48	; 0x30
 80044ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044ce:	4422      	add	r2, r4
 80044d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044d8:	3302      	adds	r3, #2
 80044da:	e7c7      	b.n	800446c <_printf_common+0x58>
 80044dc:	2301      	movs	r3, #1
 80044de:	4622      	mov	r2, r4
 80044e0:	4649      	mov	r1, r9
 80044e2:	4638      	mov	r0, r7
 80044e4:	47c0      	blx	r8
 80044e6:	3001      	adds	r0, #1
 80044e8:	d0e6      	beq.n	80044b8 <_printf_common+0xa4>
 80044ea:	3601      	adds	r6, #1
 80044ec:	e7d9      	b.n	80044a2 <_printf_common+0x8e>
	...

080044f0 <_printf_i>:
 80044f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044f4:	7e0f      	ldrb	r7, [r1, #24]
 80044f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044f8:	2f78      	cmp	r7, #120	; 0x78
 80044fa:	4691      	mov	r9, r2
 80044fc:	4680      	mov	r8, r0
 80044fe:	460c      	mov	r4, r1
 8004500:	469a      	mov	sl, r3
 8004502:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004506:	d807      	bhi.n	8004518 <_printf_i+0x28>
 8004508:	2f62      	cmp	r7, #98	; 0x62
 800450a:	d80a      	bhi.n	8004522 <_printf_i+0x32>
 800450c:	2f00      	cmp	r7, #0
 800450e:	f000 80d8 	beq.w	80046c2 <_printf_i+0x1d2>
 8004512:	2f58      	cmp	r7, #88	; 0x58
 8004514:	f000 80a3 	beq.w	800465e <_printf_i+0x16e>
 8004518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800451c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004520:	e03a      	b.n	8004598 <_printf_i+0xa8>
 8004522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004526:	2b15      	cmp	r3, #21
 8004528:	d8f6      	bhi.n	8004518 <_printf_i+0x28>
 800452a:	a101      	add	r1, pc, #4	; (adr r1, 8004530 <_printf_i+0x40>)
 800452c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004530:	08004589 	.word	0x08004589
 8004534:	0800459d 	.word	0x0800459d
 8004538:	08004519 	.word	0x08004519
 800453c:	08004519 	.word	0x08004519
 8004540:	08004519 	.word	0x08004519
 8004544:	08004519 	.word	0x08004519
 8004548:	0800459d 	.word	0x0800459d
 800454c:	08004519 	.word	0x08004519
 8004550:	08004519 	.word	0x08004519
 8004554:	08004519 	.word	0x08004519
 8004558:	08004519 	.word	0x08004519
 800455c:	080046a9 	.word	0x080046a9
 8004560:	080045cd 	.word	0x080045cd
 8004564:	0800468b 	.word	0x0800468b
 8004568:	08004519 	.word	0x08004519
 800456c:	08004519 	.word	0x08004519
 8004570:	080046cb 	.word	0x080046cb
 8004574:	08004519 	.word	0x08004519
 8004578:	080045cd 	.word	0x080045cd
 800457c:	08004519 	.word	0x08004519
 8004580:	08004519 	.word	0x08004519
 8004584:	08004693 	.word	0x08004693
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	1d1a      	adds	r2, r3, #4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	602a      	str	r2, [r5, #0]
 8004590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004598:	2301      	movs	r3, #1
 800459a:	e0a3      	b.n	80046e4 <_printf_i+0x1f4>
 800459c:	6820      	ldr	r0, [r4, #0]
 800459e:	6829      	ldr	r1, [r5, #0]
 80045a0:	0606      	lsls	r6, r0, #24
 80045a2:	f101 0304 	add.w	r3, r1, #4
 80045a6:	d50a      	bpl.n	80045be <_printf_i+0xce>
 80045a8:	680e      	ldr	r6, [r1, #0]
 80045aa:	602b      	str	r3, [r5, #0]
 80045ac:	2e00      	cmp	r6, #0
 80045ae:	da03      	bge.n	80045b8 <_printf_i+0xc8>
 80045b0:	232d      	movs	r3, #45	; 0x2d
 80045b2:	4276      	negs	r6, r6
 80045b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045b8:	485e      	ldr	r0, [pc, #376]	; (8004734 <_printf_i+0x244>)
 80045ba:	230a      	movs	r3, #10
 80045bc:	e019      	b.n	80045f2 <_printf_i+0x102>
 80045be:	680e      	ldr	r6, [r1, #0]
 80045c0:	602b      	str	r3, [r5, #0]
 80045c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045c6:	bf18      	it	ne
 80045c8:	b236      	sxthne	r6, r6
 80045ca:	e7ef      	b.n	80045ac <_printf_i+0xbc>
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	6820      	ldr	r0, [r4, #0]
 80045d0:	1d19      	adds	r1, r3, #4
 80045d2:	6029      	str	r1, [r5, #0]
 80045d4:	0601      	lsls	r1, r0, #24
 80045d6:	d501      	bpl.n	80045dc <_printf_i+0xec>
 80045d8:	681e      	ldr	r6, [r3, #0]
 80045da:	e002      	b.n	80045e2 <_printf_i+0xf2>
 80045dc:	0646      	lsls	r6, r0, #25
 80045de:	d5fb      	bpl.n	80045d8 <_printf_i+0xe8>
 80045e0:	881e      	ldrh	r6, [r3, #0]
 80045e2:	4854      	ldr	r0, [pc, #336]	; (8004734 <_printf_i+0x244>)
 80045e4:	2f6f      	cmp	r7, #111	; 0x6f
 80045e6:	bf0c      	ite	eq
 80045e8:	2308      	moveq	r3, #8
 80045ea:	230a      	movne	r3, #10
 80045ec:	2100      	movs	r1, #0
 80045ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045f2:	6865      	ldr	r5, [r4, #4]
 80045f4:	60a5      	str	r5, [r4, #8]
 80045f6:	2d00      	cmp	r5, #0
 80045f8:	bfa2      	ittt	ge
 80045fa:	6821      	ldrge	r1, [r4, #0]
 80045fc:	f021 0104 	bicge.w	r1, r1, #4
 8004600:	6021      	strge	r1, [r4, #0]
 8004602:	b90e      	cbnz	r6, 8004608 <_printf_i+0x118>
 8004604:	2d00      	cmp	r5, #0
 8004606:	d04d      	beq.n	80046a4 <_printf_i+0x1b4>
 8004608:	4615      	mov	r5, r2
 800460a:	fbb6 f1f3 	udiv	r1, r6, r3
 800460e:	fb03 6711 	mls	r7, r3, r1, r6
 8004612:	5dc7      	ldrb	r7, [r0, r7]
 8004614:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004618:	4637      	mov	r7, r6
 800461a:	42bb      	cmp	r3, r7
 800461c:	460e      	mov	r6, r1
 800461e:	d9f4      	bls.n	800460a <_printf_i+0x11a>
 8004620:	2b08      	cmp	r3, #8
 8004622:	d10b      	bne.n	800463c <_printf_i+0x14c>
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	07de      	lsls	r6, r3, #31
 8004628:	d508      	bpl.n	800463c <_printf_i+0x14c>
 800462a:	6923      	ldr	r3, [r4, #16]
 800462c:	6861      	ldr	r1, [r4, #4]
 800462e:	4299      	cmp	r1, r3
 8004630:	bfde      	ittt	le
 8004632:	2330      	movle	r3, #48	; 0x30
 8004634:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004638:	f105 35ff 	addle.w	r5, r5, #4294967295
 800463c:	1b52      	subs	r2, r2, r5
 800463e:	6122      	str	r2, [r4, #16]
 8004640:	f8cd a000 	str.w	sl, [sp]
 8004644:	464b      	mov	r3, r9
 8004646:	aa03      	add	r2, sp, #12
 8004648:	4621      	mov	r1, r4
 800464a:	4640      	mov	r0, r8
 800464c:	f7ff fee2 	bl	8004414 <_printf_common>
 8004650:	3001      	adds	r0, #1
 8004652:	d14c      	bne.n	80046ee <_printf_i+0x1fe>
 8004654:	f04f 30ff 	mov.w	r0, #4294967295
 8004658:	b004      	add	sp, #16
 800465a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800465e:	4835      	ldr	r0, [pc, #212]	; (8004734 <_printf_i+0x244>)
 8004660:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004664:	6829      	ldr	r1, [r5, #0]
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	f851 6b04 	ldr.w	r6, [r1], #4
 800466c:	6029      	str	r1, [r5, #0]
 800466e:	061d      	lsls	r5, r3, #24
 8004670:	d514      	bpl.n	800469c <_printf_i+0x1ac>
 8004672:	07df      	lsls	r7, r3, #31
 8004674:	bf44      	itt	mi
 8004676:	f043 0320 	orrmi.w	r3, r3, #32
 800467a:	6023      	strmi	r3, [r4, #0]
 800467c:	b91e      	cbnz	r6, 8004686 <_printf_i+0x196>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	f023 0320 	bic.w	r3, r3, #32
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	2310      	movs	r3, #16
 8004688:	e7b0      	b.n	80045ec <_printf_i+0xfc>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	f043 0320 	orr.w	r3, r3, #32
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	2378      	movs	r3, #120	; 0x78
 8004694:	4828      	ldr	r0, [pc, #160]	; (8004738 <_printf_i+0x248>)
 8004696:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800469a:	e7e3      	b.n	8004664 <_printf_i+0x174>
 800469c:	0659      	lsls	r1, r3, #25
 800469e:	bf48      	it	mi
 80046a0:	b2b6      	uxthmi	r6, r6
 80046a2:	e7e6      	b.n	8004672 <_printf_i+0x182>
 80046a4:	4615      	mov	r5, r2
 80046a6:	e7bb      	b.n	8004620 <_printf_i+0x130>
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	6826      	ldr	r6, [r4, #0]
 80046ac:	6961      	ldr	r1, [r4, #20]
 80046ae:	1d18      	adds	r0, r3, #4
 80046b0:	6028      	str	r0, [r5, #0]
 80046b2:	0635      	lsls	r5, r6, #24
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	d501      	bpl.n	80046bc <_printf_i+0x1cc>
 80046b8:	6019      	str	r1, [r3, #0]
 80046ba:	e002      	b.n	80046c2 <_printf_i+0x1d2>
 80046bc:	0670      	lsls	r0, r6, #25
 80046be:	d5fb      	bpl.n	80046b8 <_printf_i+0x1c8>
 80046c0:	8019      	strh	r1, [r3, #0]
 80046c2:	2300      	movs	r3, #0
 80046c4:	6123      	str	r3, [r4, #16]
 80046c6:	4615      	mov	r5, r2
 80046c8:	e7ba      	b.n	8004640 <_printf_i+0x150>
 80046ca:	682b      	ldr	r3, [r5, #0]
 80046cc:	1d1a      	adds	r2, r3, #4
 80046ce:	602a      	str	r2, [r5, #0]
 80046d0:	681d      	ldr	r5, [r3, #0]
 80046d2:	6862      	ldr	r2, [r4, #4]
 80046d4:	2100      	movs	r1, #0
 80046d6:	4628      	mov	r0, r5
 80046d8:	f7fb fd8a 	bl	80001f0 <memchr>
 80046dc:	b108      	cbz	r0, 80046e2 <_printf_i+0x1f2>
 80046de:	1b40      	subs	r0, r0, r5
 80046e0:	6060      	str	r0, [r4, #4]
 80046e2:	6863      	ldr	r3, [r4, #4]
 80046e4:	6123      	str	r3, [r4, #16]
 80046e6:	2300      	movs	r3, #0
 80046e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ec:	e7a8      	b.n	8004640 <_printf_i+0x150>
 80046ee:	6923      	ldr	r3, [r4, #16]
 80046f0:	462a      	mov	r2, r5
 80046f2:	4649      	mov	r1, r9
 80046f4:	4640      	mov	r0, r8
 80046f6:	47d0      	blx	sl
 80046f8:	3001      	adds	r0, #1
 80046fa:	d0ab      	beq.n	8004654 <_printf_i+0x164>
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	079b      	lsls	r3, r3, #30
 8004700:	d413      	bmi.n	800472a <_printf_i+0x23a>
 8004702:	68e0      	ldr	r0, [r4, #12]
 8004704:	9b03      	ldr	r3, [sp, #12]
 8004706:	4298      	cmp	r0, r3
 8004708:	bfb8      	it	lt
 800470a:	4618      	movlt	r0, r3
 800470c:	e7a4      	b.n	8004658 <_printf_i+0x168>
 800470e:	2301      	movs	r3, #1
 8004710:	4632      	mov	r2, r6
 8004712:	4649      	mov	r1, r9
 8004714:	4640      	mov	r0, r8
 8004716:	47d0      	blx	sl
 8004718:	3001      	adds	r0, #1
 800471a:	d09b      	beq.n	8004654 <_printf_i+0x164>
 800471c:	3501      	adds	r5, #1
 800471e:	68e3      	ldr	r3, [r4, #12]
 8004720:	9903      	ldr	r1, [sp, #12]
 8004722:	1a5b      	subs	r3, r3, r1
 8004724:	42ab      	cmp	r3, r5
 8004726:	dcf2      	bgt.n	800470e <_printf_i+0x21e>
 8004728:	e7eb      	b.n	8004702 <_printf_i+0x212>
 800472a:	2500      	movs	r5, #0
 800472c:	f104 0619 	add.w	r6, r4, #25
 8004730:	e7f5      	b.n	800471e <_printf_i+0x22e>
 8004732:	bf00      	nop
 8004734:	08004b39 	.word	0x08004b39
 8004738:	08004b4a 	.word	0x08004b4a

0800473c <memcpy>:
 800473c:	440a      	add	r2, r1
 800473e:	4291      	cmp	r1, r2
 8004740:	f100 33ff 	add.w	r3, r0, #4294967295
 8004744:	d100      	bne.n	8004748 <memcpy+0xc>
 8004746:	4770      	bx	lr
 8004748:	b510      	push	{r4, lr}
 800474a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800474e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004752:	4291      	cmp	r1, r2
 8004754:	d1f9      	bne.n	800474a <memcpy+0xe>
 8004756:	bd10      	pop	{r4, pc}

08004758 <memmove>:
 8004758:	4288      	cmp	r0, r1
 800475a:	b510      	push	{r4, lr}
 800475c:	eb01 0402 	add.w	r4, r1, r2
 8004760:	d902      	bls.n	8004768 <memmove+0x10>
 8004762:	4284      	cmp	r4, r0
 8004764:	4623      	mov	r3, r4
 8004766:	d807      	bhi.n	8004778 <memmove+0x20>
 8004768:	1e43      	subs	r3, r0, #1
 800476a:	42a1      	cmp	r1, r4
 800476c:	d008      	beq.n	8004780 <memmove+0x28>
 800476e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004772:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004776:	e7f8      	b.n	800476a <memmove+0x12>
 8004778:	4402      	add	r2, r0
 800477a:	4601      	mov	r1, r0
 800477c:	428a      	cmp	r2, r1
 800477e:	d100      	bne.n	8004782 <memmove+0x2a>
 8004780:	bd10      	pop	{r4, pc}
 8004782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800478a:	e7f7      	b.n	800477c <memmove+0x24>

0800478c <_free_r>:
 800478c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800478e:	2900      	cmp	r1, #0
 8004790:	d044      	beq.n	800481c <_free_r+0x90>
 8004792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004796:	9001      	str	r0, [sp, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	f1a1 0404 	sub.w	r4, r1, #4
 800479e:	bfb8      	it	lt
 80047a0:	18e4      	addlt	r4, r4, r3
 80047a2:	f000 f913 	bl	80049cc <__malloc_lock>
 80047a6:	4a1e      	ldr	r2, [pc, #120]	; (8004820 <_free_r+0x94>)
 80047a8:	9801      	ldr	r0, [sp, #4]
 80047aa:	6813      	ldr	r3, [r2, #0]
 80047ac:	b933      	cbnz	r3, 80047bc <_free_r+0x30>
 80047ae:	6063      	str	r3, [r4, #4]
 80047b0:	6014      	str	r4, [r2, #0]
 80047b2:	b003      	add	sp, #12
 80047b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047b8:	f000 b90e 	b.w	80049d8 <__malloc_unlock>
 80047bc:	42a3      	cmp	r3, r4
 80047be:	d908      	bls.n	80047d2 <_free_r+0x46>
 80047c0:	6825      	ldr	r5, [r4, #0]
 80047c2:	1961      	adds	r1, r4, r5
 80047c4:	428b      	cmp	r3, r1
 80047c6:	bf01      	itttt	eq
 80047c8:	6819      	ldreq	r1, [r3, #0]
 80047ca:	685b      	ldreq	r3, [r3, #4]
 80047cc:	1949      	addeq	r1, r1, r5
 80047ce:	6021      	streq	r1, [r4, #0]
 80047d0:	e7ed      	b.n	80047ae <_free_r+0x22>
 80047d2:	461a      	mov	r2, r3
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	b10b      	cbz	r3, 80047dc <_free_r+0x50>
 80047d8:	42a3      	cmp	r3, r4
 80047da:	d9fa      	bls.n	80047d2 <_free_r+0x46>
 80047dc:	6811      	ldr	r1, [r2, #0]
 80047de:	1855      	adds	r5, r2, r1
 80047e0:	42a5      	cmp	r5, r4
 80047e2:	d10b      	bne.n	80047fc <_free_r+0x70>
 80047e4:	6824      	ldr	r4, [r4, #0]
 80047e6:	4421      	add	r1, r4
 80047e8:	1854      	adds	r4, r2, r1
 80047ea:	42a3      	cmp	r3, r4
 80047ec:	6011      	str	r1, [r2, #0]
 80047ee:	d1e0      	bne.n	80047b2 <_free_r+0x26>
 80047f0:	681c      	ldr	r4, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	6053      	str	r3, [r2, #4]
 80047f6:	4421      	add	r1, r4
 80047f8:	6011      	str	r1, [r2, #0]
 80047fa:	e7da      	b.n	80047b2 <_free_r+0x26>
 80047fc:	d902      	bls.n	8004804 <_free_r+0x78>
 80047fe:	230c      	movs	r3, #12
 8004800:	6003      	str	r3, [r0, #0]
 8004802:	e7d6      	b.n	80047b2 <_free_r+0x26>
 8004804:	6825      	ldr	r5, [r4, #0]
 8004806:	1961      	adds	r1, r4, r5
 8004808:	428b      	cmp	r3, r1
 800480a:	bf04      	itt	eq
 800480c:	6819      	ldreq	r1, [r3, #0]
 800480e:	685b      	ldreq	r3, [r3, #4]
 8004810:	6063      	str	r3, [r4, #4]
 8004812:	bf04      	itt	eq
 8004814:	1949      	addeq	r1, r1, r5
 8004816:	6021      	streq	r1, [r4, #0]
 8004818:	6054      	str	r4, [r2, #4]
 800481a:	e7ca      	b.n	80047b2 <_free_r+0x26>
 800481c:	b003      	add	sp, #12
 800481e:	bd30      	pop	{r4, r5, pc}
 8004820:	200002c0 	.word	0x200002c0

08004824 <sbrk_aligned>:
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	4e0e      	ldr	r6, [pc, #56]	; (8004860 <sbrk_aligned+0x3c>)
 8004828:	460c      	mov	r4, r1
 800482a:	6831      	ldr	r1, [r6, #0]
 800482c:	4605      	mov	r5, r0
 800482e:	b911      	cbnz	r1, 8004836 <sbrk_aligned+0x12>
 8004830:	f000 f8bc 	bl	80049ac <_sbrk_r>
 8004834:	6030      	str	r0, [r6, #0]
 8004836:	4621      	mov	r1, r4
 8004838:	4628      	mov	r0, r5
 800483a:	f000 f8b7 	bl	80049ac <_sbrk_r>
 800483e:	1c43      	adds	r3, r0, #1
 8004840:	d00a      	beq.n	8004858 <sbrk_aligned+0x34>
 8004842:	1cc4      	adds	r4, r0, #3
 8004844:	f024 0403 	bic.w	r4, r4, #3
 8004848:	42a0      	cmp	r0, r4
 800484a:	d007      	beq.n	800485c <sbrk_aligned+0x38>
 800484c:	1a21      	subs	r1, r4, r0
 800484e:	4628      	mov	r0, r5
 8004850:	f000 f8ac 	bl	80049ac <_sbrk_r>
 8004854:	3001      	adds	r0, #1
 8004856:	d101      	bne.n	800485c <sbrk_aligned+0x38>
 8004858:	f04f 34ff 	mov.w	r4, #4294967295
 800485c:	4620      	mov	r0, r4
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	200002c4 	.word	0x200002c4

08004864 <_malloc_r>:
 8004864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004868:	1ccd      	adds	r5, r1, #3
 800486a:	f025 0503 	bic.w	r5, r5, #3
 800486e:	3508      	adds	r5, #8
 8004870:	2d0c      	cmp	r5, #12
 8004872:	bf38      	it	cc
 8004874:	250c      	movcc	r5, #12
 8004876:	2d00      	cmp	r5, #0
 8004878:	4607      	mov	r7, r0
 800487a:	db01      	blt.n	8004880 <_malloc_r+0x1c>
 800487c:	42a9      	cmp	r1, r5
 800487e:	d905      	bls.n	800488c <_malloc_r+0x28>
 8004880:	230c      	movs	r3, #12
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	2600      	movs	r6, #0
 8004886:	4630      	mov	r0, r6
 8004888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800488c:	4e2e      	ldr	r6, [pc, #184]	; (8004948 <_malloc_r+0xe4>)
 800488e:	f000 f89d 	bl	80049cc <__malloc_lock>
 8004892:	6833      	ldr	r3, [r6, #0]
 8004894:	461c      	mov	r4, r3
 8004896:	bb34      	cbnz	r4, 80048e6 <_malloc_r+0x82>
 8004898:	4629      	mov	r1, r5
 800489a:	4638      	mov	r0, r7
 800489c:	f7ff ffc2 	bl	8004824 <sbrk_aligned>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	4604      	mov	r4, r0
 80048a4:	d14d      	bne.n	8004942 <_malloc_r+0xde>
 80048a6:	6834      	ldr	r4, [r6, #0]
 80048a8:	4626      	mov	r6, r4
 80048aa:	2e00      	cmp	r6, #0
 80048ac:	d140      	bne.n	8004930 <_malloc_r+0xcc>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	4631      	mov	r1, r6
 80048b2:	4638      	mov	r0, r7
 80048b4:	eb04 0803 	add.w	r8, r4, r3
 80048b8:	f000 f878 	bl	80049ac <_sbrk_r>
 80048bc:	4580      	cmp	r8, r0
 80048be:	d13a      	bne.n	8004936 <_malloc_r+0xd2>
 80048c0:	6821      	ldr	r1, [r4, #0]
 80048c2:	3503      	adds	r5, #3
 80048c4:	1a6d      	subs	r5, r5, r1
 80048c6:	f025 0503 	bic.w	r5, r5, #3
 80048ca:	3508      	adds	r5, #8
 80048cc:	2d0c      	cmp	r5, #12
 80048ce:	bf38      	it	cc
 80048d0:	250c      	movcc	r5, #12
 80048d2:	4629      	mov	r1, r5
 80048d4:	4638      	mov	r0, r7
 80048d6:	f7ff ffa5 	bl	8004824 <sbrk_aligned>
 80048da:	3001      	adds	r0, #1
 80048dc:	d02b      	beq.n	8004936 <_malloc_r+0xd2>
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	442b      	add	r3, r5
 80048e2:	6023      	str	r3, [r4, #0]
 80048e4:	e00e      	b.n	8004904 <_malloc_r+0xa0>
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	1b52      	subs	r2, r2, r5
 80048ea:	d41e      	bmi.n	800492a <_malloc_r+0xc6>
 80048ec:	2a0b      	cmp	r2, #11
 80048ee:	d916      	bls.n	800491e <_malloc_r+0xba>
 80048f0:	1961      	adds	r1, r4, r5
 80048f2:	42a3      	cmp	r3, r4
 80048f4:	6025      	str	r5, [r4, #0]
 80048f6:	bf18      	it	ne
 80048f8:	6059      	strne	r1, [r3, #4]
 80048fa:	6863      	ldr	r3, [r4, #4]
 80048fc:	bf08      	it	eq
 80048fe:	6031      	streq	r1, [r6, #0]
 8004900:	5162      	str	r2, [r4, r5]
 8004902:	604b      	str	r3, [r1, #4]
 8004904:	4638      	mov	r0, r7
 8004906:	f104 060b 	add.w	r6, r4, #11
 800490a:	f000 f865 	bl	80049d8 <__malloc_unlock>
 800490e:	f026 0607 	bic.w	r6, r6, #7
 8004912:	1d23      	adds	r3, r4, #4
 8004914:	1af2      	subs	r2, r6, r3
 8004916:	d0b6      	beq.n	8004886 <_malloc_r+0x22>
 8004918:	1b9b      	subs	r3, r3, r6
 800491a:	50a3      	str	r3, [r4, r2]
 800491c:	e7b3      	b.n	8004886 <_malloc_r+0x22>
 800491e:	6862      	ldr	r2, [r4, #4]
 8004920:	42a3      	cmp	r3, r4
 8004922:	bf0c      	ite	eq
 8004924:	6032      	streq	r2, [r6, #0]
 8004926:	605a      	strne	r2, [r3, #4]
 8004928:	e7ec      	b.n	8004904 <_malloc_r+0xa0>
 800492a:	4623      	mov	r3, r4
 800492c:	6864      	ldr	r4, [r4, #4]
 800492e:	e7b2      	b.n	8004896 <_malloc_r+0x32>
 8004930:	4634      	mov	r4, r6
 8004932:	6876      	ldr	r6, [r6, #4]
 8004934:	e7b9      	b.n	80048aa <_malloc_r+0x46>
 8004936:	230c      	movs	r3, #12
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	4638      	mov	r0, r7
 800493c:	f000 f84c 	bl	80049d8 <__malloc_unlock>
 8004940:	e7a1      	b.n	8004886 <_malloc_r+0x22>
 8004942:	6025      	str	r5, [r4, #0]
 8004944:	e7de      	b.n	8004904 <_malloc_r+0xa0>
 8004946:	bf00      	nop
 8004948:	200002c0 	.word	0x200002c0

0800494c <_realloc_r>:
 800494c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004950:	4680      	mov	r8, r0
 8004952:	4614      	mov	r4, r2
 8004954:	460e      	mov	r6, r1
 8004956:	b921      	cbnz	r1, 8004962 <_realloc_r+0x16>
 8004958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800495c:	4611      	mov	r1, r2
 800495e:	f7ff bf81 	b.w	8004864 <_malloc_r>
 8004962:	b92a      	cbnz	r2, 8004970 <_realloc_r+0x24>
 8004964:	f7ff ff12 	bl	800478c <_free_r>
 8004968:	4625      	mov	r5, r4
 800496a:	4628      	mov	r0, r5
 800496c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004970:	f000 f838 	bl	80049e4 <_malloc_usable_size_r>
 8004974:	4284      	cmp	r4, r0
 8004976:	4607      	mov	r7, r0
 8004978:	d802      	bhi.n	8004980 <_realloc_r+0x34>
 800497a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800497e:	d812      	bhi.n	80049a6 <_realloc_r+0x5a>
 8004980:	4621      	mov	r1, r4
 8004982:	4640      	mov	r0, r8
 8004984:	f7ff ff6e 	bl	8004864 <_malloc_r>
 8004988:	4605      	mov	r5, r0
 800498a:	2800      	cmp	r0, #0
 800498c:	d0ed      	beq.n	800496a <_realloc_r+0x1e>
 800498e:	42bc      	cmp	r4, r7
 8004990:	4622      	mov	r2, r4
 8004992:	4631      	mov	r1, r6
 8004994:	bf28      	it	cs
 8004996:	463a      	movcs	r2, r7
 8004998:	f7ff fed0 	bl	800473c <memcpy>
 800499c:	4631      	mov	r1, r6
 800499e:	4640      	mov	r0, r8
 80049a0:	f7ff fef4 	bl	800478c <_free_r>
 80049a4:	e7e1      	b.n	800496a <_realloc_r+0x1e>
 80049a6:	4635      	mov	r5, r6
 80049a8:	e7df      	b.n	800496a <_realloc_r+0x1e>
	...

080049ac <_sbrk_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	4d06      	ldr	r5, [pc, #24]	; (80049c8 <_sbrk_r+0x1c>)
 80049b0:	2300      	movs	r3, #0
 80049b2:	4604      	mov	r4, r0
 80049b4:	4608      	mov	r0, r1
 80049b6:	602b      	str	r3, [r5, #0]
 80049b8:	f7fc fa00 	bl	8000dbc <_sbrk>
 80049bc:	1c43      	adds	r3, r0, #1
 80049be:	d102      	bne.n	80049c6 <_sbrk_r+0x1a>
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	b103      	cbz	r3, 80049c6 <_sbrk_r+0x1a>
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	200002c8 	.word	0x200002c8

080049cc <__malloc_lock>:
 80049cc:	4801      	ldr	r0, [pc, #4]	; (80049d4 <__malloc_lock+0x8>)
 80049ce:	f000 b811 	b.w	80049f4 <__retarget_lock_acquire_recursive>
 80049d2:	bf00      	nop
 80049d4:	200002cc 	.word	0x200002cc

080049d8 <__malloc_unlock>:
 80049d8:	4801      	ldr	r0, [pc, #4]	; (80049e0 <__malloc_unlock+0x8>)
 80049da:	f000 b80c 	b.w	80049f6 <__retarget_lock_release_recursive>
 80049de:	bf00      	nop
 80049e0:	200002cc 	.word	0x200002cc

080049e4 <_malloc_usable_size_r>:
 80049e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049e8:	1f18      	subs	r0, r3, #4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bfbc      	itt	lt
 80049ee:	580b      	ldrlt	r3, [r1, r0]
 80049f0:	18c0      	addlt	r0, r0, r3
 80049f2:	4770      	bx	lr

080049f4 <__retarget_lock_acquire_recursive>:
 80049f4:	4770      	bx	lr

080049f6 <__retarget_lock_release_recursive>:
 80049f6:	4770      	bx	lr

080049f8 <_init>:
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	bf00      	nop
 80049fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fe:	bc08      	pop	{r3}
 8004a00:	469e      	mov	lr, r3
 8004a02:	4770      	bx	lr

08004a04 <_fini>:
 8004a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a06:	bf00      	nop
 8004a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0a:	bc08      	pop	{r3}
 8004a0c:	469e      	mov	lr, r3
 8004a0e:	4770      	bx	lr
