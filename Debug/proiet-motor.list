
proiet-motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  080080a8  080080a8  000180a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085ac  080085ac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080085ac  080085ac  000185ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085b4  080085b4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085b4  080085b4  000185b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085b8  080085b8  000185b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080085bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001e0  0800879c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  0800879c  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011276  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021bb  00000000  00000000  00031486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00033648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  000345d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000df0d  00000000  00000000  00035490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004cd7  00000000  00000000  0004339d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00048074  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000531c  00000000  00000000  000480c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008090 	.word	0x08008090

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08008090 	.word	0x08008090

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec2:	f000 fe43 	bl	8001b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec6:	f000 f883 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eca:	f000 f9e7 	bl	800129c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ece:	f000 f9b5 	bl	800123c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ed2:	f000 f923 	bl	800111c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000ed6:	f000 f8cd 	bl	8001074 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000eda:	f000 f979 	bl	80011d0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4830      	ldr	r0, [pc, #192]	; (8000fa4 <main+0xe8>)
 8000ee2:	f002 fc95 	bl	8003810 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000ee6:	213c      	movs	r1, #60	; 0x3c
 8000ee8:	482f      	ldr	r0, [pc, #188]	; (8000fa8 <main+0xec>)
 8000eea:	f002 fe1d 	bl	8003b28 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8000eee:	482f      	ldr	r0, [pc, #188]	; (8000fac <main+0xf0>)
 8000ef0:	f002 fbda 	bl	80036a8 <HAL_TIM_Base_Start_IT>
  mot_init();
 8000ef4:	f000 fb10 	bl	8001518 <mot_init>

  mot_set(0xFFFF, MOT_FORWARD);
 8000ef8:	2101      	movs	r1, #1
 8000efa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000efe:	f000 fb8d 	bl	800161c <mot_set>
	static uint32_t lastTimerVal = 1;
	static uint32_t lastEncoderVal = 0;
	static float vel = 0;
//	static float lastVel = 0;
//	uint32_t vel = ((mot_get_pos() - lastEncoderVal)) / (22*(uwTick - lastTimerVal));
	uint32_t pos = mot_get_pos();
 8000f02:	f000 fb9c 	bl	800163e <mot_get_pos>
 8000f06:	60f8      	str	r0, [r7, #12]
	uint32_t t = uwTick;
 8000f08:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <main+0xf4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60bb      	str	r3, [r7, #8]
	int32_t dP = (pos - lastEncoderVal);
 8000f0e:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <main+0xf8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	607b      	str	r3, [r7, #4]
	uint32_t dT = (t - lastTimerVal);
 8000f18:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <main+0xfc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	603b      	str	r3, [r7, #0]
//	lastVel = vel;
	vel = (dP * 60000) / (dT * 22);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000f28:	fb02 f303 	mul.w	r3, r2, r3
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	2216      	movs	r2, #22
 8000f32:	fb02 f303 	mul.w	r3, r2, r3
 8000f36:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f3a:	ee07 3a90 	vmov	s15, r3
 8000f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f42:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <main+0x100>)
 8000f44:	edc3 7a00 	vstr	s15, [r3]
//	if(fabs(vel - lastVel) > MOT_ACC_THRESHOLD) vel = lastVel;
	lastTimerVal = t;
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <main+0xfc>)
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	6013      	str	r3, [r2, #0]
	lastEncoderVal = mot_get_pos();
 8000f4e:	f000 fb76 	bl	800163e <mot_get_pos>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <main+0xf8>)
 8000f56:	6013      	str	r3, [r2, #0]


	// print instantaneous and avg velocity measurement
	sprintf(printf_buf, "avgVelocity(RPM):%f,insVelocity(RPM):%f\n", vel, angularVelocity);
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <main+0x100>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fafb 	bl	8000558 <__aeabi_f2d>
 8000f62:	4604      	mov	r4, r0
 8000f64:	460d      	mov	r5, r1
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <main+0x104>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff faf4 	bl	8000558 <__aeabi_f2d>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	e9cd 2300 	strd	r2, r3, [sp]
 8000f78:	4622      	mov	r2, r4
 8000f7a:	462b      	mov	r3, r5
 8000f7c:	4911      	ldr	r1, [pc, #68]	; (8000fc4 <main+0x108>)
 8000f7e:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <main+0x10c>)
 8000f80:	f004 fe0e 	bl	8005ba0 <siprintf>
	// print instantaneous velocity measurement
//	sprintf(printf_buf, "insVelocity(RPM):%f\r\n", angularVelocity);
	// print avg velocity measurement
//	sprintf(printf_buf, "avgVelocity(RPM):%f\r\n", vel);

	HAL_UART_Transmit(&huart2, (uint8_t*)printf_buf, strlen(printf_buf), 1000);
 8000f84:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <main+0x10c>)
 8000f86:	f7ff f92b 	bl	80001e0 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	490d      	ldr	r1, [pc, #52]	; (8000fc8 <main+0x10c>)
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <main+0x110>)
 8000f96:	f003 fc9d 	bl	80048d4 <HAL_UART_Transmit>
	HAL_Delay(10);
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f000 fe52 	bl	8001c44 <HAL_Delay>
  {
 8000fa0:	e7af      	b.n	8000f02 <main+0x46>
 8000fa2:	bf00      	nop
 8000fa4:	20000248 	.word	0x20000248
 8000fa8:	200001fc 	.word	0x200001fc
 8000fac:	20000294 	.word	0x20000294
 8000fb0:	20000498 	.word	0x20000498
 8000fb4:	20000470 	.word	0x20000470
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000474 	.word	0x20000474
 8000fc0:	20000468 	.word	0x20000468
 8000fc4:	08008158 	.word	0x08008158
 8000fc8:	20000364 	.word	0x20000364
 8000fcc:	200002e0 	.word	0x200002e0

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b096      	sub	sp, #88	; 0x58
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	2244      	movs	r2, #68	; 0x44
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f004 f96c 	bl	80052bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ff2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ff6:	f001 f913 	bl	8002220 <HAL_PWREx_ControlVoltageScaling>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001000:	f000 fa84 	bl	800150c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001004:	2302      	movs	r3, #2
 8001006:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100e:	2340      	movs	r3, #64	; 0x40
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	2302      	movs	r3, #2
 8001014:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001016:	2302      	movs	r3, #2
 8001018:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800101e:	230a      	movs	r3, #10
 8001020:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001022:	2307      	movs	r3, #7
 8001024:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001026:	2302      	movs	r3, #2
 8001028:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800102a:	2302      	movs	r3, #2
 800102c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4618      	mov	r0, r3
 8001034:	f001 f94a 	bl	80022cc <HAL_RCC_OscConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800103e:	f000 fa65 	bl	800150c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001042:	230f      	movs	r3, #15
 8001044:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001046:	2303      	movs	r3, #3
 8001048:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001056:	463b      	mov	r3, r7
 8001058:	2104      	movs	r1, #4
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fd4a 	bl	8002af4 <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001066:	f000 fa51 	bl	800150c <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3758      	adds	r7, #88	; 0x58
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	; 0x30
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2224      	movs	r2, #36	; 0x24
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f004 f91a 	bl	80052bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	463b      	mov	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_TIM2_Init+0xa4>)
 8001094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001098:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_TIM2_Init+0xa4>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <MX_TIM2_Init+0xa4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_TIM2_Init+0xa4>)
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_TIM2_Init+0xa4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_TIM2_Init+0xa4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010c2:	2301      	movs	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010d2:	2301      	movs	r3, #1
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <MX_TIM2_Init+0xa4>)
 80010e6:	f002 fc79 	bl	80039dc <HAL_TIM_Encoder_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80010f0:	f000 fa0c 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_TIM2_Init+0xa4>)
 8001102:	f003 fb0d 	bl	8004720 <HAL_TIMEx_MasterConfigSynchronization>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800110c:	f000 f9fe 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3730      	adds	r7, #48	; 0x30
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200001fc 	.word	0x200001fc

0800111c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800112e:	463b      	mov	r3, r7
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]
 800113e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MX_TIM3_Init+0xac>)
 8001142:	4a22      	ldr	r2, [pc, #136]	; (80011cc <MX_TIM3_Init+0xb0>)
 8001144:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_TIM3_Init+0xac>)
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_TIM3_Init+0xac>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_TIM3_Init+0xac>)
 8001154:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001158:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_TIM3_Init+0xac>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_TIM3_Init+0xac>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001166:	4818      	ldr	r0, [pc, #96]	; (80011c8 <MX_TIM3_Init+0xac>)
 8001168:	f002 fafa 	bl	8003760 <HAL_TIM_PWM_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001172:	f000 f9cb 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	4810      	ldr	r0, [pc, #64]	; (80011c8 <MX_TIM3_Init+0xac>)
 8001186:	f003 facb 	bl	8004720 <HAL_TIMEx_MasterConfigSynchronization>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001190:	f000 f9bc 	bl	800150c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001194:	2360      	movs	r3, #96	; 0x60
 8001196:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	4807      	ldr	r0, [pc, #28]	; (80011c8 <MX_TIM3_Init+0xac>)
 80011ac:	f002 fe6a 	bl	8003e84 <HAL_TIM_PWM_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80011b6:	f000 f9a9 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011ba:	4803      	ldr	r0, [pc, #12]	; (80011c8 <MX_TIM3_Init+0xac>)
 80011bc:	f000 faf4 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	; 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000248 	.word	0x20000248
 80011cc:	40000400 	.word	0x40000400

080011d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_TIM6_Init+0x64>)
 80011e2:	4a15      	ldr	r2, [pc, #84]	; (8001238 <MX_TIM6_Init+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_TIM6_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_TIM6_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_TIM6_Init+0x64>)
 80011f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_TIM6_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <MX_TIM6_Init+0x64>)
 8001202:	f002 f9f9 	bl	80035f8 <HAL_TIM_Base_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800120c:	f000 f97e 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_TIM6_Init+0x64>)
 800121e:	f003 fa7f 	bl	8004720 <HAL_TIMEx_MasterConfigSynchronization>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001228:	f000 f970 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000294 	.word	0x20000294
 8001238:	40001000 	.word	0x40001000

0800123c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001242:	4a15      	ldr	r2, [pc, #84]	; (8001298 <MX_USART2_UART_Init+0x5c>)
 8001244:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_USART2_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_USART2_UART_Init+0x58>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_USART2_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001280:	f003 fada 	bl	8004838 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800128a:	f000 f93f 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200002e0 	.word	0x200002e0
 8001298:	40004400 	.word	0x40004400

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	4b51      	ldr	r3, [pc, #324]	; (80013f8 <MX_GPIO_Init+0x15c>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a50      	ldr	r2, [pc, #320]	; (80013f8 <MX_GPIO_Init+0x15c>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b4e      	ldr	r3, [pc, #312]	; (80013f8 <MX_GPIO_Init+0x15c>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ca:	4b4b      	ldr	r3, [pc, #300]	; (80013f8 <MX_GPIO_Init+0x15c>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a4a      	ldr	r2, [pc, #296]	; (80013f8 <MX_GPIO_Init+0x15c>)
 80012d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b48      	ldr	r3, [pc, #288]	; (80013f8 <MX_GPIO_Init+0x15c>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b45      	ldr	r3, [pc, #276]	; (80013f8 <MX_GPIO_Init+0x15c>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a44      	ldr	r2, [pc, #272]	; (80013f8 <MX_GPIO_Init+0x15c>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b42      	ldr	r3, [pc, #264]	; (80013f8 <MX_GPIO_Init+0x15c>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <MX_GPIO_Init+0x15c>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4a3e      	ldr	r2, [pc, #248]	; (80013f8 <MX_GPIO_Init+0x15c>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <MX_GPIO_Init+0x15c>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	21b0      	movs	r1, #176	; 0xb0
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f000 ff43 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001324:	4835      	ldr	r0, [pc, #212]	; (80013fc <MX_GPIO_Init+0x160>)
 8001326:	f000 ff3d 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001330:	4833      	ldr	r0, [pc, #204]	; (8001400 <MX_GPIO_Init+0x164>)
 8001332:	f000 ff37 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800133c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	482c      	ldr	r0, [pc, #176]	; (8001400 <MX_GPIO_Init+0x164>)
 800134e:	f000 fdaf 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001352:	2301      	movs	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001356:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4826      	ldr	r0, [pc, #152]	; (8001400 <MX_GPIO_Init+0x164>)
 8001368:	f000 fda2 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800136c:	23b0      	movs	r3, #176	; 0xb0
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001386:	f000 fd93 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800138a:	2340      	movs	r3, #64	; 0x40
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001392:	2301      	movs	r3, #1
 8001394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a0:	f000 fd86 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80013a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	480f      	ldr	r0, [pc, #60]	; (80013fc <MX_GPIO_Init+0x160>)
 80013be:	f000 fd77 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80013c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4809      	ldr	r0, [pc, #36]	; (8001400 <MX_GPIO_Init+0x164>)
 80013dc:	f000 fd68 	bl	8001eb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2006      	movs	r0, #6
 80013e6:	f000 fd2c 	bl	8001e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ea:	2006      	movs	r0, #6
 80013ec:	f000 fd45 	bl	8001e7a <HAL_NVIC_EnableIRQ>

}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	; 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40021000 	.word	0x40021000
 80013fc:	48000400 	.word	0x48000400
 8001400:	48000800 	.word	0x48000800

08001404 <HAL_GPIO_EXTI_Callback>:
/**
  * @brief GPIO External Interrupt Callback Function
  * @param None
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140e:	b672      	cpsid	i
}
 8001410:	bf00      	nop
	__disable_irq();
	//Called every time hall sensor 1 is triggered (11 times / rot)
	if(GPIO_Pin == GPIO_PIN_0){
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d14b      	bne.n	80014b0 <HAL_GPIO_EXTI_Callback+0xac>
		static const float accConst = 1333333; // = 80MHz[tick/s] / 60[pulse/s]
		static uint32_t lastCNT = 0;
		static uint32_t lastOC = 0;
		static float lastV = 0;

		uint16_t cnt = TIM6->CNT;
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <HAL_GPIO_EXTI_Callback+0xbc>)
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	81fb      	strh	r3, [r7, #14]
		uint32_t dC = (cnt - lastCNT + ((overflowCtr - lastOC)<<16));
 800141e:	89fa      	ldrh	r2, [r7, #14]
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	1ad2      	subs	r2, r2, r3
 8001426:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001428:	6819      	ldr	r1, [r3, #0]
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <HAL_GPIO_EXTI_Callback+0xc8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	1acb      	subs	r3, r1, r3
 8001430:	041b      	lsls	r3, r3, #16
 8001432:	4413      	add	r3, r2
 8001434:	60bb      	str	r3, [r7, #8]
		lastV = angularVelocity;
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800143c:	6013      	str	r3, [r2, #0]
		angularVelocity = velConst / dC; //[RPM]
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001440:	edd3 6a00 	vldr	s13, [r3]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800144e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001452:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001454:	edc3 7a00 	vstr	s15, [r3]
		if(angularVelocity > 6000) angularVelocity = lastV;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_GPIO_EXTI_Callback+0xcc>)
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80014dc <HAL_GPIO_EXTI_Callback+0xd8>
 8001462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146a:	dd03      	ble.n	8001474 <HAL_GPIO_EXTI_Callback+0x70>
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001472:	6013      	str	r3, [r2, #0]
		lastCNT = cnt;
 8001474:	89fb      	ldrh	r3, [r7, #14]
 8001476:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001478:	6013      	str	r3, [r2, #0]
		lastOC = overflowCtr;
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a13      	ldr	r2, [pc, #76]	; (80014cc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001480:	6013      	str	r3, [r2, #0]
		angularAcceleration = (accConst * (angularVelocity - lastV) / dC); //[RPS2]
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001484:	ed93 7a00 	vldr	s14, [r3]
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	ee67 6a27 	vmul.f32	s13, s14, s15
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_GPIO_EXTI_Callback+0xe0>)
 80014ac:	edc3 7a00 	vstr	s15, [r3]
  __ASM volatile ("cpsie i" : : : "memory");
 80014b0:	b662      	cpsie	i
}
 80014b2:	bf00      	nop
	}
	__enable_irq();
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40001000 	.word	0x40001000
 80014c4:	20000478 	.word	0x20000478
 80014c8:	20000464 	.word	0x20000464
 80014cc:	2000047c 	.word	0x2000047c
 80014d0:	20000468 	.word	0x20000468
 80014d4:	20000480 	.word	0x20000480
 80014d8:	08008184 	.word	0x08008184
 80014dc:	45bb8000 	.word	0x45bb8000
 80014e0:	08008188 	.word	0x08008188
 80014e4:	2000046c 	.word	0x2000046c

080014e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	overflowCtr++;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014f8:	6013      	str	r3, [r2, #0]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000464 	.word	0x20000464

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	e7fe      	b.n	8001514 <Error_Handler+0x8>
	...

08001518 <mot_init>:
static int mot_dir;
static uint16_t mot_pwm;
static uint32_t mot_pos;
static uint32_t mot_last_sample_time;

void mot_init(void){
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	mot_dir = MOT_FWD;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <mot_init+0x38>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]
	mot_pwm = 0;
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <mot_init+0x3c>)
 8001524:	2200      	movs	r2, #0
 8001526:	801a      	strh	r2, [r3, #0]
	mot_pos = TIM2->CNT;
 8001528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <mot_init+0x40>)
 8001530:	6013      	str	r3, [r2, #0]
	mot_last_sample_time = HAL_GetTick();
 8001532:	f000 fb7b 	bl	8001c2c <HAL_GetTick>
 8001536:	4603      	mov	r3, r0
 8001538:	4a08      	ldr	r2, [pc, #32]	; (800155c <mot_init+0x44>)
 800153a:	6013      	str	r3, [r2, #0]
	mot_set(mot_pwm, mot_dir);
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <mot_init+0x3c>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	4a03      	ldr	r2, [pc, #12]	; (8001550 <mot_init+0x38>)
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f868 	bl	800161c <mot_set>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000484 	.word	0x20000484
 8001554:	20000488 	.word	0x20000488
 8001558:	2000048c 	.word	0x2000048c
 800155c:	20000490 	.word	0x20000490

08001560 <mot_set_dir>:

void mot_set_dir(int dir){
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	switch(dir){
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d00a      	beq.n	8001584 <mot_set_dir+0x24>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b01      	cmp	r3, #1
 8001572:	dc34      	bgt.n	80015de <mot_set_dir+0x7e>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157a:	d012      	beq.n	80015a2 <mot_set_dir+0x42>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d01e      	beq.n	80015c0 <mot_set_dir+0x60>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
			mot_dir = dir;
			break;
	}
}
 8001582:	e02c      	b.n	80015de <mot_set_dir+0x7e>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	4817      	ldr	r0, [pc, #92]	; (80015e8 <mot_set_dir+0x88>)
 800158a:	f000 fe0b 	bl	80021a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	4814      	ldr	r0, [pc, #80]	; (80015e8 <mot_set_dir+0x88>)
 8001596:	f000 fe05 	bl	80021a4 <HAL_GPIO_WritePin>
			mot_dir = dir;
 800159a:	4a14      	ldr	r2, [pc, #80]	; (80015ec <mot_set_dir+0x8c>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6013      	str	r3, [r2, #0]
			break;
 80015a0:	e01d      	b.n	80015de <mot_set_dir+0x7e>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	4810      	ldr	r0, [pc, #64]	; (80015e8 <mot_set_dir+0x88>)
 80015a8:	f000 fdfc 	bl	80021a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <mot_set_dir+0x88>)
 80015b4:	f000 fdf6 	bl	80021a4 <HAL_GPIO_WritePin>
			mot_dir = dir;
 80015b8:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <mot_set_dir+0x8c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
			break;
 80015be:	e00e      	b.n	80015de <mot_set_dir+0x7e>
			HAL_GPIO_WritePin(MOT_DIR1_GPIO_PORT, MOT_DIR1_GPIO_PIN, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2180      	movs	r1, #128	; 0x80
 80015c4:	4808      	ldr	r0, [pc, #32]	; (80015e8 <mot_set_dir+0x88>)
 80015c6:	f000 fded 	bl	80021a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOT_DIR2_GPIO_PORT, MOT_DIR2_GPIO_PIN, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <mot_set_dir+0x88>)
 80015d2:	f000 fde7 	bl	80021a4 <HAL_GPIO_WritePin>
			mot_dir = dir;
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <mot_set_dir+0x8c>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6013      	str	r3, [r2, #0]
			break;
 80015dc:	bf00      	nop
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	48000800 	.word	0x48000800
 80015ec:	20000484 	.word	0x20000484

080015f0 <mot_set_pwm>:

void mot_set_pwm(uint16_t pwm){
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
	TIM3->CCR1 = pwm;
 80015fa:	4a06      	ldr	r2, [pc, #24]	; (8001614 <mot_set_pwm+0x24>)
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	6353      	str	r3, [r2, #52]	; 0x34
	mot_pwm = pwm;
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <mot_set_pwm+0x28>)
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	8013      	strh	r3, [r2, #0]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40000400 	.word	0x40000400
 8001618:	20000488 	.word	0x20000488

0800161c <mot_set>:

void mot_set(uint16_t pwm, int dir){
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	80fb      	strh	r3, [r7, #6]
	mot_set_dir(dir);
 8001628:	6838      	ldr	r0, [r7, #0]
 800162a:	f7ff ff99 	bl	8001560 <mot_set_dir>
	mot_set_pwm(pwm);
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ffdd 	bl	80015f0 <mot_set_pwm>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <mot_get_pos>:
		case MOT_BACKWARD: mot_dir = MOT_FORWARD; break;
	}
	mot_set_dir(mot_dir);
}

uint32_t mot_get_pos(){
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 8001642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_MspInit+0x44>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_MspInit+0x44>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6613      	str	r3, [r2, #96]	; 0x60
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_MspInit+0x44>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_MspInit+0x44>)
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_MspInit+0x44>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6593      	str	r3, [r2, #88]	; 0x58
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_MspInit+0x44>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000

0800169c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016bc:	d128      	bne.n	8001710 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_TIM_Encoder_MspInit+0x7c>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	4a15      	ldr	r2, [pc, #84]	; (8001718 <HAL_TIM_Encoder_MspInit+0x7c>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_TIM_Encoder_MspInit+0x7c>)
 80016cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_TIM_Encoder_MspInit+0x7c>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <HAL_TIM_Encoder_MspInit+0x7c>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_TIM_Encoder_MspInit+0x7c>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016ee:	2303      	movs	r3, #3
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016fe:	2301      	movs	r3, #1
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170c:	f000 fbd0 	bl	8001eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <HAL_TIM_PWM_MspInit+0x38>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d10b      	bne.n	8001746 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_TIM_PWM_MspInit+0x3c>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <HAL_TIM_PWM_MspInit+0x3c>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6593      	str	r3, [r2, #88]	; 0x58
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <HAL_TIM_PWM_MspInit+0x3c>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40000400 	.word	0x40000400
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <HAL_TIM_Base_MspInit+0x44>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d113      	bne.n	8001796 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_TIM_Base_MspInit+0x48>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <HAL_TIM_Base_MspInit+0x48>)
 8001774:	f043 0310 	orr.w	r3, r3, #16
 8001778:	6593      	str	r3, [r2, #88]	; 0x58
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_TIM_Base_MspInit+0x48>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2036      	movs	r0, #54	; 0x36
 800178c:	f000 fb59 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001790:	2036      	movs	r0, #54	; 0x36
 8001792:	f000 fb72 	bl	8001e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40001000 	.word	0x40001000
 80017a4:	40021000 	.word	0x40021000

080017a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_TIM_MspPostInit+0x64>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d11b      	bne.n	8001802 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_TIM_MspPostInit+0x68>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a10      	ldr	r2, [pc, #64]	; (8001810 <HAL_TIM_MspPostInit+0x68>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_TIM_MspPostInit+0x68>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017e2:	2340      	movs	r3, #64	; 0x40
 80017e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <HAL_TIM_MspPostInit+0x6c>)
 80017fe:	f000 fb57 	bl	8001eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3720      	adds	r7, #32
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40000400 	.word	0x40000400
 8001810:	40021000 	.word	0x40021000
 8001814:	48000800 	.word	0x48000800

08001818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b0a4      	sub	sp, #144	; 0x90
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2268      	movs	r2, #104	; 0x68
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f003 fd3f 	bl	80052bc <memset>
  if(huart->Instance==USART2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a21      	ldr	r2, [pc, #132]	; (80018c8 <HAL_UART_MspInit+0xb0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d13a      	bne.n	80018be <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001848:	2302      	movs	r3, #2
 800184a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800184c:	2300      	movs	r3, #0
 800184e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4618      	mov	r0, r3
 8001856:	f001 fb71 	bl	8002f3c <HAL_RCCEx_PeriphCLKConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001860:	f7ff fe54 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_UART_MspInit+0xb4>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	4a18      	ldr	r2, [pc, #96]	; (80018cc <HAL_UART_MspInit+0xb4>)
 800186a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186e:	6593      	str	r3, [r2, #88]	; 0x58
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_UART_MspInit+0xb4>)
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_UART_MspInit+0xb4>)
 800187e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001880:	4a12      	ldr	r2, [pc, #72]	; (80018cc <HAL_UART_MspInit+0xb4>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_UART_MspInit+0xb4>)
 800188a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001894:	230c      	movs	r3, #12
 8001896:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018aa:	2307      	movs	r3, #7
 80018ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018b4:	4619      	mov	r1, r3
 80018b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ba:	f000 faf9 	bl	8001eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018be:	bf00      	nop
 80018c0:	3790      	adds	r7, #144	; 0x90
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40004400 	.word	0x40004400
 80018cc:	40021000 	.word	0x40021000

080018d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <NMI_Handler+0x4>

080018d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <HardFault_Handler+0x4>

080018dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <MemManage_Handler+0x4>

080018e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <BusFault_Handler+0x4>

080018e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <UsageFault_Handler+0x4>

080018ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191c:	f000 f972 	bl	8001c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}

08001924 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001928:	2001      	movs	r0, #1
 800192a:	f000 fc53 	bl	80021d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <TIM6_DAC_IRQHandler+0x10>)
 800193a:	f002 f983 	bl	8003c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000294 	.word	0x20000294

08001948 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return 1;
 800194c:	2301      	movs	r3, #1
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_kill>:

int _kill(int pid, int sig)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001962:	f003 fc81 	bl	8005268 <__errno>
 8001966:	4603      	mov	r3, r0
 8001968:	2216      	movs	r2, #22
 800196a:	601a      	str	r2, [r3, #0]
  return -1;
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_exit>:

void _exit (int status)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001980:	f04f 31ff 	mov.w	r1, #4294967295
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ffe7 	bl	8001958 <_kill>
  while (1) {}    /* Make sure we hang here */
 800198a:	e7fe      	b.n	800198a <_exit+0x12>

0800198c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e00a      	b.n	80019b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800199e:	f3af 8000 	nop.w
 80019a2:	4601      	mov	r1, r0
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	60ba      	str	r2, [r7, #8]
 80019aa:	b2ca      	uxtb	r2, r1
 80019ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3301      	adds	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dbf0      	blt.n	800199e <_read+0x12>
  }

  return len;
 80019bc:	687b      	ldr	r3, [r7, #4]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e009      	b.n	80019ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	60ba      	str	r2, [r7, #8]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3301      	adds	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbf1      	blt.n	80019d8 <_write+0x12>
  }
  return len;
 80019f4:	687b      	ldr	r3, [r7, #4]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <_close>:

int _close(int file)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a26:	605a      	str	r2, [r3, #4]
  return 0;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <_isatty>:

int _isatty(int file)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a70:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <_sbrk+0x5c>)
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <_sbrk+0x60>)
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <_sbrk+0x64>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <_sbrk+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d207      	bcs.n	8001aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a98:	f003 fbe6 	bl	8005268 <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	e009      	b.n	8001abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <_sbrk+0x64>)
 8001ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20028000 	.word	0x20028000
 8001ac8:	00000400 	.word	0x00000400
 8001acc:	20000494 	.word	0x20000494
 8001ad0:	200004b0 	.word	0x200004b0

08001ad4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <SystemInit+0x20>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <SystemInit+0x20>)
 8001ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001afc:	f7ff ffea 	bl	8001ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b02:	490d      	ldr	r1, [pc, #52]	; (8001b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <LoopForever+0xe>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b18:	4c0a      	ldr	r4, [pc, #40]	; (8001b44 <LoopForever+0x16>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b26:	f003 fba5 	bl	8005274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b2a:	f7ff f9c7 	bl	8000ebc <main>

08001b2e <LoopForever>:

LoopForever:
    b LoopForever
 8001b2e:	e7fe      	b.n	8001b2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b30:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b38:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b3c:	080085bc 	.word	0x080085bc
  ldr r2, =_sbss
 8001b40:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b44:	200004ac 	.word	0x200004ac

08001b48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC1_IRQHandler>
	...

08001b4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_Init+0x3c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_Init+0x3c>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b62:	2003      	movs	r0, #3
 8001b64:	f000 f962 	bl	8001e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f000 f80f 	bl	8001b8c <HAL_InitTick>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	e001      	b.n	8001b7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b7a:	f7ff fd6b 	bl	8001654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40022000 	.word	0x40022000

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_InitTick+0x6c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d023      	beq.n	8001be8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ba0:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <HAL_InitTick+0x70>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_InitTick+0x6c>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f96d 	bl	8001e96 <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10f      	bne.n	8001be2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d809      	bhi.n	8001bdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 f937 	bl	8001e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_InitTick+0x74>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e007      	b.n	8001bec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	e004      	b.n	8001bec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e001      	b.n	8001bec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000000c 	.word	0x2000000c
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	20000008 	.word	0x20000008

08001c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_IncTick+0x20>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x24>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_IncTick+0x24>)
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	2000000c 	.word	0x2000000c
 8001c28:	20000498 	.word	0x20000498

08001c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_GetTick+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000498 	.word	0x20000498

08001c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff ffee 	bl	8001c2c <HAL_GetTick>
 8001c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d005      	beq.n	8001c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_Delay+0x44>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6a:	bf00      	nop
 8001c6c:	f7ff ffde 	bl	8001c2c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d8f7      	bhi.n	8001c6c <HAL_Delay+0x28>
  {
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000000c 	.word	0x2000000c

08001c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cbe:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	60d3      	str	r3, [r2, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <__NVIC_GetPriorityGrouping+0x18>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	f003 0307 	and.w	r3, r3, #7
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db0b      	blt.n	8001d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	4907      	ldr	r1, [pc, #28]	; (8001d28 <__NVIC_EnableIRQ+0x38>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	2001      	movs	r0, #1
 8001d12:	fa00 f202 	lsl.w	r2, r0, r2
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	db0a      	blt.n	8001d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	490c      	ldr	r1, [pc, #48]	; (8001d78 <__NVIC_SetPriority+0x4c>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	0112      	lsls	r2, r2, #4
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	440b      	add	r3, r1
 8001d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d54:	e00a      	b.n	8001d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4908      	ldr	r1, [pc, #32]	; (8001d7c <__NVIC_SetPriority+0x50>)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	3b04      	subs	r3, #4
 8001d64:	0112      	lsls	r2, r2, #4
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	440b      	add	r3, r1
 8001d6a:	761a      	strb	r2, [r3, #24]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000e100 	.word	0xe000e100
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f1c3 0307 	rsb	r3, r3, #7
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	bf28      	it	cs
 8001d9e:	2304      	movcs	r3, #4
 8001da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3304      	adds	r3, #4
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d902      	bls.n	8001db0 <NVIC_EncodePriority+0x30>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3b03      	subs	r3, #3
 8001dae:	e000      	b.n	8001db2 <NVIC_EncodePriority+0x32>
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43d9      	mvns	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	4313      	orrs	r3, r2
         );
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3724      	adds	r7, #36	; 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df8:	d301      	bcc.n	8001dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00f      	b.n	8001e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <SysTick_Config+0x40>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e06:	210f      	movs	r1, #15
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	f7ff ff8e 	bl	8001d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <SysTick_Config+0x40>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <SysTick_Config+0x40>)
 8001e18:	2207      	movs	r2, #7
 8001e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	e000e010 	.word	0xe000e010

08001e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff29 	bl	8001c8c <__NVIC_SetPriorityGrouping>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e54:	f7ff ff3e 	bl	8001cd4 <__NVIC_GetPriorityGrouping>
 8001e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f7ff ff8e 	bl	8001d80 <NVIC_EncodePriority>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff5d 	bl	8001d2c <__NVIC_SetPriority>
}
 8001e72:	bf00      	nop
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff31 	bl	8001cf0 <__NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ffa2 	bl	8001de8 <SysTick_Config>
 8001ea4:	4603      	mov	r3, r0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ebe:	e154      	b.n	800216a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8146 	beq.w	8002164 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d005      	beq.n	8001ef0 <HAL_GPIO_Init+0x40>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d130      	bne.n	8001f52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f26:	2201      	movs	r2, #1
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	f003 0201 	and.w	r2, r3, #1
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d017      	beq.n	8001f8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d123      	bne.n	8001fe2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	6939      	ldr	r1, [r7, #16]
 8001fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0203 	and.w	r2, r3, #3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 80a0 	beq.w	8002164 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002024:	4b58      	ldr	r3, [pc, #352]	; (8002188 <HAL_GPIO_Init+0x2d8>)
 8002026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002028:	4a57      	ldr	r2, [pc, #348]	; (8002188 <HAL_GPIO_Init+0x2d8>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6613      	str	r3, [r2, #96]	; 0x60
 8002030:	4b55      	ldr	r3, [pc, #340]	; (8002188 <HAL_GPIO_Init+0x2d8>)
 8002032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800203c:	4a53      	ldr	r2, [pc, #332]	; (800218c <HAL_GPIO_Init+0x2dc>)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	220f      	movs	r2, #15
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002066:	d019      	beq.n	800209c <HAL_GPIO_Init+0x1ec>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a49      	ldr	r2, [pc, #292]	; (8002190 <HAL_GPIO_Init+0x2e0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d013      	beq.n	8002098 <HAL_GPIO_Init+0x1e8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a48      	ldr	r2, [pc, #288]	; (8002194 <HAL_GPIO_Init+0x2e4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00d      	beq.n	8002094 <HAL_GPIO_Init+0x1e4>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a47      	ldr	r2, [pc, #284]	; (8002198 <HAL_GPIO_Init+0x2e8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d007      	beq.n	8002090 <HAL_GPIO_Init+0x1e0>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a46      	ldr	r2, [pc, #280]	; (800219c <HAL_GPIO_Init+0x2ec>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d101      	bne.n	800208c <HAL_GPIO_Init+0x1dc>
 8002088:	2304      	movs	r3, #4
 800208a:	e008      	b.n	800209e <HAL_GPIO_Init+0x1ee>
 800208c:	2307      	movs	r3, #7
 800208e:	e006      	b.n	800209e <HAL_GPIO_Init+0x1ee>
 8002090:	2303      	movs	r3, #3
 8002092:	e004      	b.n	800209e <HAL_GPIO_Init+0x1ee>
 8002094:	2302      	movs	r3, #2
 8002096:	e002      	b.n	800209e <HAL_GPIO_Init+0x1ee>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <HAL_GPIO_Init+0x1ee>
 800209c:	2300      	movs	r3, #0
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	f002 0203 	and.w	r2, r2, #3
 80020a4:	0092      	lsls	r2, r2, #2
 80020a6:	4093      	lsls	r3, r2
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ae:	4937      	ldr	r1, [pc, #220]	; (800218c <HAL_GPIO_Init+0x2dc>)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	3302      	adds	r3, #2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020bc:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <HAL_GPIO_Init+0x2f0>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020e0:	4a2f      	ldr	r2, [pc, #188]	; (80021a0 <HAL_GPIO_Init+0x2f0>)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020e6:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <HAL_GPIO_Init+0x2f0>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800210a:	4a25      	ldr	r2, [pc, #148]	; (80021a0 <HAL_GPIO_Init+0x2f0>)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002110:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_GPIO_Init+0x2f0>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002134:	4a1a      	ldr	r2, [pc, #104]	; (80021a0 <HAL_GPIO_Init+0x2f0>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800213a:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_GPIO_Init+0x2f0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800215e:	4a10      	ldr	r2, [pc, #64]	; (80021a0 <HAL_GPIO_Init+0x2f0>)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3301      	adds	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	f47f aea3 	bne.w	8001ec0 <HAL_GPIO_Init+0x10>
  }
}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	40021000 	.word	0x40021000
 800218c:	40010000 	.word	0x40010000
 8002190:	48000400 	.word	0x48000400
 8002194:	48000800 	.word	0x48000800
 8002198:	48000c00 	.word	0x48000c00
 800219c:	48001000 	.word	0x48001000
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f906 	bl	8001404 <HAL_GPIO_EXTI_Callback>
  }
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40010400 	.word	0x40010400

08002204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <HAL_PWREx_GetVoltageRange+0x18>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40007000 	.word	0x40007000

08002220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222e:	d130      	bne.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800223c:	d038      	beq.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800223e:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002246:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800224c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2232      	movs	r2, #50	; 0x32
 8002254:	fb02 f303 	mul.w	r3, r2, r3
 8002258:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	3301      	adds	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002264:	e002      	b.n	800226c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3b01      	subs	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002278:	d102      	bne.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f2      	bne.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228c:	d110      	bne.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e00f      	b.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229e:	d007      	beq.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022a8:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40007000 	.word	0x40007000
 80022c4:	20000004 	.word	0x20000004
 80022c8:	431bde83 	.word	0x431bde83

080022cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	f000 bc02 	b.w	8002ae4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e0:	4b96      	ldr	r3, [pc, #600]	; (800253c <HAL_RCC_OscConfig+0x270>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ea:	4b94      	ldr	r3, [pc, #592]	; (800253c <HAL_RCC_OscConfig+0x270>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80e4 	beq.w	80024ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <HAL_RCC_OscConfig+0x4c>
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b0c      	cmp	r3, #12
 800230c:	f040 808b 	bne.w	8002426 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b01      	cmp	r3, #1
 8002314:	f040 8087 	bne.w	8002426 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002318:	4b88      	ldr	r3, [pc, #544]	; (800253c <HAL_RCC_OscConfig+0x270>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_OscConfig+0x64>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e3d9      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1a      	ldr	r2, [r3, #32]
 8002334:	4b81      	ldr	r3, [pc, #516]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <HAL_RCC_OscConfig+0x7e>
 8002340:	4b7e      	ldr	r3, [pc, #504]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002348:	e005      	b.n	8002356 <HAL_RCC_OscConfig+0x8a>
 800234a:	4b7c      	ldr	r3, [pc, #496]	; (800253c <HAL_RCC_OscConfig+0x270>)
 800234c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002356:	4293      	cmp	r3, r2
 8002358:	d223      	bcs.n	80023a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fd8c 	bl	8002e7c <RCC_SetFlashLatencyFromMSIRange>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e3ba      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800236e:	4b73      	ldr	r3, [pc, #460]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a72      	ldr	r2, [pc, #456]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002374:	f043 0308 	orr.w	r3, r3, #8
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b70      	ldr	r3, [pc, #448]	; (800253c <HAL_RCC_OscConfig+0x270>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	496d      	ldr	r1, [pc, #436]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800238c:	4b6b      	ldr	r3, [pc, #428]	; (800253c <HAL_RCC_OscConfig+0x270>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	4968      	ldr	r1, [pc, #416]	; (800253c <HAL_RCC_OscConfig+0x270>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
 80023a0:	e025      	b.n	80023ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a2:	4b66      	ldr	r3, [pc, #408]	; (800253c <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a65      	ldr	r2, [pc, #404]	; (800253c <HAL_RCC_OscConfig+0x270>)
 80023a8:	f043 0308 	orr.w	r3, r3, #8
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b63      	ldr	r3, [pc, #396]	; (800253c <HAL_RCC_OscConfig+0x270>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4960      	ldr	r1, [pc, #384]	; (800253c <HAL_RCC_OscConfig+0x270>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c0:	4b5e      	ldr	r3, [pc, #376]	; (800253c <HAL_RCC_OscConfig+0x270>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	495b      	ldr	r1, [pc, #364]	; (800253c <HAL_RCC_OscConfig+0x270>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fd4c 	bl	8002e7c <RCC_SetFlashLatencyFromMSIRange>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e37a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ee:	f000 fc81 	bl	8002cf4 <HAL_RCC_GetSysClockFreq>
 80023f2:	4602      	mov	r2, r0
 80023f4:	4b51      	ldr	r3, [pc, #324]	; (800253c <HAL_RCC_OscConfig+0x270>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	4950      	ldr	r1, [pc, #320]	; (8002540 <HAL_RCC_OscConfig+0x274>)
 8002400:	5ccb      	ldrb	r3, [r1, r3]
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	fa22 f303 	lsr.w	r3, r2, r3
 800240a:	4a4e      	ldr	r2, [pc, #312]	; (8002544 <HAL_RCC_OscConfig+0x278>)
 800240c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800240e:	4b4e      	ldr	r3, [pc, #312]	; (8002548 <HAL_RCC_OscConfig+0x27c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fbba 	bl	8001b8c <HAL_InitTick>
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d052      	beq.n	80024c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	e35e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d032      	beq.n	8002494 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800242e:	4b43      	ldr	r3, [pc, #268]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a42      	ldr	r2, [pc, #264]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800243a:	f7ff fbf7 	bl	8001c2c <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002442:	f7ff fbf3 	bl	8001c2c <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e347      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002454:	4b39      	ldr	r3, [pc, #228]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002460:	4b36      	ldr	r3, [pc, #216]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a35      	ldr	r2, [pc, #212]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002466:	f043 0308 	orr.w	r3, r3, #8
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b33      	ldr	r3, [pc, #204]	; (800253c <HAL_RCC_OscConfig+0x270>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4930      	ldr	r1, [pc, #192]	; (800253c <HAL_RCC_OscConfig+0x270>)
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800247e:	4b2f      	ldr	r3, [pc, #188]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	492b      	ldr	r1, [pc, #172]	; (800253c <HAL_RCC_OscConfig+0x270>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
 8002492:	e01a      	b.n	80024ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002494:	4b29      	ldr	r3, [pc, #164]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a28      	ldr	r2, [pc, #160]	; (800253c <HAL_RCC_OscConfig+0x270>)
 800249a:	f023 0301 	bic.w	r3, r3, #1
 800249e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024a0:	f7ff fbc4 	bl	8001c2c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a8:	f7ff fbc0 	bl	8001c2c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e314      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <HAL_RCC_OscConfig+0x270>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x1dc>
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d073      	beq.n	80025be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_OscConfig+0x21c>
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2b0c      	cmp	r3, #12
 80024e0:	d10e      	bne.n	8002500 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d10b      	bne.n	8002500 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <HAL_RCC_OscConfig+0x270>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d063      	beq.n	80025bc <HAL_RCC_OscConfig+0x2f0>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d15f      	bne.n	80025bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e2f1      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002508:	d106      	bne.n	8002518 <HAL_RCC_OscConfig+0x24c>
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_RCC_OscConfig+0x270>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a0b      	ldr	r2, [pc, #44]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e025      	b.n	8002564 <HAL_RCC_OscConfig+0x298>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002520:	d114      	bne.n	800254c <HAL_RCC_OscConfig+0x280>
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a05      	ldr	r2, [pc, #20]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b03      	ldr	r3, [pc, #12]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a02      	ldr	r2, [pc, #8]	; (800253c <HAL_RCC_OscConfig+0x270>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e013      	b.n	8002564 <HAL_RCC_OscConfig+0x298>
 800253c:	40021000 	.word	0x40021000
 8002540:	0800818c 	.word	0x0800818c
 8002544:	20000004 	.word	0x20000004
 8002548:	20000008 	.word	0x20000008
 800254c:	4ba0      	ldr	r3, [pc, #640]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a9f      	ldr	r2, [pc, #636]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b9d      	ldr	r3, [pc, #628]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a9c      	ldr	r2, [pc, #624]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 800255e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7ff fb5e 	bl	8001c2c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002574:	f7ff fb5a 	bl	8001c2c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e2ae      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002586:	4b92      	ldr	r3, [pc, #584]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x2a8>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7ff fb4a 	bl	8001c2c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259c:	f7ff fb46 	bl	8001c2c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e29a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ae:	4b88      	ldr	r3, [pc, #544]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x2d0>
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d060      	beq.n	800268c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_OscConfig+0x310>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d119      	bne.n	800260a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d116      	bne.n	800260a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025dc:	4b7c      	ldr	r3, [pc, #496]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_OscConfig+0x328>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e277      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	4973      	ldr	r1, [pc, #460]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002608:	e040      	b.n	800268c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d023      	beq.n	800265a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002612:	4b6f      	ldr	r3, [pc, #444]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6e      	ldr	r2, [pc, #440]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7ff fb05 	bl	8001c2c <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002626:	f7ff fb01 	bl	8001c2c <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e255      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002638:	4b65      	ldr	r3, [pc, #404]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b62      	ldr	r3, [pc, #392]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	061b      	lsls	r3, r3, #24
 8002652:	495f      	ldr	r1, [pc, #380]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
 8002658:	e018      	b.n	800268c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b5d      	ldr	r3, [pc, #372]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a5c      	ldr	r2, [pc, #368]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7ff fae1 	bl	8001c2c <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266e:	f7ff fadd 	bl	8001c2c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e231      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002680:	4b53      	ldr	r3, [pc, #332]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d03c      	beq.n	8002712 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01c      	beq.n	80026da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a0:	4b4b      	ldr	r3, [pc, #300]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a6:	4a4a      	ldr	r2, [pc, #296]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7ff fabc 	bl	8001c2c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b8:	f7ff fab8 	bl	8001c2c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e20c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ef      	beq.n	80026b8 <HAL_RCC_OscConfig+0x3ec>
 80026d8:	e01b      	b.n	8002712 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026da:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e0:	4a3b      	ldr	r2, [pc, #236]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7ff fa9f 	bl	8001c2c <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f2:	f7ff fa9b 	bl	8001c2c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e1ef      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002704:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1ef      	bne.n	80026f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80a6 	beq.w	800286c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002720:	2300      	movs	r3, #0
 8002722:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002724:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10d      	bne.n	800274c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	4a26      	ldr	r2, [pc, #152]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273a:	6593      	str	r3, [r2, #88]	; 0x58
 800273c:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002748:	2301      	movs	r3, #1
 800274a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274c:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_RCC_OscConfig+0x508>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d118      	bne.n	800278a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002758:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_RCC_OscConfig+0x508>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_RCC_OscConfig+0x508>)
 800275e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002764:	f7ff fa62 	bl	8001c2c <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276c:	f7ff fa5e 	bl	8001c2c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1b2      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_RCC_OscConfig+0x508>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4d8>
 8002792:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027a2:	e029      	b.n	80027f8 <HAL_RCC_OscConfig+0x52c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d115      	bne.n	80027d8 <HAL_RCC_OscConfig+0x50c>
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c2:	4a03      	ldr	r2, [pc, #12]	; (80027d0 <HAL_RCC_OscConfig+0x504>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027cc:	e014      	b.n	80027f8 <HAL_RCC_OscConfig+0x52c>
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40007000 	.word	0x40007000
 80027d8:	4b9a      	ldr	r3, [pc, #616]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027de:	4a99      	ldr	r2, [pc, #612]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e8:	4b96      	ldr	r3, [pc, #600]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	4a95      	ldr	r2, [pc, #596]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d016      	beq.n	800282e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7ff fa14 	bl	8001c2c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7ff fa10 	bl	8001c2c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e162      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281e:	4b89      	ldr	r3, [pc, #548]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ed      	beq.n	8002808 <HAL_RCC_OscConfig+0x53c>
 800282c:	e015      	b.n	800285a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282e:	f7ff f9fd 	bl	8001c2c <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7ff f9f9 	bl	8001c2c <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e14b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800284c:	4b7d      	ldr	r3, [pc, #500]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1ed      	bne.n	8002836 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d105      	bne.n	800286c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002860:	4b78      	ldr	r3, [pc, #480]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	4a77      	ldr	r2, [pc, #476]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 8002866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d03c      	beq.n	80028f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01c      	beq.n	80028ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002880:	4b70      	ldr	r3, [pc, #448]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 8002882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002886:	4a6f      	ldr	r2, [pc, #444]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002890:	f7ff f9cc 	bl	8001c2c <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002898:	f7ff f9c8 	bl	8001c2c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e11c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028aa:	4b66      	ldr	r3, [pc, #408]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 80028ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ef      	beq.n	8002898 <HAL_RCC_OscConfig+0x5cc>
 80028b8:	e01b      	b.n	80028f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ba:	4b62      	ldr	r3, [pc, #392]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 80028bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028c0:	4a60      	ldr	r2, [pc, #384]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ca:	f7ff f9af 	bl	8001c2c <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028d2:	f7ff f9ab 	bl	8001c2c <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e0ff      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028e4:	4b57      	ldr	r3, [pc, #348]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 80028e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1ef      	bne.n	80028d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80f3 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	2b02      	cmp	r3, #2
 8002902:	f040 80c9 	bne.w	8002a98 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002906:	4b4f      	ldr	r3, [pc, #316]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f003 0203 	and.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	429a      	cmp	r2, r3
 8002918:	d12c      	bne.n	8002974 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	3b01      	subs	r3, #1
 8002926:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d123      	bne.n	8002974 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002936:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d11b      	bne.n	8002974 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002946:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d113      	bne.n	8002974 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	3b01      	subs	r3, #1
 800295a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d109      	bne.n	8002974 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	3b01      	subs	r3, #1
 800296e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d06b      	beq.n	8002a4c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b0c      	cmp	r3, #12
 8002978:	d062      	beq.n	8002a40 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800297a:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e0ac      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800298a:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2d      	ldr	r2, [pc, #180]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 8002990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002994:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002996:	f7ff f949 	bl	8001c2c <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299e:	f7ff f945 	bl	8001c2c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e099      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b0:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029bc:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <HAL_RCC_OscConfig+0x77c>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029cc:	3a01      	subs	r2, #1
 80029ce:	0112      	lsls	r2, r2, #4
 80029d0:	4311      	orrs	r1, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029d6:	0212      	lsls	r2, r2, #8
 80029d8:	4311      	orrs	r1, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029de:	0852      	lsrs	r2, r2, #1
 80029e0:	3a01      	subs	r2, #1
 80029e2:	0552      	lsls	r2, r2, #21
 80029e4:	4311      	orrs	r1, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029ea:	0852      	lsrs	r2, r2, #1
 80029ec:	3a01      	subs	r2, #1
 80029ee:	0652      	lsls	r2, r2, #25
 80029f0:	4311      	orrs	r1, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029f6:	06d2      	lsls	r2, r2, #27
 80029f8:	430a      	orrs	r2, r1
 80029fa:	4912      	ldr	r1, [pc, #72]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0f      	ldr	r2, [pc, #60]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 8002a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 8002a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a18:	f7ff f908 	bl	8001c2c <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a20:	f7ff f904 	bl	8001c2c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e058      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a32:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <HAL_RCC_OscConfig+0x778>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a3e:	e050      	b.n	8002ae2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e04f      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
 8002a44:	40021000 	.word	0x40021000
 8002a48:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4c:	4b27      	ldr	r3, [pc, #156]	; (8002aec <HAL_RCC_OscConfig+0x820>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d144      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_RCC_OscConfig+0x820>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a23      	ldr	r2, [pc, #140]	; (8002aec <HAL_RCC_OscConfig+0x820>)
 8002a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <HAL_RCC_OscConfig+0x820>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4a20      	ldr	r2, [pc, #128]	; (8002aec <HAL_RCC_OscConfig+0x820>)
 8002a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a70:	f7ff f8dc 	bl	8001c2c <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f7ff f8d8 	bl	8001c2c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e02c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_RCC_OscConfig+0x820>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x7ac>
 8002a96:	e024      	b.n	8002ae2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b0c      	cmp	r3, #12
 8002a9c:	d01f      	beq.n	8002ade <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9e:	4b13      	ldr	r3, [pc, #76]	; (8002aec <HAL_RCC_OscConfig+0x820>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a12      	ldr	r2, [pc, #72]	; (8002aec <HAL_RCC_OscConfig+0x820>)
 8002aa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7ff f8bf 	bl	8001c2c <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab2:	f7ff f8bb 	bl	8001c2c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e00f      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_RCC_OscConfig+0x820>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f0      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCC_OscConfig+0x820>)
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	4905      	ldr	r1, [pc, #20]	; (8002aec <HAL_RCC_OscConfig+0x820>)
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_RCC_OscConfig+0x824>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60cb      	str	r3, [r1, #12]
 8002adc:	e001      	b.n	8002ae2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	feeefffc 	.word	0xfeeefffc

08002af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0e7      	b.n	8002cd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b08:	4b75      	ldr	r3, [pc, #468]	; (8002ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d910      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b72      	ldr	r3, [pc, #456]	; (8002ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 0207 	bic.w	r2, r3, #7
 8002b1e:	4970      	ldr	r1, [pc, #448]	; (8002ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b6e      	ldr	r3, [pc, #440]	; (8002ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0cf      	b.n	8002cd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	4b66      	ldr	r3, [pc, #408]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d908      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b54:	4b63      	ldr	r3, [pc, #396]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4960      	ldr	r1, [pc, #384]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d04c      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7a:	4b5a      	ldr	r3, [pc, #360]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d121      	bne.n	8002bca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e0a6      	b.n	8002cd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d107      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b92:	4b54      	ldr	r3, [pc, #336]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d115      	bne.n	8002bca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e09a      	b.n	8002cd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002baa:	4b4e      	ldr	r3, [pc, #312]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e08e      	b.n	8002cd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bba:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e086      	b.n	8002cd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bca:	4b46      	ldr	r3, [pc, #280]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f023 0203 	bic.w	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4943      	ldr	r1, [pc, #268]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bdc:	f7ff f826 	bl	8001c2c <HAL_GetTick>
 8002be0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be4:	f7ff f822 	bl	8001c2c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e06e      	b.n	8002cd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	4b3a      	ldr	r3, [pc, #232]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 020c 	and.w	r2, r3, #12
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d1eb      	bne.n	8002be4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d010      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	4b31      	ldr	r3, [pc, #196]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d208      	bcs.n	8002c3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c28:	4b2e      	ldr	r3, [pc, #184]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	492b      	ldr	r1, [pc, #172]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3a:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d210      	bcs.n	8002c6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 0207 	bic.w	r2, r3, #7
 8002c50:	4923      	ldr	r1, [pc, #140]	; (8002ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c58:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d001      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e036      	b.n	8002cd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c76:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	4918      	ldr	r1, [pc, #96]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d009      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c94:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4910      	ldr	r1, [pc, #64]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ca8:	f000 f824 	bl	8002cf4 <HAL_RCC_GetSysClockFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	490b      	ldr	r1, [pc, #44]	; (8002ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc4:	4a09      	ldr	r2, [pc, #36]	; (8002cec <HAL_RCC_ClockConfig+0x1f8>)
 8002cc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_RCC_ClockConfig+0x1fc>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe ff5d 	bl	8001b8c <HAL_InitTick>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cd6:	7afb      	ldrb	r3, [r7, #11]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40022000 	.word	0x40022000
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	0800818c 	.word	0x0800818c
 8002cec:	20000004 	.word	0x20000004
 8002cf0:	20000008 	.word	0x20000008

08002cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d02:	4b3e      	ldr	r3, [pc, #248]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d0c:	4b3b      	ldr	r3, [pc, #236]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x34>
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d121      	bne.n	8002d66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d11e      	bne.n	8002d66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d28:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d34:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d3a:	0a1b      	lsrs	r3, r3, #8
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	e005      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d44:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d50:	4a2b      	ldr	r2, [pc, #172]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10d      	bne.n	8002d7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d102      	bne.n	8002d72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d6c:	4b25      	ldr	r3, [pc, #148]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	e004      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d78:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	d134      	bne.n	8002dec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d82:	4b1e      	ldr	r3, [pc, #120]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d003      	beq.n	8002d9a <HAL_RCC_GetSysClockFreq+0xa6>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d003      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0xac>
 8002d98:	e005      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d9c:	617b      	str	r3, [r7, #20]
      break;
 8002d9e:	e005      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002da2:	617b      	str	r3, [r7, #20]
      break;
 8002da4:	e002      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	617b      	str	r3, [r7, #20]
      break;
 8002daa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	3301      	adds	r3, #1
 8002db8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	fb03 f202 	mul.w	r2, r3, r2
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	0e5b      	lsrs	r3, r3, #25
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002dec:	69bb      	ldr	r3, [r7, #24]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	080081a4 	.word	0x080081a4
 8002e04:	00f42400 	.word	0x00f42400
 8002e08:	007a1200 	.word	0x007a1200

08002e0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000004 	.word	0x20000004

08002e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e28:	f7ff fff0 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4904      	ldr	r1, [pc, #16]	; (8002e4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	0800819c 	.word	0x0800819c

08002e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e54:	f7ff ffda 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0adb      	lsrs	r3, r3, #11
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4904      	ldr	r1, [pc, #16]	; (8002e78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021000 	.word	0x40021000
 8002e78:	0800819c 	.word	0x0800819c

08002e7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e88:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e94:	f7ff f9b6 	bl	8002204 <HAL_PWREx_GetVoltageRange>
 8002e98:	6178      	str	r0, [r7, #20]
 8002e9a:	e014      	b.n	8002ec6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e9c:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea0:	4a24      	ldr	r2, [pc, #144]	; (8002f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea8:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002eb4:	f7ff f9a6 	bl	8002204 <HAL_PWREx_GetVoltageRange>
 8002eb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eba:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebe:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ecc:	d10b      	bne.n	8002ee6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b80      	cmp	r3, #128	; 0x80
 8002ed2:	d919      	bls.n	8002f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2ba0      	cmp	r3, #160	; 0xa0
 8002ed8:	d902      	bls.n	8002ee0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eda:	2302      	movs	r3, #2
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	e013      	b.n	8002f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	e010      	b.n	8002f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b80      	cmp	r3, #128	; 0x80
 8002eea:	d902      	bls.n	8002ef2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002eec:	2303      	movs	r3, #3
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	e00a      	b.n	8002f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b80      	cmp	r3, #128	; 0x80
 8002ef6:	d102      	bne.n	8002efe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ef8:	2302      	movs	r3, #2
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	e004      	b.n	8002f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b70      	cmp	r3, #112	; 0x70
 8002f02:	d101      	bne.n	8002f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f04:	2301      	movs	r3, #1
 8002f06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 0207 	bic.w	r2, r3, #7
 8002f10:	4909      	ldr	r1, [pc, #36]	; (8002f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f18:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40022000 	.word	0x40022000

08002f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f44:	2300      	movs	r3, #0
 8002f46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f48:	2300      	movs	r3, #0
 8002f4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d031      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f60:	d01a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002f62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f66:	d814      	bhi.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d009      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f70:	d10f      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002f72:	4b5d      	ldr	r3, [pc, #372]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	4a5c      	ldr	r2, [pc, #368]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f7e:	e00c      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fa44 	bl	8003414 <RCCEx_PLLSAI1_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f90:	e003      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	74fb      	strb	r3, [r7, #19]
      break;
 8002f96:	e000      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f9a:	7cfb      	ldrb	r3, [r7, #19]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10b      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fa0:	4b51      	ldr	r3, [pc, #324]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fae:	494e      	ldr	r1, [pc, #312]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fb6:	e001      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 809e 	beq.w	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fce:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00d      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe4:	4b40      	ldr	r3, [pc, #256]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	4a3f      	ldr	r2, [pc, #252]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fee:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff0:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003000:	4b3a      	ldr	r3, [pc, #232]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a39      	ldr	r2, [pc, #228]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800300c:	f7fe fe0e 	bl	8001c2c <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003012:	e009      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003014:	f7fe fe0a 	bl	8001c2c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d902      	bls.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	74fb      	strb	r3, [r7, #19]
        break;
 8003026:	e005      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003028:	4b30      	ldr	r3, [pc, #192]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0ef      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d15a      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800303a:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800303c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003044:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01e      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	429a      	cmp	r2, r3
 8003054:	d019      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003056:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003060:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003062:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800307a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003082:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d016      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe fdca 	bl	8001c2c <HAL_GetTick>
 8003098:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800309a:	e00b      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309c:	f7fe fdc6 	bl	8001c2c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d902      	bls.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	74fb      	strb	r3, [r7, #19]
            break;
 80030b2:	e006      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0ec      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10b      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030c8:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030d6:	4904      	ldr	r1, [pc, #16]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030de:	e009      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	74bb      	strb	r3, [r7, #18]
 80030e4:	e006      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f4:	7c7b      	ldrb	r3, [r7, #17]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d105      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fa:	4b9e      	ldr	r3, [pc, #632]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	4a9d      	ldr	r2, [pc, #628]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003104:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003112:	4b98      	ldr	r3, [pc, #608]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003118:	f023 0203 	bic.w	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4994      	ldr	r1, [pc, #592]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003134:	4b8f      	ldr	r3, [pc, #572]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313a:	f023 020c 	bic.w	r2, r3, #12
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	498c      	ldr	r1, [pc, #560]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003156:	4b87      	ldr	r3, [pc, #540]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	4983      	ldr	r1, [pc, #524]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003178:	4b7e      	ldr	r3, [pc, #504]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	497b      	ldr	r1, [pc, #492]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800319a:	4b76      	ldr	r3, [pc, #472]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	4972      	ldr	r1, [pc, #456]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031bc:	4b6d      	ldr	r3, [pc, #436]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	496a      	ldr	r1, [pc, #424]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031de:	4b65      	ldr	r3, [pc, #404]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ec:	4961      	ldr	r1, [pc, #388]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003200:	4b5c      	ldr	r3, [pc, #368]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	4959      	ldr	r1, [pc, #356]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003222:	4b54      	ldr	r3, [pc, #336]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	4950      	ldr	r1, [pc, #320]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003244:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003252:	4948      	ldr	r1, [pc, #288]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003266:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003268:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800326c:	f023 0203 	bic.w	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	493f      	ldr	r1, [pc, #252]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d028      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003288:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003296:	4937      	ldr	r1, [pc, #220]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032a6:	d106      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a8:	4b32      	ldr	r3, [pc, #200]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a31      	ldr	r2, [pc, #196]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032b2:	60d3      	str	r3, [r2, #12]
 80032b4:	e011      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032be:	d10c      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	2101      	movs	r1, #1
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f8a4 	bl	8003414 <RCCEx_PLLSAI1_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032d0:	7cfb      	ldrb	r3, [r7, #19]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
 80032d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d028      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032e6:	4b23      	ldr	r3, [pc, #140]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f4:	491f      	ldr	r1, [pc, #124]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003304:	d106      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	4a1a      	ldr	r2, [pc, #104]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800330c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003310:	60d3      	str	r3, [r2, #12]
 8003312:	e011      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800331c:	d10c      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3304      	adds	r3, #4
 8003322:	2101      	movs	r1, #1
 8003324:	4618      	mov	r0, r3
 8003326:	f000 f875 	bl	8003414 <RCCEx_PLLSAI1_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003334:	7cfb      	ldrb	r3, [r7, #19]
 8003336:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d02b      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	4908      	ldr	r1, [pc, #32]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003362:	d109      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a02      	ldr	r2, [pc, #8]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800336a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800336e:	60d3      	str	r3, [r2, #12]
 8003370:	e014      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003380:	d10c      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3304      	adds	r3, #4
 8003386:	2101      	movs	r1, #1
 8003388:	4618      	mov	r0, r3
 800338a:	f000 f843 	bl	8003414 <RCCEx_PLLSAI1_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003392:	7cfb      	ldrb	r3, [r7, #19]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01c      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b6:	4916      	ldr	r1, [pc, #88]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033c6:	d10c      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	2102      	movs	r1, #2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f820 	bl	8003414 <RCCEx_PLLSAI1_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fc:	4904      	ldr	r1, [pc, #16]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003404:	7cbb      	ldrb	r3, [r7, #18]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000

08003414 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003422:	4b74      	ldr	r3, [pc, #464]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800342e:	4b71      	ldr	r3, [pc, #452]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0203 	and.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d10d      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
       ||
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003446:	4b6b      	ldr	r3, [pc, #428]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
       ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d047      	beq.n	80034ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	e044      	b.n	80034ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b03      	cmp	r3, #3
 8003466:	d018      	beq.n	800349a <RCCEx_PLLSAI1_Config+0x86>
 8003468:	2b03      	cmp	r3, #3
 800346a:	d825      	bhi.n	80034b8 <RCCEx_PLLSAI1_Config+0xa4>
 800346c:	2b01      	cmp	r3, #1
 800346e:	d002      	beq.n	8003476 <RCCEx_PLLSAI1_Config+0x62>
 8003470:	2b02      	cmp	r3, #2
 8003472:	d009      	beq.n	8003488 <RCCEx_PLLSAI1_Config+0x74>
 8003474:	e020      	b.n	80034b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003476:	4b5f      	ldr	r3, [pc, #380]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11d      	bne.n	80034be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003486:	e01a      	b.n	80034be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003488:	4b5a      	ldr	r3, [pc, #360]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d116      	bne.n	80034c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003498:	e013      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800349a:	4b56      	ldr	r3, [pc, #344]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10f      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034a6:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034b6:	e006      	b.n	80034c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      break;
 80034bc:	e004      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10d      	bne.n	80034ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034ce:	4b49      	ldr	r3, [pc, #292]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	430b      	orrs	r3, r1
 80034e4:	4943      	ldr	r1, [pc, #268]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d17c      	bne.n	80035ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034f0:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a3f      	ldr	r2, [pc, #252]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fc:	f7fe fb96 	bl	8001c2c <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003502:	e009      	b.n	8003518 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003504:	f7fe fb92 	bl	8001c2c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d902      	bls.n	8003518 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	73fb      	strb	r3, [r7, #15]
        break;
 8003516:	e005      	b.n	8003524 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003518:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ef      	bne.n	8003504 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d15f      	bne.n	80035ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d110      	bne.n	8003552 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003530:	4b30      	ldr	r3, [pc, #192]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6892      	ldr	r2, [r2, #8]
 8003540:	0211      	lsls	r1, r2, #8
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68d2      	ldr	r2, [r2, #12]
 8003546:	06d2      	lsls	r2, r2, #27
 8003548:	430a      	orrs	r2, r1
 800354a:	492a      	ldr	r1, [pc, #168]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800354c:	4313      	orrs	r3, r2
 800354e:	610b      	str	r3, [r1, #16]
 8003550:	e027      	b.n	80035a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d112      	bne.n	800357e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003558:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003560:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6892      	ldr	r2, [r2, #8]
 8003568:	0211      	lsls	r1, r2, #8
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6912      	ldr	r2, [r2, #16]
 800356e:	0852      	lsrs	r2, r2, #1
 8003570:	3a01      	subs	r2, #1
 8003572:	0552      	lsls	r2, r2, #21
 8003574:	430a      	orrs	r2, r1
 8003576:	491f      	ldr	r1, [pc, #124]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003578:	4313      	orrs	r3, r2
 800357a:	610b      	str	r3, [r1, #16]
 800357c:	e011      	b.n	80035a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800357e:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003586:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6892      	ldr	r2, [r2, #8]
 800358e:	0211      	lsls	r1, r2, #8
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6952      	ldr	r2, [r2, #20]
 8003594:	0852      	lsrs	r2, r2, #1
 8003596:	3a01      	subs	r2, #1
 8003598:	0652      	lsls	r2, r2, #25
 800359a:	430a      	orrs	r2, r1
 800359c:	4915      	ldr	r1, [pc, #84]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035a2:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ae:	f7fe fb3d 	bl	8001c2c <HAL_GetTick>
 80035b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035b4:	e009      	b.n	80035ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035b6:	f7fe fb39 	bl	8001c2c <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d902      	bls.n	80035ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	73fb      	strb	r3, [r7, #15]
          break;
 80035c8:	e005      	b.n	80035d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0ef      	beq.n	80035b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40021000 	.word	0x40021000

080035f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e049      	b.n	800369e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fe f89c 	bl	800175c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	4619      	mov	r1, r3
 8003636:	4610      	mov	r0, r2
 8003638:	f000 fd60 	bl	80040fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d001      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e040      	b.n	8003742 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1c      	ldr	r2, [pc, #112]	; (8003750 <HAL_TIM_Base_Start_IT+0xa8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00e      	beq.n	8003700 <HAL_TIM_Base_Start_IT+0x58>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ea:	d009      	beq.n	8003700 <HAL_TIM_Base_Start_IT+0x58>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a18      	ldr	r2, [pc, #96]	; (8003754 <HAL_TIM_Base_Start_IT+0xac>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <HAL_TIM_Base_Start_IT+0x58>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_TIM_Base_Start_IT+0xb0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d115      	bne.n	800372c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <HAL_TIM_Base_Start_IT+0xb4>)
 8003708:	4013      	ands	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b06      	cmp	r3, #6
 8003710:	d015      	beq.n	800373e <HAL_TIM_Base_Start_IT+0x96>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003718:	d011      	beq.n	800373e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0201 	orr.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372a:	e008      	b.n	800373e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	e000      	b.n	8003740 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40000400 	.word	0x40000400
 8003758:	40014000 	.word	0x40014000
 800375c:	00010007 	.word	0x00010007

08003760 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e049      	b.n	8003806 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fd ffc8 	bl	800171c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f000 fcac 	bl	80040fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d109      	bne.n	8003834 <HAL_TIM_PWM_Start+0x24>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e03c      	b.n	80038ae <HAL_TIM_PWM_Start+0x9e>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b04      	cmp	r3, #4
 8003838:	d109      	bne.n	800384e <HAL_TIM_PWM_Start+0x3e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	bf14      	ite	ne
 8003846:	2301      	movne	r3, #1
 8003848:	2300      	moveq	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	e02f      	b.n	80038ae <HAL_TIM_PWM_Start+0x9e>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d109      	bne.n	8003868 <HAL_TIM_PWM_Start+0x58>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	bf14      	ite	ne
 8003860:	2301      	movne	r3, #1
 8003862:	2300      	moveq	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e022      	b.n	80038ae <HAL_TIM_PWM_Start+0x9e>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d109      	bne.n	8003882 <HAL_TIM_PWM_Start+0x72>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b01      	cmp	r3, #1
 8003878:	bf14      	ite	ne
 800387a:	2301      	movne	r3, #1
 800387c:	2300      	moveq	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	e015      	b.n	80038ae <HAL_TIM_PWM_Start+0x9e>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b10      	cmp	r3, #16
 8003886:	d109      	bne.n	800389c <HAL_TIM_PWM_Start+0x8c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	bf14      	ite	ne
 8003894:	2301      	movne	r3, #1
 8003896:	2300      	moveq	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e008      	b.n	80038ae <HAL_TIM_PWM_Start+0x9e>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e083      	b.n	80039be <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d104      	bne.n	80038c6 <HAL_TIM_PWM_Start+0xb6>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c4:	e023      	b.n	800390e <HAL_TIM_PWM_Start+0xfe>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d104      	bne.n	80038d6 <HAL_TIM_PWM_Start+0xc6>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d4:	e01b      	b.n	800390e <HAL_TIM_PWM_Start+0xfe>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d104      	bne.n	80038e6 <HAL_TIM_PWM_Start+0xd6>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e4:	e013      	b.n	800390e <HAL_TIM_PWM_Start+0xfe>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b0c      	cmp	r3, #12
 80038ea:	d104      	bne.n	80038f6 <HAL_TIM_PWM_Start+0xe6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038f4:	e00b      	b.n	800390e <HAL_TIM_PWM_Start+0xfe>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d104      	bne.n	8003906 <HAL_TIM_PWM_Start+0xf6>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003904:	e003      	b.n	800390e <HAL_TIM_PWM_Start+0xfe>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2202      	movs	r2, #2
 800390a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2201      	movs	r2, #1
 8003914:	6839      	ldr	r1, [r7, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fedc 	bl	80046d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <HAL_TIM_PWM_Start+0x1b8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d009      	beq.n	800393a <HAL_TIM_PWM_Start+0x12a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a28      	ldr	r2, [pc, #160]	; (80039cc <HAL_TIM_PWM_Start+0x1bc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <HAL_TIM_PWM_Start+0x12a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a26      	ldr	r2, [pc, #152]	; (80039d0 <HAL_TIM_PWM_Start+0x1c0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <HAL_TIM_PWM_Start+0x12e>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <HAL_TIM_PWM_Start+0x130>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003952:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <HAL_TIM_PWM_Start+0x1b8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00e      	beq.n	800397c <HAL_TIM_PWM_Start+0x16c>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003966:	d009      	beq.n	800397c <HAL_TIM_PWM_Start+0x16c>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a19      	ldr	r2, [pc, #100]	; (80039d4 <HAL_TIM_PWM_Start+0x1c4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <HAL_TIM_PWM_Start+0x16c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a15      	ldr	r2, [pc, #84]	; (80039cc <HAL_TIM_PWM_Start+0x1bc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d115      	bne.n	80039a8 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_TIM_PWM_Start+0x1c8>)
 8003984:	4013      	ands	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b06      	cmp	r3, #6
 800398c:	d015      	beq.n	80039ba <HAL_TIM_PWM_Start+0x1aa>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003994:	d011      	beq.n	80039ba <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0201 	orr.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a6:	e008      	b.n	80039ba <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e000      	b.n	80039bc <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40014400 	.word	0x40014400
 80039d4:	40000400 	.word	0x40000400
 80039d8:	00010007 	.word	0x00010007

080039dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e097      	b.n	8003b20 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7fd fe49 	bl	800169c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003a20:	f023 0307 	bic.w	r3, r3, #7
 8003a24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4610      	mov	r0, r2
 8003a32:	f000 fb63 	bl	80040fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003a7c:	f023 030c 	bic.w	r3, r3, #12
 8003a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	011a      	lsls	r2, r3, #4
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	031b      	lsls	r3, r3, #12
 8003aac:	4313      	orrs	r3, r2
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003aba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d110      	bne.n	8003b7a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d102      	bne.n	8003b64 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b5e:	7b7b      	ldrb	r3, [r7, #13]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d001      	beq.n	8003b68 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e069      	b.n	8003c3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b78:	e031      	b.n	8003bde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d110      	bne.n	8003ba2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b80:	7bbb      	ldrb	r3, [r7, #14]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d102      	bne.n	8003b8c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b86:	7b3b      	ldrb	r3, [r7, #12]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d001      	beq.n	8003b90 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e055      	b.n	8003c3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ba0:	e01d      	b.n	8003bde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d108      	bne.n	8003bba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ba8:	7bbb      	ldrb	r3, [r7, #14]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d105      	bne.n	8003bba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bae:	7b7b      	ldrb	r3, [r7, #13]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d102      	bne.n	8003bba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bb4:	7b3b      	ldrb	r3, [r7, #12]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d001      	beq.n	8003bbe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e03e      	b.n	8003c3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_TIM_Encoder_Start+0xc4>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d008      	beq.n	8003bfc <HAL_TIM_Encoder_Start+0xd4>
 8003bea:	e00f      	b.n	8003c0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fd6d 	bl	80046d4 <TIM_CCxChannelCmd>
      break;
 8003bfa:	e016      	b.n	8003c2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2201      	movs	r2, #1
 8003c02:	2104      	movs	r1, #4
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fd65 	bl	80046d4 <TIM_CCxChannelCmd>
      break;
 8003c0a:	e00e      	b.n	8003c2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2201      	movs	r2, #1
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fd5d 	bl	80046d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	2104      	movs	r1, #4
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fd56 	bl	80046d4 <TIM_CCxChannelCmd>
      break;
 8003c28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d122      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d11b      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0202 	mvn.w	r2, #2
 8003c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fa1a 	bl	80040c0 <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fa0c 	bl	80040ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fa1d 	bl	80040d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d122      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d11b      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0204 	mvn.w	r2, #4
 8003cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f9f0 	bl	80040c0 <HAL_TIM_IC_CaptureCallback>
 8003ce0:	e005      	b.n	8003cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f9e2 	bl	80040ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f9f3 	bl	80040d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d122      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d11b      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0208 	mvn.w	r2, #8
 8003d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f9c6 	bl	80040c0 <HAL_TIM_IC_CaptureCallback>
 8003d34:	e005      	b.n	8003d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f9b8 	bl	80040ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f9c9 	bl	80040d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b10      	cmp	r3, #16
 8003d54:	d122      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d11b      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0210 	mvn.w	r2, #16
 8003d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2208      	movs	r2, #8
 8003d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f99c 	bl	80040c0 <HAL_TIM_IC_CaptureCallback>
 8003d88:	e005      	b.n	8003d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f98e 	bl	80040ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f99f 	bl	80040d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d10e      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d107      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0201 	mvn.w	r2, #1
 8003dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd fb90 	bl	80014e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	2b80      	cmp	r3, #128	; 0x80
 8003dd4:	d10e      	bne.n	8003df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de0:	2b80      	cmp	r3, #128	; 0x80
 8003de2:	d107      	bne.n	8003df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fd0e 	bl	8004810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e02:	d10e      	bne.n	8003e22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0e:	2b80      	cmp	r3, #128	; 0x80
 8003e10:	d107      	bne.n	8003e22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fd01 	bl	8004824 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d10e      	bne.n	8003e4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d107      	bne.n	8003e4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f94d 	bl	80040e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d10e      	bne.n	8003e7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d107      	bne.n	8003e7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f06f 0220 	mvn.w	r2, #32
 8003e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fcc1 	bl	80047fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e7a:	bf00      	nop
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e0ff      	b.n	80040a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b14      	cmp	r3, #20
 8003eae:	f200 80f0 	bhi.w	8004092 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003eb2:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003f0d 	.word	0x08003f0d
 8003ebc:	08004093 	.word	0x08004093
 8003ec0:	08004093 	.word	0x08004093
 8003ec4:	08004093 	.word	0x08004093
 8003ec8:	08003f4d 	.word	0x08003f4d
 8003ecc:	08004093 	.word	0x08004093
 8003ed0:	08004093 	.word	0x08004093
 8003ed4:	08004093 	.word	0x08004093
 8003ed8:	08003f8f 	.word	0x08003f8f
 8003edc:	08004093 	.word	0x08004093
 8003ee0:	08004093 	.word	0x08004093
 8003ee4:	08004093 	.word	0x08004093
 8003ee8:	08003fcf 	.word	0x08003fcf
 8003eec:	08004093 	.word	0x08004093
 8003ef0:	08004093 	.word	0x08004093
 8003ef4:	08004093 	.word	0x08004093
 8003ef8:	08004011 	.word	0x08004011
 8003efc:	08004093 	.word	0x08004093
 8003f00:	08004093 	.word	0x08004093
 8003f04:	08004093 	.word	0x08004093
 8003f08:	08004051 	.word	0x08004051
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f960 	bl	80041d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0208 	orr.w	r2, r2, #8
 8003f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0204 	bic.w	r2, r2, #4
 8003f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6999      	ldr	r1, [r3, #24]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	619a      	str	r2, [r3, #24]
      break;
 8003f4a:	e0a5      	b.n	8004098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f9bc 	bl	80042d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6999      	ldr	r1, [r3, #24]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	021a      	lsls	r2, r3, #8
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	619a      	str	r2, [r3, #24]
      break;
 8003f8c:	e084      	b.n	8004098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fa15 	bl	80043c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0208 	orr.w	r2, r2, #8
 8003fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0204 	bic.w	r2, r2, #4
 8003fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69d9      	ldr	r1, [r3, #28]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	61da      	str	r2, [r3, #28]
      break;
 8003fcc:	e064      	b.n	8004098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68b9      	ldr	r1, [r7, #8]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fa6d 	bl	80044b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69da      	ldr	r2, [r3, #28]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69d9      	ldr	r1, [r3, #28]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	021a      	lsls	r2, r3, #8
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	61da      	str	r2, [r3, #28]
      break;
 800400e:	e043      	b.n	8004098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 faaa 	bl	8004570 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0208 	orr.w	r2, r2, #8
 800402a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0204 	bic.w	r2, r2, #4
 800403a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800404e:	e023      	b.n	8004098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fae2 	bl	8004620 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800406a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	021a      	lsls	r2, r3, #8
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004090:	e002      	b.n	8004098 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	75fb      	strb	r3, [r7, #23]
      break;
 8004096:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop

080040ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a2e      	ldr	r2, [pc, #184]	; (80041c8 <TIM_Base_SetConfig+0xcc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d007      	beq.n	8004124 <TIM_Base_SetConfig+0x28>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411a:	d003      	beq.n	8004124 <TIM_Base_SetConfig+0x28>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a2b      	ldr	r2, [pc, #172]	; (80041cc <TIM_Base_SetConfig+0xd0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d108      	bne.n	8004136 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a23      	ldr	r2, [pc, #140]	; (80041c8 <TIM_Base_SetConfig+0xcc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00f      	beq.n	800415e <TIM_Base_SetConfig+0x62>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004144:	d00b      	beq.n	800415e <TIM_Base_SetConfig+0x62>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a20      	ldr	r2, [pc, #128]	; (80041cc <TIM_Base_SetConfig+0xd0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d007      	beq.n	800415e <TIM_Base_SetConfig+0x62>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1f      	ldr	r2, [pc, #124]	; (80041d0 <TIM_Base_SetConfig+0xd4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d003      	beq.n	800415e <TIM_Base_SetConfig+0x62>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a1e      	ldr	r2, [pc, #120]	; (80041d4 <TIM_Base_SetConfig+0xd8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d108      	bne.n	8004170 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a0c      	ldr	r2, [pc, #48]	; (80041c8 <TIM_Base_SetConfig+0xcc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d007      	beq.n	80041ac <TIM_Base_SetConfig+0xb0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <TIM_Base_SetConfig+0xd4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d003      	beq.n	80041ac <TIM_Base_SetConfig+0xb0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a0b      	ldr	r2, [pc, #44]	; (80041d4 <TIM_Base_SetConfig+0xd8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d103      	bne.n	80041b4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	615a      	str	r2, [r3, #20]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40014000 	.word	0x40014000
 80041d4:	40014400 	.word	0x40014400

080041d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f023 0201 	bic.w	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f023 0302 	bic.w	r3, r3, #2
 8004224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a24      	ldr	r2, [pc, #144]	; (80042c4 <TIM_OC1_SetConfig+0xec>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d007      	beq.n	8004248 <TIM_OC1_SetConfig+0x70>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a23      	ldr	r2, [pc, #140]	; (80042c8 <TIM_OC1_SetConfig+0xf0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_OC1_SetConfig+0x70>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a22      	ldr	r2, [pc, #136]	; (80042cc <TIM_OC1_SetConfig+0xf4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d10c      	bne.n	8004262 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f023 0308 	bic.w	r3, r3, #8
 800424e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f023 0304 	bic.w	r3, r3, #4
 8004260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <TIM_OC1_SetConfig+0xec>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d007      	beq.n	800427a <TIM_OC1_SetConfig+0xa2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <TIM_OC1_SetConfig+0xf0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <TIM_OC1_SetConfig+0xa2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a15      	ldr	r2, [pc, #84]	; (80042cc <TIM_OC1_SetConfig+0xf4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d111      	bne.n	800429e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	621a      	str	r2, [r3, #32]
}
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40012c00 	.word	0x40012c00
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400

080042d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f023 0210 	bic.w	r2, r3, #16
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f023 0320 	bic.w	r3, r3, #32
 800431e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a22      	ldr	r2, [pc, #136]	; (80043b8 <TIM_OC2_SetConfig+0xe8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d10d      	bne.n	8004350 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800433a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <TIM_OC2_SetConfig+0xe8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d007      	beq.n	8004368 <TIM_OC2_SetConfig+0x98>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a18      	ldr	r2, [pc, #96]	; (80043bc <TIM_OC2_SetConfig+0xec>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_OC2_SetConfig+0x98>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <TIM_OC2_SetConfig+0xf0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d113      	bne.n	8004390 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800436e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	40014000 	.word	0x40014000
 80043c0:	40014400 	.word	0x40014400

080043c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0303 	bic.w	r3, r3, #3
 80043fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a21      	ldr	r2, [pc, #132]	; (80044a8 <TIM_OC3_SetConfig+0xe4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d10d      	bne.n	8004442 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800442c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a18      	ldr	r2, [pc, #96]	; (80044a8 <TIM_OC3_SetConfig+0xe4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d007      	beq.n	800445a <TIM_OC3_SetConfig+0x96>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a17      	ldr	r2, [pc, #92]	; (80044ac <TIM_OC3_SetConfig+0xe8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_OC3_SetConfig+0x96>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <TIM_OC3_SetConfig+0xec>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d113      	bne.n	8004482 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	621a      	str	r2, [r3, #32]
}
 800449c:	bf00      	nop
 800449e:	371c      	adds	r7, #28
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40014400 	.word	0x40014400

080044b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	031b      	lsls	r3, r3, #12
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a14      	ldr	r2, [pc, #80]	; (8004564 <TIM_OC4_SetConfig+0xb0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d007      	beq.n	8004528 <TIM_OC4_SetConfig+0x74>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a13      	ldr	r2, [pc, #76]	; (8004568 <TIM_OC4_SetConfig+0xb4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_OC4_SetConfig+0x74>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a12      	ldr	r2, [pc, #72]	; (800456c <TIM_OC4_SetConfig+0xb8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d109      	bne.n	800453c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800452e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	019b      	lsls	r3, r3, #6
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40012c00 	.word	0x40012c00
 8004568:	40014000 	.word	0x40014000
 800456c:	40014400 	.word	0x40014400

08004570 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80045b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a13      	ldr	r2, [pc, #76]	; (8004614 <TIM_OC5_SetConfig+0xa4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d007      	beq.n	80045da <TIM_OC5_SetConfig+0x6a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a12      	ldr	r2, [pc, #72]	; (8004618 <TIM_OC5_SetConfig+0xa8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_OC5_SetConfig+0x6a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a11      	ldr	r2, [pc, #68]	; (800461c <TIM_OC5_SetConfig+0xac>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d109      	bne.n	80045ee <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	621a      	str	r2, [r3, #32]
}
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40014000 	.word	0x40014000
 800461c:	40014400 	.word	0x40014400

08004620 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800464e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	051b      	lsls	r3, r3, #20
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <TIM_OC6_SetConfig+0xa8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <TIM_OC6_SetConfig+0x6c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a13      	ldr	r2, [pc, #76]	; (80046cc <TIM_OC6_SetConfig+0xac>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_OC6_SetConfig+0x6c>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a12      	ldr	r2, [pc, #72]	; (80046d0 <TIM_OC6_SetConfig+0xb0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d109      	bne.n	80046a0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004692:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	029b      	lsls	r3, r3, #10
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	621a      	str	r2, [r3, #32]
}
 80046ba:	bf00      	nop
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40014000 	.word	0x40014000
 80046d0:	40014400 	.word	0x40014400

080046d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	2201      	movs	r2, #1
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a1a      	ldr	r2, [r3, #32]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	401a      	ands	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a1a      	ldr	r2, [r3, #32]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	fa01 f303 	lsl.w	r3, r1, r3
 800470c:	431a      	orrs	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	621a      	str	r2, [r3, #32]
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
	...

08004720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004734:	2302      	movs	r3, #2
 8004736:	e054      	b.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a24      	ldr	r2, [pc, #144]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d108      	bne.n	8004774 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004768:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a17      	ldr	r2, [pc, #92]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00e      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a0:	d009      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d004      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a11      	ldr	r2, [pc, #68]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d10c      	bne.n	80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40014000 	.word	0x40014000

080047fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e040      	b.n	80048cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fc ffdc 	bl	8001818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2224      	movs	r2, #36	; 0x24
 8004864:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0201 	bic.w	r2, r2, #1
 8004874:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f8c0 	bl	80049fc <UART_SetConfig>
 800487c:	4603      	mov	r3, r0
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e022      	b.n	80048cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fb3a 	bl	8004f08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fbc1 	bl	800504c <UART_CheckIdleState>
 80048ca:	4603      	mov	r3, r0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	f040 8082 	bne.w	80049f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_UART_Transmit+0x26>
 80048f4:	88fb      	ldrh	r3, [r7, #6]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e07a      	b.n	80049f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_UART_Transmit+0x38>
 8004908:	2302      	movs	r3, #2
 800490a:	e073      	b.n	80049f4 <HAL_UART_Transmit+0x120>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2221      	movs	r2, #33	; 0x21
 8004920:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004922:	f7fd f983 	bl	8001c2c <HAL_GetTick>
 8004926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	88fa      	ldrh	r2, [r7, #6]
 800492c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	88fa      	ldrh	r2, [r7, #6]
 8004934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004940:	d108      	bne.n	8004954 <HAL_UART_Transmit+0x80>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d104      	bne.n	8004954 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	61bb      	str	r3, [r7, #24]
 8004952:	e003      	b.n	800495c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004958:	2300      	movs	r3, #0
 800495a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004964:	e02d      	b.n	80049c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2200      	movs	r2, #0
 800496e:	2180      	movs	r1, #128	; 0x80
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 fbb4 	bl	80050de <UART_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e039      	b.n	80049f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10b      	bne.n	800499e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	881a      	ldrh	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004992:	b292      	uxth	r2, r2
 8004994:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	3302      	adds	r3, #2
 800499a:	61bb      	str	r3, [r7, #24]
 800499c:	e008      	b.n	80049b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	781a      	ldrb	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	b292      	uxth	r2, r2
 80049a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3301      	adds	r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1cb      	bne.n	8004966 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	2140      	movs	r1, #64	; 0x40
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fb80 	bl	80050de <UART_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e005      	b.n	80049f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e000      	b.n	80049f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80049f2:	2302      	movs	r3, #2
  }
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a00:	b08a      	sub	sp, #40	; 0x28
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	431a      	orrs	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4ba5      	ldr	r3, [pc, #660]	; (8004cc0 <UART_SetConfig+0x2c4>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a34:	430b      	orrs	r3, r1
 8004a36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a9a      	ldr	r2, [pc, #616]	; (8004cc4 <UART_SetConfig+0x2c8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a64:	4313      	orrs	r3, r2
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a91      	ldr	r2, [pc, #580]	; (8004cc8 <UART_SetConfig+0x2cc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d126      	bne.n	8004ad4 <UART_SetConfig+0xd8>
 8004a86:	4b91      	ldr	r3, [pc, #580]	; (8004ccc <UART_SetConfig+0x2d0>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d81b      	bhi.n	8004acc <UART_SetConfig+0xd0>
 8004a94:	a201      	add	r2, pc, #4	; (adr r2, 8004a9c <UART_SetConfig+0xa0>)
 8004a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9a:	bf00      	nop
 8004a9c:	08004aad 	.word	0x08004aad
 8004aa0:	08004abd 	.word	0x08004abd
 8004aa4:	08004ab5 	.word	0x08004ab5
 8004aa8:	08004ac5 	.word	0x08004ac5
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab2:	e0d6      	b.n	8004c62 <UART_SetConfig+0x266>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aba:	e0d2      	b.n	8004c62 <UART_SetConfig+0x266>
 8004abc:	2304      	movs	r3, #4
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac2:	e0ce      	b.n	8004c62 <UART_SetConfig+0x266>
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aca:	e0ca      	b.n	8004c62 <UART_SetConfig+0x266>
 8004acc:	2310      	movs	r3, #16
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e0c6      	b.n	8004c62 <UART_SetConfig+0x266>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a7d      	ldr	r2, [pc, #500]	; (8004cd0 <UART_SetConfig+0x2d4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d138      	bne.n	8004b50 <UART_SetConfig+0x154>
 8004ade:	4b7b      	ldr	r3, [pc, #492]	; (8004ccc <UART_SetConfig+0x2d0>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f003 030c 	and.w	r3, r3, #12
 8004ae8:	2b0c      	cmp	r3, #12
 8004aea:	d82d      	bhi.n	8004b48 <UART_SetConfig+0x14c>
 8004aec:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <UART_SetConfig+0xf8>)
 8004aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af2:	bf00      	nop
 8004af4:	08004b29 	.word	0x08004b29
 8004af8:	08004b49 	.word	0x08004b49
 8004afc:	08004b49 	.word	0x08004b49
 8004b00:	08004b49 	.word	0x08004b49
 8004b04:	08004b39 	.word	0x08004b39
 8004b08:	08004b49 	.word	0x08004b49
 8004b0c:	08004b49 	.word	0x08004b49
 8004b10:	08004b49 	.word	0x08004b49
 8004b14:	08004b31 	.word	0x08004b31
 8004b18:	08004b49 	.word	0x08004b49
 8004b1c:	08004b49 	.word	0x08004b49
 8004b20:	08004b49 	.word	0x08004b49
 8004b24:	08004b41 	.word	0x08004b41
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2e:	e098      	b.n	8004c62 <UART_SetConfig+0x266>
 8004b30:	2302      	movs	r3, #2
 8004b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b36:	e094      	b.n	8004c62 <UART_SetConfig+0x266>
 8004b38:	2304      	movs	r3, #4
 8004b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3e:	e090      	b.n	8004c62 <UART_SetConfig+0x266>
 8004b40:	2308      	movs	r3, #8
 8004b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b46:	e08c      	b.n	8004c62 <UART_SetConfig+0x266>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4e:	e088      	b.n	8004c62 <UART_SetConfig+0x266>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a5f      	ldr	r2, [pc, #380]	; (8004cd4 <UART_SetConfig+0x2d8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d125      	bne.n	8004ba6 <UART_SetConfig+0x1aa>
 8004b5a:	4b5c      	ldr	r3, [pc, #368]	; (8004ccc <UART_SetConfig+0x2d0>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b64:	2b30      	cmp	r3, #48	; 0x30
 8004b66:	d016      	beq.n	8004b96 <UART_SetConfig+0x19a>
 8004b68:	2b30      	cmp	r3, #48	; 0x30
 8004b6a:	d818      	bhi.n	8004b9e <UART_SetConfig+0x1a2>
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d00a      	beq.n	8004b86 <UART_SetConfig+0x18a>
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d814      	bhi.n	8004b9e <UART_SetConfig+0x1a2>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <UART_SetConfig+0x182>
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d008      	beq.n	8004b8e <UART_SetConfig+0x192>
 8004b7c:	e00f      	b.n	8004b9e <UART_SetConfig+0x1a2>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b84:	e06d      	b.n	8004c62 <UART_SetConfig+0x266>
 8004b86:	2302      	movs	r3, #2
 8004b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8c:	e069      	b.n	8004c62 <UART_SetConfig+0x266>
 8004b8e:	2304      	movs	r3, #4
 8004b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b94:	e065      	b.n	8004c62 <UART_SetConfig+0x266>
 8004b96:	2308      	movs	r3, #8
 8004b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9c:	e061      	b.n	8004c62 <UART_SetConfig+0x266>
 8004b9e:	2310      	movs	r3, #16
 8004ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba4:	e05d      	b.n	8004c62 <UART_SetConfig+0x266>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a4b      	ldr	r2, [pc, #300]	; (8004cd8 <UART_SetConfig+0x2dc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d125      	bne.n	8004bfc <UART_SetConfig+0x200>
 8004bb0:	4b46      	ldr	r3, [pc, #280]	; (8004ccc <UART_SetConfig+0x2d0>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bba:	2bc0      	cmp	r3, #192	; 0xc0
 8004bbc:	d016      	beq.n	8004bec <UART_SetConfig+0x1f0>
 8004bbe:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc0:	d818      	bhi.n	8004bf4 <UART_SetConfig+0x1f8>
 8004bc2:	2b80      	cmp	r3, #128	; 0x80
 8004bc4:	d00a      	beq.n	8004bdc <UART_SetConfig+0x1e0>
 8004bc6:	2b80      	cmp	r3, #128	; 0x80
 8004bc8:	d814      	bhi.n	8004bf4 <UART_SetConfig+0x1f8>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <UART_SetConfig+0x1d8>
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	d008      	beq.n	8004be4 <UART_SetConfig+0x1e8>
 8004bd2:	e00f      	b.n	8004bf4 <UART_SetConfig+0x1f8>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bda:	e042      	b.n	8004c62 <UART_SetConfig+0x266>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be2:	e03e      	b.n	8004c62 <UART_SetConfig+0x266>
 8004be4:	2304      	movs	r3, #4
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bea:	e03a      	b.n	8004c62 <UART_SetConfig+0x266>
 8004bec:	2308      	movs	r3, #8
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf2:	e036      	b.n	8004c62 <UART_SetConfig+0x266>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	e032      	b.n	8004c62 <UART_SetConfig+0x266>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a30      	ldr	r2, [pc, #192]	; (8004cc4 <UART_SetConfig+0x2c8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d12a      	bne.n	8004c5c <UART_SetConfig+0x260>
 8004c06:	4b31      	ldr	r3, [pc, #196]	; (8004ccc <UART_SetConfig+0x2d0>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c14:	d01a      	beq.n	8004c4c <UART_SetConfig+0x250>
 8004c16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c1a:	d81b      	bhi.n	8004c54 <UART_SetConfig+0x258>
 8004c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c20:	d00c      	beq.n	8004c3c <UART_SetConfig+0x240>
 8004c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c26:	d815      	bhi.n	8004c54 <UART_SetConfig+0x258>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <UART_SetConfig+0x238>
 8004c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c30:	d008      	beq.n	8004c44 <UART_SetConfig+0x248>
 8004c32:	e00f      	b.n	8004c54 <UART_SetConfig+0x258>
 8004c34:	2300      	movs	r3, #0
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3a:	e012      	b.n	8004c62 <UART_SetConfig+0x266>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c42:	e00e      	b.n	8004c62 <UART_SetConfig+0x266>
 8004c44:	2304      	movs	r3, #4
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4a:	e00a      	b.n	8004c62 <UART_SetConfig+0x266>
 8004c4c:	2308      	movs	r3, #8
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c52:	e006      	b.n	8004c62 <UART_SetConfig+0x266>
 8004c54:	2310      	movs	r3, #16
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5a:	e002      	b.n	8004c62 <UART_SetConfig+0x266>
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a17      	ldr	r2, [pc, #92]	; (8004cc4 <UART_SetConfig+0x2c8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	f040 808b 	bne.w	8004d84 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d834      	bhi.n	8004ce0 <UART_SetConfig+0x2e4>
 8004c76:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <UART_SetConfig+0x280>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004ca1 	.word	0x08004ca1
 8004c80:	08004ce1 	.word	0x08004ce1
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004ce1 	.word	0x08004ce1
 8004c8c:	08004caf 	.word	0x08004caf
 8004c90:	08004ce1 	.word	0x08004ce1
 8004c94:	08004ce1 	.word	0x08004ce1
 8004c98:	08004ce1 	.word	0x08004ce1
 8004c9c:	08004cb7 	.word	0x08004cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca0:	f7fe f8c0 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8004ca4:	61f8      	str	r0, [r7, #28]
        break;
 8004ca6:	e021      	b.n	8004cec <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ca8:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <UART_SetConfig+0x2e0>)
 8004caa:	61fb      	str	r3, [r7, #28]
        break;
 8004cac:	e01e      	b.n	8004cec <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cae:	f7fe f821 	bl	8002cf4 <HAL_RCC_GetSysClockFreq>
 8004cb2:	61f8      	str	r0, [r7, #28]
        break;
 8004cb4:	e01a      	b.n	8004cec <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cba:	61fb      	str	r3, [r7, #28]
        break;
 8004cbc:	e016      	b.n	8004cec <UART_SetConfig+0x2f0>
 8004cbe:	bf00      	nop
 8004cc0:	efff69f3 	.word	0xefff69f3
 8004cc4:	40008000 	.word	0x40008000
 8004cc8:	40013800 	.word	0x40013800
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	40004400 	.word	0x40004400
 8004cd4:	40004800 	.word	0x40004800
 8004cd8:	40004c00 	.word	0x40004c00
 8004cdc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80fa 	beq.w	8004ee8 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	4413      	add	r3, r2
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d305      	bcc.n	8004d10 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d903      	bls.n	8004d18 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d16:	e0e7      	b.n	8004ee8 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	461c      	mov	r4, r3
 8004d1e:	4615      	mov	r5, r2
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	022b      	lsls	r3, r5, #8
 8004d2a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d2e:	0222      	lsls	r2, r4, #8
 8004d30:	68f9      	ldr	r1, [r7, #12]
 8004d32:	6849      	ldr	r1, [r1, #4]
 8004d34:	0849      	lsrs	r1, r1, #1
 8004d36:	2000      	movs	r0, #0
 8004d38:	4688      	mov	r8, r1
 8004d3a:	4681      	mov	r9, r0
 8004d3c:	eb12 0a08 	adds.w	sl, r2, r8
 8004d40:	eb43 0b09 	adc.w	fp, r3, r9
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	607a      	str	r2, [r7, #4]
 8004d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d52:	4650      	mov	r0, sl
 8004d54:	4659      	mov	r1, fp
 8004d56:	f7fb ff2f 	bl	8000bb8 <__aeabi_uldivmod>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4613      	mov	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d68:	d308      	bcc.n	8004d7c <UART_SetConfig+0x380>
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d70:	d204      	bcs.n	8004d7c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	60da      	str	r2, [r3, #12]
 8004d7a:	e0b5      	b.n	8004ee8 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d82:	e0b1      	b.n	8004ee8 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d8c:	d15d      	bne.n	8004e4a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004d8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d827      	bhi.n	8004de6 <UART_SetConfig+0x3ea>
 8004d96:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <UART_SetConfig+0x3a0>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004dc9 	.word	0x08004dc9
 8004da4:	08004dd1 	.word	0x08004dd1
 8004da8:	08004de7 	.word	0x08004de7
 8004dac:	08004dd7 	.word	0x08004dd7
 8004db0:	08004de7 	.word	0x08004de7
 8004db4:	08004de7 	.word	0x08004de7
 8004db8:	08004de7 	.word	0x08004de7
 8004dbc:	08004ddf 	.word	0x08004ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc0:	f7fe f830 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8004dc4:	61f8      	str	r0, [r7, #28]
        break;
 8004dc6:	e014      	b.n	8004df2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc8:	f7fe f842 	bl	8002e50 <HAL_RCC_GetPCLK2Freq>
 8004dcc:	61f8      	str	r0, [r7, #28]
        break;
 8004dce:	e010      	b.n	8004df2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd0:	4b4c      	ldr	r3, [pc, #304]	; (8004f04 <UART_SetConfig+0x508>)
 8004dd2:	61fb      	str	r3, [r7, #28]
        break;
 8004dd4:	e00d      	b.n	8004df2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dd6:	f7fd ff8d 	bl	8002cf4 <HAL_RCC_GetSysClockFreq>
 8004dda:	61f8      	str	r0, [r7, #28]
        break;
 8004ddc:	e009      	b.n	8004df2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004de2:	61fb      	str	r3, [r7, #28]
        break;
 8004de4:	e005      	b.n	8004df2 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004df0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d077      	beq.n	8004ee8 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	005a      	lsls	r2, r3, #1
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	085b      	lsrs	r3, r3, #1
 8004e02:	441a      	add	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	2b0f      	cmp	r3, #15
 8004e12:	d916      	bls.n	8004e42 <UART_SetConfig+0x446>
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e1a:	d212      	bcs.n	8004e42 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f023 030f 	bic.w	r3, r3, #15
 8004e24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	085b      	lsrs	r3, r3, #1
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	8afb      	ldrh	r3, [r7, #22]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	8afa      	ldrh	r2, [r7, #22]
 8004e3e:	60da      	str	r2, [r3, #12]
 8004e40:	e052      	b.n	8004ee8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e48:	e04e      	b.n	8004ee8 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d827      	bhi.n	8004ea2 <UART_SetConfig+0x4a6>
 8004e52:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <UART_SetConfig+0x45c>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e7d 	.word	0x08004e7d
 8004e5c:	08004e85 	.word	0x08004e85
 8004e60:	08004e8d 	.word	0x08004e8d
 8004e64:	08004ea3 	.word	0x08004ea3
 8004e68:	08004e93 	.word	0x08004e93
 8004e6c:	08004ea3 	.word	0x08004ea3
 8004e70:	08004ea3 	.word	0x08004ea3
 8004e74:	08004ea3 	.word	0x08004ea3
 8004e78:	08004e9b 	.word	0x08004e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e7c:	f7fd ffd2 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8004e80:	61f8      	str	r0, [r7, #28]
        break;
 8004e82:	e014      	b.n	8004eae <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e84:	f7fd ffe4 	bl	8002e50 <HAL_RCC_GetPCLK2Freq>
 8004e88:	61f8      	str	r0, [r7, #28]
        break;
 8004e8a:	e010      	b.n	8004eae <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e8c:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <UART_SetConfig+0x508>)
 8004e8e:	61fb      	str	r3, [r7, #28]
        break;
 8004e90:	e00d      	b.n	8004eae <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e92:	f7fd ff2f 	bl	8002cf4 <HAL_RCC_GetSysClockFreq>
 8004e96:	61f8      	str	r0, [r7, #28]
        break;
 8004e98:	e009      	b.n	8004eae <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e9e:	61fb      	str	r3, [r7, #28]
        break;
 8004ea0:	e005      	b.n	8004eae <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004eac:	bf00      	nop
    }

    if (pclk != 0U)
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d019      	beq.n	8004ee8 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	085a      	lsrs	r2, r3, #1
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	441a      	add	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2b0f      	cmp	r3, #15
 8004ecc:	d909      	bls.n	8004ee2 <UART_SetConfig+0x4e6>
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed4:	d205      	bcs.n	8004ee2 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60da      	str	r2, [r3, #12]
 8004ee0:	e002      	b.n	8004ee8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ef4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3728      	adds	r7, #40	; 0x28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f02:	bf00      	nop
 8004f04:	00f42400 	.word	0x00f42400

08004f08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01a      	beq.n	800501e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005006:	d10a      	bne.n	800501e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	605a      	str	r2, [r3, #4]
  }
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af02      	add	r7, sp, #8
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800505c:	f7fc fde6 	bl	8001c2c <HAL_GetTick>
 8005060:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b08      	cmp	r3, #8
 800506e:	d10e      	bne.n	800508e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f82d 	bl	80050de <UART_WaitOnFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e023      	b.n	80050d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b04      	cmp	r3, #4
 800509a:	d10e      	bne.n	80050ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800509c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f817 	bl	80050de <UART_WaitOnFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e00d      	b.n	80050d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b09c      	sub	sp, #112	; 0x70
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	603b      	str	r3, [r7, #0]
 80050ea:	4613      	mov	r3, r2
 80050ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ee:	e0a5      	b.n	800523c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f6:	f000 80a1 	beq.w	800523c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fa:	f7fc fd97 	bl	8001c2c <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005106:	429a      	cmp	r2, r3
 8005108:	d302      	bcc.n	8005110 <UART_WaitOnFlagUntilTimeout+0x32>
 800510a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800510c:	2b00      	cmp	r3, #0
 800510e:	d13e      	bne.n	800518e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800511e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005120:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005124:	667b      	str	r3, [r7, #100]	; 0x64
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800512e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005130:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005134:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800513c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e6      	bne.n	8005110 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3308      	adds	r3, #8
 8005148:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	663b      	str	r3, [r7, #96]	; 0x60
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3308      	adds	r3, #8
 8005160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005162:	64ba      	str	r2, [r7, #72]	; 0x48
 8005164:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e5      	bne.n	8005142 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e067      	b.n	800525e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d04f      	beq.n	800523c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051aa:	d147      	bne.n	800523c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
 80051d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e6      	bne.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3308      	adds	r3, #8
 80051ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	613b      	str	r3, [r7, #16]
   return(result);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3308      	adds	r3, #8
 8005206:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005208:	623a      	str	r2, [r7, #32]
 800520a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	69f9      	ldr	r1, [r7, #28]
 800520e:	6a3a      	ldr	r2, [r7, #32]
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	61bb      	str	r3, [r7, #24]
   return(result);
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e5      	bne.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2220      	movs	r2, #32
 8005226:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e010      	b.n	800525e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69da      	ldr	r2, [r3, #28]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	4013      	ands	r3, r2
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	429a      	cmp	r2, r3
 800524a:	bf0c      	ite	eq
 800524c:	2301      	moveq	r3, #1
 800524e:	2300      	movne	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	429a      	cmp	r2, r3
 8005258:	f43f af4a 	beq.w	80050f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3770      	adds	r7, #112	; 0x70
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <__errno>:
 8005268:	4b01      	ldr	r3, [pc, #4]	; (8005270 <__errno+0x8>)
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000010 	.word	0x20000010

08005274 <__libc_init_array>:
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	4d0d      	ldr	r5, [pc, #52]	; (80052ac <__libc_init_array+0x38>)
 8005278:	4c0d      	ldr	r4, [pc, #52]	; (80052b0 <__libc_init_array+0x3c>)
 800527a:	1b64      	subs	r4, r4, r5
 800527c:	10a4      	asrs	r4, r4, #2
 800527e:	2600      	movs	r6, #0
 8005280:	42a6      	cmp	r6, r4
 8005282:	d109      	bne.n	8005298 <__libc_init_array+0x24>
 8005284:	4d0b      	ldr	r5, [pc, #44]	; (80052b4 <__libc_init_array+0x40>)
 8005286:	4c0c      	ldr	r4, [pc, #48]	; (80052b8 <__libc_init_array+0x44>)
 8005288:	f002 ff02 	bl	8008090 <_init>
 800528c:	1b64      	subs	r4, r4, r5
 800528e:	10a4      	asrs	r4, r4, #2
 8005290:	2600      	movs	r6, #0
 8005292:	42a6      	cmp	r6, r4
 8005294:	d105      	bne.n	80052a2 <__libc_init_array+0x2e>
 8005296:	bd70      	pop	{r4, r5, r6, pc}
 8005298:	f855 3b04 	ldr.w	r3, [r5], #4
 800529c:	4798      	blx	r3
 800529e:	3601      	adds	r6, #1
 80052a0:	e7ee      	b.n	8005280 <__libc_init_array+0xc>
 80052a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a6:	4798      	blx	r3
 80052a8:	3601      	adds	r6, #1
 80052aa:	e7f2      	b.n	8005292 <__libc_init_array+0x1e>
 80052ac:	080085b4 	.word	0x080085b4
 80052b0:	080085b4 	.word	0x080085b4
 80052b4:	080085b4 	.word	0x080085b4
 80052b8:	080085b8 	.word	0x080085b8

080052bc <memset>:
 80052bc:	4402      	add	r2, r0
 80052be:	4603      	mov	r3, r0
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d100      	bne.n	80052c6 <memset+0xa>
 80052c4:	4770      	bx	lr
 80052c6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ca:	e7f9      	b.n	80052c0 <memset+0x4>

080052cc <__cvt>:
 80052cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052d0:	ec55 4b10 	vmov	r4, r5, d0
 80052d4:	2d00      	cmp	r5, #0
 80052d6:	460e      	mov	r6, r1
 80052d8:	4619      	mov	r1, r3
 80052da:	462b      	mov	r3, r5
 80052dc:	bfbb      	ittet	lt
 80052de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052e2:	461d      	movlt	r5, r3
 80052e4:	2300      	movge	r3, #0
 80052e6:	232d      	movlt	r3, #45	; 0x2d
 80052e8:	700b      	strb	r3, [r1, #0]
 80052ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052f0:	4691      	mov	r9, r2
 80052f2:	f023 0820 	bic.w	r8, r3, #32
 80052f6:	bfbc      	itt	lt
 80052f8:	4622      	movlt	r2, r4
 80052fa:	4614      	movlt	r4, r2
 80052fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005300:	d005      	beq.n	800530e <__cvt+0x42>
 8005302:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005306:	d100      	bne.n	800530a <__cvt+0x3e>
 8005308:	3601      	adds	r6, #1
 800530a:	2102      	movs	r1, #2
 800530c:	e000      	b.n	8005310 <__cvt+0x44>
 800530e:	2103      	movs	r1, #3
 8005310:	ab03      	add	r3, sp, #12
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	ab02      	add	r3, sp, #8
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	ec45 4b10 	vmov	d0, r4, r5
 800531c:	4653      	mov	r3, sl
 800531e:	4632      	mov	r2, r6
 8005320:	f000 fcea 	bl	8005cf8 <_dtoa_r>
 8005324:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005328:	4607      	mov	r7, r0
 800532a:	d102      	bne.n	8005332 <__cvt+0x66>
 800532c:	f019 0f01 	tst.w	r9, #1
 8005330:	d022      	beq.n	8005378 <__cvt+0xac>
 8005332:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005336:	eb07 0906 	add.w	r9, r7, r6
 800533a:	d110      	bne.n	800535e <__cvt+0x92>
 800533c:	783b      	ldrb	r3, [r7, #0]
 800533e:	2b30      	cmp	r3, #48	; 0x30
 8005340:	d10a      	bne.n	8005358 <__cvt+0x8c>
 8005342:	2200      	movs	r2, #0
 8005344:	2300      	movs	r3, #0
 8005346:	4620      	mov	r0, r4
 8005348:	4629      	mov	r1, r5
 800534a:	f7fb fbc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800534e:	b918      	cbnz	r0, 8005358 <__cvt+0x8c>
 8005350:	f1c6 0601 	rsb	r6, r6, #1
 8005354:	f8ca 6000 	str.w	r6, [sl]
 8005358:	f8da 3000 	ldr.w	r3, [sl]
 800535c:	4499      	add	r9, r3
 800535e:	2200      	movs	r2, #0
 8005360:	2300      	movs	r3, #0
 8005362:	4620      	mov	r0, r4
 8005364:	4629      	mov	r1, r5
 8005366:	f7fb fbb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800536a:	b108      	cbz	r0, 8005370 <__cvt+0xa4>
 800536c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005370:	2230      	movs	r2, #48	; 0x30
 8005372:	9b03      	ldr	r3, [sp, #12]
 8005374:	454b      	cmp	r3, r9
 8005376:	d307      	bcc.n	8005388 <__cvt+0xbc>
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800537c:	1bdb      	subs	r3, r3, r7
 800537e:	4638      	mov	r0, r7
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	b004      	add	sp, #16
 8005384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005388:	1c59      	adds	r1, r3, #1
 800538a:	9103      	str	r1, [sp, #12]
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e7f0      	b.n	8005372 <__cvt+0xa6>

08005390 <__exponent>:
 8005390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005392:	4603      	mov	r3, r0
 8005394:	2900      	cmp	r1, #0
 8005396:	bfb8      	it	lt
 8005398:	4249      	neglt	r1, r1
 800539a:	f803 2b02 	strb.w	r2, [r3], #2
 800539e:	bfb4      	ite	lt
 80053a0:	222d      	movlt	r2, #45	; 0x2d
 80053a2:	222b      	movge	r2, #43	; 0x2b
 80053a4:	2909      	cmp	r1, #9
 80053a6:	7042      	strb	r2, [r0, #1]
 80053a8:	dd2a      	ble.n	8005400 <__exponent+0x70>
 80053aa:	f10d 0407 	add.w	r4, sp, #7
 80053ae:	46a4      	mov	ip, r4
 80053b0:	270a      	movs	r7, #10
 80053b2:	46a6      	mov	lr, r4
 80053b4:	460a      	mov	r2, r1
 80053b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80053ba:	fb07 1516 	mls	r5, r7, r6, r1
 80053be:	3530      	adds	r5, #48	; 0x30
 80053c0:	2a63      	cmp	r2, #99	; 0x63
 80053c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80053c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80053ca:	4631      	mov	r1, r6
 80053cc:	dcf1      	bgt.n	80053b2 <__exponent+0x22>
 80053ce:	3130      	adds	r1, #48	; 0x30
 80053d0:	f1ae 0502 	sub.w	r5, lr, #2
 80053d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80053d8:	1c44      	adds	r4, r0, #1
 80053da:	4629      	mov	r1, r5
 80053dc:	4561      	cmp	r1, ip
 80053de:	d30a      	bcc.n	80053f6 <__exponent+0x66>
 80053e0:	f10d 0209 	add.w	r2, sp, #9
 80053e4:	eba2 020e 	sub.w	r2, r2, lr
 80053e8:	4565      	cmp	r5, ip
 80053ea:	bf88      	it	hi
 80053ec:	2200      	movhi	r2, #0
 80053ee:	4413      	add	r3, r2
 80053f0:	1a18      	subs	r0, r3, r0
 80053f2:	b003      	add	sp, #12
 80053f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80053fe:	e7ed      	b.n	80053dc <__exponent+0x4c>
 8005400:	2330      	movs	r3, #48	; 0x30
 8005402:	3130      	adds	r1, #48	; 0x30
 8005404:	7083      	strb	r3, [r0, #2]
 8005406:	70c1      	strb	r1, [r0, #3]
 8005408:	1d03      	adds	r3, r0, #4
 800540a:	e7f1      	b.n	80053f0 <__exponent+0x60>

0800540c <_printf_float>:
 800540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005410:	ed2d 8b02 	vpush	{d8}
 8005414:	b08d      	sub	sp, #52	; 0x34
 8005416:	460c      	mov	r4, r1
 8005418:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800541c:	4616      	mov	r6, r2
 800541e:	461f      	mov	r7, r3
 8005420:	4605      	mov	r5, r0
 8005422:	f001 fa57 	bl	80068d4 <_localeconv_r>
 8005426:	f8d0 a000 	ldr.w	sl, [r0]
 800542a:	4650      	mov	r0, sl
 800542c:	f7fa fed8 	bl	80001e0 <strlen>
 8005430:	2300      	movs	r3, #0
 8005432:	930a      	str	r3, [sp, #40]	; 0x28
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	9305      	str	r3, [sp, #20]
 8005438:	f8d8 3000 	ldr.w	r3, [r8]
 800543c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005440:	3307      	adds	r3, #7
 8005442:	f023 0307 	bic.w	r3, r3, #7
 8005446:	f103 0208 	add.w	r2, r3, #8
 800544a:	f8c8 2000 	str.w	r2, [r8]
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005456:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800545a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800545e:	9307      	str	r3, [sp, #28]
 8005460:	f8cd 8018 	str.w	r8, [sp, #24]
 8005464:	ee08 0a10 	vmov	s16, r0
 8005468:	4b9f      	ldr	r3, [pc, #636]	; (80056e8 <_printf_float+0x2dc>)
 800546a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800546e:	f04f 32ff 	mov.w	r2, #4294967295
 8005472:	f7fb fb63 	bl	8000b3c <__aeabi_dcmpun>
 8005476:	bb88      	cbnz	r0, 80054dc <_printf_float+0xd0>
 8005478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800547c:	4b9a      	ldr	r3, [pc, #616]	; (80056e8 <_printf_float+0x2dc>)
 800547e:	f04f 32ff 	mov.w	r2, #4294967295
 8005482:	f7fb fb3d 	bl	8000b00 <__aeabi_dcmple>
 8005486:	bb48      	cbnz	r0, 80054dc <_printf_float+0xd0>
 8005488:	2200      	movs	r2, #0
 800548a:	2300      	movs	r3, #0
 800548c:	4640      	mov	r0, r8
 800548e:	4649      	mov	r1, r9
 8005490:	f7fb fb2c 	bl	8000aec <__aeabi_dcmplt>
 8005494:	b110      	cbz	r0, 800549c <_printf_float+0x90>
 8005496:	232d      	movs	r3, #45	; 0x2d
 8005498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800549c:	4b93      	ldr	r3, [pc, #588]	; (80056ec <_printf_float+0x2e0>)
 800549e:	4894      	ldr	r0, [pc, #592]	; (80056f0 <_printf_float+0x2e4>)
 80054a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80054a4:	bf94      	ite	ls
 80054a6:	4698      	movls	r8, r3
 80054a8:	4680      	movhi	r8, r0
 80054aa:	2303      	movs	r3, #3
 80054ac:	6123      	str	r3, [r4, #16]
 80054ae:	9b05      	ldr	r3, [sp, #20]
 80054b0:	f023 0204 	bic.w	r2, r3, #4
 80054b4:	6022      	str	r2, [r4, #0]
 80054b6:	f04f 0900 	mov.w	r9, #0
 80054ba:	9700      	str	r7, [sp, #0]
 80054bc:	4633      	mov	r3, r6
 80054be:	aa0b      	add	r2, sp, #44	; 0x2c
 80054c0:	4621      	mov	r1, r4
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 f9d8 	bl	8005878 <_printf_common>
 80054c8:	3001      	adds	r0, #1
 80054ca:	f040 8090 	bne.w	80055ee <_printf_float+0x1e2>
 80054ce:	f04f 30ff 	mov.w	r0, #4294967295
 80054d2:	b00d      	add	sp, #52	; 0x34
 80054d4:	ecbd 8b02 	vpop	{d8}
 80054d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054dc:	4642      	mov	r2, r8
 80054de:	464b      	mov	r3, r9
 80054e0:	4640      	mov	r0, r8
 80054e2:	4649      	mov	r1, r9
 80054e4:	f7fb fb2a 	bl	8000b3c <__aeabi_dcmpun>
 80054e8:	b140      	cbz	r0, 80054fc <_printf_float+0xf0>
 80054ea:	464b      	mov	r3, r9
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	bfbc      	itt	lt
 80054f0:	232d      	movlt	r3, #45	; 0x2d
 80054f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054f6:	487f      	ldr	r0, [pc, #508]	; (80056f4 <_printf_float+0x2e8>)
 80054f8:	4b7f      	ldr	r3, [pc, #508]	; (80056f8 <_printf_float+0x2ec>)
 80054fa:	e7d1      	b.n	80054a0 <_printf_float+0x94>
 80054fc:	6863      	ldr	r3, [r4, #4]
 80054fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005502:	9206      	str	r2, [sp, #24]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	d13f      	bne.n	8005588 <_printf_float+0x17c>
 8005508:	2306      	movs	r3, #6
 800550a:	6063      	str	r3, [r4, #4]
 800550c:	9b05      	ldr	r3, [sp, #20]
 800550e:	6861      	ldr	r1, [r4, #4]
 8005510:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005514:	2300      	movs	r3, #0
 8005516:	9303      	str	r3, [sp, #12]
 8005518:	ab0a      	add	r3, sp, #40	; 0x28
 800551a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800551e:	ab09      	add	r3, sp, #36	; 0x24
 8005520:	ec49 8b10 	vmov	d0, r8, r9
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	6022      	str	r2, [r4, #0]
 8005528:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800552c:	4628      	mov	r0, r5
 800552e:	f7ff fecd 	bl	80052cc <__cvt>
 8005532:	9b06      	ldr	r3, [sp, #24]
 8005534:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005536:	2b47      	cmp	r3, #71	; 0x47
 8005538:	4680      	mov	r8, r0
 800553a:	d108      	bne.n	800554e <_printf_float+0x142>
 800553c:	1cc8      	adds	r0, r1, #3
 800553e:	db02      	blt.n	8005546 <_printf_float+0x13a>
 8005540:	6863      	ldr	r3, [r4, #4]
 8005542:	4299      	cmp	r1, r3
 8005544:	dd41      	ble.n	80055ca <_printf_float+0x1be>
 8005546:	f1ab 0b02 	sub.w	fp, fp, #2
 800554a:	fa5f fb8b 	uxtb.w	fp, fp
 800554e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005552:	d820      	bhi.n	8005596 <_printf_float+0x18a>
 8005554:	3901      	subs	r1, #1
 8005556:	465a      	mov	r2, fp
 8005558:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800555c:	9109      	str	r1, [sp, #36]	; 0x24
 800555e:	f7ff ff17 	bl	8005390 <__exponent>
 8005562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005564:	1813      	adds	r3, r2, r0
 8005566:	2a01      	cmp	r2, #1
 8005568:	4681      	mov	r9, r0
 800556a:	6123      	str	r3, [r4, #16]
 800556c:	dc02      	bgt.n	8005574 <_printf_float+0x168>
 800556e:	6822      	ldr	r2, [r4, #0]
 8005570:	07d2      	lsls	r2, r2, #31
 8005572:	d501      	bpl.n	8005578 <_printf_float+0x16c>
 8005574:	3301      	adds	r3, #1
 8005576:	6123      	str	r3, [r4, #16]
 8005578:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800557c:	2b00      	cmp	r3, #0
 800557e:	d09c      	beq.n	80054ba <_printf_float+0xae>
 8005580:	232d      	movs	r3, #45	; 0x2d
 8005582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005586:	e798      	b.n	80054ba <_printf_float+0xae>
 8005588:	9a06      	ldr	r2, [sp, #24]
 800558a:	2a47      	cmp	r2, #71	; 0x47
 800558c:	d1be      	bne.n	800550c <_printf_float+0x100>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1bc      	bne.n	800550c <_printf_float+0x100>
 8005592:	2301      	movs	r3, #1
 8005594:	e7b9      	b.n	800550a <_printf_float+0xfe>
 8005596:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800559a:	d118      	bne.n	80055ce <_printf_float+0x1c2>
 800559c:	2900      	cmp	r1, #0
 800559e:	6863      	ldr	r3, [r4, #4]
 80055a0:	dd0b      	ble.n	80055ba <_printf_float+0x1ae>
 80055a2:	6121      	str	r1, [r4, #16]
 80055a4:	b913      	cbnz	r3, 80055ac <_printf_float+0x1a0>
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	07d0      	lsls	r0, r2, #31
 80055aa:	d502      	bpl.n	80055b2 <_printf_float+0x1a6>
 80055ac:	3301      	adds	r3, #1
 80055ae:	440b      	add	r3, r1
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80055b4:	f04f 0900 	mov.w	r9, #0
 80055b8:	e7de      	b.n	8005578 <_printf_float+0x16c>
 80055ba:	b913      	cbnz	r3, 80055c2 <_printf_float+0x1b6>
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	07d2      	lsls	r2, r2, #31
 80055c0:	d501      	bpl.n	80055c6 <_printf_float+0x1ba>
 80055c2:	3302      	adds	r3, #2
 80055c4:	e7f4      	b.n	80055b0 <_printf_float+0x1a4>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e7f2      	b.n	80055b0 <_printf_float+0x1a4>
 80055ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d0:	4299      	cmp	r1, r3
 80055d2:	db05      	blt.n	80055e0 <_printf_float+0x1d4>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	6121      	str	r1, [r4, #16]
 80055d8:	07d8      	lsls	r0, r3, #31
 80055da:	d5ea      	bpl.n	80055b2 <_printf_float+0x1a6>
 80055dc:	1c4b      	adds	r3, r1, #1
 80055de:	e7e7      	b.n	80055b0 <_printf_float+0x1a4>
 80055e0:	2900      	cmp	r1, #0
 80055e2:	bfd4      	ite	le
 80055e4:	f1c1 0202 	rsble	r2, r1, #2
 80055e8:	2201      	movgt	r2, #1
 80055ea:	4413      	add	r3, r2
 80055ec:	e7e0      	b.n	80055b0 <_printf_float+0x1a4>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	055a      	lsls	r2, r3, #21
 80055f2:	d407      	bmi.n	8005604 <_printf_float+0x1f8>
 80055f4:	6923      	ldr	r3, [r4, #16]
 80055f6:	4642      	mov	r2, r8
 80055f8:	4631      	mov	r1, r6
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b8      	blx	r7
 80055fe:	3001      	adds	r0, #1
 8005600:	d12c      	bne.n	800565c <_printf_float+0x250>
 8005602:	e764      	b.n	80054ce <_printf_float+0xc2>
 8005604:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005608:	f240 80e0 	bls.w	80057cc <_printf_float+0x3c0>
 800560c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005610:	2200      	movs	r2, #0
 8005612:	2300      	movs	r3, #0
 8005614:	f7fb fa60 	bl	8000ad8 <__aeabi_dcmpeq>
 8005618:	2800      	cmp	r0, #0
 800561a:	d034      	beq.n	8005686 <_printf_float+0x27a>
 800561c:	4a37      	ldr	r2, [pc, #220]	; (80056fc <_printf_float+0x2f0>)
 800561e:	2301      	movs	r3, #1
 8005620:	4631      	mov	r1, r6
 8005622:	4628      	mov	r0, r5
 8005624:	47b8      	blx	r7
 8005626:	3001      	adds	r0, #1
 8005628:	f43f af51 	beq.w	80054ce <_printf_float+0xc2>
 800562c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005630:	429a      	cmp	r2, r3
 8005632:	db02      	blt.n	800563a <_printf_float+0x22e>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	07d8      	lsls	r0, r3, #31
 8005638:	d510      	bpl.n	800565c <_printf_float+0x250>
 800563a:	ee18 3a10 	vmov	r3, s16
 800563e:	4652      	mov	r2, sl
 8005640:	4631      	mov	r1, r6
 8005642:	4628      	mov	r0, r5
 8005644:	47b8      	blx	r7
 8005646:	3001      	adds	r0, #1
 8005648:	f43f af41 	beq.w	80054ce <_printf_float+0xc2>
 800564c:	f04f 0800 	mov.w	r8, #0
 8005650:	f104 091a 	add.w	r9, r4, #26
 8005654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005656:	3b01      	subs	r3, #1
 8005658:	4543      	cmp	r3, r8
 800565a:	dc09      	bgt.n	8005670 <_printf_float+0x264>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	079b      	lsls	r3, r3, #30
 8005660:	f100 8105 	bmi.w	800586e <_printf_float+0x462>
 8005664:	68e0      	ldr	r0, [r4, #12]
 8005666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005668:	4298      	cmp	r0, r3
 800566a:	bfb8      	it	lt
 800566c:	4618      	movlt	r0, r3
 800566e:	e730      	b.n	80054d2 <_printf_float+0xc6>
 8005670:	2301      	movs	r3, #1
 8005672:	464a      	mov	r2, r9
 8005674:	4631      	mov	r1, r6
 8005676:	4628      	mov	r0, r5
 8005678:	47b8      	blx	r7
 800567a:	3001      	adds	r0, #1
 800567c:	f43f af27 	beq.w	80054ce <_printf_float+0xc2>
 8005680:	f108 0801 	add.w	r8, r8, #1
 8005684:	e7e6      	b.n	8005654 <_printf_float+0x248>
 8005686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005688:	2b00      	cmp	r3, #0
 800568a:	dc39      	bgt.n	8005700 <_printf_float+0x2f4>
 800568c:	4a1b      	ldr	r2, [pc, #108]	; (80056fc <_printf_float+0x2f0>)
 800568e:	2301      	movs	r3, #1
 8005690:	4631      	mov	r1, r6
 8005692:	4628      	mov	r0, r5
 8005694:	47b8      	blx	r7
 8005696:	3001      	adds	r0, #1
 8005698:	f43f af19 	beq.w	80054ce <_printf_float+0xc2>
 800569c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056a0:	4313      	orrs	r3, r2
 80056a2:	d102      	bne.n	80056aa <_printf_float+0x29e>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	07d9      	lsls	r1, r3, #31
 80056a8:	d5d8      	bpl.n	800565c <_printf_float+0x250>
 80056aa:	ee18 3a10 	vmov	r3, s16
 80056ae:	4652      	mov	r2, sl
 80056b0:	4631      	mov	r1, r6
 80056b2:	4628      	mov	r0, r5
 80056b4:	47b8      	blx	r7
 80056b6:	3001      	adds	r0, #1
 80056b8:	f43f af09 	beq.w	80054ce <_printf_float+0xc2>
 80056bc:	f04f 0900 	mov.w	r9, #0
 80056c0:	f104 0a1a 	add.w	sl, r4, #26
 80056c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c6:	425b      	negs	r3, r3
 80056c8:	454b      	cmp	r3, r9
 80056ca:	dc01      	bgt.n	80056d0 <_printf_float+0x2c4>
 80056cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ce:	e792      	b.n	80055f6 <_printf_float+0x1ea>
 80056d0:	2301      	movs	r3, #1
 80056d2:	4652      	mov	r2, sl
 80056d4:	4631      	mov	r1, r6
 80056d6:	4628      	mov	r0, r5
 80056d8:	47b8      	blx	r7
 80056da:	3001      	adds	r0, #1
 80056dc:	f43f aef7 	beq.w	80054ce <_printf_float+0xc2>
 80056e0:	f109 0901 	add.w	r9, r9, #1
 80056e4:	e7ee      	b.n	80056c4 <_printf_float+0x2b8>
 80056e6:	bf00      	nop
 80056e8:	7fefffff 	.word	0x7fefffff
 80056ec:	080081d8 	.word	0x080081d8
 80056f0:	080081dc 	.word	0x080081dc
 80056f4:	080081e4 	.word	0x080081e4
 80056f8:	080081e0 	.word	0x080081e0
 80056fc:	080081e8 	.word	0x080081e8
 8005700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005704:	429a      	cmp	r2, r3
 8005706:	bfa8      	it	ge
 8005708:	461a      	movge	r2, r3
 800570a:	2a00      	cmp	r2, #0
 800570c:	4691      	mov	r9, r2
 800570e:	dc37      	bgt.n	8005780 <_printf_float+0x374>
 8005710:	f04f 0b00 	mov.w	fp, #0
 8005714:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005718:	f104 021a 	add.w	r2, r4, #26
 800571c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800571e:	9305      	str	r3, [sp, #20]
 8005720:	eba3 0309 	sub.w	r3, r3, r9
 8005724:	455b      	cmp	r3, fp
 8005726:	dc33      	bgt.n	8005790 <_printf_float+0x384>
 8005728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800572c:	429a      	cmp	r2, r3
 800572e:	db3b      	blt.n	80057a8 <_printf_float+0x39c>
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	07da      	lsls	r2, r3, #31
 8005734:	d438      	bmi.n	80057a8 <_printf_float+0x39c>
 8005736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005738:	9a05      	ldr	r2, [sp, #20]
 800573a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800573c:	1a9a      	subs	r2, r3, r2
 800573e:	eba3 0901 	sub.w	r9, r3, r1
 8005742:	4591      	cmp	r9, r2
 8005744:	bfa8      	it	ge
 8005746:	4691      	movge	r9, r2
 8005748:	f1b9 0f00 	cmp.w	r9, #0
 800574c:	dc35      	bgt.n	80057ba <_printf_float+0x3ae>
 800574e:	f04f 0800 	mov.w	r8, #0
 8005752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005756:	f104 0a1a 	add.w	sl, r4, #26
 800575a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	eba3 0309 	sub.w	r3, r3, r9
 8005764:	4543      	cmp	r3, r8
 8005766:	f77f af79 	ble.w	800565c <_printf_float+0x250>
 800576a:	2301      	movs	r3, #1
 800576c:	4652      	mov	r2, sl
 800576e:	4631      	mov	r1, r6
 8005770:	4628      	mov	r0, r5
 8005772:	47b8      	blx	r7
 8005774:	3001      	adds	r0, #1
 8005776:	f43f aeaa 	beq.w	80054ce <_printf_float+0xc2>
 800577a:	f108 0801 	add.w	r8, r8, #1
 800577e:	e7ec      	b.n	800575a <_printf_float+0x34e>
 8005780:	4613      	mov	r3, r2
 8005782:	4631      	mov	r1, r6
 8005784:	4642      	mov	r2, r8
 8005786:	4628      	mov	r0, r5
 8005788:	47b8      	blx	r7
 800578a:	3001      	adds	r0, #1
 800578c:	d1c0      	bne.n	8005710 <_printf_float+0x304>
 800578e:	e69e      	b.n	80054ce <_printf_float+0xc2>
 8005790:	2301      	movs	r3, #1
 8005792:	4631      	mov	r1, r6
 8005794:	4628      	mov	r0, r5
 8005796:	9205      	str	r2, [sp, #20]
 8005798:	47b8      	blx	r7
 800579a:	3001      	adds	r0, #1
 800579c:	f43f ae97 	beq.w	80054ce <_printf_float+0xc2>
 80057a0:	9a05      	ldr	r2, [sp, #20]
 80057a2:	f10b 0b01 	add.w	fp, fp, #1
 80057a6:	e7b9      	b.n	800571c <_printf_float+0x310>
 80057a8:	ee18 3a10 	vmov	r3, s16
 80057ac:	4652      	mov	r2, sl
 80057ae:	4631      	mov	r1, r6
 80057b0:	4628      	mov	r0, r5
 80057b2:	47b8      	blx	r7
 80057b4:	3001      	adds	r0, #1
 80057b6:	d1be      	bne.n	8005736 <_printf_float+0x32a>
 80057b8:	e689      	b.n	80054ce <_printf_float+0xc2>
 80057ba:	9a05      	ldr	r2, [sp, #20]
 80057bc:	464b      	mov	r3, r9
 80057be:	4442      	add	r2, r8
 80057c0:	4631      	mov	r1, r6
 80057c2:	4628      	mov	r0, r5
 80057c4:	47b8      	blx	r7
 80057c6:	3001      	adds	r0, #1
 80057c8:	d1c1      	bne.n	800574e <_printf_float+0x342>
 80057ca:	e680      	b.n	80054ce <_printf_float+0xc2>
 80057cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057ce:	2a01      	cmp	r2, #1
 80057d0:	dc01      	bgt.n	80057d6 <_printf_float+0x3ca>
 80057d2:	07db      	lsls	r3, r3, #31
 80057d4:	d538      	bpl.n	8005848 <_printf_float+0x43c>
 80057d6:	2301      	movs	r3, #1
 80057d8:	4642      	mov	r2, r8
 80057da:	4631      	mov	r1, r6
 80057dc:	4628      	mov	r0, r5
 80057de:	47b8      	blx	r7
 80057e0:	3001      	adds	r0, #1
 80057e2:	f43f ae74 	beq.w	80054ce <_printf_float+0xc2>
 80057e6:	ee18 3a10 	vmov	r3, s16
 80057ea:	4652      	mov	r2, sl
 80057ec:	4631      	mov	r1, r6
 80057ee:	4628      	mov	r0, r5
 80057f0:	47b8      	blx	r7
 80057f2:	3001      	adds	r0, #1
 80057f4:	f43f ae6b 	beq.w	80054ce <_printf_float+0xc2>
 80057f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057fc:	2200      	movs	r2, #0
 80057fe:	2300      	movs	r3, #0
 8005800:	f7fb f96a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005804:	b9d8      	cbnz	r0, 800583e <_printf_float+0x432>
 8005806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005808:	f108 0201 	add.w	r2, r8, #1
 800580c:	3b01      	subs	r3, #1
 800580e:	4631      	mov	r1, r6
 8005810:	4628      	mov	r0, r5
 8005812:	47b8      	blx	r7
 8005814:	3001      	adds	r0, #1
 8005816:	d10e      	bne.n	8005836 <_printf_float+0x42a>
 8005818:	e659      	b.n	80054ce <_printf_float+0xc2>
 800581a:	2301      	movs	r3, #1
 800581c:	4652      	mov	r2, sl
 800581e:	4631      	mov	r1, r6
 8005820:	4628      	mov	r0, r5
 8005822:	47b8      	blx	r7
 8005824:	3001      	adds	r0, #1
 8005826:	f43f ae52 	beq.w	80054ce <_printf_float+0xc2>
 800582a:	f108 0801 	add.w	r8, r8, #1
 800582e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005830:	3b01      	subs	r3, #1
 8005832:	4543      	cmp	r3, r8
 8005834:	dcf1      	bgt.n	800581a <_printf_float+0x40e>
 8005836:	464b      	mov	r3, r9
 8005838:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800583c:	e6dc      	b.n	80055f8 <_printf_float+0x1ec>
 800583e:	f04f 0800 	mov.w	r8, #0
 8005842:	f104 0a1a 	add.w	sl, r4, #26
 8005846:	e7f2      	b.n	800582e <_printf_float+0x422>
 8005848:	2301      	movs	r3, #1
 800584a:	4642      	mov	r2, r8
 800584c:	e7df      	b.n	800580e <_printf_float+0x402>
 800584e:	2301      	movs	r3, #1
 8005850:	464a      	mov	r2, r9
 8005852:	4631      	mov	r1, r6
 8005854:	4628      	mov	r0, r5
 8005856:	47b8      	blx	r7
 8005858:	3001      	adds	r0, #1
 800585a:	f43f ae38 	beq.w	80054ce <_printf_float+0xc2>
 800585e:	f108 0801 	add.w	r8, r8, #1
 8005862:	68e3      	ldr	r3, [r4, #12]
 8005864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005866:	1a5b      	subs	r3, r3, r1
 8005868:	4543      	cmp	r3, r8
 800586a:	dcf0      	bgt.n	800584e <_printf_float+0x442>
 800586c:	e6fa      	b.n	8005664 <_printf_float+0x258>
 800586e:	f04f 0800 	mov.w	r8, #0
 8005872:	f104 0919 	add.w	r9, r4, #25
 8005876:	e7f4      	b.n	8005862 <_printf_float+0x456>

08005878 <_printf_common>:
 8005878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800587c:	4616      	mov	r6, r2
 800587e:	4699      	mov	r9, r3
 8005880:	688a      	ldr	r2, [r1, #8]
 8005882:	690b      	ldr	r3, [r1, #16]
 8005884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005888:	4293      	cmp	r3, r2
 800588a:	bfb8      	it	lt
 800588c:	4613      	movlt	r3, r2
 800588e:	6033      	str	r3, [r6, #0]
 8005890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005894:	4607      	mov	r7, r0
 8005896:	460c      	mov	r4, r1
 8005898:	b10a      	cbz	r2, 800589e <_printf_common+0x26>
 800589a:	3301      	adds	r3, #1
 800589c:	6033      	str	r3, [r6, #0]
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	0699      	lsls	r1, r3, #26
 80058a2:	bf42      	ittt	mi
 80058a4:	6833      	ldrmi	r3, [r6, #0]
 80058a6:	3302      	addmi	r3, #2
 80058a8:	6033      	strmi	r3, [r6, #0]
 80058aa:	6825      	ldr	r5, [r4, #0]
 80058ac:	f015 0506 	ands.w	r5, r5, #6
 80058b0:	d106      	bne.n	80058c0 <_printf_common+0x48>
 80058b2:	f104 0a19 	add.w	sl, r4, #25
 80058b6:	68e3      	ldr	r3, [r4, #12]
 80058b8:	6832      	ldr	r2, [r6, #0]
 80058ba:	1a9b      	subs	r3, r3, r2
 80058bc:	42ab      	cmp	r3, r5
 80058be:	dc26      	bgt.n	800590e <_printf_common+0x96>
 80058c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058c4:	1e13      	subs	r3, r2, #0
 80058c6:	6822      	ldr	r2, [r4, #0]
 80058c8:	bf18      	it	ne
 80058ca:	2301      	movne	r3, #1
 80058cc:	0692      	lsls	r2, r2, #26
 80058ce:	d42b      	bmi.n	8005928 <_printf_common+0xb0>
 80058d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d4:	4649      	mov	r1, r9
 80058d6:	4638      	mov	r0, r7
 80058d8:	47c0      	blx	r8
 80058da:	3001      	adds	r0, #1
 80058dc:	d01e      	beq.n	800591c <_printf_common+0xa4>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	68e5      	ldr	r5, [r4, #12]
 80058e2:	6832      	ldr	r2, [r6, #0]
 80058e4:	f003 0306 	and.w	r3, r3, #6
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	bf08      	it	eq
 80058ec:	1aad      	subeq	r5, r5, r2
 80058ee:	68a3      	ldr	r3, [r4, #8]
 80058f0:	6922      	ldr	r2, [r4, #16]
 80058f2:	bf0c      	ite	eq
 80058f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058f8:	2500      	movne	r5, #0
 80058fa:	4293      	cmp	r3, r2
 80058fc:	bfc4      	itt	gt
 80058fe:	1a9b      	subgt	r3, r3, r2
 8005900:	18ed      	addgt	r5, r5, r3
 8005902:	2600      	movs	r6, #0
 8005904:	341a      	adds	r4, #26
 8005906:	42b5      	cmp	r5, r6
 8005908:	d11a      	bne.n	8005940 <_printf_common+0xc8>
 800590a:	2000      	movs	r0, #0
 800590c:	e008      	b.n	8005920 <_printf_common+0xa8>
 800590e:	2301      	movs	r3, #1
 8005910:	4652      	mov	r2, sl
 8005912:	4649      	mov	r1, r9
 8005914:	4638      	mov	r0, r7
 8005916:	47c0      	blx	r8
 8005918:	3001      	adds	r0, #1
 800591a:	d103      	bne.n	8005924 <_printf_common+0xac>
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005924:	3501      	adds	r5, #1
 8005926:	e7c6      	b.n	80058b6 <_printf_common+0x3e>
 8005928:	18e1      	adds	r1, r4, r3
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	2030      	movs	r0, #48	; 0x30
 800592e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005932:	4422      	add	r2, r4
 8005934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800593c:	3302      	adds	r3, #2
 800593e:	e7c7      	b.n	80058d0 <_printf_common+0x58>
 8005940:	2301      	movs	r3, #1
 8005942:	4622      	mov	r2, r4
 8005944:	4649      	mov	r1, r9
 8005946:	4638      	mov	r0, r7
 8005948:	47c0      	blx	r8
 800594a:	3001      	adds	r0, #1
 800594c:	d0e6      	beq.n	800591c <_printf_common+0xa4>
 800594e:	3601      	adds	r6, #1
 8005950:	e7d9      	b.n	8005906 <_printf_common+0x8e>
	...

08005954 <_printf_i>:
 8005954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005958:	7e0f      	ldrb	r7, [r1, #24]
 800595a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800595c:	2f78      	cmp	r7, #120	; 0x78
 800595e:	4691      	mov	r9, r2
 8005960:	4680      	mov	r8, r0
 8005962:	460c      	mov	r4, r1
 8005964:	469a      	mov	sl, r3
 8005966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800596a:	d807      	bhi.n	800597c <_printf_i+0x28>
 800596c:	2f62      	cmp	r7, #98	; 0x62
 800596e:	d80a      	bhi.n	8005986 <_printf_i+0x32>
 8005970:	2f00      	cmp	r7, #0
 8005972:	f000 80d8 	beq.w	8005b26 <_printf_i+0x1d2>
 8005976:	2f58      	cmp	r7, #88	; 0x58
 8005978:	f000 80a3 	beq.w	8005ac2 <_printf_i+0x16e>
 800597c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005984:	e03a      	b.n	80059fc <_printf_i+0xa8>
 8005986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800598a:	2b15      	cmp	r3, #21
 800598c:	d8f6      	bhi.n	800597c <_printf_i+0x28>
 800598e:	a101      	add	r1, pc, #4	; (adr r1, 8005994 <_printf_i+0x40>)
 8005990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005994:	080059ed 	.word	0x080059ed
 8005998:	08005a01 	.word	0x08005a01
 800599c:	0800597d 	.word	0x0800597d
 80059a0:	0800597d 	.word	0x0800597d
 80059a4:	0800597d 	.word	0x0800597d
 80059a8:	0800597d 	.word	0x0800597d
 80059ac:	08005a01 	.word	0x08005a01
 80059b0:	0800597d 	.word	0x0800597d
 80059b4:	0800597d 	.word	0x0800597d
 80059b8:	0800597d 	.word	0x0800597d
 80059bc:	0800597d 	.word	0x0800597d
 80059c0:	08005b0d 	.word	0x08005b0d
 80059c4:	08005a31 	.word	0x08005a31
 80059c8:	08005aef 	.word	0x08005aef
 80059cc:	0800597d 	.word	0x0800597d
 80059d0:	0800597d 	.word	0x0800597d
 80059d4:	08005b2f 	.word	0x08005b2f
 80059d8:	0800597d 	.word	0x0800597d
 80059dc:	08005a31 	.word	0x08005a31
 80059e0:	0800597d 	.word	0x0800597d
 80059e4:	0800597d 	.word	0x0800597d
 80059e8:	08005af7 	.word	0x08005af7
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	1d1a      	adds	r2, r3, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	602a      	str	r2, [r5, #0]
 80059f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0a3      	b.n	8005b48 <_printf_i+0x1f4>
 8005a00:	6820      	ldr	r0, [r4, #0]
 8005a02:	6829      	ldr	r1, [r5, #0]
 8005a04:	0606      	lsls	r6, r0, #24
 8005a06:	f101 0304 	add.w	r3, r1, #4
 8005a0a:	d50a      	bpl.n	8005a22 <_printf_i+0xce>
 8005a0c:	680e      	ldr	r6, [r1, #0]
 8005a0e:	602b      	str	r3, [r5, #0]
 8005a10:	2e00      	cmp	r6, #0
 8005a12:	da03      	bge.n	8005a1c <_printf_i+0xc8>
 8005a14:	232d      	movs	r3, #45	; 0x2d
 8005a16:	4276      	negs	r6, r6
 8005a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a1c:	485e      	ldr	r0, [pc, #376]	; (8005b98 <_printf_i+0x244>)
 8005a1e:	230a      	movs	r3, #10
 8005a20:	e019      	b.n	8005a56 <_printf_i+0x102>
 8005a22:	680e      	ldr	r6, [r1, #0]
 8005a24:	602b      	str	r3, [r5, #0]
 8005a26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a2a:	bf18      	it	ne
 8005a2c:	b236      	sxthne	r6, r6
 8005a2e:	e7ef      	b.n	8005a10 <_printf_i+0xbc>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	6820      	ldr	r0, [r4, #0]
 8005a34:	1d19      	adds	r1, r3, #4
 8005a36:	6029      	str	r1, [r5, #0]
 8005a38:	0601      	lsls	r1, r0, #24
 8005a3a:	d501      	bpl.n	8005a40 <_printf_i+0xec>
 8005a3c:	681e      	ldr	r6, [r3, #0]
 8005a3e:	e002      	b.n	8005a46 <_printf_i+0xf2>
 8005a40:	0646      	lsls	r6, r0, #25
 8005a42:	d5fb      	bpl.n	8005a3c <_printf_i+0xe8>
 8005a44:	881e      	ldrh	r6, [r3, #0]
 8005a46:	4854      	ldr	r0, [pc, #336]	; (8005b98 <_printf_i+0x244>)
 8005a48:	2f6f      	cmp	r7, #111	; 0x6f
 8005a4a:	bf0c      	ite	eq
 8005a4c:	2308      	moveq	r3, #8
 8005a4e:	230a      	movne	r3, #10
 8005a50:	2100      	movs	r1, #0
 8005a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a56:	6865      	ldr	r5, [r4, #4]
 8005a58:	60a5      	str	r5, [r4, #8]
 8005a5a:	2d00      	cmp	r5, #0
 8005a5c:	bfa2      	ittt	ge
 8005a5e:	6821      	ldrge	r1, [r4, #0]
 8005a60:	f021 0104 	bicge.w	r1, r1, #4
 8005a64:	6021      	strge	r1, [r4, #0]
 8005a66:	b90e      	cbnz	r6, 8005a6c <_printf_i+0x118>
 8005a68:	2d00      	cmp	r5, #0
 8005a6a:	d04d      	beq.n	8005b08 <_printf_i+0x1b4>
 8005a6c:	4615      	mov	r5, r2
 8005a6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a72:	fb03 6711 	mls	r7, r3, r1, r6
 8005a76:	5dc7      	ldrb	r7, [r0, r7]
 8005a78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a7c:	4637      	mov	r7, r6
 8005a7e:	42bb      	cmp	r3, r7
 8005a80:	460e      	mov	r6, r1
 8005a82:	d9f4      	bls.n	8005a6e <_printf_i+0x11a>
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d10b      	bne.n	8005aa0 <_printf_i+0x14c>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	07de      	lsls	r6, r3, #31
 8005a8c:	d508      	bpl.n	8005aa0 <_printf_i+0x14c>
 8005a8e:	6923      	ldr	r3, [r4, #16]
 8005a90:	6861      	ldr	r1, [r4, #4]
 8005a92:	4299      	cmp	r1, r3
 8005a94:	bfde      	ittt	le
 8005a96:	2330      	movle	r3, #48	; 0x30
 8005a98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005aa0:	1b52      	subs	r2, r2, r5
 8005aa2:	6122      	str	r2, [r4, #16]
 8005aa4:	f8cd a000 	str.w	sl, [sp]
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	aa03      	add	r2, sp, #12
 8005aac:	4621      	mov	r1, r4
 8005aae:	4640      	mov	r0, r8
 8005ab0:	f7ff fee2 	bl	8005878 <_printf_common>
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d14c      	bne.n	8005b52 <_printf_i+0x1fe>
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8005abc:	b004      	add	sp, #16
 8005abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac2:	4835      	ldr	r0, [pc, #212]	; (8005b98 <_printf_i+0x244>)
 8005ac4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ac8:	6829      	ldr	r1, [r5, #0]
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ad0:	6029      	str	r1, [r5, #0]
 8005ad2:	061d      	lsls	r5, r3, #24
 8005ad4:	d514      	bpl.n	8005b00 <_printf_i+0x1ac>
 8005ad6:	07df      	lsls	r7, r3, #31
 8005ad8:	bf44      	itt	mi
 8005ada:	f043 0320 	orrmi.w	r3, r3, #32
 8005ade:	6023      	strmi	r3, [r4, #0]
 8005ae0:	b91e      	cbnz	r6, 8005aea <_printf_i+0x196>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	f023 0320 	bic.w	r3, r3, #32
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	2310      	movs	r3, #16
 8005aec:	e7b0      	b.n	8005a50 <_printf_i+0xfc>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	f043 0320 	orr.w	r3, r3, #32
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	2378      	movs	r3, #120	; 0x78
 8005af8:	4828      	ldr	r0, [pc, #160]	; (8005b9c <_printf_i+0x248>)
 8005afa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005afe:	e7e3      	b.n	8005ac8 <_printf_i+0x174>
 8005b00:	0659      	lsls	r1, r3, #25
 8005b02:	bf48      	it	mi
 8005b04:	b2b6      	uxthmi	r6, r6
 8005b06:	e7e6      	b.n	8005ad6 <_printf_i+0x182>
 8005b08:	4615      	mov	r5, r2
 8005b0a:	e7bb      	b.n	8005a84 <_printf_i+0x130>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	6826      	ldr	r6, [r4, #0]
 8005b10:	6961      	ldr	r1, [r4, #20]
 8005b12:	1d18      	adds	r0, r3, #4
 8005b14:	6028      	str	r0, [r5, #0]
 8005b16:	0635      	lsls	r5, r6, #24
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	d501      	bpl.n	8005b20 <_printf_i+0x1cc>
 8005b1c:	6019      	str	r1, [r3, #0]
 8005b1e:	e002      	b.n	8005b26 <_printf_i+0x1d2>
 8005b20:	0670      	lsls	r0, r6, #25
 8005b22:	d5fb      	bpl.n	8005b1c <_printf_i+0x1c8>
 8005b24:	8019      	strh	r1, [r3, #0]
 8005b26:	2300      	movs	r3, #0
 8005b28:	6123      	str	r3, [r4, #16]
 8005b2a:	4615      	mov	r5, r2
 8005b2c:	e7ba      	b.n	8005aa4 <_printf_i+0x150>
 8005b2e:	682b      	ldr	r3, [r5, #0]
 8005b30:	1d1a      	adds	r2, r3, #4
 8005b32:	602a      	str	r2, [r5, #0]
 8005b34:	681d      	ldr	r5, [r3, #0]
 8005b36:	6862      	ldr	r2, [r4, #4]
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f7fa fb58 	bl	80001f0 <memchr>
 8005b40:	b108      	cbz	r0, 8005b46 <_printf_i+0x1f2>
 8005b42:	1b40      	subs	r0, r0, r5
 8005b44:	6060      	str	r0, [r4, #4]
 8005b46:	6863      	ldr	r3, [r4, #4]
 8005b48:	6123      	str	r3, [r4, #16]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b50:	e7a8      	b.n	8005aa4 <_printf_i+0x150>
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	462a      	mov	r2, r5
 8005b56:	4649      	mov	r1, r9
 8005b58:	4640      	mov	r0, r8
 8005b5a:	47d0      	blx	sl
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d0ab      	beq.n	8005ab8 <_printf_i+0x164>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	079b      	lsls	r3, r3, #30
 8005b64:	d413      	bmi.n	8005b8e <_printf_i+0x23a>
 8005b66:	68e0      	ldr	r0, [r4, #12]
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	4298      	cmp	r0, r3
 8005b6c:	bfb8      	it	lt
 8005b6e:	4618      	movlt	r0, r3
 8005b70:	e7a4      	b.n	8005abc <_printf_i+0x168>
 8005b72:	2301      	movs	r3, #1
 8005b74:	4632      	mov	r2, r6
 8005b76:	4649      	mov	r1, r9
 8005b78:	4640      	mov	r0, r8
 8005b7a:	47d0      	blx	sl
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d09b      	beq.n	8005ab8 <_printf_i+0x164>
 8005b80:	3501      	adds	r5, #1
 8005b82:	68e3      	ldr	r3, [r4, #12]
 8005b84:	9903      	ldr	r1, [sp, #12]
 8005b86:	1a5b      	subs	r3, r3, r1
 8005b88:	42ab      	cmp	r3, r5
 8005b8a:	dcf2      	bgt.n	8005b72 <_printf_i+0x21e>
 8005b8c:	e7eb      	b.n	8005b66 <_printf_i+0x212>
 8005b8e:	2500      	movs	r5, #0
 8005b90:	f104 0619 	add.w	r6, r4, #25
 8005b94:	e7f5      	b.n	8005b82 <_printf_i+0x22e>
 8005b96:	bf00      	nop
 8005b98:	080081ea 	.word	0x080081ea
 8005b9c:	080081fb 	.word	0x080081fb

08005ba0 <siprintf>:
 8005ba0:	b40e      	push	{r1, r2, r3}
 8005ba2:	b500      	push	{lr}
 8005ba4:	b09c      	sub	sp, #112	; 0x70
 8005ba6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ba8:	9002      	str	r0, [sp, #8]
 8005baa:	9006      	str	r0, [sp, #24]
 8005bac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bb0:	4809      	ldr	r0, [pc, #36]	; (8005bd8 <siprintf+0x38>)
 8005bb2:	9107      	str	r1, [sp, #28]
 8005bb4:	9104      	str	r1, [sp, #16]
 8005bb6:	4909      	ldr	r1, [pc, #36]	; (8005bdc <siprintf+0x3c>)
 8005bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bbc:	9105      	str	r1, [sp, #20]
 8005bbe:	6800      	ldr	r0, [r0, #0]
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	a902      	add	r1, sp, #8
 8005bc4:	f001 fb76 	bl	80072b4 <_svfiprintf_r>
 8005bc8:	9b02      	ldr	r3, [sp, #8]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	b01c      	add	sp, #112	; 0x70
 8005bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bd4:	b003      	add	sp, #12
 8005bd6:	4770      	bx	lr
 8005bd8:	20000010 	.word	0x20000010
 8005bdc:	ffff0208 	.word	0xffff0208

08005be0 <quorem>:
 8005be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be4:	6903      	ldr	r3, [r0, #16]
 8005be6:	690c      	ldr	r4, [r1, #16]
 8005be8:	42a3      	cmp	r3, r4
 8005bea:	4607      	mov	r7, r0
 8005bec:	f2c0 8081 	blt.w	8005cf2 <quorem+0x112>
 8005bf0:	3c01      	subs	r4, #1
 8005bf2:	f101 0814 	add.w	r8, r1, #20
 8005bf6:	f100 0514 	add.w	r5, r0, #20
 8005bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bfe:	9301      	str	r3, [sp, #4]
 8005c00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c14:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c18:	d331      	bcc.n	8005c7e <quorem+0x9e>
 8005c1a:	f04f 0e00 	mov.w	lr, #0
 8005c1e:	4640      	mov	r0, r8
 8005c20:	46ac      	mov	ip, r5
 8005c22:	46f2      	mov	sl, lr
 8005c24:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c28:	b293      	uxth	r3, r2
 8005c2a:	fb06 e303 	mla	r3, r6, r3, lr
 8005c2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	ebaa 0303 	sub.w	r3, sl, r3
 8005c38:	f8dc a000 	ldr.w	sl, [ip]
 8005c3c:	0c12      	lsrs	r2, r2, #16
 8005c3e:	fa13 f38a 	uxtah	r3, r3, sl
 8005c42:	fb06 e202 	mla	r2, r6, r2, lr
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	9b00      	ldr	r3, [sp, #0]
 8005c4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c58:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c5c:	4581      	cmp	r9, r0
 8005c5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c62:	f84c 3b04 	str.w	r3, [ip], #4
 8005c66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c6a:	d2db      	bcs.n	8005c24 <quorem+0x44>
 8005c6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c70:	b92b      	cbnz	r3, 8005c7e <quorem+0x9e>
 8005c72:	9b01      	ldr	r3, [sp, #4]
 8005c74:	3b04      	subs	r3, #4
 8005c76:	429d      	cmp	r5, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	d32e      	bcc.n	8005cda <quorem+0xfa>
 8005c7c:	613c      	str	r4, [r7, #16]
 8005c7e:	4638      	mov	r0, r7
 8005c80:	f001 f8c4 	bl	8006e0c <__mcmp>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	db24      	blt.n	8005cd2 <quorem+0xf2>
 8005c88:	3601      	adds	r6, #1
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f04f 0c00 	mov.w	ip, #0
 8005c90:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c94:	f8d0 e000 	ldr.w	lr, [r0]
 8005c98:	b293      	uxth	r3, r2
 8005c9a:	ebac 0303 	sub.w	r3, ip, r3
 8005c9e:	0c12      	lsrs	r2, r2, #16
 8005ca0:	fa13 f38e 	uxtah	r3, r3, lr
 8005ca4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ca8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cb2:	45c1      	cmp	r9, r8
 8005cb4:	f840 3b04 	str.w	r3, [r0], #4
 8005cb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005cbc:	d2e8      	bcs.n	8005c90 <quorem+0xb0>
 8005cbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cc6:	b922      	cbnz	r2, 8005cd2 <quorem+0xf2>
 8005cc8:	3b04      	subs	r3, #4
 8005cca:	429d      	cmp	r5, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	d30a      	bcc.n	8005ce6 <quorem+0x106>
 8005cd0:	613c      	str	r4, [r7, #16]
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	b003      	add	sp, #12
 8005cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cda:	6812      	ldr	r2, [r2, #0]
 8005cdc:	3b04      	subs	r3, #4
 8005cde:	2a00      	cmp	r2, #0
 8005ce0:	d1cc      	bne.n	8005c7c <quorem+0x9c>
 8005ce2:	3c01      	subs	r4, #1
 8005ce4:	e7c7      	b.n	8005c76 <quorem+0x96>
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	3b04      	subs	r3, #4
 8005cea:	2a00      	cmp	r2, #0
 8005cec:	d1f0      	bne.n	8005cd0 <quorem+0xf0>
 8005cee:	3c01      	subs	r4, #1
 8005cf0:	e7eb      	b.n	8005cca <quorem+0xea>
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	e7ee      	b.n	8005cd4 <quorem+0xf4>
	...

08005cf8 <_dtoa_r>:
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	ed2d 8b04 	vpush	{d8-d9}
 8005d00:	ec57 6b10 	vmov	r6, r7, d0
 8005d04:	b093      	sub	sp, #76	; 0x4c
 8005d06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d0c:	9106      	str	r1, [sp, #24]
 8005d0e:	ee10 aa10 	vmov	sl, s0
 8005d12:	4604      	mov	r4, r0
 8005d14:	9209      	str	r2, [sp, #36]	; 0x24
 8005d16:	930c      	str	r3, [sp, #48]	; 0x30
 8005d18:	46bb      	mov	fp, r7
 8005d1a:	b975      	cbnz	r5, 8005d3a <_dtoa_r+0x42>
 8005d1c:	2010      	movs	r0, #16
 8005d1e:	f000 fddd 	bl	80068dc <malloc>
 8005d22:	4602      	mov	r2, r0
 8005d24:	6260      	str	r0, [r4, #36]	; 0x24
 8005d26:	b920      	cbnz	r0, 8005d32 <_dtoa_r+0x3a>
 8005d28:	4ba7      	ldr	r3, [pc, #668]	; (8005fc8 <_dtoa_r+0x2d0>)
 8005d2a:	21ea      	movs	r1, #234	; 0xea
 8005d2c:	48a7      	ldr	r0, [pc, #668]	; (8005fcc <_dtoa_r+0x2d4>)
 8005d2e:	f001 fbd1 	bl	80074d4 <__assert_func>
 8005d32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d36:	6005      	str	r5, [r0, #0]
 8005d38:	60c5      	str	r5, [r0, #12]
 8005d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d3c:	6819      	ldr	r1, [r3, #0]
 8005d3e:	b151      	cbz	r1, 8005d56 <_dtoa_r+0x5e>
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	604a      	str	r2, [r1, #4]
 8005d44:	2301      	movs	r3, #1
 8005d46:	4093      	lsls	r3, r2
 8005d48:	608b      	str	r3, [r1, #8]
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f000 fe1c 	bl	8006988 <_Bfree>
 8005d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	1e3b      	subs	r3, r7, #0
 8005d58:	bfaa      	itet	ge
 8005d5a:	2300      	movge	r3, #0
 8005d5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005d60:	f8c8 3000 	strge.w	r3, [r8]
 8005d64:	4b9a      	ldr	r3, [pc, #616]	; (8005fd0 <_dtoa_r+0x2d8>)
 8005d66:	bfbc      	itt	lt
 8005d68:	2201      	movlt	r2, #1
 8005d6a:	f8c8 2000 	strlt.w	r2, [r8]
 8005d6e:	ea33 030b 	bics.w	r3, r3, fp
 8005d72:	d11b      	bne.n	8005dac <_dtoa_r+0xb4>
 8005d74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d76:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d80:	4333      	orrs	r3, r6
 8005d82:	f000 8592 	beq.w	80068aa <_dtoa_r+0xbb2>
 8005d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d88:	b963      	cbnz	r3, 8005da4 <_dtoa_r+0xac>
 8005d8a:	4b92      	ldr	r3, [pc, #584]	; (8005fd4 <_dtoa_r+0x2dc>)
 8005d8c:	e022      	b.n	8005dd4 <_dtoa_r+0xdc>
 8005d8e:	4b92      	ldr	r3, [pc, #584]	; (8005fd8 <_dtoa_r+0x2e0>)
 8005d90:	9301      	str	r3, [sp, #4]
 8005d92:	3308      	adds	r3, #8
 8005d94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	9801      	ldr	r0, [sp, #4]
 8005d9a:	b013      	add	sp, #76	; 0x4c
 8005d9c:	ecbd 8b04 	vpop	{d8-d9}
 8005da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da4:	4b8b      	ldr	r3, [pc, #556]	; (8005fd4 <_dtoa_r+0x2dc>)
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	3303      	adds	r3, #3
 8005daa:	e7f3      	b.n	8005d94 <_dtoa_r+0x9c>
 8005dac:	2200      	movs	r2, #0
 8005dae:	2300      	movs	r3, #0
 8005db0:	4650      	mov	r0, sl
 8005db2:	4659      	mov	r1, fp
 8005db4:	f7fa fe90 	bl	8000ad8 <__aeabi_dcmpeq>
 8005db8:	ec4b ab19 	vmov	d9, sl, fp
 8005dbc:	4680      	mov	r8, r0
 8005dbe:	b158      	cbz	r0, 8005dd8 <_dtoa_r+0xe0>
 8005dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 856b 	beq.w	80068a4 <_dtoa_r+0xbac>
 8005dce:	4883      	ldr	r0, [pc, #524]	; (8005fdc <_dtoa_r+0x2e4>)
 8005dd0:	6018      	str	r0, [r3, #0]
 8005dd2:	1e43      	subs	r3, r0, #1
 8005dd4:	9301      	str	r3, [sp, #4]
 8005dd6:	e7df      	b.n	8005d98 <_dtoa_r+0xa0>
 8005dd8:	ec4b ab10 	vmov	d0, sl, fp
 8005ddc:	aa10      	add	r2, sp, #64	; 0x40
 8005dde:	a911      	add	r1, sp, #68	; 0x44
 8005de0:	4620      	mov	r0, r4
 8005de2:	f001 f8b9 	bl	8006f58 <__d2b>
 8005de6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005dea:	ee08 0a10 	vmov	s16, r0
 8005dee:	2d00      	cmp	r5, #0
 8005df0:	f000 8084 	beq.w	8005efc <_dtoa_r+0x204>
 8005df4:	ee19 3a90 	vmov	r3, s19
 8005df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dfc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e00:	4656      	mov	r6, sl
 8005e02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005e0e:	4b74      	ldr	r3, [pc, #464]	; (8005fe0 <_dtoa_r+0x2e8>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	4630      	mov	r0, r6
 8005e14:	4639      	mov	r1, r7
 8005e16:	f7fa fa3f 	bl	8000298 <__aeabi_dsub>
 8005e1a:	a365      	add	r3, pc, #404	; (adr r3, 8005fb0 <_dtoa_r+0x2b8>)
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	f7fa fbf2 	bl	8000608 <__aeabi_dmul>
 8005e24:	a364      	add	r3, pc, #400	; (adr r3, 8005fb8 <_dtoa_r+0x2c0>)
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f7fa fa37 	bl	800029c <__adddf3>
 8005e2e:	4606      	mov	r6, r0
 8005e30:	4628      	mov	r0, r5
 8005e32:	460f      	mov	r7, r1
 8005e34:	f7fa fb7e 	bl	8000534 <__aeabi_i2d>
 8005e38:	a361      	add	r3, pc, #388	; (adr r3, 8005fc0 <_dtoa_r+0x2c8>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f7fa fbe3 	bl	8000608 <__aeabi_dmul>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4630      	mov	r0, r6
 8005e48:	4639      	mov	r1, r7
 8005e4a:	f7fa fa27 	bl	800029c <__adddf3>
 8005e4e:	4606      	mov	r6, r0
 8005e50:	460f      	mov	r7, r1
 8005e52:	f7fa fe89 	bl	8000b68 <__aeabi_d2iz>
 8005e56:	2200      	movs	r2, #0
 8005e58:	9000      	str	r0, [sp, #0]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	4639      	mov	r1, r7
 8005e60:	f7fa fe44 	bl	8000aec <__aeabi_dcmplt>
 8005e64:	b150      	cbz	r0, 8005e7c <_dtoa_r+0x184>
 8005e66:	9800      	ldr	r0, [sp, #0]
 8005e68:	f7fa fb64 	bl	8000534 <__aeabi_i2d>
 8005e6c:	4632      	mov	r2, r6
 8005e6e:	463b      	mov	r3, r7
 8005e70:	f7fa fe32 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e74:	b910      	cbnz	r0, 8005e7c <_dtoa_r+0x184>
 8005e76:	9b00      	ldr	r3, [sp, #0]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	9b00      	ldr	r3, [sp, #0]
 8005e7e:	2b16      	cmp	r3, #22
 8005e80:	d85a      	bhi.n	8005f38 <_dtoa_r+0x240>
 8005e82:	9a00      	ldr	r2, [sp, #0]
 8005e84:	4b57      	ldr	r3, [pc, #348]	; (8005fe4 <_dtoa_r+0x2ec>)
 8005e86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	ec51 0b19 	vmov	r0, r1, d9
 8005e92:	f7fa fe2b 	bl	8000aec <__aeabi_dcmplt>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d050      	beq.n	8005f3c <_dtoa_r+0x244>
 8005e9a:	9b00      	ldr	r3, [sp, #0]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ea6:	1b5d      	subs	r5, r3, r5
 8005ea8:	1e6b      	subs	r3, r5, #1
 8005eaa:	9305      	str	r3, [sp, #20]
 8005eac:	bf45      	ittet	mi
 8005eae:	f1c5 0301 	rsbmi	r3, r5, #1
 8005eb2:	9304      	strmi	r3, [sp, #16]
 8005eb4:	2300      	movpl	r3, #0
 8005eb6:	2300      	movmi	r3, #0
 8005eb8:	bf4c      	ite	mi
 8005eba:	9305      	strmi	r3, [sp, #20]
 8005ebc:	9304      	strpl	r3, [sp, #16]
 8005ebe:	9b00      	ldr	r3, [sp, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	db3d      	blt.n	8005f40 <_dtoa_r+0x248>
 8005ec4:	9b05      	ldr	r3, [sp, #20]
 8005ec6:	9a00      	ldr	r2, [sp, #0]
 8005ec8:	920a      	str	r2, [sp, #40]	; 0x28
 8005eca:	4413      	add	r3, r2
 8005ecc:	9305      	str	r3, [sp, #20]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	9307      	str	r3, [sp, #28]
 8005ed2:	9b06      	ldr	r3, [sp, #24]
 8005ed4:	2b09      	cmp	r3, #9
 8005ed6:	f200 8089 	bhi.w	8005fec <_dtoa_r+0x2f4>
 8005eda:	2b05      	cmp	r3, #5
 8005edc:	bfc4      	itt	gt
 8005ede:	3b04      	subgt	r3, #4
 8005ee0:	9306      	strgt	r3, [sp, #24]
 8005ee2:	9b06      	ldr	r3, [sp, #24]
 8005ee4:	f1a3 0302 	sub.w	r3, r3, #2
 8005ee8:	bfcc      	ite	gt
 8005eea:	2500      	movgt	r5, #0
 8005eec:	2501      	movle	r5, #1
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	f200 8087 	bhi.w	8006002 <_dtoa_r+0x30a>
 8005ef4:	e8df f003 	tbb	[pc, r3]
 8005ef8:	59383a2d 	.word	0x59383a2d
 8005efc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005f00:	441d      	add	r5, r3
 8005f02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	bfc1      	itttt	gt
 8005f0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f12:	fa0b f303 	lslgt.w	r3, fp, r3
 8005f16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f1a:	bfda      	itte	le
 8005f1c:	f1c3 0320 	rsble	r3, r3, #32
 8005f20:	fa06 f003 	lslle.w	r0, r6, r3
 8005f24:	4318      	orrgt	r0, r3
 8005f26:	f7fa faf5 	bl	8000514 <__aeabi_ui2d>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f32:	3d01      	subs	r5, #1
 8005f34:	930e      	str	r3, [sp, #56]	; 0x38
 8005f36:	e76a      	b.n	8005e0e <_dtoa_r+0x116>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e7b2      	b.n	8005ea2 <_dtoa_r+0x1aa>
 8005f3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f3e:	e7b1      	b.n	8005ea4 <_dtoa_r+0x1ac>
 8005f40:	9b04      	ldr	r3, [sp, #16]
 8005f42:	9a00      	ldr	r2, [sp, #0]
 8005f44:	1a9b      	subs	r3, r3, r2
 8005f46:	9304      	str	r3, [sp, #16]
 8005f48:	4253      	negs	r3, r2
 8005f4a:	9307      	str	r3, [sp, #28]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f50:	e7bf      	b.n	8005ed2 <_dtoa_r+0x1da>
 8005f52:	2300      	movs	r3, #0
 8005f54:	9308      	str	r3, [sp, #32]
 8005f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	dc55      	bgt.n	8006008 <_dtoa_r+0x310>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f62:	461a      	mov	r2, r3
 8005f64:	9209      	str	r2, [sp, #36]	; 0x24
 8005f66:	e00c      	b.n	8005f82 <_dtoa_r+0x28a>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e7f3      	b.n	8005f54 <_dtoa_r+0x25c>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f70:	9308      	str	r3, [sp, #32]
 8005f72:	9b00      	ldr	r3, [sp, #0]
 8005f74:	4413      	add	r3, r2
 8005f76:	9302      	str	r3, [sp, #8]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	9303      	str	r3, [sp, #12]
 8005f7e:	bfb8      	it	lt
 8005f80:	2301      	movlt	r3, #1
 8005f82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005f84:	2200      	movs	r2, #0
 8005f86:	6042      	str	r2, [r0, #4]
 8005f88:	2204      	movs	r2, #4
 8005f8a:	f102 0614 	add.w	r6, r2, #20
 8005f8e:	429e      	cmp	r6, r3
 8005f90:	6841      	ldr	r1, [r0, #4]
 8005f92:	d93d      	bls.n	8006010 <_dtoa_r+0x318>
 8005f94:	4620      	mov	r0, r4
 8005f96:	f000 fcb7 	bl	8006908 <_Balloc>
 8005f9a:	9001      	str	r0, [sp, #4]
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d13b      	bne.n	8006018 <_dtoa_r+0x320>
 8005fa0:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <_dtoa_r+0x2f0>)
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005fa8:	e6c0      	b.n	8005d2c <_dtoa_r+0x34>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e7df      	b.n	8005f6e <_dtoa_r+0x276>
 8005fae:	bf00      	nop
 8005fb0:	636f4361 	.word	0x636f4361
 8005fb4:	3fd287a7 	.word	0x3fd287a7
 8005fb8:	8b60c8b3 	.word	0x8b60c8b3
 8005fbc:	3fc68a28 	.word	0x3fc68a28
 8005fc0:	509f79fb 	.word	0x509f79fb
 8005fc4:	3fd34413 	.word	0x3fd34413
 8005fc8:	08008219 	.word	0x08008219
 8005fcc:	08008230 	.word	0x08008230
 8005fd0:	7ff00000 	.word	0x7ff00000
 8005fd4:	08008215 	.word	0x08008215
 8005fd8:	0800820c 	.word	0x0800820c
 8005fdc:	080081e9 	.word	0x080081e9
 8005fe0:	3ff80000 	.word	0x3ff80000
 8005fe4:	08008320 	.word	0x08008320
 8005fe8:	0800828b 	.word	0x0800828b
 8005fec:	2501      	movs	r5, #1
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9306      	str	r3, [sp, #24]
 8005ff2:	9508      	str	r5, [sp, #32]
 8005ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2312      	movs	r3, #18
 8006000:	e7b0      	b.n	8005f64 <_dtoa_r+0x26c>
 8006002:	2301      	movs	r3, #1
 8006004:	9308      	str	r3, [sp, #32]
 8006006:	e7f5      	b.n	8005ff4 <_dtoa_r+0x2fc>
 8006008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800600a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800600e:	e7b8      	b.n	8005f82 <_dtoa_r+0x28a>
 8006010:	3101      	adds	r1, #1
 8006012:	6041      	str	r1, [r0, #4]
 8006014:	0052      	lsls	r2, r2, #1
 8006016:	e7b8      	b.n	8005f8a <_dtoa_r+0x292>
 8006018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800601a:	9a01      	ldr	r2, [sp, #4]
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	9b03      	ldr	r3, [sp, #12]
 8006020:	2b0e      	cmp	r3, #14
 8006022:	f200 809d 	bhi.w	8006160 <_dtoa_r+0x468>
 8006026:	2d00      	cmp	r5, #0
 8006028:	f000 809a 	beq.w	8006160 <_dtoa_r+0x468>
 800602c:	9b00      	ldr	r3, [sp, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	dd32      	ble.n	8006098 <_dtoa_r+0x3a0>
 8006032:	4ab7      	ldr	r2, [pc, #732]	; (8006310 <_dtoa_r+0x618>)
 8006034:	f003 030f 	and.w	r3, r3, #15
 8006038:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800603c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006040:	9b00      	ldr	r3, [sp, #0]
 8006042:	05d8      	lsls	r0, r3, #23
 8006044:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006048:	d516      	bpl.n	8006078 <_dtoa_r+0x380>
 800604a:	4bb2      	ldr	r3, [pc, #712]	; (8006314 <_dtoa_r+0x61c>)
 800604c:	ec51 0b19 	vmov	r0, r1, d9
 8006050:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006054:	f7fa fc02 	bl	800085c <__aeabi_ddiv>
 8006058:	f007 070f 	and.w	r7, r7, #15
 800605c:	4682      	mov	sl, r0
 800605e:	468b      	mov	fp, r1
 8006060:	2503      	movs	r5, #3
 8006062:	4eac      	ldr	r6, [pc, #688]	; (8006314 <_dtoa_r+0x61c>)
 8006064:	b957      	cbnz	r7, 800607c <_dtoa_r+0x384>
 8006066:	4642      	mov	r2, r8
 8006068:	464b      	mov	r3, r9
 800606a:	4650      	mov	r0, sl
 800606c:	4659      	mov	r1, fp
 800606e:	f7fa fbf5 	bl	800085c <__aeabi_ddiv>
 8006072:	4682      	mov	sl, r0
 8006074:	468b      	mov	fp, r1
 8006076:	e028      	b.n	80060ca <_dtoa_r+0x3d2>
 8006078:	2502      	movs	r5, #2
 800607a:	e7f2      	b.n	8006062 <_dtoa_r+0x36a>
 800607c:	07f9      	lsls	r1, r7, #31
 800607e:	d508      	bpl.n	8006092 <_dtoa_r+0x39a>
 8006080:	4640      	mov	r0, r8
 8006082:	4649      	mov	r1, r9
 8006084:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006088:	f7fa fabe 	bl	8000608 <__aeabi_dmul>
 800608c:	3501      	adds	r5, #1
 800608e:	4680      	mov	r8, r0
 8006090:	4689      	mov	r9, r1
 8006092:	107f      	asrs	r7, r7, #1
 8006094:	3608      	adds	r6, #8
 8006096:	e7e5      	b.n	8006064 <_dtoa_r+0x36c>
 8006098:	f000 809b 	beq.w	80061d2 <_dtoa_r+0x4da>
 800609c:	9b00      	ldr	r3, [sp, #0]
 800609e:	4f9d      	ldr	r7, [pc, #628]	; (8006314 <_dtoa_r+0x61c>)
 80060a0:	425e      	negs	r6, r3
 80060a2:	4b9b      	ldr	r3, [pc, #620]	; (8006310 <_dtoa_r+0x618>)
 80060a4:	f006 020f 	and.w	r2, r6, #15
 80060a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	ec51 0b19 	vmov	r0, r1, d9
 80060b4:	f7fa faa8 	bl	8000608 <__aeabi_dmul>
 80060b8:	1136      	asrs	r6, r6, #4
 80060ba:	4682      	mov	sl, r0
 80060bc:	468b      	mov	fp, r1
 80060be:	2300      	movs	r3, #0
 80060c0:	2502      	movs	r5, #2
 80060c2:	2e00      	cmp	r6, #0
 80060c4:	d17a      	bne.n	80061bc <_dtoa_r+0x4c4>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1d3      	bne.n	8006072 <_dtoa_r+0x37a>
 80060ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 8082 	beq.w	80061d6 <_dtoa_r+0x4de>
 80060d2:	4b91      	ldr	r3, [pc, #580]	; (8006318 <_dtoa_r+0x620>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	4650      	mov	r0, sl
 80060d8:	4659      	mov	r1, fp
 80060da:	f7fa fd07 	bl	8000aec <__aeabi_dcmplt>
 80060de:	2800      	cmp	r0, #0
 80060e0:	d079      	beq.n	80061d6 <_dtoa_r+0x4de>
 80060e2:	9b03      	ldr	r3, [sp, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d076      	beq.n	80061d6 <_dtoa_r+0x4de>
 80060e8:	9b02      	ldr	r3, [sp, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	dd36      	ble.n	800615c <_dtoa_r+0x464>
 80060ee:	9b00      	ldr	r3, [sp, #0]
 80060f0:	4650      	mov	r0, sl
 80060f2:	4659      	mov	r1, fp
 80060f4:	1e5f      	subs	r7, r3, #1
 80060f6:	2200      	movs	r2, #0
 80060f8:	4b88      	ldr	r3, [pc, #544]	; (800631c <_dtoa_r+0x624>)
 80060fa:	f7fa fa85 	bl	8000608 <__aeabi_dmul>
 80060fe:	9e02      	ldr	r6, [sp, #8]
 8006100:	4682      	mov	sl, r0
 8006102:	468b      	mov	fp, r1
 8006104:	3501      	adds	r5, #1
 8006106:	4628      	mov	r0, r5
 8006108:	f7fa fa14 	bl	8000534 <__aeabi_i2d>
 800610c:	4652      	mov	r2, sl
 800610e:	465b      	mov	r3, fp
 8006110:	f7fa fa7a 	bl	8000608 <__aeabi_dmul>
 8006114:	4b82      	ldr	r3, [pc, #520]	; (8006320 <_dtoa_r+0x628>)
 8006116:	2200      	movs	r2, #0
 8006118:	f7fa f8c0 	bl	800029c <__adddf3>
 800611c:	46d0      	mov	r8, sl
 800611e:	46d9      	mov	r9, fp
 8006120:	4682      	mov	sl, r0
 8006122:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006126:	2e00      	cmp	r6, #0
 8006128:	d158      	bne.n	80061dc <_dtoa_r+0x4e4>
 800612a:	4b7e      	ldr	r3, [pc, #504]	; (8006324 <_dtoa_r+0x62c>)
 800612c:	2200      	movs	r2, #0
 800612e:	4640      	mov	r0, r8
 8006130:	4649      	mov	r1, r9
 8006132:	f7fa f8b1 	bl	8000298 <__aeabi_dsub>
 8006136:	4652      	mov	r2, sl
 8006138:	465b      	mov	r3, fp
 800613a:	4680      	mov	r8, r0
 800613c:	4689      	mov	r9, r1
 800613e:	f7fa fcf3 	bl	8000b28 <__aeabi_dcmpgt>
 8006142:	2800      	cmp	r0, #0
 8006144:	f040 8295 	bne.w	8006672 <_dtoa_r+0x97a>
 8006148:	4652      	mov	r2, sl
 800614a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800614e:	4640      	mov	r0, r8
 8006150:	4649      	mov	r1, r9
 8006152:	f7fa fccb 	bl	8000aec <__aeabi_dcmplt>
 8006156:	2800      	cmp	r0, #0
 8006158:	f040 8289 	bne.w	800666e <_dtoa_r+0x976>
 800615c:	ec5b ab19 	vmov	sl, fp, d9
 8006160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006162:	2b00      	cmp	r3, #0
 8006164:	f2c0 8148 	blt.w	80063f8 <_dtoa_r+0x700>
 8006168:	9a00      	ldr	r2, [sp, #0]
 800616a:	2a0e      	cmp	r2, #14
 800616c:	f300 8144 	bgt.w	80063f8 <_dtoa_r+0x700>
 8006170:	4b67      	ldr	r3, [pc, #412]	; (8006310 <_dtoa_r+0x618>)
 8006172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006176:	e9d3 8900 	ldrd	r8, r9, [r3]
 800617a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617c:	2b00      	cmp	r3, #0
 800617e:	f280 80d5 	bge.w	800632c <_dtoa_r+0x634>
 8006182:	9b03      	ldr	r3, [sp, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f300 80d1 	bgt.w	800632c <_dtoa_r+0x634>
 800618a:	f040 826f 	bne.w	800666c <_dtoa_r+0x974>
 800618e:	4b65      	ldr	r3, [pc, #404]	; (8006324 <_dtoa_r+0x62c>)
 8006190:	2200      	movs	r2, #0
 8006192:	4640      	mov	r0, r8
 8006194:	4649      	mov	r1, r9
 8006196:	f7fa fa37 	bl	8000608 <__aeabi_dmul>
 800619a:	4652      	mov	r2, sl
 800619c:	465b      	mov	r3, fp
 800619e:	f7fa fcb9 	bl	8000b14 <__aeabi_dcmpge>
 80061a2:	9e03      	ldr	r6, [sp, #12]
 80061a4:	4637      	mov	r7, r6
 80061a6:	2800      	cmp	r0, #0
 80061a8:	f040 8245 	bne.w	8006636 <_dtoa_r+0x93e>
 80061ac:	9d01      	ldr	r5, [sp, #4]
 80061ae:	2331      	movs	r3, #49	; 0x31
 80061b0:	f805 3b01 	strb.w	r3, [r5], #1
 80061b4:	9b00      	ldr	r3, [sp, #0]
 80061b6:	3301      	adds	r3, #1
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	e240      	b.n	800663e <_dtoa_r+0x946>
 80061bc:	07f2      	lsls	r2, r6, #31
 80061be:	d505      	bpl.n	80061cc <_dtoa_r+0x4d4>
 80061c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061c4:	f7fa fa20 	bl	8000608 <__aeabi_dmul>
 80061c8:	3501      	adds	r5, #1
 80061ca:	2301      	movs	r3, #1
 80061cc:	1076      	asrs	r6, r6, #1
 80061ce:	3708      	adds	r7, #8
 80061d0:	e777      	b.n	80060c2 <_dtoa_r+0x3ca>
 80061d2:	2502      	movs	r5, #2
 80061d4:	e779      	b.n	80060ca <_dtoa_r+0x3d2>
 80061d6:	9f00      	ldr	r7, [sp, #0]
 80061d8:	9e03      	ldr	r6, [sp, #12]
 80061da:	e794      	b.n	8006106 <_dtoa_r+0x40e>
 80061dc:	9901      	ldr	r1, [sp, #4]
 80061de:	4b4c      	ldr	r3, [pc, #304]	; (8006310 <_dtoa_r+0x618>)
 80061e0:	4431      	add	r1, r6
 80061e2:	910d      	str	r1, [sp, #52]	; 0x34
 80061e4:	9908      	ldr	r1, [sp, #32]
 80061e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061ee:	2900      	cmp	r1, #0
 80061f0:	d043      	beq.n	800627a <_dtoa_r+0x582>
 80061f2:	494d      	ldr	r1, [pc, #308]	; (8006328 <_dtoa_r+0x630>)
 80061f4:	2000      	movs	r0, #0
 80061f6:	f7fa fb31 	bl	800085c <__aeabi_ddiv>
 80061fa:	4652      	mov	r2, sl
 80061fc:	465b      	mov	r3, fp
 80061fe:	f7fa f84b 	bl	8000298 <__aeabi_dsub>
 8006202:	9d01      	ldr	r5, [sp, #4]
 8006204:	4682      	mov	sl, r0
 8006206:	468b      	mov	fp, r1
 8006208:	4649      	mov	r1, r9
 800620a:	4640      	mov	r0, r8
 800620c:	f7fa fcac 	bl	8000b68 <__aeabi_d2iz>
 8006210:	4606      	mov	r6, r0
 8006212:	f7fa f98f 	bl	8000534 <__aeabi_i2d>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	4640      	mov	r0, r8
 800621c:	4649      	mov	r1, r9
 800621e:	f7fa f83b 	bl	8000298 <__aeabi_dsub>
 8006222:	3630      	adds	r6, #48	; 0x30
 8006224:	f805 6b01 	strb.w	r6, [r5], #1
 8006228:	4652      	mov	r2, sl
 800622a:	465b      	mov	r3, fp
 800622c:	4680      	mov	r8, r0
 800622e:	4689      	mov	r9, r1
 8006230:	f7fa fc5c 	bl	8000aec <__aeabi_dcmplt>
 8006234:	2800      	cmp	r0, #0
 8006236:	d163      	bne.n	8006300 <_dtoa_r+0x608>
 8006238:	4642      	mov	r2, r8
 800623a:	464b      	mov	r3, r9
 800623c:	4936      	ldr	r1, [pc, #216]	; (8006318 <_dtoa_r+0x620>)
 800623e:	2000      	movs	r0, #0
 8006240:	f7fa f82a 	bl	8000298 <__aeabi_dsub>
 8006244:	4652      	mov	r2, sl
 8006246:	465b      	mov	r3, fp
 8006248:	f7fa fc50 	bl	8000aec <__aeabi_dcmplt>
 800624c:	2800      	cmp	r0, #0
 800624e:	f040 80b5 	bne.w	80063bc <_dtoa_r+0x6c4>
 8006252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006254:	429d      	cmp	r5, r3
 8006256:	d081      	beq.n	800615c <_dtoa_r+0x464>
 8006258:	4b30      	ldr	r3, [pc, #192]	; (800631c <_dtoa_r+0x624>)
 800625a:	2200      	movs	r2, #0
 800625c:	4650      	mov	r0, sl
 800625e:	4659      	mov	r1, fp
 8006260:	f7fa f9d2 	bl	8000608 <__aeabi_dmul>
 8006264:	4b2d      	ldr	r3, [pc, #180]	; (800631c <_dtoa_r+0x624>)
 8006266:	4682      	mov	sl, r0
 8006268:	468b      	mov	fp, r1
 800626a:	4640      	mov	r0, r8
 800626c:	4649      	mov	r1, r9
 800626e:	2200      	movs	r2, #0
 8006270:	f7fa f9ca 	bl	8000608 <__aeabi_dmul>
 8006274:	4680      	mov	r8, r0
 8006276:	4689      	mov	r9, r1
 8006278:	e7c6      	b.n	8006208 <_dtoa_r+0x510>
 800627a:	4650      	mov	r0, sl
 800627c:	4659      	mov	r1, fp
 800627e:	f7fa f9c3 	bl	8000608 <__aeabi_dmul>
 8006282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006284:	9d01      	ldr	r5, [sp, #4]
 8006286:	930f      	str	r3, [sp, #60]	; 0x3c
 8006288:	4682      	mov	sl, r0
 800628a:	468b      	mov	fp, r1
 800628c:	4649      	mov	r1, r9
 800628e:	4640      	mov	r0, r8
 8006290:	f7fa fc6a 	bl	8000b68 <__aeabi_d2iz>
 8006294:	4606      	mov	r6, r0
 8006296:	f7fa f94d 	bl	8000534 <__aeabi_i2d>
 800629a:	3630      	adds	r6, #48	; 0x30
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4640      	mov	r0, r8
 80062a2:	4649      	mov	r1, r9
 80062a4:	f7f9 fff8 	bl	8000298 <__aeabi_dsub>
 80062a8:	f805 6b01 	strb.w	r6, [r5], #1
 80062ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ae:	429d      	cmp	r5, r3
 80062b0:	4680      	mov	r8, r0
 80062b2:	4689      	mov	r9, r1
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	d124      	bne.n	8006304 <_dtoa_r+0x60c>
 80062ba:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <_dtoa_r+0x630>)
 80062bc:	4650      	mov	r0, sl
 80062be:	4659      	mov	r1, fp
 80062c0:	f7f9 ffec 	bl	800029c <__adddf3>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4640      	mov	r0, r8
 80062ca:	4649      	mov	r1, r9
 80062cc:	f7fa fc2c 	bl	8000b28 <__aeabi_dcmpgt>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d173      	bne.n	80063bc <_dtoa_r+0x6c4>
 80062d4:	4652      	mov	r2, sl
 80062d6:	465b      	mov	r3, fp
 80062d8:	4913      	ldr	r1, [pc, #76]	; (8006328 <_dtoa_r+0x630>)
 80062da:	2000      	movs	r0, #0
 80062dc:	f7f9 ffdc 	bl	8000298 <__aeabi_dsub>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4640      	mov	r0, r8
 80062e6:	4649      	mov	r1, r9
 80062e8:	f7fa fc00 	bl	8000aec <__aeabi_dcmplt>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	f43f af35 	beq.w	800615c <_dtoa_r+0x464>
 80062f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80062f4:	1e6b      	subs	r3, r5, #1
 80062f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80062f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062fc:	2b30      	cmp	r3, #48	; 0x30
 80062fe:	d0f8      	beq.n	80062f2 <_dtoa_r+0x5fa>
 8006300:	9700      	str	r7, [sp, #0]
 8006302:	e049      	b.n	8006398 <_dtoa_r+0x6a0>
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <_dtoa_r+0x624>)
 8006306:	f7fa f97f 	bl	8000608 <__aeabi_dmul>
 800630a:	4680      	mov	r8, r0
 800630c:	4689      	mov	r9, r1
 800630e:	e7bd      	b.n	800628c <_dtoa_r+0x594>
 8006310:	08008320 	.word	0x08008320
 8006314:	080082f8 	.word	0x080082f8
 8006318:	3ff00000 	.word	0x3ff00000
 800631c:	40240000 	.word	0x40240000
 8006320:	401c0000 	.word	0x401c0000
 8006324:	40140000 	.word	0x40140000
 8006328:	3fe00000 	.word	0x3fe00000
 800632c:	9d01      	ldr	r5, [sp, #4]
 800632e:	4656      	mov	r6, sl
 8006330:	465f      	mov	r7, fp
 8006332:	4642      	mov	r2, r8
 8006334:	464b      	mov	r3, r9
 8006336:	4630      	mov	r0, r6
 8006338:	4639      	mov	r1, r7
 800633a:	f7fa fa8f 	bl	800085c <__aeabi_ddiv>
 800633e:	f7fa fc13 	bl	8000b68 <__aeabi_d2iz>
 8006342:	4682      	mov	sl, r0
 8006344:	f7fa f8f6 	bl	8000534 <__aeabi_i2d>
 8006348:	4642      	mov	r2, r8
 800634a:	464b      	mov	r3, r9
 800634c:	f7fa f95c 	bl	8000608 <__aeabi_dmul>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4630      	mov	r0, r6
 8006356:	4639      	mov	r1, r7
 8006358:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800635c:	f7f9 ff9c 	bl	8000298 <__aeabi_dsub>
 8006360:	f805 6b01 	strb.w	r6, [r5], #1
 8006364:	9e01      	ldr	r6, [sp, #4]
 8006366:	9f03      	ldr	r7, [sp, #12]
 8006368:	1bae      	subs	r6, r5, r6
 800636a:	42b7      	cmp	r7, r6
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	d135      	bne.n	80063de <_dtoa_r+0x6e6>
 8006372:	f7f9 ff93 	bl	800029c <__adddf3>
 8006376:	4642      	mov	r2, r8
 8006378:	464b      	mov	r3, r9
 800637a:	4606      	mov	r6, r0
 800637c:	460f      	mov	r7, r1
 800637e:	f7fa fbd3 	bl	8000b28 <__aeabi_dcmpgt>
 8006382:	b9d0      	cbnz	r0, 80063ba <_dtoa_r+0x6c2>
 8006384:	4642      	mov	r2, r8
 8006386:	464b      	mov	r3, r9
 8006388:	4630      	mov	r0, r6
 800638a:	4639      	mov	r1, r7
 800638c:	f7fa fba4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006390:	b110      	cbz	r0, 8006398 <_dtoa_r+0x6a0>
 8006392:	f01a 0f01 	tst.w	sl, #1
 8006396:	d110      	bne.n	80063ba <_dtoa_r+0x6c2>
 8006398:	4620      	mov	r0, r4
 800639a:	ee18 1a10 	vmov	r1, s16
 800639e:	f000 faf3 	bl	8006988 <_Bfree>
 80063a2:	2300      	movs	r3, #0
 80063a4:	9800      	ldr	r0, [sp, #0]
 80063a6:	702b      	strb	r3, [r5, #0]
 80063a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063aa:	3001      	adds	r0, #1
 80063ac:	6018      	str	r0, [r3, #0]
 80063ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f43f acf1 	beq.w	8005d98 <_dtoa_r+0xa0>
 80063b6:	601d      	str	r5, [r3, #0]
 80063b8:	e4ee      	b.n	8005d98 <_dtoa_r+0xa0>
 80063ba:	9f00      	ldr	r7, [sp, #0]
 80063bc:	462b      	mov	r3, r5
 80063be:	461d      	mov	r5, r3
 80063c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063c4:	2a39      	cmp	r2, #57	; 0x39
 80063c6:	d106      	bne.n	80063d6 <_dtoa_r+0x6de>
 80063c8:	9a01      	ldr	r2, [sp, #4]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d1f7      	bne.n	80063be <_dtoa_r+0x6c6>
 80063ce:	9901      	ldr	r1, [sp, #4]
 80063d0:	2230      	movs	r2, #48	; 0x30
 80063d2:	3701      	adds	r7, #1
 80063d4:	700a      	strb	r2, [r1, #0]
 80063d6:	781a      	ldrb	r2, [r3, #0]
 80063d8:	3201      	adds	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e790      	b.n	8006300 <_dtoa_r+0x608>
 80063de:	4ba6      	ldr	r3, [pc, #664]	; (8006678 <_dtoa_r+0x980>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	f7fa f911 	bl	8000608 <__aeabi_dmul>
 80063e6:	2200      	movs	r2, #0
 80063e8:	2300      	movs	r3, #0
 80063ea:	4606      	mov	r6, r0
 80063ec:	460f      	mov	r7, r1
 80063ee:	f7fa fb73 	bl	8000ad8 <__aeabi_dcmpeq>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d09d      	beq.n	8006332 <_dtoa_r+0x63a>
 80063f6:	e7cf      	b.n	8006398 <_dtoa_r+0x6a0>
 80063f8:	9a08      	ldr	r2, [sp, #32]
 80063fa:	2a00      	cmp	r2, #0
 80063fc:	f000 80d7 	beq.w	80065ae <_dtoa_r+0x8b6>
 8006400:	9a06      	ldr	r2, [sp, #24]
 8006402:	2a01      	cmp	r2, #1
 8006404:	f300 80ba 	bgt.w	800657c <_dtoa_r+0x884>
 8006408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800640a:	2a00      	cmp	r2, #0
 800640c:	f000 80b2 	beq.w	8006574 <_dtoa_r+0x87c>
 8006410:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006414:	9e07      	ldr	r6, [sp, #28]
 8006416:	9d04      	ldr	r5, [sp, #16]
 8006418:	9a04      	ldr	r2, [sp, #16]
 800641a:	441a      	add	r2, r3
 800641c:	9204      	str	r2, [sp, #16]
 800641e:	9a05      	ldr	r2, [sp, #20]
 8006420:	2101      	movs	r1, #1
 8006422:	441a      	add	r2, r3
 8006424:	4620      	mov	r0, r4
 8006426:	9205      	str	r2, [sp, #20]
 8006428:	f000 fb66 	bl	8006af8 <__i2b>
 800642c:	4607      	mov	r7, r0
 800642e:	2d00      	cmp	r5, #0
 8006430:	dd0c      	ble.n	800644c <_dtoa_r+0x754>
 8006432:	9b05      	ldr	r3, [sp, #20]
 8006434:	2b00      	cmp	r3, #0
 8006436:	dd09      	ble.n	800644c <_dtoa_r+0x754>
 8006438:	42ab      	cmp	r3, r5
 800643a:	9a04      	ldr	r2, [sp, #16]
 800643c:	bfa8      	it	ge
 800643e:	462b      	movge	r3, r5
 8006440:	1ad2      	subs	r2, r2, r3
 8006442:	9204      	str	r2, [sp, #16]
 8006444:	9a05      	ldr	r2, [sp, #20]
 8006446:	1aed      	subs	r5, r5, r3
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	9305      	str	r3, [sp, #20]
 800644c:	9b07      	ldr	r3, [sp, #28]
 800644e:	b31b      	cbz	r3, 8006498 <_dtoa_r+0x7a0>
 8006450:	9b08      	ldr	r3, [sp, #32]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80af 	beq.w	80065b6 <_dtoa_r+0x8be>
 8006458:	2e00      	cmp	r6, #0
 800645a:	dd13      	ble.n	8006484 <_dtoa_r+0x78c>
 800645c:	4639      	mov	r1, r7
 800645e:	4632      	mov	r2, r6
 8006460:	4620      	mov	r0, r4
 8006462:	f000 fc09 	bl	8006c78 <__pow5mult>
 8006466:	ee18 2a10 	vmov	r2, s16
 800646a:	4601      	mov	r1, r0
 800646c:	4607      	mov	r7, r0
 800646e:	4620      	mov	r0, r4
 8006470:	f000 fb58 	bl	8006b24 <__multiply>
 8006474:	ee18 1a10 	vmov	r1, s16
 8006478:	4680      	mov	r8, r0
 800647a:	4620      	mov	r0, r4
 800647c:	f000 fa84 	bl	8006988 <_Bfree>
 8006480:	ee08 8a10 	vmov	s16, r8
 8006484:	9b07      	ldr	r3, [sp, #28]
 8006486:	1b9a      	subs	r2, r3, r6
 8006488:	d006      	beq.n	8006498 <_dtoa_r+0x7a0>
 800648a:	ee18 1a10 	vmov	r1, s16
 800648e:	4620      	mov	r0, r4
 8006490:	f000 fbf2 	bl	8006c78 <__pow5mult>
 8006494:	ee08 0a10 	vmov	s16, r0
 8006498:	2101      	movs	r1, #1
 800649a:	4620      	mov	r0, r4
 800649c:	f000 fb2c 	bl	8006af8 <__i2b>
 80064a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	4606      	mov	r6, r0
 80064a6:	f340 8088 	ble.w	80065ba <_dtoa_r+0x8c2>
 80064aa:	461a      	mov	r2, r3
 80064ac:	4601      	mov	r1, r0
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 fbe2 	bl	8006c78 <__pow5mult>
 80064b4:	9b06      	ldr	r3, [sp, #24]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	4606      	mov	r6, r0
 80064ba:	f340 8081 	ble.w	80065c0 <_dtoa_r+0x8c8>
 80064be:	f04f 0800 	mov.w	r8, #0
 80064c2:	6933      	ldr	r3, [r6, #16]
 80064c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064c8:	6918      	ldr	r0, [r3, #16]
 80064ca:	f000 fac5 	bl	8006a58 <__hi0bits>
 80064ce:	f1c0 0020 	rsb	r0, r0, #32
 80064d2:	9b05      	ldr	r3, [sp, #20]
 80064d4:	4418      	add	r0, r3
 80064d6:	f010 001f 	ands.w	r0, r0, #31
 80064da:	f000 8092 	beq.w	8006602 <_dtoa_r+0x90a>
 80064de:	f1c0 0320 	rsb	r3, r0, #32
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	f340 808a 	ble.w	80065fc <_dtoa_r+0x904>
 80064e8:	f1c0 001c 	rsb	r0, r0, #28
 80064ec:	9b04      	ldr	r3, [sp, #16]
 80064ee:	4403      	add	r3, r0
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	9b05      	ldr	r3, [sp, #20]
 80064f4:	4403      	add	r3, r0
 80064f6:	4405      	add	r5, r0
 80064f8:	9305      	str	r3, [sp, #20]
 80064fa:	9b04      	ldr	r3, [sp, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	dd07      	ble.n	8006510 <_dtoa_r+0x818>
 8006500:	ee18 1a10 	vmov	r1, s16
 8006504:	461a      	mov	r2, r3
 8006506:	4620      	mov	r0, r4
 8006508:	f000 fc10 	bl	8006d2c <__lshift>
 800650c:	ee08 0a10 	vmov	s16, r0
 8006510:	9b05      	ldr	r3, [sp, #20]
 8006512:	2b00      	cmp	r3, #0
 8006514:	dd05      	ble.n	8006522 <_dtoa_r+0x82a>
 8006516:	4631      	mov	r1, r6
 8006518:	461a      	mov	r2, r3
 800651a:	4620      	mov	r0, r4
 800651c:	f000 fc06 	bl	8006d2c <__lshift>
 8006520:	4606      	mov	r6, r0
 8006522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006524:	2b00      	cmp	r3, #0
 8006526:	d06e      	beq.n	8006606 <_dtoa_r+0x90e>
 8006528:	ee18 0a10 	vmov	r0, s16
 800652c:	4631      	mov	r1, r6
 800652e:	f000 fc6d 	bl	8006e0c <__mcmp>
 8006532:	2800      	cmp	r0, #0
 8006534:	da67      	bge.n	8006606 <_dtoa_r+0x90e>
 8006536:	9b00      	ldr	r3, [sp, #0]
 8006538:	3b01      	subs	r3, #1
 800653a:	ee18 1a10 	vmov	r1, s16
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	220a      	movs	r2, #10
 8006542:	2300      	movs	r3, #0
 8006544:	4620      	mov	r0, r4
 8006546:	f000 fa41 	bl	80069cc <__multadd>
 800654a:	9b08      	ldr	r3, [sp, #32]
 800654c:	ee08 0a10 	vmov	s16, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 81b1 	beq.w	80068b8 <_dtoa_r+0xbc0>
 8006556:	2300      	movs	r3, #0
 8006558:	4639      	mov	r1, r7
 800655a:	220a      	movs	r2, #10
 800655c:	4620      	mov	r0, r4
 800655e:	f000 fa35 	bl	80069cc <__multadd>
 8006562:	9b02      	ldr	r3, [sp, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	4607      	mov	r7, r0
 8006568:	f300 808e 	bgt.w	8006688 <_dtoa_r+0x990>
 800656c:	9b06      	ldr	r3, [sp, #24]
 800656e:	2b02      	cmp	r3, #2
 8006570:	dc51      	bgt.n	8006616 <_dtoa_r+0x91e>
 8006572:	e089      	b.n	8006688 <_dtoa_r+0x990>
 8006574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006576:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800657a:	e74b      	b.n	8006414 <_dtoa_r+0x71c>
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	1e5e      	subs	r6, r3, #1
 8006580:	9b07      	ldr	r3, [sp, #28]
 8006582:	42b3      	cmp	r3, r6
 8006584:	bfbf      	itttt	lt
 8006586:	9b07      	ldrlt	r3, [sp, #28]
 8006588:	9607      	strlt	r6, [sp, #28]
 800658a:	1af2      	sublt	r2, r6, r3
 800658c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800658e:	bfb6      	itet	lt
 8006590:	189b      	addlt	r3, r3, r2
 8006592:	1b9e      	subge	r6, r3, r6
 8006594:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006596:	9b03      	ldr	r3, [sp, #12]
 8006598:	bfb8      	it	lt
 800659a:	2600      	movlt	r6, #0
 800659c:	2b00      	cmp	r3, #0
 800659e:	bfb7      	itett	lt
 80065a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80065a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80065a8:	1a9d      	sublt	r5, r3, r2
 80065aa:	2300      	movlt	r3, #0
 80065ac:	e734      	b.n	8006418 <_dtoa_r+0x720>
 80065ae:	9e07      	ldr	r6, [sp, #28]
 80065b0:	9d04      	ldr	r5, [sp, #16]
 80065b2:	9f08      	ldr	r7, [sp, #32]
 80065b4:	e73b      	b.n	800642e <_dtoa_r+0x736>
 80065b6:	9a07      	ldr	r2, [sp, #28]
 80065b8:	e767      	b.n	800648a <_dtoa_r+0x792>
 80065ba:	9b06      	ldr	r3, [sp, #24]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	dc18      	bgt.n	80065f2 <_dtoa_r+0x8fa>
 80065c0:	f1ba 0f00 	cmp.w	sl, #0
 80065c4:	d115      	bne.n	80065f2 <_dtoa_r+0x8fa>
 80065c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065ca:	b993      	cbnz	r3, 80065f2 <_dtoa_r+0x8fa>
 80065cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80065d0:	0d1b      	lsrs	r3, r3, #20
 80065d2:	051b      	lsls	r3, r3, #20
 80065d4:	b183      	cbz	r3, 80065f8 <_dtoa_r+0x900>
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	3301      	adds	r3, #1
 80065da:	9304      	str	r3, [sp, #16]
 80065dc:	9b05      	ldr	r3, [sp, #20]
 80065de:	3301      	adds	r3, #1
 80065e0:	9305      	str	r3, [sp, #20]
 80065e2:	f04f 0801 	mov.w	r8, #1
 80065e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f47f af6a 	bne.w	80064c2 <_dtoa_r+0x7ca>
 80065ee:	2001      	movs	r0, #1
 80065f0:	e76f      	b.n	80064d2 <_dtoa_r+0x7da>
 80065f2:	f04f 0800 	mov.w	r8, #0
 80065f6:	e7f6      	b.n	80065e6 <_dtoa_r+0x8ee>
 80065f8:	4698      	mov	r8, r3
 80065fa:	e7f4      	b.n	80065e6 <_dtoa_r+0x8ee>
 80065fc:	f43f af7d 	beq.w	80064fa <_dtoa_r+0x802>
 8006600:	4618      	mov	r0, r3
 8006602:	301c      	adds	r0, #28
 8006604:	e772      	b.n	80064ec <_dtoa_r+0x7f4>
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	dc37      	bgt.n	800667c <_dtoa_r+0x984>
 800660c:	9b06      	ldr	r3, [sp, #24]
 800660e:	2b02      	cmp	r3, #2
 8006610:	dd34      	ble.n	800667c <_dtoa_r+0x984>
 8006612:	9b03      	ldr	r3, [sp, #12]
 8006614:	9302      	str	r3, [sp, #8]
 8006616:	9b02      	ldr	r3, [sp, #8]
 8006618:	b96b      	cbnz	r3, 8006636 <_dtoa_r+0x93e>
 800661a:	4631      	mov	r1, r6
 800661c:	2205      	movs	r2, #5
 800661e:	4620      	mov	r0, r4
 8006620:	f000 f9d4 	bl	80069cc <__multadd>
 8006624:	4601      	mov	r1, r0
 8006626:	4606      	mov	r6, r0
 8006628:	ee18 0a10 	vmov	r0, s16
 800662c:	f000 fbee 	bl	8006e0c <__mcmp>
 8006630:	2800      	cmp	r0, #0
 8006632:	f73f adbb 	bgt.w	80061ac <_dtoa_r+0x4b4>
 8006636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006638:	9d01      	ldr	r5, [sp, #4]
 800663a:	43db      	mvns	r3, r3
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	f04f 0800 	mov.w	r8, #0
 8006642:	4631      	mov	r1, r6
 8006644:	4620      	mov	r0, r4
 8006646:	f000 f99f 	bl	8006988 <_Bfree>
 800664a:	2f00      	cmp	r7, #0
 800664c:	f43f aea4 	beq.w	8006398 <_dtoa_r+0x6a0>
 8006650:	f1b8 0f00 	cmp.w	r8, #0
 8006654:	d005      	beq.n	8006662 <_dtoa_r+0x96a>
 8006656:	45b8      	cmp	r8, r7
 8006658:	d003      	beq.n	8006662 <_dtoa_r+0x96a>
 800665a:	4641      	mov	r1, r8
 800665c:	4620      	mov	r0, r4
 800665e:	f000 f993 	bl	8006988 <_Bfree>
 8006662:	4639      	mov	r1, r7
 8006664:	4620      	mov	r0, r4
 8006666:	f000 f98f 	bl	8006988 <_Bfree>
 800666a:	e695      	b.n	8006398 <_dtoa_r+0x6a0>
 800666c:	2600      	movs	r6, #0
 800666e:	4637      	mov	r7, r6
 8006670:	e7e1      	b.n	8006636 <_dtoa_r+0x93e>
 8006672:	9700      	str	r7, [sp, #0]
 8006674:	4637      	mov	r7, r6
 8006676:	e599      	b.n	80061ac <_dtoa_r+0x4b4>
 8006678:	40240000 	.word	0x40240000
 800667c:	9b08      	ldr	r3, [sp, #32]
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 80ca 	beq.w	8006818 <_dtoa_r+0xb20>
 8006684:	9b03      	ldr	r3, [sp, #12]
 8006686:	9302      	str	r3, [sp, #8]
 8006688:	2d00      	cmp	r5, #0
 800668a:	dd05      	ble.n	8006698 <_dtoa_r+0x9a0>
 800668c:	4639      	mov	r1, r7
 800668e:	462a      	mov	r2, r5
 8006690:	4620      	mov	r0, r4
 8006692:	f000 fb4b 	bl	8006d2c <__lshift>
 8006696:	4607      	mov	r7, r0
 8006698:	f1b8 0f00 	cmp.w	r8, #0
 800669c:	d05b      	beq.n	8006756 <_dtoa_r+0xa5e>
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 f931 	bl	8006908 <_Balloc>
 80066a6:	4605      	mov	r5, r0
 80066a8:	b928      	cbnz	r0, 80066b6 <_dtoa_r+0x9be>
 80066aa:	4b87      	ldr	r3, [pc, #540]	; (80068c8 <_dtoa_r+0xbd0>)
 80066ac:	4602      	mov	r2, r0
 80066ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066b2:	f7ff bb3b 	b.w	8005d2c <_dtoa_r+0x34>
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	3202      	adds	r2, #2
 80066ba:	0092      	lsls	r2, r2, #2
 80066bc:	f107 010c 	add.w	r1, r7, #12
 80066c0:	300c      	adds	r0, #12
 80066c2:	f000 f913 	bl	80068ec <memcpy>
 80066c6:	2201      	movs	r2, #1
 80066c8:	4629      	mov	r1, r5
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 fb2e 	bl	8006d2c <__lshift>
 80066d0:	9b01      	ldr	r3, [sp, #4]
 80066d2:	f103 0901 	add.w	r9, r3, #1
 80066d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80066da:	4413      	add	r3, r2
 80066dc:	9305      	str	r3, [sp, #20]
 80066de:	f00a 0301 	and.w	r3, sl, #1
 80066e2:	46b8      	mov	r8, r7
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	4607      	mov	r7, r0
 80066e8:	4631      	mov	r1, r6
 80066ea:	ee18 0a10 	vmov	r0, s16
 80066ee:	f7ff fa77 	bl	8005be0 <quorem>
 80066f2:	4641      	mov	r1, r8
 80066f4:	9002      	str	r0, [sp, #8]
 80066f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80066fa:	ee18 0a10 	vmov	r0, s16
 80066fe:	f000 fb85 	bl	8006e0c <__mcmp>
 8006702:	463a      	mov	r2, r7
 8006704:	9003      	str	r0, [sp, #12]
 8006706:	4631      	mov	r1, r6
 8006708:	4620      	mov	r0, r4
 800670a:	f000 fb9b 	bl	8006e44 <__mdiff>
 800670e:	68c2      	ldr	r2, [r0, #12]
 8006710:	f109 3bff 	add.w	fp, r9, #4294967295
 8006714:	4605      	mov	r5, r0
 8006716:	bb02      	cbnz	r2, 800675a <_dtoa_r+0xa62>
 8006718:	4601      	mov	r1, r0
 800671a:	ee18 0a10 	vmov	r0, s16
 800671e:	f000 fb75 	bl	8006e0c <__mcmp>
 8006722:	4602      	mov	r2, r0
 8006724:	4629      	mov	r1, r5
 8006726:	4620      	mov	r0, r4
 8006728:	9207      	str	r2, [sp, #28]
 800672a:	f000 f92d 	bl	8006988 <_Bfree>
 800672e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006732:	ea43 0102 	orr.w	r1, r3, r2
 8006736:	9b04      	ldr	r3, [sp, #16]
 8006738:	430b      	orrs	r3, r1
 800673a:	464d      	mov	r5, r9
 800673c:	d10f      	bne.n	800675e <_dtoa_r+0xa66>
 800673e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006742:	d02a      	beq.n	800679a <_dtoa_r+0xaa2>
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	dd02      	ble.n	8006750 <_dtoa_r+0xa58>
 800674a:	9b02      	ldr	r3, [sp, #8]
 800674c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006750:	f88b a000 	strb.w	sl, [fp]
 8006754:	e775      	b.n	8006642 <_dtoa_r+0x94a>
 8006756:	4638      	mov	r0, r7
 8006758:	e7ba      	b.n	80066d0 <_dtoa_r+0x9d8>
 800675a:	2201      	movs	r2, #1
 800675c:	e7e2      	b.n	8006724 <_dtoa_r+0xa2c>
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	db04      	blt.n	800676e <_dtoa_r+0xa76>
 8006764:	9906      	ldr	r1, [sp, #24]
 8006766:	430b      	orrs	r3, r1
 8006768:	9904      	ldr	r1, [sp, #16]
 800676a:	430b      	orrs	r3, r1
 800676c:	d122      	bne.n	80067b4 <_dtoa_r+0xabc>
 800676e:	2a00      	cmp	r2, #0
 8006770:	ddee      	ble.n	8006750 <_dtoa_r+0xa58>
 8006772:	ee18 1a10 	vmov	r1, s16
 8006776:	2201      	movs	r2, #1
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fad7 	bl	8006d2c <__lshift>
 800677e:	4631      	mov	r1, r6
 8006780:	ee08 0a10 	vmov	s16, r0
 8006784:	f000 fb42 	bl	8006e0c <__mcmp>
 8006788:	2800      	cmp	r0, #0
 800678a:	dc03      	bgt.n	8006794 <_dtoa_r+0xa9c>
 800678c:	d1e0      	bne.n	8006750 <_dtoa_r+0xa58>
 800678e:	f01a 0f01 	tst.w	sl, #1
 8006792:	d0dd      	beq.n	8006750 <_dtoa_r+0xa58>
 8006794:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006798:	d1d7      	bne.n	800674a <_dtoa_r+0xa52>
 800679a:	2339      	movs	r3, #57	; 0x39
 800679c:	f88b 3000 	strb.w	r3, [fp]
 80067a0:	462b      	mov	r3, r5
 80067a2:	461d      	mov	r5, r3
 80067a4:	3b01      	subs	r3, #1
 80067a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067aa:	2a39      	cmp	r2, #57	; 0x39
 80067ac:	d071      	beq.n	8006892 <_dtoa_r+0xb9a>
 80067ae:	3201      	adds	r2, #1
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	e746      	b.n	8006642 <_dtoa_r+0x94a>
 80067b4:	2a00      	cmp	r2, #0
 80067b6:	dd07      	ble.n	80067c8 <_dtoa_r+0xad0>
 80067b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067bc:	d0ed      	beq.n	800679a <_dtoa_r+0xaa2>
 80067be:	f10a 0301 	add.w	r3, sl, #1
 80067c2:	f88b 3000 	strb.w	r3, [fp]
 80067c6:	e73c      	b.n	8006642 <_dtoa_r+0x94a>
 80067c8:	9b05      	ldr	r3, [sp, #20]
 80067ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80067ce:	4599      	cmp	r9, r3
 80067d0:	d047      	beq.n	8006862 <_dtoa_r+0xb6a>
 80067d2:	ee18 1a10 	vmov	r1, s16
 80067d6:	2300      	movs	r3, #0
 80067d8:	220a      	movs	r2, #10
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 f8f6 	bl	80069cc <__multadd>
 80067e0:	45b8      	cmp	r8, r7
 80067e2:	ee08 0a10 	vmov	s16, r0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	f04f 020a 	mov.w	r2, #10
 80067ee:	4641      	mov	r1, r8
 80067f0:	4620      	mov	r0, r4
 80067f2:	d106      	bne.n	8006802 <_dtoa_r+0xb0a>
 80067f4:	f000 f8ea 	bl	80069cc <__multadd>
 80067f8:	4680      	mov	r8, r0
 80067fa:	4607      	mov	r7, r0
 80067fc:	f109 0901 	add.w	r9, r9, #1
 8006800:	e772      	b.n	80066e8 <_dtoa_r+0x9f0>
 8006802:	f000 f8e3 	bl	80069cc <__multadd>
 8006806:	4639      	mov	r1, r7
 8006808:	4680      	mov	r8, r0
 800680a:	2300      	movs	r3, #0
 800680c:	220a      	movs	r2, #10
 800680e:	4620      	mov	r0, r4
 8006810:	f000 f8dc 	bl	80069cc <__multadd>
 8006814:	4607      	mov	r7, r0
 8006816:	e7f1      	b.n	80067fc <_dtoa_r+0xb04>
 8006818:	9b03      	ldr	r3, [sp, #12]
 800681a:	9302      	str	r3, [sp, #8]
 800681c:	9d01      	ldr	r5, [sp, #4]
 800681e:	ee18 0a10 	vmov	r0, s16
 8006822:	4631      	mov	r1, r6
 8006824:	f7ff f9dc 	bl	8005be0 <quorem>
 8006828:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800682c:	9b01      	ldr	r3, [sp, #4]
 800682e:	f805 ab01 	strb.w	sl, [r5], #1
 8006832:	1aea      	subs	r2, r5, r3
 8006834:	9b02      	ldr	r3, [sp, #8]
 8006836:	4293      	cmp	r3, r2
 8006838:	dd09      	ble.n	800684e <_dtoa_r+0xb56>
 800683a:	ee18 1a10 	vmov	r1, s16
 800683e:	2300      	movs	r3, #0
 8006840:	220a      	movs	r2, #10
 8006842:	4620      	mov	r0, r4
 8006844:	f000 f8c2 	bl	80069cc <__multadd>
 8006848:	ee08 0a10 	vmov	s16, r0
 800684c:	e7e7      	b.n	800681e <_dtoa_r+0xb26>
 800684e:	9b02      	ldr	r3, [sp, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	bfc8      	it	gt
 8006854:	461d      	movgt	r5, r3
 8006856:	9b01      	ldr	r3, [sp, #4]
 8006858:	bfd8      	it	le
 800685a:	2501      	movle	r5, #1
 800685c:	441d      	add	r5, r3
 800685e:	f04f 0800 	mov.w	r8, #0
 8006862:	ee18 1a10 	vmov	r1, s16
 8006866:	2201      	movs	r2, #1
 8006868:	4620      	mov	r0, r4
 800686a:	f000 fa5f 	bl	8006d2c <__lshift>
 800686e:	4631      	mov	r1, r6
 8006870:	ee08 0a10 	vmov	s16, r0
 8006874:	f000 faca 	bl	8006e0c <__mcmp>
 8006878:	2800      	cmp	r0, #0
 800687a:	dc91      	bgt.n	80067a0 <_dtoa_r+0xaa8>
 800687c:	d102      	bne.n	8006884 <_dtoa_r+0xb8c>
 800687e:	f01a 0f01 	tst.w	sl, #1
 8006882:	d18d      	bne.n	80067a0 <_dtoa_r+0xaa8>
 8006884:	462b      	mov	r3, r5
 8006886:	461d      	mov	r5, r3
 8006888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800688c:	2a30      	cmp	r2, #48	; 0x30
 800688e:	d0fa      	beq.n	8006886 <_dtoa_r+0xb8e>
 8006890:	e6d7      	b.n	8006642 <_dtoa_r+0x94a>
 8006892:	9a01      	ldr	r2, [sp, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	d184      	bne.n	80067a2 <_dtoa_r+0xaaa>
 8006898:	9b00      	ldr	r3, [sp, #0]
 800689a:	3301      	adds	r3, #1
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	2331      	movs	r3, #49	; 0x31
 80068a0:	7013      	strb	r3, [r2, #0]
 80068a2:	e6ce      	b.n	8006642 <_dtoa_r+0x94a>
 80068a4:	4b09      	ldr	r3, [pc, #36]	; (80068cc <_dtoa_r+0xbd4>)
 80068a6:	f7ff ba95 	b.w	8005dd4 <_dtoa_r+0xdc>
 80068aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f47f aa6e 	bne.w	8005d8e <_dtoa_r+0x96>
 80068b2:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <_dtoa_r+0xbd8>)
 80068b4:	f7ff ba8e 	b.w	8005dd4 <_dtoa_r+0xdc>
 80068b8:	9b02      	ldr	r3, [sp, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	dcae      	bgt.n	800681c <_dtoa_r+0xb24>
 80068be:	9b06      	ldr	r3, [sp, #24]
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	f73f aea8 	bgt.w	8006616 <_dtoa_r+0x91e>
 80068c6:	e7a9      	b.n	800681c <_dtoa_r+0xb24>
 80068c8:	0800828b 	.word	0x0800828b
 80068cc:	080081e8 	.word	0x080081e8
 80068d0:	0800820c 	.word	0x0800820c

080068d4 <_localeconv_r>:
 80068d4:	4800      	ldr	r0, [pc, #0]	; (80068d8 <_localeconv_r+0x4>)
 80068d6:	4770      	bx	lr
 80068d8:	20000164 	.word	0x20000164

080068dc <malloc>:
 80068dc:	4b02      	ldr	r3, [pc, #8]	; (80068e8 <malloc+0xc>)
 80068de:	4601      	mov	r1, r0
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	f000 bc17 	b.w	8007114 <_malloc_r>
 80068e6:	bf00      	nop
 80068e8:	20000010 	.word	0x20000010

080068ec <memcpy>:
 80068ec:	440a      	add	r2, r1
 80068ee:	4291      	cmp	r1, r2
 80068f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80068f4:	d100      	bne.n	80068f8 <memcpy+0xc>
 80068f6:	4770      	bx	lr
 80068f8:	b510      	push	{r4, lr}
 80068fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006902:	4291      	cmp	r1, r2
 8006904:	d1f9      	bne.n	80068fa <memcpy+0xe>
 8006906:	bd10      	pop	{r4, pc}

08006908 <_Balloc>:
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800690c:	4604      	mov	r4, r0
 800690e:	460d      	mov	r5, r1
 8006910:	b976      	cbnz	r6, 8006930 <_Balloc+0x28>
 8006912:	2010      	movs	r0, #16
 8006914:	f7ff ffe2 	bl	80068dc <malloc>
 8006918:	4602      	mov	r2, r0
 800691a:	6260      	str	r0, [r4, #36]	; 0x24
 800691c:	b920      	cbnz	r0, 8006928 <_Balloc+0x20>
 800691e:	4b18      	ldr	r3, [pc, #96]	; (8006980 <_Balloc+0x78>)
 8006920:	4818      	ldr	r0, [pc, #96]	; (8006984 <_Balloc+0x7c>)
 8006922:	2166      	movs	r1, #102	; 0x66
 8006924:	f000 fdd6 	bl	80074d4 <__assert_func>
 8006928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800692c:	6006      	str	r6, [r0, #0]
 800692e:	60c6      	str	r6, [r0, #12]
 8006930:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006932:	68f3      	ldr	r3, [r6, #12]
 8006934:	b183      	cbz	r3, 8006958 <_Balloc+0x50>
 8006936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800693e:	b9b8      	cbnz	r0, 8006970 <_Balloc+0x68>
 8006940:	2101      	movs	r1, #1
 8006942:	fa01 f605 	lsl.w	r6, r1, r5
 8006946:	1d72      	adds	r2, r6, #5
 8006948:	0092      	lsls	r2, r2, #2
 800694a:	4620      	mov	r0, r4
 800694c:	f000 fb60 	bl	8007010 <_calloc_r>
 8006950:	b160      	cbz	r0, 800696c <_Balloc+0x64>
 8006952:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006956:	e00e      	b.n	8006976 <_Balloc+0x6e>
 8006958:	2221      	movs	r2, #33	; 0x21
 800695a:	2104      	movs	r1, #4
 800695c:	4620      	mov	r0, r4
 800695e:	f000 fb57 	bl	8007010 <_calloc_r>
 8006962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006964:	60f0      	str	r0, [r6, #12]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e4      	bne.n	8006936 <_Balloc+0x2e>
 800696c:	2000      	movs	r0, #0
 800696e:	bd70      	pop	{r4, r5, r6, pc}
 8006970:	6802      	ldr	r2, [r0, #0]
 8006972:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006976:	2300      	movs	r3, #0
 8006978:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800697c:	e7f7      	b.n	800696e <_Balloc+0x66>
 800697e:	bf00      	nop
 8006980:	08008219 	.word	0x08008219
 8006984:	0800829c 	.word	0x0800829c

08006988 <_Bfree>:
 8006988:	b570      	push	{r4, r5, r6, lr}
 800698a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800698c:	4605      	mov	r5, r0
 800698e:	460c      	mov	r4, r1
 8006990:	b976      	cbnz	r6, 80069b0 <_Bfree+0x28>
 8006992:	2010      	movs	r0, #16
 8006994:	f7ff ffa2 	bl	80068dc <malloc>
 8006998:	4602      	mov	r2, r0
 800699a:	6268      	str	r0, [r5, #36]	; 0x24
 800699c:	b920      	cbnz	r0, 80069a8 <_Bfree+0x20>
 800699e:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <_Bfree+0x3c>)
 80069a0:	4809      	ldr	r0, [pc, #36]	; (80069c8 <_Bfree+0x40>)
 80069a2:	218a      	movs	r1, #138	; 0x8a
 80069a4:	f000 fd96 	bl	80074d4 <__assert_func>
 80069a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069ac:	6006      	str	r6, [r0, #0]
 80069ae:	60c6      	str	r6, [r0, #12]
 80069b0:	b13c      	cbz	r4, 80069c2 <_Bfree+0x3a>
 80069b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069b4:	6862      	ldr	r2, [r4, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069bc:	6021      	str	r1, [r4, #0]
 80069be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069c2:	bd70      	pop	{r4, r5, r6, pc}
 80069c4:	08008219 	.word	0x08008219
 80069c8:	0800829c 	.word	0x0800829c

080069cc <__multadd>:
 80069cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d0:	690d      	ldr	r5, [r1, #16]
 80069d2:	4607      	mov	r7, r0
 80069d4:	460c      	mov	r4, r1
 80069d6:	461e      	mov	r6, r3
 80069d8:	f101 0c14 	add.w	ip, r1, #20
 80069dc:	2000      	movs	r0, #0
 80069de:	f8dc 3000 	ldr.w	r3, [ip]
 80069e2:	b299      	uxth	r1, r3
 80069e4:	fb02 6101 	mla	r1, r2, r1, r6
 80069e8:	0c1e      	lsrs	r6, r3, #16
 80069ea:	0c0b      	lsrs	r3, r1, #16
 80069ec:	fb02 3306 	mla	r3, r2, r6, r3
 80069f0:	b289      	uxth	r1, r1
 80069f2:	3001      	adds	r0, #1
 80069f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069f8:	4285      	cmp	r5, r0
 80069fa:	f84c 1b04 	str.w	r1, [ip], #4
 80069fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a02:	dcec      	bgt.n	80069de <__multadd+0x12>
 8006a04:	b30e      	cbz	r6, 8006a4a <__multadd+0x7e>
 8006a06:	68a3      	ldr	r3, [r4, #8]
 8006a08:	42ab      	cmp	r3, r5
 8006a0a:	dc19      	bgt.n	8006a40 <__multadd+0x74>
 8006a0c:	6861      	ldr	r1, [r4, #4]
 8006a0e:	4638      	mov	r0, r7
 8006a10:	3101      	adds	r1, #1
 8006a12:	f7ff ff79 	bl	8006908 <_Balloc>
 8006a16:	4680      	mov	r8, r0
 8006a18:	b928      	cbnz	r0, 8006a26 <__multadd+0x5a>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	4b0c      	ldr	r3, [pc, #48]	; (8006a50 <__multadd+0x84>)
 8006a1e:	480d      	ldr	r0, [pc, #52]	; (8006a54 <__multadd+0x88>)
 8006a20:	21b5      	movs	r1, #181	; 0xb5
 8006a22:	f000 fd57 	bl	80074d4 <__assert_func>
 8006a26:	6922      	ldr	r2, [r4, #16]
 8006a28:	3202      	adds	r2, #2
 8006a2a:	f104 010c 	add.w	r1, r4, #12
 8006a2e:	0092      	lsls	r2, r2, #2
 8006a30:	300c      	adds	r0, #12
 8006a32:	f7ff ff5b 	bl	80068ec <memcpy>
 8006a36:	4621      	mov	r1, r4
 8006a38:	4638      	mov	r0, r7
 8006a3a:	f7ff ffa5 	bl	8006988 <_Bfree>
 8006a3e:	4644      	mov	r4, r8
 8006a40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a44:	3501      	adds	r5, #1
 8006a46:	615e      	str	r6, [r3, #20]
 8006a48:	6125      	str	r5, [r4, #16]
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a50:	0800828b 	.word	0x0800828b
 8006a54:	0800829c 	.word	0x0800829c

08006a58 <__hi0bits>:
 8006a58:	0c03      	lsrs	r3, r0, #16
 8006a5a:	041b      	lsls	r3, r3, #16
 8006a5c:	b9d3      	cbnz	r3, 8006a94 <__hi0bits+0x3c>
 8006a5e:	0400      	lsls	r0, r0, #16
 8006a60:	2310      	movs	r3, #16
 8006a62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a66:	bf04      	itt	eq
 8006a68:	0200      	lsleq	r0, r0, #8
 8006a6a:	3308      	addeq	r3, #8
 8006a6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a70:	bf04      	itt	eq
 8006a72:	0100      	lsleq	r0, r0, #4
 8006a74:	3304      	addeq	r3, #4
 8006a76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a7a:	bf04      	itt	eq
 8006a7c:	0080      	lsleq	r0, r0, #2
 8006a7e:	3302      	addeq	r3, #2
 8006a80:	2800      	cmp	r0, #0
 8006a82:	db05      	blt.n	8006a90 <__hi0bits+0x38>
 8006a84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a88:	f103 0301 	add.w	r3, r3, #1
 8006a8c:	bf08      	it	eq
 8006a8e:	2320      	moveq	r3, #32
 8006a90:	4618      	mov	r0, r3
 8006a92:	4770      	bx	lr
 8006a94:	2300      	movs	r3, #0
 8006a96:	e7e4      	b.n	8006a62 <__hi0bits+0xa>

08006a98 <__lo0bits>:
 8006a98:	6803      	ldr	r3, [r0, #0]
 8006a9a:	f013 0207 	ands.w	r2, r3, #7
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	d00b      	beq.n	8006aba <__lo0bits+0x22>
 8006aa2:	07da      	lsls	r2, r3, #31
 8006aa4:	d423      	bmi.n	8006aee <__lo0bits+0x56>
 8006aa6:	0798      	lsls	r0, r3, #30
 8006aa8:	bf49      	itett	mi
 8006aaa:	085b      	lsrmi	r3, r3, #1
 8006aac:	089b      	lsrpl	r3, r3, #2
 8006aae:	2001      	movmi	r0, #1
 8006ab0:	600b      	strmi	r3, [r1, #0]
 8006ab2:	bf5c      	itt	pl
 8006ab4:	600b      	strpl	r3, [r1, #0]
 8006ab6:	2002      	movpl	r0, #2
 8006ab8:	4770      	bx	lr
 8006aba:	b298      	uxth	r0, r3
 8006abc:	b9a8      	cbnz	r0, 8006aea <__lo0bits+0x52>
 8006abe:	0c1b      	lsrs	r3, r3, #16
 8006ac0:	2010      	movs	r0, #16
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	b90a      	cbnz	r2, 8006aca <__lo0bits+0x32>
 8006ac6:	3008      	adds	r0, #8
 8006ac8:	0a1b      	lsrs	r3, r3, #8
 8006aca:	071a      	lsls	r2, r3, #28
 8006acc:	bf04      	itt	eq
 8006ace:	091b      	lsreq	r3, r3, #4
 8006ad0:	3004      	addeq	r0, #4
 8006ad2:	079a      	lsls	r2, r3, #30
 8006ad4:	bf04      	itt	eq
 8006ad6:	089b      	lsreq	r3, r3, #2
 8006ad8:	3002      	addeq	r0, #2
 8006ada:	07da      	lsls	r2, r3, #31
 8006adc:	d403      	bmi.n	8006ae6 <__lo0bits+0x4e>
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	f100 0001 	add.w	r0, r0, #1
 8006ae4:	d005      	beq.n	8006af2 <__lo0bits+0x5a>
 8006ae6:	600b      	str	r3, [r1, #0]
 8006ae8:	4770      	bx	lr
 8006aea:	4610      	mov	r0, r2
 8006aec:	e7e9      	b.n	8006ac2 <__lo0bits+0x2a>
 8006aee:	2000      	movs	r0, #0
 8006af0:	4770      	bx	lr
 8006af2:	2020      	movs	r0, #32
 8006af4:	4770      	bx	lr
	...

08006af8 <__i2b>:
 8006af8:	b510      	push	{r4, lr}
 8006afa:	460c      	mov	r4, r1
 8006afc:	2101      	movs	r1, #1
 8006afe:	f7ff ff03 	bl	8006908 <_Balloc>
 8006b02:	4602      	mov	r2, r0
 8006b04:	b928      	cbnz	r0, 8006b12 <__i2b+0x1a>
 8006b06:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <__i2b+0x24>)
 8006b08:	4805      	ldr	r0, [pc, #20]	; (8006b20 <__i2b+0x28>)
 8006b0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b0e:	f000 fce1 	bl	80074d4 <__assert_func>
 8006b12:	2301      	movs	r3, #1
 8006b14:	6144      	str	r4, [r0, #20]
 8006b16:	6103      	str	r3, [r0, #16]
 8006b18:	bd10      	pop	{r4, pc}
 8006b1a:	bf00      	nop
 8006b1c:	0800828b 	.word	0x0800828b
 8006b20:	0800829c 	.word	0x0800829c

08006b24 <__multiply>:
 8006b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b28:	4691      	mov	r9, r2
 8006b2a:	690a      	ldr	r2, [r1, #16]
 8006b2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	bfb8      	it	lt
 8006b34:	460b      	movlt	r3, r1
 8006b36:	460c      	mov	r4, r1
 8006b38:	bfbc      	itt	lt
 8006b3a:	464c      	movlt	r4, r9
 8006b3c:	4699      	movlt	r9, r3
 8006b3e:	6927      	ldr	r7, [r4, #16]
 8006b40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b44:	68a3      	ldr	r3, [r4, #8]
 8006b46:	6861      	ldr	r1, [r4, #4]
 8006b48:	eb07 060a 	add.w	r6, r7, sl
 8006b4c:	42b3      	cmp	r3, r6
 8006b4e:	b085      	sub	sp, #20
 8006b50:	bfb8      	it	lt
 8006b52:	3101      	addlt	r1, #1
 8006b54:	f7ff fed8 	bl	8006908 <_Balloc>
 8006b58:	b930      	cbnz	r0, 8006b68 <__multiply+0x44>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	4b44      	ldr	r3, [pc, #272]	; (8006c70 <__multiply+0x14c>)
 8006b5e:	4845      	ldr	r0, [pc, #276]	; (8006c74 <__multiply+0x150>)
 8006b60:	f240 115d 	movw	r1, #349	; 0x15d
 8006b64:	f000 fcb6 	bl	80074d4 <__assert_func>
 8006b68:	f100 0514 	add.w	r5, r0, #20
 8006b6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b70:	462b      	mov	r3, r5
 8006b72:	2200      	movs	r2, #0
 8006b74:	4543      	cmp	r3, r8
 8006b76:	d321      	bcc.n	8006bbc <__multiply+0x98>
 8006b78:	f104 0314 	add.w	r3, r4, #20
 8006b7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b80:	f109 0314 	add.w	r3, r9, #20
 8006b84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b88:	9202      	str	r2, [sp, #8]
 8006b8a:	1b3a      	subs	r2, r7, r4
 8006b8c:	3a15      	subs	r2, #21
 8006b8e:	f022 0203 	bic.w	r2, r2, #3
 8006b92:	3204      	adds	r2, #4
 8006b94:	f104 0115 	add.w	r1, r4, #21
 8006b98:	428f      	cmp	r7, r1
 8006b9a:	bf38      	it	cc
 8006b9c:	2204      	movcc	r2, #4
 8006b9e:	9201      	str	r2, [sp, #4]
 8006ba0:	9a02      	ldr	r2, [sp, #8]
 8006ba2:	9303      	str	r3, [sp, #12]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d80c      	bhi.n	8006bc2 <__multiply+0x9e>
 8006ba8:	2e00      	cmp	r6, #0
 8006baa:	dd03      	ble.n	8006bb4 <__multiply+0x90>
 8006bac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d05a      	beq.n	8006c6a <__multiply+0x146>
 8006bb4:	6106      	str	r6, [r0, #16]
 8006bb6:	b005      	add	sp, #20
 8006bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bbc:	f843 2b04 	str.w	r2, [r3], #4
 8006bc0:	e7d8      	b.n	8006b74 <__multiply+0x50>
 8006bc2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006bc6:	f1ba 0f00 	cmp.w	sl, #0
 8006bca:	d024      	beq.n	8006c16 <__multiply+0xf2>
 8006bcc:	f104 0e14 	add.w	lr, r4, #20
 8006bd0:	46a9      	mov	r9, r5
 8006bd2:	f04f 0c00 	mov.w	ip, #0
 8006bd6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006bda:	f8d9 1000 	ldr.w	r1, [r9]
 8006bde:	fa1f fb82 	uxth.w	fp, r2
 8006be2:	b289      	uxth	r1, r1
 8006be4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006be8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006bec:	f8d9 2000 	ldr.w	r2, [r9]
 8006bf0:	4461      	add	r1, ip
 8006bf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bf6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006bfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006bfe:	b289      	uxth	r1, r1
 8006c00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c04:	4577      	cmp	r7, lr
 8006c06:	f849 1b04 	str.w	r1, [r9], #4
 8006c0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c0e:	d8e2      	bhi.n	8006bd6 <__multiply+0xb2>
 8006c10:	9a01      	ldr	r2, [sp, #4]
 8006c12:	f845 c002 	str.w	ip, [r5, r2]
 8006c16:	9a03      	ldr	r2, [sp, #12]
 8006c18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	f1b9 0f00 	cmp.w	r9, #0
 8006c22:	d020      	beq.n	8006c66 <__multiply+0x142>
 8006c24:	6829      	ldr	r1, [r5, #0]
 8006c26:	f104 0c14 	add.w	ip, r4, #20
 8006c2a:	46ae      	mov	lr, r5
 8006c2c:	f04f 0a00 	mov.w	sl, #0
 8006c30:	f8bc b000 	ldrh.w	fp, [ip]
 8006c34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c38:	fb09 220b 	mla	r2, r9, fp, r2
 8006c3c:	4492      	add	sl, r2
 8006c3e:	b289      	uxth	r1, r1
 8006c40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006c44:	f84e 1b04 	str.w	r1, [lr], #4
 8006c48:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006c4c:	f8be 1000 	ldrh.w	r1, [lr]
 8006c50:	0c12      	lsrs	r2, r2, #16
 8006c52:	fb09 1102 	mla	r1, r9, r2, r1
 8006c56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006c5a:	4567      	cmp	r7, ip
 8006c5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c60:	d8e6      	bhi.n	8006c30 <__multiply+0x10c>
 8006c62:	9a01      	ldr	r2, [sp, #4]
 8006c64:	50a9      	str	r1, [r5, r2]
 8006c66:	3504      	adds	r5, #4
 8006c68:	e79a      	b.n	8006ba0 <__multiply+0x7c>
 8006c6a:	3e01      	subs	r6, #1
 8006c6c:	e79c      	b.n	8006ba8 <__multiply+0x84>
 8006c6e:	bf00      	nop
 8006c70:	0800828b 	.word	0x0800828b
 8006c74:	0800829c 	.word	0x0800829c

08006c78 <__pow5mult>:
 8006c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c7c:	4615      	mov	r5, r2
 8006c7e:	f012 0203 	ands.w	r2, r2, #3
 8006c82:	4606      	mov	r6, r0
 8006c84:	460f      	mov	r7, r1
 8006c86:	d007      	beq.n	8006c98 <__pow5mult+0x20>
 8006c88:	4c25      	ldr	r4, [pc, #148]	; (8006d20 <__pow5mult+0xa8>)
 8006c8a:	3a01      	subs	r2, #1
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c92:	f7ff fe9b 	bl	80069cc <__multadd>
 8006c96:	4607      	mov	r7, r0
 8006c98:	10ad      	asrs	r5, r5, #2
 8006c9a:	d03d      	beq.n	8006d18 <__pow5mult+0xa0>
 8006c9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c9e:	b97c      	cbnz	r4, 8006cc0 <__pow5mult+0x48>
 8006ca0:	2010      	movs	r0, #16
 8006ca2:	f7ff fe1b 	bl	80068dc <malloc>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	6270      	str	r0, [r6, #36]	; 0x24
 8006caa:	b928      	cbnz	r0, 8006cb8 <__pow5mult+0x40>
 8006cac:	4b1d      	ldr	r3, [pc, #116]	; (8006d24 <__pow5mult+0xac>)
 8006cae:	481e      	ldr	r0, [pc, #120]	; (8006d28 <__pow5mult+0xb0>)
 8006cb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006cb4:	f000 fc0e 	bl	80074d4 <__assert_func>
 8006cb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cbc:	6004      	str	r4, [r0, #0]
 8006cbe:	60c4      	str	r4, [r0, #12]
 8006cc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006cc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cc8:	b94c      	cbnz	r4, 8006cde <__pow5mult+0x66>
 8006cca:	f240 2171 	movw	r1, #625	; 0x271
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f7ff ff12 	bl	8006af8 <__i2b>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cda:	4604      	mov	r4, r0
 8006cdc:	6003      	str	r3, [r0, #0]
 8006cde:	f04f 0900 	mov.w	r9, #0
 8006ce2:	07eb      	lsls	r3, r5, #31
 8006ce4:	d50a      	bpl.n	8006cfc <__pow5mult+0x84>
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	4622      	mov	r2, r4
 8006cea:	4630      	mov	r0, r6
 8006cec:	f7ff ff1a 	bl	8006b24 <__multiply>
 8006cf0:	4639      	mov	r1, r7
 8006cf2:	4680      	mov	r8, r0
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7ff fe47 	bl	8006988 <_Bfree>
 8006cfa:	4647      	mov	r7, r8
 8006cfc:	106d      	asrs	r5, r5, #1
 8006cfe:	d00b      	beq.n	8006d18 <__pow5mult+0xa0>
 8006d00:	6820      	ldr	r0, [r4, #0]
 8006d02:	b938      	cbnz	r0, 8006d14 <__pow5mult+0x9c>
 8006d04:	4622      	mov	r2, r4
 8006d06:	4621      	mov	r1, r4
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7ff ff0b 	bl	8006b24 <__multiply>
 8006d0e:	6020      	str	r0, [r4, #0]
 8006d10:	f8c0 9000 	str.w	r9, [r0]
 8006d14:	4604      	mov	r4, r0
 8006d16:	e7e4      	b.n	8006ce2 <__pow5mult+0x6a>
 8006d18:	4638      	mov	r0, r7
 8006d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d1e:	bf00      	nop
 8006d20:	080083e8 	.word	0x080083e8
 8006d24:	08008219 	.word	0x08008219
 8006d28:	0800829c 	.word	0x0800829c

08006d2c <__lshift>:
 8006d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d30:	460c      	mov	r4, r1
 8006d32:	6849      	ldr	r1, [r1, #4]
 8006d34:	6923      	ldr	r3, [r4, #16]
 8006d36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d3a:	68a3      	ldr	r3, [r4, #8]
 8006d3c:	4607      	mov	r7, r0
 8006d3e:	4691      	mov	r9, r2
 8006d40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d44:	f108 0601 	add.w	r6, r8, #1
 8006d48:	42b3      	cmp	r3, r6
 8006d4a:	db0b      	blt.n	8006d64 <__lshift+0x38>
 8006d4c:	4638      	mov	r0, r7
 8006d4e:	f7ff fddb 	bl	8006908 <_Balloc>
 8006d52:	4605      	mov	r5, r0
 8006d54:	b948      	cbnz	r0, 8006d6a <__lshift+0x3e>
 8006d56:	4602      	mov	r2, r0
 8006d58:	4b2a      	ldr	r3, [pc, #168]	; (8006e04 <__lshift+0xd8>)
 8006d5a:	482b      	ldr	r0, [pc, #172]	; (8006e08 <__lshift+0xdc>)
 8006d5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d60:	f000 fbb8 	bl	80074d4 <__assert_func>
 8006d64:	3101      	adds	r1, #1
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	e7ee      	b.n	8006d48 <__lshift+0x1c>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	f100 0114 	add.w	r1, r0, #20
 8006d70:	f100 0210 	add.w	r2, r0, #16
 8006d74:	4618      	mov	r0, r3
 8006d76:	4553      	cmp	r3, sl
 8006d78:	db37      	blt.n	8006dea <__lshift+0xbe>
 8006d7a:	6920      	ldr	r0, [r4, #16]
 8006d7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d80:	f104 0314 	add.w	r3, r4, #20
 8006d84:	f019 091f 	ands.w	r9, r9, #31
 8006d88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006d90:	d02f      	beq.n	8006df2 <__lshift+0xc6>
 8006d92:	f1c9 0e20 	rsb	lr, r9, #32
 8006d96:	468a      	mov	sl, r1
 8006d98:	f04f 0c00 	mov.w	ip, #0
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	fa02 f209 	lsl.w	r2, r2, r9
 8006da2:	ea42 020c 	orr.w	r2, r2, ip
 8006da6:	f84a 2b04 	str.w	r2, [sl], #4
 8006daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dae:	4298      	cmp	r0, r3
 8006db0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006db4:	d8f2      	bhi.n	8006d9c <__lshift+0x70>
 8006db6:	1b03      	subs	r3, r0, r4
 8006db8:	3b15      	subs	r3, #21
 8006dba:	f023 0303 	bic.w	r3, r3, #3
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	f104 0215 	add.w	r2, r4, #21
 8006dc4:	4290      	cmp	r0, r2
 8006dc6:	bf38      	it	cc
 8006dc8:	2304      	movcc	r3, #4
 8006dca:	f841 c003 	str.w	ip, [r1, r3]
 8006dce:	f1bc 0f00 	cmp.w	ip, #0
 8006dd2:	d001      	beq.n	8006dd8 <__lshift+0xac>
 8006dd4:	f108 0602 	add.w	r6, r8, #2
 8006dd8:	3e01      	subs	r6, #1
 8006dda:	4638      	mov	r0, r7
 8006ddc:	612e      	str	r6, [r5, #16]
 8006dde:	4621      	mov	r1, r4
 8006de0:	f7ff fdd2 	bl	8006988 <_Bfree>
 8006de4:	4628      	mov	r0, r5
 8006de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dea:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dee:	3301      	adds	r3, #1
 8006df0:	e7c1      	b.n	8006d76 <__lshift+0x4a>
 8006df2:	3904      	subs	r1, #4
 8006df4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006df8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006dfc:	4298      	cmp	r0, r3
 8006dfe:	d8f9      	bhi.n	8006df4 <__lshift+0xc8>
 8006e00:	e7ea      	b.n	8006dd8 <__lshift+0xac>
 8006e02:	bf00      	nop
 8006e04:	0800828b 	.word	0x0800828b
 8006e08:	0800829c 	.word	0x0800829c

08006e0c <__mcmp>:
 8006e0c:	b530      	push	{r4, r5, lr}
 8006e0e:	6902      	ldr	r2, [r0, #16]
 8006e10:	690c      	ldr	r4, [r1, #16]
 8006e12:	1b12      	subs	r2, r2, r4
 8006e14:	d10e      	bne.n	8006e34 <__mcmp+0x28>
 8006e16:	f100 0314 	add.w	r3, r0, #20
 8006e1a:	3114      	adds	r1, #20
 8006e1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e2c:	42a5      	cmp	r5, r4
 8006e2e:	d003      	beq.n	8006e38 <__mcmp+0x2c>
 8006e30:	d305      	bcc.n	8006e3e <__mcmp+0x32>
 8006e32:	2201      	movs	r2, #1
 8006e34:	4610      	mov	r0, r2
 8006e36:	bd30      	pop	{r4, r5, pc}
 8006e38:	4283      	cmp	r3, r0
 8006e3a:	d3f3      	bcc.n	8006e24 <__mcmp+0x18>
 8006e3c:	e7fa      	b.n	8006e34 <__mcmp+0x28>
 8006e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e42:	e7f7      	b.n	8006e34 <__mcmp+0x28>

08006e44 <__mdiff>:
 8006e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e48:	460c      	mov	r4, r1
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	4620      	mov	r0, r4
 8006e50:	4690      	mov	r8, r2
 8006e52:	f7ff ffdb 	bl	8006e0c <__mcmp>
 8006e56:	1e05      	subs	r5, r0, #0
 8006e58:	d110      	bne.n	8006e7c <__mdiff+0x38>
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f7ff fd53 	bl	8006908 <_Balloc>
 8006e62:	b930      	cbnz	r0, 8006e72 <__mdiff+0x2e>
 8006e64:	4b3a      	ldr	r3, [pc, #232]	; (8006f50 <__mdiff+0x10c>)
 8006e66:	4602      	mov	r2, r0
 8006e68:	f240 2132 	movw	r1, #562	; 0x232
 8006e6c:	4839      	ldr	r0, [pc, #228]	; (8006f54 <__mdiff+0x110>)
 8006e6e:	f000 fb31 	bl	80074d4 <__assert_func>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e7c:	bfa4      	itt	ge
 8006e7e:	4643      	movge	r3, r8
 8006e80:	46a0      	movge	r8, r4
 8006e82:	4630      	mov	r0, r6
 8006e84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e88:	bfa6      	itte	ge
 8006e8a:	461c      	movge	r4, r3
 8006e8c:	2500      	movge	r5, #0
 8006e8e:	2501      	movlt	r5, #1
 8006e90:	f7ff fd3a 	bl	8006908 <_Balloc>
 8006e94:	b920      	cbnz	r0, 8006ea0 <__mdiff+0x5c>
 8006e96:	4b2e      	ldr	r3, [pc, #184]	; (8006f50 <__mdiff+0x10c>)
 8006e98:	4602      	mov	r2, r0
 8006e9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e9e:	e7e5      	b.n	8006e6c <__mdiff+0x28>
 8006ea0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006ea4:	6926      	ldr	r6, [r4, #16]
 8006ea6:	60c5      	str	r5, [r0, #12]
 8006ea8:	f104 0914 	add.w	r9, r4, #20
 8006eac:	f108 0514 	add.w	r5, r8, #20
 8006eb0:	f100 0e14 	add.w	lr, r0, #20
 8006eb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006eb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ebc:	f108 0210 	add.w	r2, r8, #16
 8006ec0:	46f2      	mov	sl, lr
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ec8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ecc:	fa1f f883 	uxth.w	r8, r3
 8006ed0:	fa11 f18b 	uxtah	r1, r1, fp
 8006ed4:	0c1b      	lsrs	r3, r3, #16
 8006ed6:	eba1 0808 	sub.w	r8, r1, r8
 8006eda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ede:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ee2:	fa1f f888 	uxth.w	r8, r8
 8006ee6:	1419      	asrs	r1, r3, #16
 8006ee8:	454e      	cmp	r6, r9
 8006eea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006eee:	f84a 3b04 	str.w	r3, [sl], #4
 8006ef2:	d8e7      	bhi.n	8006ec4 <__mdiff+0x80>
 8006ef4:	1b33      	subs	r3, r6, r4
 8006ef6:	3b15      	subs	r3, #21
 8006ef8:	f023 0303 	bic.w	r3, r3, #3
 8006efc:	3304      	adds	r3, #4
 8006efe:	3415      	adds	r4, #21
 8006f00:	42a6      	cmp	r6, r4
 8006f02:	bf38      	it	cc
 8006f04:	2304      	movcc	r3, #4
 8006f06:	441d      	add	r5, r3
 8006f08:	4473      	add	r3, lr
 8006f0a:	469e      	mov	lr, r3
 8006f0c:	462e      	mov	r6, r5
 8006f0e:	4566      	cmp	r6, ip
 8006f10:	d30e      	bcc.n	8006f30 <__mdiff+0xec>
 8006f12:	f10c 0203 	add.w	r2, ip, #3
 8006f16:	1b52      	subs	r2, r2, r5
 8006f18:	f022 0203 	bic.w	r2, r2, #3
 8006f1c:	3d03      	subs	r5, #3
 8006f1e:	45ac      	cmp	ip, r5
 8006f20:	bf38      	it	cc
 8006f22:	2200      	movcc	r2, #0
 8006f24:	441a      	add	r2, r3
 8006f26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f2a:	b17b      	cbz	r3, 8006f4c <__mdiff+0x108>
 8006f2c:	6107      	str	r7, [r0, #16]
 8006f2e:	e7a3      	b.n	8006e78 <__mdiff+0x34>
 8006f30:	f856 8b04 	ldr.w	r8, [r6], #4
 8006f34:	fa11 f288 	uxtah	r2, r1, r8
 8006f38:	1414      	asrs	r4, r2, #16
 8006f3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f3e:	b292      	uxth	r2, r2
 8006f40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f44:	f84e 2b04 	str.w	r2, [lr], #4
 8006f48:	1421      	asrs	r1, r4, #16
 8006f4a:	e7e0      	b.n	8006f0e <__mdiff+0xca>
 8006f4c:	3f01      	subs	r7, #1
 8006f4e:	e7ea      	b.n	8006f26 <__mdiff+0xe2>
 8006f50:	0800828b 	.word	0x0800828b
 8006f54:	0800829c 	.word	0x0800829c

08006f58 <__d2b>:
 8006f58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f5c:	4689      	mov	r9, r1
 8006f5e:	2101      	movs	r1, #1
 8006f60:	ec57 6b10 	vmov	r6, r7, d0
 8006f64:	4690      	mov	r8, r2
 8006f66:	f7ff fccf 	bl	8006908 <_Balloc>
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	b930      	cbnz	r0, 8006f7c <__d2b+0x24>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	4b25      	ldr	r3, [pc, #148]	; (8007008 <__d2b+0xb0>)
 8006f72:	4826      	ldr	r0, [pc, #152]	; (800700c <__d2b+0xb4>)
 8006f74:	f240 310a 	movw	r1, #778	; 0x30a
 8006f78:	f000 faac 	bl	80074d4 <__assert_func>
 8006f7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006f80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f84:	bb35      	cbnz	r5, 8006fd4 <__d2b+0x7c>
 8006f86:	2e00      	cmp	r6, #0
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	d028      	beq.n	8006fde <__d2b+0x86>
 8006f8c:	4668      	mov	r0, sp
 8006f8e:	9600      	str	r6, [sp, #0]
 8006f90:	f7ff fd82 	bl	8006a98 <__lo0bits>
 8006f94:	9900      	ldr	r1, [sp, #0]
 8006f96:	b300      	cbz	r0, 8006fda <__d2b+0x82>
 8006f98:	9a01      	ldr	r2, [sp, #4]
 8006f9a:	f1c0 0320 	rsb	r3, r0, #32
 8006f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa2:	430b      	orrs	r3, r1
 8006fa4:	40c2      	lsrs	r2, r0
 8006fa6:	6163      	str	r3, [r4, #20]
 8006fa8:	9201      	str	r2, [sp, #4]
 8006faa:	9b01      	ldr	r3, [sp, #4]
 8006fac:	61a3      	str	r3, [r4, #24]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bf14      	ite	ne
 8006fb2:	2202      	movne	r2, #2
 8006fb4:	2201      	moveq	r2, #1
 8006fb6:	6122      	str	r2, [r4, #16]
 8006fb8:	b1d5      	cbz	r5, 8006ff0 <__d2b+0x98>
 8006fba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006fbe:	4405      	add	r5, r0
 8006fc0:	f8c9 5000 	str.w	r5, [r9]
 8006fc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fc8:	f8c8 0000 	str.w	r0, [r8]
 8006fcc:	4620      	mov	r0, r4
 8006fce:	b003      	add	sp, #12
 8006fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fd8:	e7d5      	b.n	8006f86 <__d2b+0x2e>
 8006fda:	6161      	str	r1, [r4, #20]
 8006fdc:	e7e5      	b.n	8006faa <__d2b+0x52>
 8006fde:	a801      	add	r0, sp, #4
 8006fe0:	f7ff fd5a 	bl	8006a98 <__lo0bits>
 8006fe4:	9b01      	ldr	r3, [sp, #4]
 8006fe6:	6163      	str	r3, [r4, #20]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	6122      	str	r2, [r4, #16]
 8006fec:	3020      	adds	r0, #32
 8006fee:	e7e3      	b.n	8006fb8 <__d2b+0x60>
 8006ff0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ff4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ff8:	f8c9 0000 	str.w	r0, [r9]
 8006ffc:	6918      	ldr	r0, [r3, #16]
 8006ffe:	f7ff fd2b 	bl	8006a58 <__hi0bits>
 8007002:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007006:	e7df      	b.n	8006fc8 <__d2b+0x70>
 8007008:	0800828b 	.word	0x0800828b
 800700c:	0800829c 	.word	0x0800829c

08007010 <_calloc_r>:
 8007010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007012:	fba1 2402 	umull	r2, r4, r1, r2
 8007016:	b94c      	cbnz	r4, 800702c <_calloc_r+0x1c>
 8007018:	4611      	mov	r1, r2
 800701a:	9201      	str	r2, [sp, #4]
 800701c:	f000 f87a 	bl	8007114 <_malloc_r>
 8007020:	9a01      	ldr	r2, [sp, #4]
 8007022:	4605      	mov	r5, r0
 8007024:	b930      	cbnz	r0, 8007034 <_calloc_r+0x24>
 8007026:	4628      	mov	r0, r5
 8007028:	b003      	add	sp, #12
 800702a:	bd30      	pop	{r4, r5, pc}
 800702c:	220c      	movs	r2, #12
 800702e:	6002      	str	r2, [r0, #0]
 8007030:	2500      	movs	r5, #0
 8007032:	e7f8      	b.n	8007026 <_calloc_r+0x16>
 8007034:	4621      	mov	r1, r4
 8007036:	f7fe f941 	bl	80052bc <memset>
 800703a:	e7f4      	b.n	8007026 <_calloc_r+0x16>

0800703c <_free_r>:
 800703c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800703e:	2900      	cmp	r1, #0
 8007040:	d044      	beq.n	80070cc <_free_r+0x90>
 8007042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007046:	9001      	str	r0, [sp, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	f1a1 0404 	sub.w	r4, r1, #4
 800704e:	bfb8      	it	lt
 8007050:	18e4      	addlt	r4, r4, r3
 8007052:	f000 fa9b 	bl	800758c <__malloc_lock>
 8007056:	4a1e      	ldr	r2, [pc, #120]	; (80070d0 <_free_r+0x94>)
 8007058:	9801      	ldr	r0, [sp, #4]
 800705a:	6813      	ldr	r3, [r2, #0]
 800705c:	b933      	cbnz	r3, 800706c <_free_r+0x30>
 800705e:	6063      	str	r3, [r4, #4]
 8007060:	6014      	str	r4, [r2, #0]
 8007062:	b003      	add	sp, #12
 8007064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007068:	f000 ba96 	b.w	8007598 <__malloc_unlock>
 800706c:	42a3      	cmp	r3, r4
 800706e:	d908      	bls.n	8007082 <_free_r+0x46>
 8007070:	6825      	ldr	r5, [r4, #0]
 8007072:	1961      	adds	r1, r4, r5
 8007074:	428b      	cmp	r3, r1
 8007076:	bf01      	itttt	eq
 8007078:	6819      	ldreq	r1, [r3, #0]
 800707a:	685b      	ldreq	r3, [r3, #4]
 800707c:	1949      	addeq	r1, r1, r5
 800707e:	6021      	streq	r1, [r4, #0]
 8007080:	e7ed      	b.n	800705e <_free_r+0x22>
 8007082:	461a      	mov	r2, r3
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	b10b      	cbz	r3, 800708c <_free_r+0x50>
 8007088:	42a3      	cmp	r3, r4
 800708a:	d9fa      	bls.n	8007082 <_free_r+0x46>
 800708c:	6811      	ldr	r1, [r2, #0]
 800708e:	1855      	adds	r5, r2, r1
 8007090:	42a5      	cmp	r5, r4
 8007092:	d10b      	bne.n	80070ac <_free_r+0x70>
 8007094:	6824      	ldr	r4, [r4, #0]
 8007096:	4421      	add	r1, r4
 8007098:	1854      	adds	r4, r2, r1
 800709a:	42a3      	cmp	r3, r4
 800709c:	6011      	str	r1, [r2, #0]
 800709e:	d1e0      	bne.n	8007062 <_free_r+0x26>
 80070a0:	681c      	ldr	r4, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	6053      	str	r3, [r2, #4]
 80070a6:	4421      	add	r1, r4
 80070a8:	6011      	str	r1, [r2, #0]
 80070aa:	e7da      	b.n	8007062 <_free_r+0x26>
 80070ac:	d902      	bls.n	80070b4 <_free_r+0x78>
 80070ae:	230c      	movs	r3, #12
 80070b0:	6003      	str	r3, [r0, #0]
 80070b2:	e7d6      	b.n	8007062 <_free_r+0x26>
 80070b4:	6825      	ldr	r5, [r4, #0]
 80070b6:	1961      	adds	r1, r4, r5
 80070b8:	428b      	cmp	r3, r1
 80070ba:	bf04      	itt	eq
 80070bc:	6819      	ldreq	r1, [r3, #0]
 80070be:	685b      	ldreq	r3, [r3, #4]
 80070c0:	6063      	str	r3, [r4, #4]
 80070c2:	bf04      	itt	eq
 80070c4:	1949      	addeq	r1, r1, r5
 80070c6:	6021      	streq	r1, [r4, #0]
 80070c8:	6054      	str	r4, [r2, #4]
 80070ca:	e7ca      	b.n	8007062 <_free_r+0x26>
 80070cc:	b003      	add	sp, #12
 80070ce:	bd30      	pop	{r4, r5, pc}
 80070d0:	2000049c 	.word	0x2000049c

080070d4 <sbrk_aligned>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	4e0e      	ldr	r6, [pc, #56]	; (8007110 <sbrk_aligned+0x3c>)
 80070d8:	460c      	mov	r4, r1
 80070da:	6831      	ldr	r1, [r6, #0]
 80070dc:	4605      	mov	r5, r0
 80070de:	b911      	cbnz	r1, 80070e6 <sbrk_aligned+0x12>
 80070e0:	f000 f9e8 	bl	80074b4 <_sbrk_r>
 80070e4:	6030      	str	r0, [r6, #0]
 80070e6:	4621      	mov	r1, r4
 80070e8:	4628      	mov	r0, r5
 80070ea:	f000 f9e3 	bl	80074b4 <_sbrk_r>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	d00a      	beq.n	8007108 <sbrk_aligned+0x34>
 80070f2:	1cc4      	adds	r4, r0, #3
 80070f4:	f024 0403 	bic.w	r4, r4, #3
 80070f8:	42a0      	cmp	r0, r4
 80070fa:	d007      	beq.n	800710c <sbrk_aligned+0x38>
 80070fc:	1a21      	subs	r1, r4, r0
 80070fe:	4628      	mov	r0, r5
 8007100:	f000 f9d8 	bl	80074b4 <_sbrk_r>
 8007104:	3001      	adds	r0, #1
 8007106:	d101      	bne.n	800710c <sbrk_aligned+0x38>
 8007108:	f04f 34ff 	mov.w	r4, #4294967295
 800710c:	4620      	mov	r0, r4
 800710e:	bd70      	pop	{r4, r5, r6, pc}
 8007110:	200004a0 	.word	0x200004a0

08007114 <_malloc_r>:
 8007114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007118:	1ccd      	adds	r5, r1, #3
 800711a:	f025 0503 	bic.w	r5, r5, #3
 800711e:	3508      	adds	r5, #8
 8007120:	2d0c      	cmp	r5, #12
 8007122:	bf38      	it	cc
 8007124:	250c      	movcc	r5, #12
 8007126:	2d00      	cmp	r5, #0
 8007128:	4607      	mov	r7, r0
 800712a:	db01      	blt.n	8007130 <_malloc_r+0x1c>
 800712c:	42a9      	cmp	r1, r5
 800712e:	d905      	bls.n	800713c <_malloc_r+0x28>
 8007130:	230c      	movs	r3, #12
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	2600      	movs	r6, #0
 8007136:	4630      	mov	r0, r6
 8007138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800713c:	4e2e      	ldr	r6, [pc, #184]	; (80071f8 <_malloc_r+0xe4>)
 800713e:	f000 fa25 	bl	800758c <__malloc_lock>
 8007142:	6833      	ldr	r3, [r6, #0]
 8007144:	461c      	mov	r4, r3
 8007146:	bb34      	cbnz	r4, 8007196 <_malloc_r+0x82>
 8007148:	4629      	mov	r1, r5
 800714a:	4638      	mov	r0, r7
 800714c:	f7ff ffc2 	bl	80070d4 <sbrk_aligned>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	4604      	mov	r4, r0
 8007154:	d14d      	bne.n	80071f2 <_malloc_r+0xde>
 8007156:	6834      	ldr	r4, [r6, #0]
 8007158:	4626      	mov	r6, r4
 800715a:	2e00      	cmp	r6, #0
 800715c:	d140      	bne.n	80071e0 <_malloc_r+0xcc>
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	4631      	mov	r1, r6
 8007162:	4638      	mov	r0, r7
 8007164:	eb04 0803 	add.w	r8, r4, r3
 8007168:	f000 f9a4 	bl	80074b4 <_sbrk_r>
 800716c:	4580      	cmp	r8, r0
 800716e:	d13a      	bne.n	80071e6 <_malloc_r+0xd2>
 8007170:	6821      	ldr	r1, [r4, #0]
 8007172:	3503      	adds	r5, #3
 8007174:	1a6d      	subs	r5, r5, r1
 8007176:	f025 0503 	bic.w	r5, r5, #3
 800717a:	3508      	adds	r5, #8
 800717c:	2d0c      	cmp	r5, #12
 800717e:	bf38      	it	cc
 8007180:	250c      	movcc	r5, #12
 8007182:	4629      	mov	r1, r5
 8007184:	4638      	mov	r0, r7
 8007186:	f7ff ffa5 	bl	80070d4 <sbrk_aligned>
 800718a:	3001      	adds	r0, #1
 800718c:	d02b      	beq.n	80071e6 <_malloc_r+0xd2>
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	442b      	add	r3, r5
 8007192:	6023      	str	r3, [r4, #0]
 8007194:	e00e      	b.n	80071b4 <_malloc_r+0xa0>
 8007196:	6822      	ldr	r2, [r4, #0]
 8007198:	1b52      	subs	r2, r2, r5
 800719a:	d41e      	bmi.n	80071da <_malloc_r+0xc6>
 800719c:	2a0b      	cmp	r2, #11
 800719e:	d916      	bls.n	80071ce <_malloc_r+0xba>
 80071a0:	1961      	adds	r1, r4, r5
 80071a2:	42a3      	cmp	r3, r4
 80071a4:	6025      	str	r5, [r4, #0]
 80071a6:	bf18      	it	ne
 80071a8:	6059      	strne	r1, [r3, #4]
 80071aa:	6863      	ldr	r3, [r4, #4]
 80071ac:	bf08      	it	eq
 80071ae:	6031      	streq	r1, [r6, #0]
 80071b0:	5162      	str	r2, [r4, r5]
 80071b2:	604b      	str	r3, [r1, #4]
 80071b4:	4638      	mov	r0, r7
 80071b6:	f104 060b 	add.w	r6, r4, #11
 80071ba:	f000 f9ed 	bl	8007598 <__malloc_unlock>
 80071be:	f026 0607 	bic.w	r6, r6, #7
 80071c2:	1d23      	adds	r3, r4, #4
 80071c4:	1af2      	subs	r2, r6, r3
 80071c6:	d0b6      	beq.n	8007136 <_malloc_r+0x22>
 80071c8:	1b9b      	subs	r3, r3, r6
 80071ca:	50a3      	str	r3, [r4, r2]
 80071cc:	e7b3      	b.n	8007136 <_malloc_r+0x22>
 80071ce:	6862      	ldr	r2, [r4, #4]
 80071d0:	42a3      	cmp	r3, r4
 80071d2:	bf0c      	ite	eq
 80071d4:	6032      	streq	r2, [r6, #0]
 80071d6:	605a      	strne	r2, [r3, #4]
 80071d8:	e7ec      	b.n	80071b4 <_malloc_r+0xa0>
 80071da:	4623      	mov	r3, r4
 80071dc:	6864      	ldr	r4, [r4, #4]
 80071de:	e7b2      	b.n	8007146 <_malloc_r+0x32>
 80071e0:	4634      	mov	r4, r6
 80071e2:	6876      	ldr	r6, [r6, #4]
 80071e4:	e7b9      	b.n	800715a <_malloc_r+0x46>
 80071e6:	230c      	movs	r3, #12
 80071e8:	603b      	str	r3, [r7, #0]
 80071ea:	4638      	mov	r0, r7
 80071ec:	f000 f9d4 	bl	8007598 <__malloc_unlock>
 80071f0:	e7a1      	b.n	8007136 <_malloc_r+0x22>
 80071f2:	6025      	str	r5, [r4, #0]
 80071f4:	e7de      	b.n	80071b4 <_malloc_r+0xa0>
 80071f6:	bf00      	nop
 80071f8:	2000049c 	.word	0x2000049c

080071fc <__ssputs_r>:
 80071fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007200:	688e      	ldr	r6, [r1, #8]
 8007202:	429e      	cmp	r6, r3
 8007204:	4682      	mov	sl, r0
 8007206:	460c      	mov	r4, r1
 8007208:	4690      	mov	r8, r2
 800720a:	461f      	mov	r7, r3
 800720c:	d838      	bhi.n	8007280 <__ssputs_r+0x84>
 800720e:	898a      	ldrh	r2, [r1, #12]
 8007210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007214:	d032      	beq.n	800727c <__ssputs_r+0x80>
 8007216:	6825      	ldr	r5, [r4, #0]
 8007218:	6909      	ldr	r1, [r1, #16]
 800721a:	eba5 0901 	sub.w	r9, r5, r1
 800721e:	6965      	ldr	r5, [r4, #20]
 8007220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007228:	3301      	adds	r3, #1
 800722a:	444b      	add	r3, r9
 800722c:	106d      	asrs	r5, r5, #1
 800722e:	429d      	cmp	r5, r3
 8007230:	bf38      	it	cc
 8007232:	461d      	movcc	r5, r3
 8007234:	0553      	lsls	r3, r2, #21
 8007236:	d531      	bpl.n	800729c <__ssputs_r+0xa0>
 8007238:	4629      	mov	r1, r5
 800723a:	f7ff ff6b 	bl	8007114 <_malloc_r>
 800723e:	4606      	mov	r6, r0
 8007240:	b950      	cbnz	r0, 8007258 <__ssputs_r+0x5c>
 8007242:	230c      	movs	r3, #12
 8007244:	f8ca 3000 	str.w	r3, [sl]
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800724e:	81a3      	strh	r3, [r4, #12]
 8007250:	f04f 30ff 	mov.w	r0, #4294967295
 8007254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007258:	6921      	ldr	r1, [r4, #16]
 800725a:	464a      	mov	r2, r9
 800725c:	f7ff fb46 	bl	80068ec <memcpy>
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	6126      	str	r6, [r4, #16]
 800726e:	6165      	str	r5, [r4, #20]
 8007270:	444e      	add	r6, r9
 8007272:	eba5 0509 	sub.w	r5, r5, r9
 8007276:	6026      	str	r6, [r4, #0]
 8007278:	60a5      	str	r5, [r4, #8]
 800727a:	463e      	mov	r6, r7
 800727c:	42be      	cmp	r6, r7
 800727e:	d900      	bls.n	8007282 <__ssputs_r+0x86>
 8007280:	463e      	mov	r6, r7
 8007282:	6820      	ldr	r0, [r4, #0]
 8007284:	4632      	mov	r2, r6
 8007286:	4641      	mov	r1, r8
 8007288:	f000 f966 	bl	8007558 <memmove>
 800728c:	68a3      	ldr	r3, [r4, #8]
 800728e:	1b9b      	subs	r3, r3, r6
 8007290:	60a3      	str	r3, [r4, #8]
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	4433      	add	r3, r6
 8007296:	6023      	str	r3, [r4, #0]
 8007298:	2000      	movs	r0, #0
 800729a:	e7db      	b.n	8007254 <__ssputs_r+0x58>
 800729c:	462a      	mov	r2, r5
 800729e:	f000 f981 	bl	80075a4 <_realloc_r>
 80072a2:	4606      	mov	r6, r0
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d1e1      	bne.n	800726c <__ssputs_r+0x70>
 80072a8:	6921      	ldr	r1, [r4, #16]
 80072aa:	4650      	mov	r0, sl
 80072ac:	f7ff fec6 	bl	800703c <_free_r>
 80072b0:	e7c7      	b.n	8007242 <__ssputs_r+0x46>
	...

080072b4 <_svfiprintf_r>:
 80072b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	4698      	mov	r8, r3
 80072ba:	898b      	ldrh	r3, [r1, #12]
 80072bc:	061b      	lsls	r3, r3, #24
 80072be:	b09d      	sub	sp, #116	; 0x74
 80072c0:	4607      	mov	r7, r0
 80072c2:	460d      	mov	r5, r1
 80072c4:	4614      	mov	r4, r2
 80072c6:	d50e      	bpl.n	80072e6 <_svfiprintf_r+0x32>
 80072c8:	690b      	ldr	r3, [r1, #16]
 80072ca:	b963      	cbnz	r3, 80072e6 <_svfiprintf_r+0x32>
 80072cc:	2140      	movs	r1, #64	; 0x40
 80072ce:	f7ff ff21 	bl	8007114 <_malloc_r>
 80072d2:	6028      	str	r0, [r5, #0]
 80072d4:	6128      	str	r0, [r5, #16]
 80072d6:	b920      	cbnz	r0, 80072e2 <_svfiprintf_r+0x2e>
 80072d8:	230c      	movs	r3, #12
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	e0d1      	b.n	8007486 <_svfiprintf_r+0x1d2>
 80072e2:	2340      	movs	r3, #64	; 0x40
 80072e4:	616b      	str	r3, [r5, #20]
 80072e6:	2300      	movs	r3, #0
 80072e8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ea:	2320      	movs	r3, #32
 80072ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80072f4:	2330      	movs	r3, #48	; 0x30
 80072f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074a0 <_svfiprintf_r+0x1ec>
 80072fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072fe:	f04f 0901 	mov.w	r9, #1
 8007302:	4623      	mov	r3, r4
 8007304:	469a      	mov	sl, r3
 8007306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800730a:	b10a      	cbz	r2, 8007310 <_svfiprintf_r+0x5c>
 800730c:	2a25      	cmp	r2, #37	; 0x25
 800730e:	d1f9      	bne.n	8007304 <_svfiprintf_r+0x50>
 8007310:	ebba 0b04 	subs.w	fp, sl, r4
 8007314:	d00b      	beq.n	800732e <_svfiprintf_r+0x7a>
 8007316:	465b      	mov	r3, fp
 8007318:	4622      	mov	r2, r4
 800731a:	4629      	mov	r1, r5
 800731c:	4638      	mov	r0, r7
 800731e:	f7ff ff6d 	bl	80071fc <__ssputs_r>
 8007322:	3001      	adds	r0, #1
 8007324:	f000 80aa 	beq.w	800747c <_svfiprintf_r+0x1c8>
 8007328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800732a:	445a      	add	r2, fp
 800732c:	9209      	str	r2, [sp, #36]	; 0x24
 800732e:	f89a 3000 	ldrb.w	r3, [sl]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80a2 	beq.w	800747c <_svfiprintf_r+0x1c8>
 8007338:	2300      	movs	r3, #0
 800733a:	f04f 32ff 	mov.w	r2, #4294967295
 800733e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007342:	f10a 0a01 	add.w	sl, sl, #1
 8007346:	9304      	str	r3, [sp, #16]
 8007348:	9307      	str	r3, [sp, #28]
 800734a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800734e:	931a      	str	r3, [sp, #104]	; 0x68
 8007350:	4654      	mov	r4, sl
 8007352:	2205      	movs	r2, #5
 8007354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007358:	4851      	ldr	r0, [pc, #324]	; (80074a0 <_svfiprintf_r+0x1ec>)
 800735a:	f7f8 ff49 	bl	80001f0 <memchr>
 800735e:	9a04      	ldr	r2, [sp, #16]
 8007360:	b9d8      	cbnz	r0, 800739a <_svfiprintf_r+0xe6>
 8007362:	06d0      	lsls	r0, r2, #27
 8007364:	bf44      	itt	mi
 8007366:	2320      	movmi	r3, #32
 8007368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800736c:	0711      	lsls	r1, r2, #28
 800736e:	bf44      	itt	mi
 8007370:	232b      	movmi	r3, #43	; 0x2b
 8007372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007376:	f89a 3000 	ldrb.w	r3, [sl]
 800737a:	2b2a      	cmp	r3, #42	; 0x2a
 800737c:	d015      	beq.n	80073aa <_svfiprintf_r+0xf6>
 800737e:	9a07      	ldr	r2, [sp, #28]
 8007380:	4654      	mov	r4, sl
 8007382:	2000      	movs	r0, #0
 8007384:	f04f 0c0a 	mov.w	ip, #10
 8007388:	4621      	mov	r1, r4
 800738a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800738e:	3b30      	subs	r3, #48	; 0x30
 8007390:	2b09      	cmp	r3, #9
 8007392:	d94e      	bls.n	8007432 <_svfiprintf_r+0x17e>
 8007394:	b1b0      	cbz	r0, 80073c4 <_svfiprintf_r+0x110>
 8007396:	9207      	str	r2, [sp, #28]
 8007398:	e014      	b.n	80073c4 <_svfiprintf_r+0x110>
 800739a:	eba0 0308 	sub.w	r3, r0, r8
 800739e:	fa09 f303 	lsl.w	r3, r9, r3
 80073a2:	4313      	orrs	r3, r2
 80073a4:	9304      	str	r3, [sp, #16]
 80073a6:	46a2      	mov	sl, r4
 80073a8:	e7d2      	b.n	8007350 <_svfiprintf_r+0x9c>
 80073aa:	9b03      	ldr	r3, [sp, #12]
 80073ac:	1d19      	adds	r1, r3, #4
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	9103      	str	r1, [sp, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	bfbb      	ittet	lt
 80073b6:	425b      	neglt	r3, r3
 80073b8:	f042 0202 	orrlt.w	r2, r2, #2
 80073bc:	9307      	strge	r3, [sp, #28]
 80073be:	9307      	strlt	r3, [sp, #28]
 80073c0:	bfb8      	it	lt
 80073c2:	9204      	strlt	r2, [sp, #16]
 80073c4:	7823      	ldrb	r3, [r4, #0]
 80073c6:	2b2e      	cmp	r3, #46	; 0x2e
 80073c8:	d10c      	bne.n	80073e4 <_svfiprintf_r+0x130>
 80073ca:	7863      	ldrb	r3, [r4, #1]
 80073cc:	2b2a      	cmp	r3, #42	; 0x2a
 80073ce:	d135      	bne.n	800743c <_svfiprintf_r+0x188>
 80073d0:	9b03      	ldr	r3, [sp, #12]
 80073d2:	1d1a      	adds	r2, r3, #4
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	9203      	str	r2, [sp, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bfb8      	it	lt
 80073dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80073e0:	3402      	adds	r4, #2
 80073e2:	9305      	str	r3, [sp, #20]
 80073e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80074b0 <_svfiprintf_r+0x1fc>
 80073e8:	7821      	ldrb	r1, [r4, #0]
 80073ea:	2203      	movs	r2, #3
 80073ec:	4650      	mov	r0, sl
 80073ee:	f7f8 feff 	bl	80001f0 <memchr>
 80073f2:	b140      	cbz	r0, 8007406 <_svfiprintf_r+0x152>
 80073f4:	2340      	movs	r3, #64	; 0x40
 80073f6:	eba0 000a 	sub.w	r0, r0, sl
 80073fa:	fa03 f000 	lsl.w	r0, r3, r0
 80073fe:	9b04      	ldr	r3, [sp, #16]
 8007400:	4303      	orrs	r3, r0
 8007402:	3401      	adds	r4, #1
 8007404:	9304      	str	r3, [sp, #16]
 8007406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740a:	4826      	ldr	r0, [pc, #152]	; (80074a4 <_svfiprintf_r+0x1f0>)
 800740c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007410:	2206      	movs	r2, #6
 8007412:	f7f8 feed 	bl	80001f0 <memchr>
 8007416:	2800      	cmp	r0, #0
 8007418:	d038      	beq.n	800748c <_svfiprintf_r+0x1d8>
 800741a:	4b23      	ldr	r3, [pc, #140]	; (80074a8 <_svfiprintf_r+0x1f4>)
 800741c:	bb1b      	cbnz	r3, 8007466 <_svfiprintf_r+0x1b2>
 800741e:	9b03      	ldr	r3, [sp, #12]
 8007420:	3307      	adds	r3, #7
 8007422:	f023 0307 	bic.w	r3, r3, #7
 8007426:	3308      	adds	r3, #8
 8007428:	9303      	str	r3, [sp, #12]
 800742a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742c:	4433      	add	r3, r6
 800742e:	9309      	str	r3, [sp, #36]	; 0x24
 8007430:	e767      	b.n	8007302 <_svfiprintf_r+0x4e>
 8007432:	fb0c 3202 	mla	r2, ip, r2, r3
 8007436:	460c      	mov	r4, r1
 8007438:	2001      	movs	r0, #1
 800743a:	e7a5      	b.n	8007388 <_svfiprintf_r+0xd4>
 800743c:	2300      	movs	r3, #0
 800743e:	3401      	adds	r4, #1
 8007440:	9305      	str	r3, [sp, #20]
 8007442:	4619      	mov	r1, r3
 8007444:	f04f 0c0a 	mov.w	ip, #10
 8007448:	4620      	mov	r0, r4
 800744a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800744e:	3a30      	subs	r2, #48	; 0x30
 8007450:	2a09      	cmp	r2, #9
 8007452:	d903      	bls.n	800745c <_svfiprintf_r+0x1a8>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0c5      	beq.n	80073e4 <_svfiprintf_r+0x130>
 8007458:	9105      	str	r1, [sp, #20]
 800745a:	e7c3      	b.n	80073e4 <_svfiprintf_r+0x130>
 800745c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007460:	4604      	mov	r4, r0
 8007462:	2301      	movs	r3, #1
 8007464:	e7f0      	b.n	8007448 <_svfiprintf_r+0x194>
 8007466:	ab03      	add	r3, sp, #12
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	462a      	mov	r2, r5
 800746c:	4b0f      	ldr	r3, [pc, #60]	; (80074ac <_svfiprintf_r+0x1f8>)
 800746e:	a904      	add	r1, sp, #16
 8007470:	4638      	mov	r0, r7
 8007472:	f7fd ffcb 	bl	800540c <_printf_float>
 8007476:	1c42      	adds	r2, r0, #1
 8007478:	4606      	mov	r6, r0
 800747a:	d1d6      	bne.n	800742a <_svfiprintf_r+0x176>
 800747c:	89ab      	ldrh	r3, [r5, #12]
 800747e:	065b      	lsls	r3, r3, #25
 8007480:	f53f af2c 	bmi.w	80072dc <_svfiprintf_r+0x28>
 8007484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007486:	b01d      	add	sp, #116	; 0x74
 8007488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748c:	ab03      	add	r3, sp, #12
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	462a      	mov	r2, r5
 8007492:	4b06      	ldr	r3, [pc, #24]	; (80074ac <_svfiprintf_r+0x1f8>)
 8007494:	a904      	add	r1, sp, #16
 8007496:	4638      	mov	r0, r7
 8007498:	f7fe fa5c 	bl	8005954 <_printf_i>
 800749c:	e7eb      	b.n	8007476 <_svfiprintf_r+0x1c2>
 800749e:	bf00      	nop
 80074a0:	080083f4 	.word	0x080083f4
 80074a4:	080083fe 	.word	0x080083fe
 80074a8:	0800540d 	.word	0x0800540d
 80074ac:	080071fd 	.word	0x080071fd
 80074b0:	080083fa 	.word	0x080083fa

080074b4 <_sbrk_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d06      	ldr	r5, [pc, #24]	; (80074d0 <_sbrk_r+0x1c>)
 80074b8:	2300      	movs	r3, #0
 80074ba:	4604      	mov	r4, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	602b      	str	r3, [r5, #0]
 80074c0:	f7fa fad2 	bl	8001a68 <_sbrk>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_sbrk_r+0x1a>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_sbrk_r+0x1a>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	200004a4 	.word	0x200004a4

080074d4 <__assert_func>:
 80074d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074d6:	4614      	mov	r4, r2
 80074d8:	461a      	mov	r2, r3
 80074da:	4b09      	ldr	r3, [pc, #36]	; (8007500 <__assert_func+0x2c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4605      	mov	r5, r0
 80074e0:	68d8      	ldr	r0, [r3, #12]
 80074e2:	b14c      	cbz	r4, 80074f8 <__assert_func+0x24>
 80074e4:	4b07      	ldr	r3, [pc, #28]	; (8007504 <__assert_func+0x30>)
 80074e6:	9100      	str	r1, [sp, #0]
 80074e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074ec:	4906      	ldr	r1, [pc, #24]	; (8007508 <__assert_func+0x34>)
 80074ee:	462b      	mov	r3, r5
 80074f0:	f000 f80e 	bl	8007510 <fiprintf>
 80074f4:	f000 faac 	bl	8007a50 <abort>
 80074f8:	4b04      	ldr	r3, [pc, #16]	; (800750c <__assert_func+0x38>)
 80074fa:	461c      	mov	r4, r3
 80074fc:	e7f3      	b.n	80074e6 <__assert_func+0x12>
 80074fe:	bf00      	nop
 8007500:	20000010 	.word	0x20000010
 8007504:	08008405 	.word	0x08008405
 8007508:	08008412 	.word	0x08008412
 800750c:	08008440 	.word	0x08008440

08007510 <fiprintf>:
 8007510:	b40e      	push	{r1, r2, r3}
 8007512:	b503      	push	{r0, r1, lr}
 8007514:	4601      	mov	r1, r0
 8007516:	ab03      	add	r3, sp, #12
 8007518:	4805      	ldr	r0, [pc, #20]	; (8007530 <fiprintf+0x20>)
 800751a:	f853 2b04 	ldr.w	r2, [r3], #4
 800751e:	6800      	ldr	r0, [r0, #0]
 8007520:	9301      	str	r3, [sp, #4]
 8007522:	f000 f897 	bl	8007654 <_vfiprintf_r>
 8007526:	b002      	add	sp, #8
 8007528:	f85d eb04 	ldr.w	lr, [sp], #4
 800752c:	b003      	add	sp, #12
 800752e:	4770      	bx	lr
 8007530:	20000010 	.word	0x20000010

08007534 <__ascii_mbtowc>:
 8007534:	b082      	sub	sp, #8
 8007536:	b901      	cbnz	r1, 800753a <__ascii_mbtowc+0x6>
 8007538:	a901      	add	r1, sp, #4
 800753a:	b142      	cbz	r2, 800754e <__ascii_mbtowc+0x1a>
 800753c:	b14b      	cbz	r3, 8007552 <__ascii_mbtowc+0x1e>
 800753e:	7813      	ldrb	r3, [r2, #0]
 8007540:	600b      	str	r3, [r1, #0]
 8007542:	7812      	ldrb	r2, [r2, #0]
 8007544:	1e10      	subs	r0, r2, #0
 8007546:	bf18      	it	ne
 8007548:	2001      	movne	r0, #1
 800754a:	b002      	add	sp, #8
 800754c:	4770      	bx	lr
 800754e:	4610      	mov	r0, r2
 8007550:	e7fb      	b.n	800754a <__ascii_mbtowc+0x16>
 8007552:	f06f 0001 	mvn.w	r0, #1
 8007556:	e7f8      	b.n	800754a <__ascii_mbtowc+0x16>

08007558 <memmove>:
 8007558:	4288      	cmp	r0, r1
 800755a:	b510      	push	{r4, lr}
 800755c:	eb01 0402 	add.w	r4, r1, r2
 8007560:	d902      	bls.n	8007568 <memmove+0x10>
 8007562:	4284      	cmp	r4, r0
 8007564:	4623      	mov	r3, r4
 8007566:	d807      	bhi.n	8007578 <memmove+0x20>
 8007568:	1e43      	subs	r3, r0, #1
 800756a:	42a1      	cmp	r1, r4
 800756c:	d008      	beq.n	8007580 <memmove+0x28>
 800756e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007572:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007576:	e7f8      	b.n	800756a <memmove+0x12>
 8007578:	4402      	add	r2, r0
 800757a:	4601      	mov	r1, r0
 800757c:	428a      	cmp	r2, r1
 800757e:	d100      	bne.n	8007582 <memmove+0x2a>
 8007580:	bd10      	pop	{r4, pc}
 8007582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800758a:	e7f7      	b.n	800757c <memmove+0x24>

0800758c <__malloc_lock>:
 800758c:	4801      	ldr	r0, [pc, #4]	; (8007594 <__malloc_lock+0x8>)
 800758e:	f000 bc1f 	b.w	8007dd0 <__retarget_lock_acquire_recursive>
 8007592:	bf00      	nop
 8007594:	200004a8 	.word	0x200004a8

08007598 <__malloc_unlock>:
 8007598:	4801      	ldr	r0, [pc, #4]	; (80075a0 <__malloc_unlock+0x8>)
 800759a:	f000 bc1a 	b.w	8007dd2 <__retarget_lock_release_recursive>
 800759e:	bf00      	nop
 80075a0:	200004a8 	.word	0x200004a8

080075a4 <_realloc_r>:
 80075a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a8:	4680      	mov	r8, r0
 80075aa:	4614      	mov	r4, r2
 80075ac:	460e      	mov	r6, r1
 80075ae:	b921      	cbnz	r1, 80075ba <_realloc_r+0x16>
 80075b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075b4:	4611      	mov	r1, r2
 80075b6:	f7ff bdad 	b.w	8007114 <_malloc_r>
 80075ba:	b92a      	cbnz	r2, 80075c8 <_realloc_r+0x24>
 80075bc:	f7ff fd3e 	bl	800703c <_free_r>
 80075c0:	4625      	mov	r5, r4
 80075c2:	4628      	mov	r0, r5
 80075c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c8:	f000 fc6a 	bl	8007ea0 <_malloc_usable_size_r>
 80075cc:	4284      	cmp	r4, r0
 80075ce:	4607      	mov	r7, r0
 80075d0:	d802      	bhi.n	80075d8 <_realloc_r+0x34>
 80075d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075d6:	d812      	bhi.n	80075fe <_realloc_r+0x5a>
 80075d8:	4621      	mov	r1, r4
 80075da:	4640      	mov	r0, r8
 80075dc:	f7ff fd9a 	bl	8007114 <_malloc_r>
 80075e0:	4605      	mov	r5, r0
 80075e2:	2800      	cmp	r0, #0
 80075e4:	d0ed      	beq.n	80075c2 <_realloc_r+0x1e>
 80075e6:	42bc      	cmp	r4, r7
 80075e8:	4622      	mov	r2, r4
 80075ea:	4631      	mov	r1, r6
 80075ec:	bf28      	it	cs
 80075ee:	463a      	movcs	r2, r7
 80075f0:	f7ff f97c 	bl	80068ec <memcpy>
 80075f4:	4631      	mov	r1, r6
 80075f6:	4640      	mov	r0, r8
 80075f8:	f7ff fd20 	bl	800703c <_free_r>
 80075fc:	e7e1      	b.n	80075c2 <_realloc_r+0x1e>
 80075fe:	4635      	mov	r5, r6
 8007600:	e7df      	b.n	80075c2 <_realloc_r+0x1e>

08007602 <__sfputc_r>:
 8007602:	6893      	ldr	r3, [r2, #8]
 8007604:	3b01      	subs	r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	b410      	push	{r4}
 800760a:	6093      	str	r3, [r2, #8]
 800760c:	da08      	bge.n	8007620 <__sfputc_r+0x1e>
 800760e:	6994      	ldr	r4, [r2, #24]
 8007610:	42a3      	cmp	r3, r4
 8007612:	db01      	blt.n	8007618 <__sfputc_r+0x16>
 8007614:	290a      	cmp	r1, #10
 8007616:	d103      	bne.n	8007620 <__sfputc_r+0x1e>
 8007618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800761c:	f000 b94a 	b.w	80078b4 <__swbuf_r>
 8007620:	6813      	ldr	r3, [r2, #0]
 8007622:	1c58      	adds	r0, r3, #1
 8007624:	6010      	str	r0, [r2, #0]
 8007626:	7019      	strb	r1, [r3, #0]
 8007628:	4608      	mov	r0, r1
 800762a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800762e:	4770      	bx	lr

08007630 <__sfputs_r>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	4606      	mov	r6, r0
 8007634:	460f      	mov	r7, r1
 8007636:	4614      	mov	r4, r2
 8007638:	18d5      	adds	r5, r2, r3
 800763a:	42ac      	cmp	r4, r5
 800763c:	d101      	bne.n	8007642 <__sfputs_r+0x12>
 800763e:	2000      	movs	r0, #0
 8007640:	e007      	b.n	8007652 <__sfputs_r+0x22>
 8007642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007646:	463a      	mov	r2, r7
 8007648:	4630      	mov	r0, r6
 800764a:	f7ff ffda 	bl	8007602 <__sfputc_r>
 800764e:	1c43      	adds	r3, r0, #1
 8007650:	d1f3      	bne.n	800763a <__sfputs_r+0xa>
 8007652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007654 <_vfiprintf_r>:
 8007654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007658:	460d      	mov	r5, r1
 800765a:	b09d      	sub	sp, #116	; 0x74
 800765c:	4614      	mov	r4, r2
 800765e:	4698      	mov	r8, r3
 8007660:	4606      	mov	r6, r0
 8007662:	b118      	cbz	r0, 800766c <_vfiprintf_r+0x18>
 8007664:	6983      	ldr	r3, [r0, #24]
 8007666:	b90b      	cbnz	r3, 800766c <_vfiprintf_r+0x18>
 8007668:	f000 fb14 	bl	8007c94 <__sinit>
 800766c:	4b89      	ldr	r3, [pc, #548]	; (8007894 <_vfiprintf_r+0x240>)
 800766e:	429d      	cmp	r5, r3
 8007670:	d11b      	bne.n	80076aa <_vfiprintf_r+0x56>
 8007672:	6875      	ldr	r5, [r6, #4]
 8007674:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007676:	07d9      	lsls	r1, r3, #31
 8007678:	d405      	bmi.n	8007686 <_vfiprintf_r+0x32>
 800767a:	89ab      	ldrh	r3, [r5, #12]
 800767c:	059a      	lsls	r2, r3, #22
 800767e:	d402      	bmi.n	8007686 <_vfiprintf_r+0x32>
 8007680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007682:	f000 fba5 	bl	8007dd0 <__retarget_lock_acquire_recursive>
 8007686:	89ab      	ldrh	r3, [r5, #12]
 8007688:	071b      	lsls	r3, r3, #28
 800768a:	d501      	bpl.n	8007690 <_vfiprintf_r+0x3c>
 800768c:	692b      	ldr	r3, [r5, #16]
 800768e:	b9eb      	cbnz	r3, 80076cc <_vfiprintf_r+0x78>
 8007690:	4629      	mov	r1, r5
 8007692:	4630      	mov	r0, r6
 8007694:	f000 f96e 	bl	8007974 <__swsetup_r>
 8007698:	b1c0      	cbz	r0, 80076cc <_vfiprintf_r+0x78>
 800769a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800769c:	07dc      	lsls	r4, r3, #31
 800769e:	d50e      	bpl.n	80076be <_vfiprintf_r+0x6a>
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295
 80076a4:	b01d      	add	sp, #116	; 0x74
 80076a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076aa:	4b7b      	ldr	r3, [pc, #492]	; (8007898 <_vfiprintf_r+0x244>)
 80076ac:	429d      	cmp	r5, r3
 80076ae:	d101      	bne.n	80076b4 <_vfiprintf_r+0x60>
 80076b0:	68b5      	ldr	r5, [r6, #8]
 80076b2:	e7df      	b.n	8007674 <_vfiprintf_r+0x20>
 80076b4:	4b79      	ldr	r3, [pc, #484]	; (800789c <_vfiprintf_r+0x248>)
 80076b6:	429d      	cmp	r5, r3
 80076b8:	bf08      	it	eq
 80076ba:	68f5      	ldreq	r5, [r6, #12]
 80076bc:	e7da      	b.n	8007674 <_vfiprintf_r+0x20>
 80076be:	89ab      	ldrh	r3, [r5, #12]
 80076c0:	0598      	lsls	r0, r3, #22
 80076c2:	d4ed      	bmi.n	80076a0 <_vfiprintf_r+0x4c>
 80076c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076c6:	f000 fb84 	bl	8007dd2 <__retarget_lock_release_recursive>
 80076ca:	e7e9      	b.n	80076a0 <_vfiprintf_r+0x4c>
 80076cc:	2300      	movs	r3, #0
 80076ce:	9309      	str	r3, [sp, #36]	; 0x24
 80076d0:	2320      	movs	r3, #32
 80076d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80076da:	2330      	movs	r3, #48	; 0x30
 80076dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80078a0 <_vfiprintf_r+0x24c>
 80076e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076e4:	f04f 0901 	mov.w	r9, #1
 80076e8:	4623      	mov	r3, r4
 80076ea:	469a      	mov	sl, r3
 80076ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076f0:	b10a      	cbz	r2, 80076f6 <_vfiprintf_r+0xa2>
 80076f2:	2a25      	cmp	r2, #37	; 0x25
 80076f4:	d1f9      	bne.n	80076ea <_vfiprintf_r+0x96>
 80076f6:	ebba 0b04 	subs.w	fp, sl, r4
 80076fa:	d00b      	beq.n	8007714 <_vfiprintf_r+0xc0>
 80076fc:	465b      	mov	r3, fp
 80076fe:	4622      	mov	r2, r4
 8007700:	4629      	mov	r1, r5
 8007702:	4630      	mov	r0, r6
 8007704:	f7ff ff94 	bl	8007630 <__sfputs_r>
 8007708:	3001      	adds	r0, #1
 800770a:	f000 80aa 	beq.w	8007862 <_vfiprintf_r+0x20e>
 800770e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007710:	445a      	add	r2, fp
 8007712:	9209      	str	r2, [sp, #36]	; 0x24
 8007714:	f89a 3000 	ldrb.w	r3, [sl]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 80a2 	beq.w	8007862 <_vfiprintf_r+0x20e>
 800771e:	2300      	movs	r3, #0
 8007720:	f04f 32ff 	mov.w	r2, #4294967295
 8007724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007728:	f10a 0a01 	add.w	sl, sl, #1
 800772c:	9304      	str	r3, [sp, #16]
 800772e:	9307      	str	r3, [sp, #28]
 8007730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007734:	931a      	str	r3, [sp, #104]	; 0x68
 8007736:	4654      	mov	r4, sl
 8007738:	2205      	movs	r2, #5
 800773a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800773e:	4858      	ldr	r0, [pc, #352]	; (80078a0 <_vfiprintf_r+0x24c>)
 8007740:	f7f8 fd56 	bl	80001f0 <memchr>
 8007744:	9a04      	ldr	r2, [sp, #16]
 8007746:	b9d8      	cbnz	r0, 8007780 <_vfiprintf_r+0x12c>
 8007748:	06d1      	lsls	r1, r2, #27
 800774a:	bf44      	itt	mi
 800774c:	2320      	movmi	r3, #32
 800774e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007752:	0713      	lsls	r3, r2, #28
 8007754:	bf44      	itt	mi
 8007756:	232b      	movmi	r3, #43	; 0x2b
 8007758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800775c:	f89a 3000 	ldrb.w	r3, [sl]
 8007760:	2b2a      	cmp	r3, #42	; 0x2a
 8007762:	d015      	beq.n	8007790 <_vfiprintf_r+0x13c>
 8007764:	9a07      	ldr	r2, [sp, #28]
 8007766:	4654      	mov	r4, sl
 8007768:	2000      	movs	r0, #0
 800776a:	f04f 0c0a 	mov.w	ip, #10
 800776e:	4621      	mov	r1, r4
 8007770:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007774:	3b30      	subs	r3, #48	; 0x30
 8007776:	2b09      	cmp	r3, #9
 8007778:	d94e      	bls.n	8007818 <_vfiprintf_r+0x1c4>
 800777a:	b1b0      	cbz	r0, 80077aa <_vfiprintf_r+0x156>
 800777c:	9207      	str	r2, [sp, #28]
 800777e:	e014      	b.n	80077aa <_vfiprintf_r+0x156>
 8007780:	eba0 0308 	sub.w	r3, r0, r8
 8007784:	fa09 f303 	lsl.w	r3, r9, r3
 8007788:	4313      	orrs	r3, r2
 800778a:	9304      	str	r3, [sp, #16]
 800778c:	46a2      	mov	sl, r4
 800778e:	e7d2      	b.n	8007736 <_vfiprintf_r+0xe2>
 8007790:	9b03      	ldr	r3, [sp, #12]
 8007792:	1d19      	adds	r1, r3, #4
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	9103      	str	r1, [sp, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	bfbb      	ittet	lt
 800779c:	425b      	neglt	r3, r3
 800779e:	f042 0202 	orrlt.w	r2, r2, #2
 80077a2:	9307      	strge	r3, [sp, #28]
 80077a4:	9307      	strlt	r3, [sp, #28]
 80077a6:	bfb8      	it	lt
 80077a8:	9204      	strlt	r2, [sp, #16]
 80077aa:	7823      	ldrb	r3, [r4, #0]
 80077ac:	2b2e      	cmp	r3, #46	; 0x2e
 80077ae:	d10c      	bne.n	80077ca <_vfiprintf_r+0x176>
 80077b0:	7863      	ldrb	r3, [r4, #1]
 80077b2:	2b2a      	cmp	r3, #42	; 0x2a
 80077b4:	d135      	bne.n	8007822 <_vfiprintf_r+0x1ce>
 80077b6:	9b03      	ldr	r3, [sp, #12]
 80077b8:	1d1a      	adds	r2, r3, #4
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	9203      	str	r2, [sp, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bfb8      	it	lt
 80077c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80077c6:	3402      	adds	r4, #2
 80077c8:	9305      	str	r3, [sp, #20]
 80077ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80078b0 <_vfiprintf_r+0x25c>
 80077ce:	7821      	ldrb	r1, [r4, #0]
 80077d0:	2203      	movs	r2, #3
 80077d2:	4650      	mov	r0, sl
 80077d4:	f7f8 fd0c 	bl	80001f0 <memchr>
 80077d8:	b140      	cbz	r0, 80077ec <_vfiprintf_r+0x198>
 80077da:	2340      	movs	r3, #64	; 0x40
 80077dc:	eba0 000a 	sub.w	r0, r0, sl
 80077e0:	fa03 f000 	lsl.w	r0, r3, r0
 80077e4:	9b04      	ldr	r3, [sp, #16]
 80077e6:	4303      	orrs	r3, r0
 80077e8:	3401      	adds	r4, #1
 80077ea:	9304      	str	r3, [sp, #16]
 80077ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f0:	482c      	ldr	r0, [pc, #176]	; (80078a4 <_vfiprintf_r+0x250>)
 80077f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077f6:	2206      	movs	r2, #6
 80077f8:	f7f8 fcfa 	bl	80001f0 <memchr>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d03f      	beq.n	8007880 <_vfiprintf_r+0x22c>
 8007800:	4b29      	ldr	r3, [pc, #164]	; (80078a8 <_vfiprintf_r+0x254>)
 8007802:	bb1b      	cbnz	r3, 800784c <_vfiprintf_r+0x1f8>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	3307      	adds	r3, #7
 8007808:	f023 0307 	bic.w	r3, r3, #7
 800780c:	3308      	adds	r3, #8
 800780e:	9303      	str	r3, [sp, #12]
 8007810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007812:	443b      	add	r3, r7
 8007814:	9309      	str	r3, [sp, #36]	; 0x24
 8007816:	e767      	b.n	80076e8 <_vfiprintf_r+0x94>
 8007818:	fb0c 3202 	mla	r2, ip, r2, r3
 800781c:	460c      	mov	r4, r1
 800781e:	2001      	movs	r0, #1
 8007820:	e7a5      	b.n	800776e <_vfiprintf_r+0x11a>
 8007822:	2300      	movs	r3, #0
 8007824:	3401      	adds	r4, #1
 8007826:	9305      	str	r3, [sp, #20]
 8007828:	4619      	mov	r1, r3
 800782a:	f04f 0c0a 	mov.w	ip, #10
 800782e:	4620      	mov	r0, r4
 8007830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007834:	3a30      	subs	r2, #48	; 0x30
 8007836:	2a09      	cmp	r2, #9
 8007838:	d903      	bls.n	8007842 <_vfiprintf_r+0x1ee>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0c5      	beq.n	80077ca <_vfiprintf_r+0x176>
 800783e:	9105      	str	r1, [sp, #20]
 8007840:	e7c3      	b.n	80077ca <_vfiprintf_r+0x176>
 8007842:	fb0c 2101 	mla	r1, ip, r1, r2
 8007846:	4604      	mov	r4, r0
 8007848:	2301      	movs	r3, #1
 800784a:	e7f0      	b.n	800782e <_vfiprintf_r+0x1da>
 800784c:	ab03      	add	r3, sp, #12
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	462a      	mov	r2, r5
 8007852:	4b16      	ldr	r3, [pc, #88]	; (80078ac <_vfiprintf_r+0x258>)
 8007854:	a904      	add	r1, sp, #16
 8007856:	4630      	mov	r0, r6
 8007858:	f7fd fdd8 	bl	800540c <_printf_float>
 800785c:	4607      	mov	r7, r0
 800785e:	1c78      	adds	r0, r7, #1
 8007860:	d1d6      	bne.n	8007810 <_vfiprintf_r+0x1bc>
 8007862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007864:	07d9      	lsls	r1, r3, #31
 8007866:	d405      	bmi.n	8007874 <_vfiprintf_r+0x220>
 8007868:	89ab      	ldrh	r3, [r5, #12]
 800786a:	059a      	lsls	r2, r3, #22
 800786c:	d402      	bmi.n	8007874 <_vfiprintf_r+0x220>
 800786e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007870:	f000 faaf 	bl	8007dd2 <__retarget_lock_release_recursive>
 8007874:	89ab      	ldrh	r3, [r5, #12]
 8007876:	065b      	lsls	r3, r3, #25
 8007878:	f53f af12 	bmi.w	80076a0 <_vfiprintf_r+0x4c>
 800787c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800787e:	e711      	b.n	80076a4 <_vfiprintf_r+0x50>
 8007880:	ab03      	add	r3, sp, #12
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	462a      	mov	r2, r5
 8007886:	4b09      	ldr	r3, [pc, #36]	; (80078ac <_vfiprintf_r+0x258>)
 8007888:	a904      	add	r1, sp, #16
 800788a:	4630      	mov	r0, r6
 800788c:	f7fe f862 	bl	8005954 <_printf_i>
 8007890:	e7e4      	b.n	800785c <_vfiprintf_r+0x208>
 8007892:	bf00      	nop
 8007894:	0800856c 	.word	0x0800856c
 8007898:	0800858c 	.word	0x0800858c
 800789c:	0800854c 	.word	0x0800854c
 80078a0:	080083f4 	.word	0x080083f4
 80078a4:	080083fe 	.word	0x080083fe
 80078a8:	0800540d 	.word	0x0800540d
 80078ac:	08007631 	.word	0x08007631
 80078b0:	080083fa 	.word	0x080083fa

080078b4 <__swbuf_r>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	460e      	mov	r6, r1
 80078b8:	4614      	mov	r4, r2
 80078ba:	4605      	mov	r5, r0
 80078bc:	b118      	cbz	r0, 80078c6 <__swbuf_r+0x12>
 80078be:	6983      	ldr	r3, [r0, #24]
 80078c0:	b90b      	cbnz	r3, 80078c6 <__swbuf_r+0x12>
 80078c2:	f000 f9e7 	bl	8007c94 <__sinit>
 80078c6:	4b21      	ldr	r3, [pc, #132]	; (800794c <__swbuf_r+0x98>)
 80078c8:	429c      	cmp	r4, r3
 80078ca:	d12b      	bne.n	8007924 <__swbuf_r+0x70>
 80078cc:	686c      	ldr	r4, [r5, #4]
 80078ce:	69a3      	ldr	r3, [r4, #24]
 80078d0:	60a3      	str	r3, [r4, #8]
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	071a      	lsls	r2, r3, #28
 80078d6:	d52f      	bpl.n	8007938 <__swbuf_r+0x84>
 80078d8:	6923      	ldr	r3, [r4, #16]
 80078da:	b36b      	cbz	r3, 8007938 <__swbuf_r+0x84>
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	6820      	ldr	r0, [r4, #0]
 80078e0:	1ac0      	subs	r0, r0, r3
 80078e2:	6963      	ldr	r3, [r4, #20]
 80078e4:	b2f6      	uxtb	r6, r6
 80078e6:	4283      	cmp	r3, r0
 80078e8:	4637      	mov	r7, r6
 80078ea:	dc04      	bgt.n	80078f6 <__swbuf_r+0x42>
 80078ec:	4621      	mov	r1, r4
 80078ee:	4628      	mov	r0, r5
 80078f0:	f000 f93c 	bl	8007b6c <_fflush_r>
 80078f4:	bb30      	cbnz	r0, 8007944 <__swbuf_r+0x90>
 80078f6:	68a3      	ldr	r3, [r4, #8]
 80078f8:	3b01      	subs	r3, #1
 80078fa:	60a3      	str	r3, [r4, #8]
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	6022      	str	r2, [r4, #0]
 8007902:	701e      	strb	r6, [r3, #0]
 8007904:	6963      	ldr	r3, [r4, #20]
 8007906:	3001      	adds	r0, #1
 8007908:	4283      	cmp	r3, r0
 800790a:	d004      	beq.n	8007916 <__swbuf_r+0x62>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	07db      	lsls	r3, r3, #31
 8007910:	d506      	bpl.n	8007920 <__swbuf_r+0x6c>
 8007912:	2e0a      	cmp	r6, #10
 8007914:	d104      	bne.n	8007920 <__swbuf_r+0x6c>
 8007916:	4621      	mov	r1, r4
 8007918:	4628      	mov	r0, r5
 800791a:	f000 f927 	bl	8007b6c <_fflush_r>
 800791e:	b988      	cbnz	r0, 8007944 <__swbuf_r+0x90>
 8007920:	4638      	mov	r0, r7
 8007922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007924:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <__swbuf_r+0x9c>)
 8007926:	429c      	cmp	r4, r3
 8007928:	d101      	bne.n	800792e <__swbuf_r+0x7a>
 800792a:	68ac      	ldr	r4, [r5, #8]
 800792c:	e7cf      	b.n	80078ce <__swbuf_r+0x1a>
 800792e:	4b09      	ldr	r3, [pc, #36]	; (8007954 <__swbuf_r+0xa0>)
 8007930:	429c      	cmp	r4, r3
 8007932:	bf08      	it	eq
 8007934:	68ec      	ldreq	r4, [r5, #12]
 8007936:	e7ca      	b.n	80078ce <__swbuf_r+0x1a>
 8007938:	4621      	mov	r1, r4
 800793a:	4628      	mov	r0, r5
 800793c:	f000 f81a 	bl	8007974 <__swsetup_r>
 8007940:	2800      	cmp	r0, #0
 8007942:	d0cb      	beq.n	80078dc <__swbuf_r+0x28>
 8007944:	f04f 37ff 	mov.w	r7, #4294967295
 8007948:	e7ea      	b.n	8007920 <__swbuf_r+0x6c>
 800794a:	bf00      	nop
 800794c:	0800856c 	.word	0x0800856c
 8007950:	0800858c 	.word	0x0800858c
 8007954:	0800854c 	.word	0x0800854c

08007958 <__ascii_wctomb>:
 8007958:	b149      	cbz	r1, 800796e <__ascii_wctomb+0x16>
 800795a:	2aff      	cmp	r2, #255	; 0xff
 800795c:	bf85      	ittet	hi
 800795e:	238a      	movhi	r3, #138	; 0x8a
 8007960:	6003      	strhi	r3, [r0, #0]
 8007962:	700a      	strbls	r2, [r1, #0]
 8007964:	f04f 30ff 	movhi.w	r0, #4294967295
 8007968:	bf98      	it	ls
 800796a:	2001      	movls	r0, #1
 800796c:	4770      	bx	lr
 800796e:	4608      	mov	r0, r1
 8007970:	4770      	bx	lr
	...

08007974 <__swsetup_r>:
 8007974:	4b32      	ldr	r3, [pc, #200]	; (8007a40 <__swsetup_r+0xcc>)
 8007976:	b570      	push	{r4, r5, r6, lr}
 8007978:	681d      	ldr	r5, [r3, #0]
 800797a:	4606      	mov	r6, r0
 800797c:	460c      	mov	r4, r1
 800797e:	b125      	cbz	r5, 800798a <__swsetup_r+0x16>
 8007980:	69ab      	ldr	r3, [r5, #24]
 8007982:	b913      	cbnz	r3, 800798a <__swsetup_r+0x16>
 8007984:	4628      	mov	r0, r5
 8007986:	f000 f985 	bl	8007c94 <__sinit>
 800798a:	4b2e      	ldr	r3, [pc, #184]	; (8007a44 <__swsetup_r+0xd0>)
 800798c:	429c      	cmp	r4, r3
 800798e:	d10f      	bne.n	80079b0 <__swsetup_r+0x3c>
 8007990:	686c      	ldr	r4, [r5, #4]
 8007992:	89a3      	ldrh	r3, [r4, #12]
 8007994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007998:	0719      	lsls	r1, r3, #28
 800799a:	d42c      	bmi.n	80079f6 <__swsetup_r+0x82>
 800799c:	06dd      	lsls	r5, r3, #27
 800799e:	d411      	bmi.n	80079c4 <__swsetup_r+0x50>
 80079a0:	2309      	movs	r3, #9
 80079a2:	6033      	str	r3, [r6, #0]
 80079a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079a8:	81a3      	strh	r3, [r4, #12]
 80079aa:	f04f 30ff 	mov.w	r0, #4294967295
 80079ae:	e03e      	b.n	8007a2e <__swsetup_r+0xba>
 80079b0:	4b25      	ldr	r3, [pc, #148]	; (8007a48 <__swsetup_r+0xd4>)
 80079b2:	429c      	cmp	r4, r3
 80079b4:	d101      	bne.n	80079ba <__swsetup_r+0x46>
 80079b6:	68ac      	ldr	r4, [r5, #8]
 80079b8:	e7eb      	b.n	8007992 <__swsetup_r+0x1e>
 80079ba:	4b24      	ldr	r3, [pc, #144]	; (8007a4c <__swsetup_r+0xd8>)
 80079bc:	429c      	cmp	r4, r3
 80079be:	bf08      	it	eq
 80079c0:	68ec      	ldreq	r4, [r5, #12]
 80079c2:	e7e6      	b.n	8007992 <__swsetup_r+0x1e>
 80079c4:	0758      	lsls	r0, r3, #29
 80079c6:	d512      	bpl.n	80079ee <__swsetup_r+0x7a>
 80079c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079ca:	b141      	cbz	r1, 80079de <__swsetup_r+0x6a>
 80079cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079d0:	4299      	cmp	r1, r3
 80079d2:	d002      	beq.n	80079da <__swsetup_r+0x66>
 80079d4:	4630      	mov	r0, r6
 80079d6:	f7ff fb31 	bl	800703c <_free_r>
 80079da:	2300      	movs	r3, #0
 80079dc:	6363      	str	r3, [r4, #52]	; 0x34
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	2300      	movs	r3, #0
 80079e8:	6063      	str	r3, [r4, #4]
 80079ea:	6923      	ldr	r3, [r4, #16]
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	89a3      	ldrh	r3, [r4, #12]
 80079f0:	f043 0308 	orr.w	r3, r3, #8
 80079f4:	81a3      	strh	r3, [r4, #12]
 80079f6:	6923      	ldr	r3, [r4, #16]
 80079f8:	b94b      	cbnz	r3, 8007a0e <__swsetup_r+0x9a>
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a04:	d003      	beq.n	8007a0e <__swsetup_r+0x9a>
 8007a06:	4621      	mov	r1, r4
 8007a08:	4630      	mov	r0, r6
 8007a0a:	f000 fa09 	bl	8007e20 <__smakebuf_r>
 8007a0e:	89a0      	ldrh	r0, [r4, #12]
 8007a10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a14:	f010 0301 	ands.w	r3, r0, #1
 8007a18:	d00a      	beq.n	8007a30 <__swsetup_r+0xbc>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60a3      	str	r3, [r4, #8]
 8007a1e:	6963      	ldr	r3, [r4, #20]
 8007a20:	425b      	negs	r3, r3
 8007a22:	61a3      	str	r3, [r4, #24]
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	b943      	cbnz	r3, 8007a3a <__swsetup_r+0xc6>
 8007a28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a2c:	d1ba      	bne.n	80079a4 <__swsetup_r+0x30>
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	0781      	lsls	r1, r0, #30
 8007a32:	bf58      	it	pl
 8007a34:	6963      	ldrpl	r3, [r4, #20]
 8007a36:	60a3      	str	r3, [r4, #8]
 8007a38:	e7f4      	b.n	8007a24 <__swsetup_r+0xb0>
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	e7f7      	b.n	8007a2e <__swsetup_r+0xba>
 8007a3e:	bf00      	nop
 8007a40:	20000010 	.word	0x20000010
 8007a44:	0800856c 	.word	0x0800856c
 8007a48:	0800858c 	.word	0x0800858c
 8007a4c:	0800854c 	.word	0x0800854c

08007a50 <abort>:
 8007a50:	b508      	push	{r3, lr}
 8007a52:	2006      	movs	r0, #6
 8007a54:	f000 fa54 	bl	8007f00 <raise>
 8007a58:	2001      	movs	r0, #1
 8007a5a:	f7f9 ff8d 	bl	8001978 <_exit>
	...

08007a60 <__sflush_r>:
 8007a60:	898a      	ldrh	r2, [r1, #12]
 8007a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a66:	4605      	mov	r5, r0
 8007a68:	0710      	lsls	r0, r2, #28
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	d458      	bmi.n	8007b20 <__sflush_r+0xc0>
 8007a6e:	684b      	ldr	r3, [r1, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	dc05      	bgt.n	8007a80 <__sflush_r+0x20>
 8007a74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dc02      	bgt.n	8007a80 <__sflush_r+0x20>
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	d0f9      	beq.n	8007a7a <__sflush_r+0x1a>
 8007a86:	2300      	movs	r3, #0
 8007a88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a8c:	682f      	ldr	r7, [r5, #0]
 8007a8e:	602b      	str	r3, [r5, #0]
 8007a90:	d032      	beq.n	8007af8 <__sflush_r+0x98>
 8007a92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	075a      	lsls	r2, r3, #29
 8007a98:	d505      	bpl.n	8007aa6 <__sflush_r+0x46>
 8007a9a:	6863      	ldr	r3, [r4, #4]
 8007a9c:	1ac0      	subs	r0, r0, r3
 8007a9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007aa0:	b10b      	cbz	r3, 8007aa6 <__sflush_r+0x46>
 8007aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007aa4:	1ac0      	subs	r0, r0, r3
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aac:	6a21      	ldr	r1, [r4, #32]
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b0      	blx	r6
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	d106      	bne.n	8007ac6 <__sflush_r+0x66>
 8007ab8:	6829      	ldr	r1, [r5, #0]
 8007aba:	291d      	cmp	r1, #29
 8007abc:	d82c      	bhi.n	8007b18 <__sflush_r+0xb8>
 8007abe:	4a2a      	ldr	r2, [pc, #168]	; (8007b68 <__sflush_r+0x108>)
 8007ac0:	40ca      	lsrs	r2, r1
 8007ac2:	07d6      	lsls	r6, r2, #31
 8007ac4:	d528      	bpl.n	8007b18 <__sflush_r+0xb8>
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	6062      	str	r2, [r4, #4]
 8007aca:	04d9      	lsls	r1, r3, #19
 8007acc:	6922      	ldr	r2, [r4, #16]
 8007ace:	6022      	str	r2, [r4, #0]
 8007ad0:	d504      	bpl.n	8007adc <__sflush_r+0x7c>
 8007ad2:	1c42      	adds	r2, r0, #1
 8007ad4:	d101      	bne.n	8007ada <__sflush_r+0x7a>
 8007ad6:	682b      	ldr	r3, [r5, #0]
 8007ad8:	b903      	cbnz	r3, 8007adc <__sflush_r+0x7c>
 8007ada:	6560      	str	r0, [r4, #84]	; 0x54
 8007adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ade:	602f      	str	r7, [r5, #0]
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	d0ca      	beq.n	8007a7a <__sflush_r+0x1a>
 8007ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ae8:	4299      	cmp	r1, r3
 8007aea:	d002      	beq.n	8007af2 <__sflush_r+0x92>
 8007aec:	4628      	mov	r0, r5
 8007aee:	f7ff faa5 	bl	800703c <_free_r>
 8007af2:	2000      	movs	r0, #0
 8007af4:	6360      	str	r0, [r4, #52]	; 0x34
 8007af6:	e7c1      	b.n	8007a7c <__sflush_r+0x1c>
 8007af8:	6a21      	ldr	r1, [r4, #32]
 8007afa:	2301      	movs	r3, #1
 8007afc:	4628      	mov	r0, r5
 8007afe:	47b0      	blx	r6
 8007b00:	1c41      	adds	r1, r0, #1
 8007b02:	d1c7      	bne.n	8007a94 <__sflush_r+0x34>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0c4      	beq.n	8007a94 <__sflush_r+0x34>
 8007b0a:	2b1d      	cmp	r3, #29
 8007b0c:	d001      	beq.n	8007b12 <__sflush_r+0xb2>
 8007b0e:	2b16      	cmp	r3, #22
 8007b10:	d101      	bne.n	8007b16 <__sflush_r+0xb6>
 8007b12:	602f      	str	r7, [r5, #0]
 8007b14:	e7b1      	b.n	8007a7a <__sflush_r+0x1a>
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	e7ad      	b.n	8007a7c <__sflush_r+0x1c>
 8007b20:	690f      	ldr	r7, [r1, #16]
 8007b22:	2f00      	cmp	r7, #0
 8007b24:	d0a9      	beq.n	8007a7a <__sflush_r+0x1a>
 8007b26:	0793      	lsls	r3, r2, #30
 8007b28:	680e      	ldr	r6, [r1, #0]
 8007b2a:	bf08      	it	eq
 8007b2c:	694b      	ldreq	r3, [r1, #20]
 8007b2e:	600f      	str	r7, [r1, #0]
 8007b30:	bf18      	it	ne
 8007b32:	2300      	movne	r3, #0
 8007b34:	eba6 0807 	sub.w	r8, r6, r7
 8007b38:	608b      	str	r3, [r1, #8]
 8007b3a:	f1b8 0f00 	cmp.w	r8, #0
 8007b3e:	dd9c      	ble.n	8007a7a <__sflush_r+0x1a>
 8007b40:	6a21      	ldr	r1, [r4, #32]
 8007b42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b44:	4643      	mov	r3, r8
 8007b46:	463a      	mov	r2, r7
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b0      	blx	r6
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	dc06      	bgt.n	8007b5e <__sflush_r+0xfe>
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b56:	81a3      	strh	r3, [r4, #12]
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	e78e      	b.n	8007a7c <__sflush_r+0x1c>
 8007b5e:	4407      	add	r7, r0
 8007b60:	eba8 0800 	sub.w	r8, r8, r0
 8007b64:	e7e9      	b.n	8007b3a <__sflush_r+0xda>
 8007b66:	bf00      	nop
 8007b68:	20400001 	.word	0x20400001

08007b6c <_fflush_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	690b      	ldr	r3, [r1, #16]
 8007b70:	4605      	mov	r5, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	b913      	cbnz	r3, 8007b7c <_fflush_r+0x10>
 8007b76:	2500      	movs	r5, #0
 8007b78:	4628      	mov	r0, r5
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	b118      	cbz	r0, 8007b86 <_fflush_r+0x1a>
 8007b7e:	6983      	ldr	r3, [r0, #24]
 8007b80:	b90b      	cbnz	r3, 8007b86 <_fflush_r+0x1a>
 8007b82:	f000 f887 	bl	8007c94 <__sinit>
 8007b86:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <_fflush_r+0x6c>)
 8007b88:	429c      	cmp	r4, r3
 8007b8a:	d11b      	bne.n	8007bc4 <_fflush_r+0x58>
 8007b8c:	686c      	ldr	r4, [r5, #4]
 8007b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d0ef      	beq.n	8007b76 <_fflush_r+0xa>
 8007b96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b98:	07d0      	lsls	r0, r2, #31
 8007b9a:	d404      	bmi.n	8007ba6 <_fflush_r+0x3a>
 8007b9c:	0599      	lsls	r1, r3, #22
 8007b9e:	d402      	bmi.n	8007ba6 <_fflush_r+0x3a>
 8007ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ba2:	f000 f915 	bl	8007dd0 <__retarget_lock_acquire_recursive>
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	4621      	mov	r1, r4
 8007baa:	f7ff ff59 	bl	8007a60 <__sflush_r>
 8007bae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bb0:	07da      	lsls	r2, r3, #31
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	d4e0      	bmi.n	8007b78 <_fflush_r+0xc>
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	059b      	lsls	r3, r3, #22
 8007bba:	d4dd      	bmi.n	8007b78 <_fflush_r+0xc>
 8007bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bbe:	f000 f908 	bl	8007dd2 <__retarget_lock_release_recursive>
 8007bc2:	e7d9      	b.n	8007b78 <_fflush_r+0xc>
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <_fflush_r+0x70>)
 8007bc6:	429c      	cmp	r4, r3
 8007bc8:	d101      	bne.n	8007bce <_fflush_r+0x62>
 8007bca:	68ac      	ldr	r4, [r5, #8]
 8007bcc:	e7df      	b.n	8007b8e <_fflush_r+0x22>
 8007bce:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <_fflush_r+0x74>)
 8007bd0:	429c      	cmp	r4, r3
 8007bd2:	bf08      	it	eq
 8007bd4:	68ec      	ldreq	r4, [r5, #12]
 8007bd6:	e7da      	b.n	8007b8e <_fflush_r+0x22>
 8007bd8:	0800856c 	.word	0x0800856c
 8007bdc:	0800858c 	.word	0x0800858c
 8007be0:	0800854c 	.word	0x0800854c

08007be4 <std>:
 8007be4:	2300      	movs	r3, #0
 8007be6:	b510      	push	{r4, lr}
 8007be8:	4604      	mov	r4, r0
 8007bea:	e9c0 3300 	strd	r3, r3, [r0]
 8007bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bf2:	6083      	str	r3, [r0, #8]
 8007bf4:	8181      	strh	r1, [r0, #12]
 8007bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8007bf8:	81c2      	strh	r2, [r0, #14]
 8007bfa:	6183      	str	r3, [r0, #24]
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	2208      	movs	r2, #8
 8007c00:	305c      	adds	r0, #92	; 0x5c
 8007c02:	f7fd fb5b 	bl	80052bc <memset>
 8007c06:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <std+0x38>)
 8007c08:	6263      	str	r3, [r4, #36]	; 0x24
 8007c0a:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <std+0x3c>)
 8007c0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c0e:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <std+0x40>)
 8007c10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c12:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <std+0x44>)
 8007c14:	6224      	str	r4, [r4, #32]
 8007c16:	6323      	str	r3, [r4, #48]	; 0x30
 8007c18:	bd10      	pop	{r4, pc}
 8007c1a:	bf00      	nop
 8007c1c:	08007f39 	.word	0x08007f39
 8007c20:	08007f5b 	.word	0x08007f5b
 8007c24:	08007f93 	.word	0x08007f93
 8007c28:	08007fb7 	.word	0x08007fb7

08007c2c <_cleanup_r>:
 8007c2c:	4901      	ldr	r1, [pc, #4]	; (8007c34 <_cleanup_r+0x8>)
 8007c2e:	f000 b8af 	b.w	8007d90 <_fwalk_reent>
 8007c32:	bf00      	nop
 8007c34:	08007b6d 	.word	0x08007b6d

08007c38 <__sfmoreglue>:
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	2268      	movs	r2, #104	; 0x68
 8007c3c:	1e4d      	subs	r5, r1, #1
 8007c3e:	4355      	muls	r5, r2
 8007c40:	460e      	mov	r6, r1
 8007c42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c46:	f7ff fa65 	bl	8007114 <_malloc_r>
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	b140      	cbz	r0, 8007c60 <__sfmoreglue+0x28>
 8007c4e:	2100      	movs	r1, #0
 8007c50:	e9c0 1600 	strd	r1, r6, [r0]
 8007c54:	300c      	adds	r0, #12
 8007c56:	60a0      	str	r0, [r4, #8]
 8007c58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c5c:	f7fd fb2e 	bl	80052bc <memset>
 8007c60:	4620      	mov	r0, r4
 8007c62:	bd70      	pop	{r4, r5, r6, pc}

08007c64 <__sfp_lock_acquire>:
 8007c64:	4801      	ldr	r0, [pc, #4]	; (8007c6c <__sfp_lock_acquire+0x8>)
 8007c66:	f000 b8b3 	b.w	8007dd0 <__retarget_lock_acquire_recursive>
 8007c6a:	bf00      	nop
 8007c6c:	200004a9 	.word	0x200004a9

08007c70 <__sfp_lock_release>:
 8007c70:	4801      	ldr	r0, [pc, #4]	; (8007c78 <__sfp_lock_release+0x8>)
 8007c72:	f000 b8ae 	b.w	8007dd2 <__retarget_lock_release_recursive>
 8007c76:	bf00      	nop
 8007c78:	200004a9 	.word	0x200004a9

08007c7c <__sinit_lock_acquire>:
 8007c7c:	4801      	ldr	r0, [pc, #4]	; (8007c84 <__sinit_lock_acquire+0x8>)
 8007c7e:	f000 b8a7 	b.w	8007dd0 <__retarget_lock_acquire_recursive>
 8007c82:	bf00      	nop
 8007c84:	200004aa 	.word	0x200004aa

08007c88 <__sinit_lock_release>:
 8007c88:	4801      	ldr	r0, [pc, #4]	; (8007c90 <__sinit_lock_release+0x8>)
 8007c8a:	f000 b8a2 	b.w	8007dd2 <__retarget_lock_release_recursive>
 8007c8e:	bf00      	nop
 8007c90:	200004aa 	.word	0x200004aa

08007c94 <__sinit>:
 8007c94:	b510      	push	{r4, lr}
 8007c96:	4604      	mov	r4, r0
 8007c98:	f7ff fff0 	bl	8007c7c <__sinit_lock_acquire>
 8007c9c:	69a3      	ldr	r3, [r4, #24]
 8007c9e:	b11b      	cbz	r3, 8007ca8 <__sinit+0x14>
 8007ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ca4:	f7ff bff0 	b.w	8007c88 <__sinit_lock_release>
 8007ca8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cac:	6523      	str	r3, [r4, #80]	; 0x50
 8007cae:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <__sinit+0x68>)
 8007cb0:	4a13      	ldr	r2, [pc, #76]	; (8007d00 <__sinit+0x6c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cb6:	42a3      	cmp	r3, r4
 8007cb8:	bf04      	itt	eq
 8007cba:	2301      	moveq	r3, #1
 8007cbc:	61a3      	streq	r3, [r4, #24]
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 f820 	bl	8007d04 <__sfp>
 8007cc4:	6060      	str	r0, [r4, #4]
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f000 f81c 	bl	8007d04 <__sfp>
 8007ccc:	60a0      	str	r0, [r4, #8]
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f000 f818 	bl	8007d04 <__sfp>
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	60e0      	str	r0, [r4, #12]
 8007cd8:	2104      	movs	r1, #4
 8007cda:	6860      	ldr	r0, [r4, #4]
 8007cdc:	f7ff ff82 	bl	8007be4 <std>
 8007ce0:	68a0      	ldr	r0, [r4, #8]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	2109      	movs	r1, #9
 8007ce6:	f7ff ff7d 	bl	8007be4 <std>
 8007cea:	68e0      	ldr	r0, [r4, #12]
 8007cec:	2202      	movs	r2, #2
 8007cee:	2112      	movs	r1, #18
 8007cf0:	f7ff ff78 	bl	8007be4 <std>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	61a3      	str	r3, [r4, #24]
 8007cf8:	e7d2      	b.n	8007ca0 <__sinit+0xc>
 8007cfa:	bf00      	nop
 8007cfc:	080081d4 	.word	0x080081d4
 8007d00:	08007c2d 	.word	0x08007c2d

08007d04 <__sfp>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	4607      	mov	r7, r0
 8007d08:	f7ff ffac 	bl	8007c64 <__sfp_lock_acquire>
 8007d0c:	4b1e      	ldr	r3, [pc, #120]	; (8007d88 <__sfp+0x84>)
 8007d0e:	681e      	ldr	r6, [r3, #0]
 8007d10:	69b3      	ldr	r3, [r6, #24]
 8007d12:	b913      	cbnz	r3, 8007d1a <__sfp+0x16>
 8007d14:	4630      	mov	r0, r6
 8007d16:	f7ff ffbd 	bl	8007c94 <__sinit>
 8007d1a:	3648      	adds	r6, #72	; 0x48
 8007d1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	d503      	bpl.n	8007d2c <__sfp+0x28>
 8007d24:	6833      	ldr	r3, [r6, #0]
 8007d26:	b30b      	cbz	r3, 8007d6c <__sfp+0x68>
 8007d28:	6836      	ldr	r6, [r6, #0]
 8007d2a:	e7f7      	b.n	8007d1c <__sfp+0x18>
 8007d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d30:	b9d5      	cbnz	r5, 8007d68 <__sfp+0x64>
 8007d32:	4b16      	ldr	r3, [pc, #88]	; (8007d8c <__sfp+0x88>)
 8007d34:	60e3      	str	r3, [r4, #12]
 8007d36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d3a:	6665      	str	r5, [r4, #100]	; 0x64
 8007d3c:	f000 f847 	bl	8007dce <__retarget_lock_init_recursive>
 8007d40:	f7ff ff96 	bl	8007c70 <__sfp_lock_release>
 8007d44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d4c:	6025      	str	r5, [r4, #0]
 8007d4e:	61a5      	str	r5, [r4, #24]
 8007d50:	2208      	movs	r2, #8
 8007d52:	4629      	mov	r1, r5
 8007d54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d58:	f7fd fab0 	bl	80052bc <memset>
 8007d5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d64:	4620      	mov	r0, r4
 8007d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d68:	3468      	adds	r4, #104	; 0x68
 8007d6a:	e7d9      	b.n	8007d20 <__sfp+0x1c>
 8007d6c:	2104      	movs	r1, #4
 8007d6e:	4638      	mov	r0, r7
 8007d70:	f7ff ff62 	bl	8007c38 <__sfmoreglue>
 8007d74:	4604      	mov	r4, r0
 8007d76:	6030      	str	r0, [r6, #0]
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d1d5      	bne.n	8007d28 <__sfp+0x24>
 8007d7c:	f7ff ff78 	bl	8007c70 <__sfp_lock_release>
 8007d80:	230c      	movs	r3, #12
 8007d82:	603b      	str	r3, [r7, #0]
 8007d84:	e7ee      	b.n	8007d64 <__sfp+0x60>
 8007d86:	bf00      	nop
 8007d88:	080081d4 	.word	0x080081d4
 8007d8c:	ffff0001 	.word	0xffff0001

08007d90 <_fwalk_reent>:
 8007d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d94:	4606      	mov	r6, r0
 8007d96:	4688      	mov	r8, r1
 8007d98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d9c:	2700      	movs	r7, #0
 8007d9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007da2:	f1b9 0901 	subs.w	r9, r9, #1
 8007da6:	d505      	bpl.n	8007db4 <_fwalk_reent+0x24>
 8007da8:	6824      	ldr	r4, [r4, #0]
 8007daa:	2c00      	cmp	r4, #0
 8007dac:	d1f7      	bne.n	8007d9e <_fwalk_reent+0xe>
 8007dae:	4638      	mov	r0, r7
 8007db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007db4:	89ab      	ldrh	r3, [r5, #12]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d907      	bls.n	8007dca <_fwalk_reent+0x3a>
 8007dba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	d003      	beq.n	8007dca <_fwalk_reent+0x3a>
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	47c0      	blx	r8
 8007dc8:	4307      	orrs	r7, r0
 8007dca:	3568      	adds	r5, #104	; 0x68
 8007dcc:	e7e9      	b.n	8007da2 <_fwalk_reent+0x12>

08007dce <__retarget_lock_init_recursive>:
 8007dce:	4770      	bx	lr

08007dd0 <__retarget_lock_acquire_recursive>:
 8007dd0:	4770      	bx	lr

08007dd2 <__retarget_lock_release_recursive>:
 8007dd2:	4770      	bx	lr

08007dd4 <__swhatbuf_r>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	460e      	mov	r6, r1
 8007dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ddc:	2900      	cmp	r1, #0
 8007dde:	b096      	sub	sp, #88	; 0x58
 8007de0:	4614      	mov	r4, r2
 8007de2:	461d      	mov	r5, r3
 8007de4:	da08      	bge.n	8007df8 <__swhatbuf_r+0x24>
 8007de6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	602a      	str	r2, [r5, #0]
 8007dee:	061a      	lsls	r2, r3, #24
 8007df0:	d410      	bmi.n	8007e14 <__swhatbuf_r+0x40>
 8007df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007df6:	e00e      	b.n	8007e16 <__swhatbuf_r+0x42>
 8007df8:	466a      	mov	r2, sp
 8007dfa:	f000 f903 	bl	8008004 <_fstat_r>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	dbf1      	blt.n	8007de6 <__swhatbuf_r+0x12>
 8007e02:	9a01      	ldr	r2, [sp, #4]
 8007e04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e0c:	425a      	negs	r2, r3
 8007e0e:	415a      	adcs	r2, r3
 8007e10:	602a      	str	r2, [r5, #0]
 8007e12:	e7ee      	b.n	8007df2 <__swhatbuf_r+0x1e>
 8007e14:	2340      	movs	r3, #64	; 0x40
 8007e16:	2000      	movs	r0, #0
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	b016      	add	sp, #88	; 0x58
 8007e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e20 <__smakebuf_r>:
 8007e20:	898b      	ldrh	r3, [r1, #12]
 8007e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e24:	079d      	lsls	r5, r3, #30
 8007e26:	4606      	mov	r6, r0
 8007e28:	460c      	mov	r4, r1
 8007e2a:	d507      	bpl.n	8007e3c <__smakebuf_r+0x1c>
 8007e2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	6123      	str	r3, [r4, #16]
 8007e34:	2301      	movs	r3, #1
 8007e36:	6163      	str	r3, [r4, #20]
 8007e38:	b002      	add	sp, #8
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	ab01      	add	r3, sp, #4
 8007e3e:	466a      	mov	r2, sp
 8007e40:	f7ff ffc8 	bl	8007dd4 <__swhatbuf_r>
 8007e44:	9900      	ldr	r1, [sp, #0]
 8007e46:	4605      	mov	r5, r0
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f7ff f963 	bl	8007114 <_malloc_r>
 8007e4e:	b948      	cbnz	r0, 8007e64 <__smakebuf_r+0x44>
 8007e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e54:	059a      	lsls	r2, r3, #22
 8007e56:	d4ef      	bmi.n	8007e38 <__smakebuf_r+0x18>
 8007e58:	f023 0303 	bic.w	r3, r3, #3
 8007e5c:	f043 0302 	orr.w	r3, r3, #2
 8007e60:	81a3      	strh	r3, [r4, #12]
 8007e62:	e7e3      	b.n	8007e2c <__smakebuf_r+0xc>
 8007e64:	4b0d      	ldr	r3, [pc, #52]	; (8007e9c <__smakebuf_r+0x7c>)
 8007e66:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	6020      	str	r0, [r4, #0]
 8007e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e70:	81a3      	strh	r3, [r4, #12]
 8007e72:	9b00      	ldr	r3, [sp, #0]
 8007e74:	6163      	str	r3, [r4, #20]
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	6120      	str	r0, [r4, #16]
 8007e7a:	b15b      	cbz	r3, 8007e94 <__smakebuf_r+0x74>
 8007e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 f8d1 	bl	8008028 <_isatty_r>
 8007e86:	b128      	cbz	r0, 8007e94 <__smakebuf_r+0x74>
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	f023 0303 	bic.w	r3, r3, #3
 8007e8e:	f043 0301 	orr.w	r3, r3, #1
 8007e92:	81a3      	strh	r3, [r4, #12]
 8007e94:	89a0      	ldrh	r0, [r4, #12]
 8007e96:	4305      	orrs	r5, r0
 8007e98:	81a5      	strh	r5, [r4, #12]
 8007e9a:	e7cd      	b.n	8007e38 <__smakebuf_r+0x18>
 8007e9c:	08007c2d 	.word	0x08007c2d

08007ea0 <_malloc_usable_size_r>:
 8007ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea4:	1f18      	subs	r0, r3, #4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bfbc      	itt	lt
 8007eaa:	580b      	ldrlt	r3, [r1, r0]
 8007eac:	18c0      	addlt	r0, r0, r3
 8007eae:	4770      	bx	lr

08007eb0 <_raise_r>:
 8007eb0:	291f      	cmp	r1, #31
 8007eb2:	b538      	push	{r3, r4, r5, lr}
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	460d      	mov	r5, r1
 8007eb8:	d904      	bls.n	8007ec4 <_raise_r+0x14>
 8007eba:	2316      	movs	r3, #22
 8007ebc:	6003      	str	r3, [r0, #0]
 8007ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec2:	bd38      	pop	{r3, r4, r5, pc}
 8007ec4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ec6:	b112      	cbz	r2, 8007ece <_raise_r+0x1e>
 8007ec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ecc:	b94b      	cbnz	r3, 8007ee2 <_raise_r+0x32>
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 f830 	bl	8007f34 <_getpid_r>
 8007ed4:	462a      	mov	r2, r5
 8007ed6:	4601      	mov	r1, r0
 8007ed8:	4620      	mov	r0, r4
 8007eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ede:	f000 b817 	b.w	8007f10 <_kill_r>
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d00a      	beq.n	8007efc <_raise_r+0x4c>
 8007ee6:	1c59      	adds	r1, r3, #1
 8007ee8:	d103      	bne.n	8007ef2 <_raise_r+0x42>
 8007eea:	2316      	movs	r3, #22
 8007eec:	6003      	str	r3, [r0, #0]
 8007eee:	2001      	movs	r0, #1
 8007ef0:	e7e7      	b.n	8007ec2 <_raise_r+0x12>
 8007ef2:	2400      	movs	r4, #0
 8007ef4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ef8:	4628      	mov	r0, r5
 8007efa:	4798      	blx	r3
 8007efc:	2000      	movs	r0, #0
 8007efe:	e7e0      	b.n	8007ec2 <_raise_r+0x12>

08007f00 <raise>:
 8007f00:	4b02      	ldr	r3, [pc, #8]	; (8007f0c <raise+0xc>)
 8007f02:	4601      	mov	r1, r0
 8007f04:	6818      	ldr	r0, [r3, #0]
 8007f06:	f7ff bfd3 	b.w	8007eb0 <_raise_r>
 8007f0a:	bf00      	nop
 8007f0c:	20000010 	.word	0x20000010

08007f10 <_kill_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4d07      	ldr	r5, [pc, #28]	; (8007f30 <_kill_r+0x20>)
 8007f14:	2300      	movs	r3, #0
 8007f16:	4604      	mov	r4, r0
 8007f18:	4608      	mov	r0, r1
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	602b      	str	r3, [r5, #0]
 8007f1e:	f7f9 fd1b 	bl	8001958 <_kill>
 8007f22:	1c43      	adds	r3, r0, #1
 8007f24:	d102      	bne.n	8007f2c <_kill_r+0x1c>
 8007f26:	682b      	ldr	r3, [r5, #0]
 8007f28:	b103      	cbz	r3, 8007f2c <_kill_r+0x1c>
 8007f2a:	6023      	str	r3, [r4, #0]
 8007f2c:	bd38      	pop	{r3, r4, r5, pc}
 8007f2e:	bf00      	nop
 8007f30:	200004a4 	.word	0x200004a4

08007f34 <_getpid_r>:
 8007f34:	f7f9 bd08 	b.w	8001948 <_getpid>

08007f38 <__sread>:
 8007f38:	b510      	push	{r4, lr}
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f40:	f000 f894 	bl	800806c <_read_r>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	bfab      	itete	ge
 8007f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f4c:	181b      	addge	r3, r3, r0
 8007f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f52:	bfac      	ite	ge
 8007f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f56:	81a3      	strhlt	r3, [r4, #12]
 8007f58:	bd10      	pop	{r4, pc}

08007f5a <__swrite>:
 8007f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5e:	461f      	mov	r7, r3
 8007f60:	898b      	ldrh	r3, [r1, #12]
 8007f62:	05db      	lsls	r3, r3, #23
 8007f64:	4605      	mov	r5, r0
 8007f66:	460c      	mov	r4, r1
 8007f68:	4616      	mov	r6, r2
 8007f6a:	d505      	bpl.n	8007f78 <__swrite+0x1e>
 8007f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f70:	2302      	movs	r3, #2
 8007f72:	2200      	movs	r2, #0
 8007f74:	f000 f868 	bl	8008048 <_lseek_r>
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f82:	81a3      	strh	r3, [r4, #12]
 8007f84:	4632      	mov	r2, r6
 8007f86:	463b      	mov	r3, r7
 8007f88:	4628      	mov	r0, r5
 8007f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f8e:	f000 b817 	b.w	8007fc0 <_write_r>

08007f92 <__sseek>:
 8007f92:	b510      	push	{r4, lr}
 8007f94:	460c      	mov	r4, r1
 8007f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f9a:	f000 f855 	bl	8008048 <_lseek_r>
 8007f9e:	1c43      	adds	r3, r0, #1
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	bf15      	itete	ne
 8007fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fae:	81a3      	strheq	r3, [r4, #12]
 8007fb0:	bf18      	it	ne
 8007fb2:	81a3      	strhne	r3, [r4, #12]
 8007fb4:	bd10      	pop	{r4, pc}

08007fb6 <__sclose>:
 8007fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fba:	f000 b813 	b.w	8007fe4 <_close_r>
	...

08007fc0 <_write_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4d07      	ldr	r5, [pc, #28]	; (8007fe0 <_write_r+0x20>)
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	4608      	mov	r0, r1
 8007fc8:	4611      	mov	r1, r2
 8007fca:	2200      	movs	r2, #0
 8007fcc:	602a      	str	r2, [r5, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f7f9 fcf9 	bl	80019c6 <_write>
 8007fd4:	1c43      	adds	r3, r0, #1
 8007fd6:	d102      	bne.n	8007fde <_write_r+0x1e>
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	b103      	cbz	r3, 8007fde <_write_r+0x1e>
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	bd38      	pop	{r3, r4, r5, pc}
 8007fe0:	200004a4 	.word	0x200004a4

08007fe4 <_close_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4d06      	ldr	r5, [pc, #24]	; (8008000 <_close_r+0x1c>)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4604      	mov	r4, r0
 8007fec:	4608      	mov	r0, r1
 8007fee:	602b      	str	r3, [r5, #0]
 8007ff0:	f7f9 fd05 	bl	80019fe <_close>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d102      	bne.n	8007ffe <_close_r+0x1a>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	b103      	cbz	r3, 8007ffe <_close_r+0x1a>
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	200004a4 	.word	0x200004a4

08008004 <_fstat_r>:
 8008004:	b538      	push	{r3, r4, r5, lr}
 8008006:	4d07      	ldr	r5, [pc, #28]	; (8008024 <_fstat_r+0x20>)
 8008008:	2300      	movs	r3, #0
 800800a:	4604      	mov	r4, r0
 800800c:	4608      	mov	r0, r1
 800800e:	4611      	mov	r1, r2
 8008010:	602b      	str	r3, [r5, #0]
 8008012:	f7f9 fd00 	bl	8001a16 <_fstat>
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	d102      	bne.n	8008020 <_fstat_r+0x1c>
 800801a:	682b      	ldr	r3, [r5, #0]
 800801c:	b103      	cbz	r3, 8008020 <_fstat_r+0x1c>
 800801e:	6023      	str	r3, [r4, #0]
 8008020:	bd38      	pop	{r3, r4, r5, pc}
 8008022:	bf00      	nop
 8008024:	200004a4 	.word	0x200004a4

08008028 <_isatty_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	4d06      	ldr	r5, [pc, #24]	; (8008044 <_isatty_r+0x1c>)
 800802c:	2300      	movs	r3, #0
 800802e:	4604      	mov	r4, r0
 8008030:	4608      	mov	r0, r1
 8008032:	602b      	str	r3, [r5, #0]
 8008034:	f7f9 fcff 	bl	8001a36 <_isatty>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d102      	bne.n	8008042 <_isatty_r+0x1a>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	b103      	cbz	r3, 8008042 <_isatty_r+0x1a>
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	200004a4 	.word	0x200004a4

08008048 <_lseek_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4d07      	ldr	r5, [pc, #28]	; (8008068 <_lseek_r+0x20>)
 800804c:	4604      	mov	r4, r0
 800804e:	4608      	mov	r0, r1
 8008050:	4611      	mov	r1, r2
 8008052:	2200      	movs	r2, #0
 8008054:	602a      	str	r2, [r5, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	f7f9 fcf8 	bl	8001a4c <_lseek>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d102      	bne.n	8008066 <_lseek_r+0x1e>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	b103      	cbz	r3, 8008066 <_lseek_r+0x1e>
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	200004a4 	.word	0x200004a4

0800806c <_read_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d07      	ldr	r5, [pc, #28]	; (800808c <_read_r+0x20>)
 8008070:	4604      	mov	r4, r0
 8008072:	4608      	mov	r0, r1
 8008074:	4611      	mov	r1, r2
 8008076:	2200      	movs	r2, #0
 8008078:	602a      	str	r2, [r5, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	f7f9 fc86 	bl	800198c <_read>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d102      	bne.n	800808a <_read_r+0x1e>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	b103      	cbz	r3, 800808a <_read_r+0x1e>
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	200004a4 	.word	0x200004a4

08008090 <_init>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	bf00      	nop
 8008094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008096:	bc08      	pop	{r3}
 8008098:	469e      	mov	lr, r3
 800809a:	4770      	bx	lr

0800809c <_fini>:
 800809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809e:	bf00      	nop
 80080a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a2:	bc08      	pop	{r3}
 80080a4:	469e      	mov	lr, r3
 80080a6:	4770      	bx	lr
